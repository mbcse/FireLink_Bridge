{"id":"552ad0884b080b85ff56de5d8fc12ef5","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../genesis/interface/IFtsoGenesis.sol\";\nimport \"../../userInterfaces/IFtso.sol\";\nimport \"../../../util-contracts/token/token/interface/IIVPToken.sol\";\n\n\ninterface IIFtso is IFtso, IFtsoGenesis {\n\n    /// function finalizePriceReveal\n    /// called by reward manager only on correct timing.\n    /// if price reveal period for epoch x ended. finalize.\n    /// iterate list of price submissions\n    /// find weighted median\n    /// find adjucant 50% of price submissions.\n    /// Allocate reward for any price submission which is same as a \"winning\" submission\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\n        returns(\n            address[] memory _eligibleAddresses,\n            uint256[] memory _natWeights,\n            uint256 _totalNatWeight\n        );\n\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\n\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\n\n    // activateFtso will be called by ftso manager once ftso is added \n    // before this is done, FTSO can't run\n    function activateFtso(\n        uint256 _firstEpochStartTs,\n        uint256 _submitPeriodSeconds,\n        uint256 _revealPeriodSeconds\n    ) external;\n\n    function deactivateFtso() external;\n\n    // update initial price and timestamp - only if not active\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\n\n    function configureEpochs(\n        uint256 _maxVotePowerNatThresholdFraction,\n        uint256 _maxVotePowerAssetThresholdFraction,\n        uint256 _lowAssetUSDThreshold,\n        uint256 _highAssetUSDThreshold,\n        uint256 _highAssetTurnoutThresholdBIPS,\n        uint256 _lowNatTurnoutThresholdBIPS,\n        uint256 _elasticBandRewardBIPS,\n        uint256 _elasticBandWidthPPM,\n        address[] memory _trustedAddresses\n    ) external;\n\n    function setAsset(IIVPToken _asset) external;\n\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\n\n    // current vote power block will update per reward epoch. \n    // the FTSO doesn't have notion of reward epochs.\n    // reward manager only can set this data. \n    function setVotePowerBlock(uint256 _blockNumber) external;\n\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\n  \n    /**\n     * @notice Returns ftso manager address\n     */\n    function ftsoManager() external view returns (address);\n\n    /**\n     * @notice Returns the FTSO asset\n     * @dev Asset is null in case of multi-asset FTSO\n     */\n    function getAsset() external view returns (IIVPToken);\n\n    /**\n     * @notice Returns the Asset FTSOs\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\n     */\n    function getAssetFtsos() external view returns (IIFtso[] memory);\n\n    /**\n     * @notice Returns current configuration of epoch state\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \n        elastic band (prices within _elasticBandWidthPPM of the median) \n        and 10000 - elasticBandRewardBIPS to the IQR \n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\n     */\n    function epochsConfiguration() external view \n        returns (\n            uint256 _maxVotePowerNatThresholdFraction,\n            uint256 _maxVotePowerAssetThresholdFraction,\n            uint256 _lowAssetUSDThreshold,\n            uint256 _highAssetUSDThreshold,\n            uint256 _highAssetTurnoutThresholdBIPS,\n            uint256 _lowNatTurnoutThresholdBIPS,\n            uint256 _elasticBandRewardBIPS,\n            uint256 _elasticBandWidthPPM,\n            address[] memory _trustedAddresses\n        );\n\n    /**\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\n     * @return _assets                  the list of Assets that are accounted in vote\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\n     * @return _totalVotePowerNat       total native token vote power at block\n     * @return _totalVotePowerAsset     total combined asset vote power at block\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\n     * @return _votePowerBlock          vote powewr block for given epoch\n     */\n    function getVoteWeightingParameters() external view \n        returns (\n            IIVPToken[] memory _assets,\n            uint256[] memory _assetMultipliers,\n            uint256 _totalVotePowerNat,\n            uint256 _totalVotePowerAsset,\n            uint256 _assetWeightRatio,\n            uint256 _votePowerBlock\n        );\n\n    function wNat() external view returns (IIVPToken);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol":{"content":"\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n\ninterface IFtsoGenesis {\n    \n    /**\n     * @notice Submits price hash for current epoch - only price submitter\n     * @param _sender               Sender address\n     * @param _epochId              Target epoch id to which hashes are submitted\n     * @param _hash                 Hashed price and random number\n     * @notice Emits PriceHashSubmitted event. \n     */\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\n\n    /**\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\n     * @param _voter                Voter address\n     * @param _epochId              Id of the epoch in which the price hash was submitted\n     * @param _price                Submitted price in USD\n     * @param _random               Submitted random number\n     * @notice The hash of _price and _random must be equal to the submitted hash\n     * @notice Emits PriceRevealed event\n     */\n    function revealPriceSubmitter(\n        address _voter,\n        uint256 _epochId,\n        uint256 _price,\n        uint256 _random,\n        uint256 _wNatVP\n    ) external;\n\n    /**\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\n     * @param _voter                Voter address\n     * @param _epochId              Id of the epoch in which the price hash was submitted\n     * @return wNat vote power\n     */\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol":{"content":"\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n\ninterface IFtsoManagerGenesis {\n\n    function getCurrentPriceEpochId() external view returns (uint256 _priceEpochId);\n\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol":{"content":"\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IFtsoGenesis.sol\";\n\n\ninterface IFtsoRegistryGenesis {\n\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IFtso {\n    enum PriceFinalizationType {\n        // initial state\n        NOT_FINALIZED,\n        // median calculation used to find price\n        WEIGHTED_MEDIAN,\n        // low turnout - price calculated from median of trusted addresses\n        TRUSTED_ADDRESSES,\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\n        PREVIOUS_PRICE_COPIED,\n        // price calculated from median of trusted addresses - triggered due to an exception\n        TRUSTED_ADDRESSES_EXCEPTION,\n        // previous price copied - triggered due to an exception\n        PREVIOUS_PRICE_COPIED_EXCEPTION\n    }\n\n    // events\n    event PriceHashSubmitted(\n        address indexed submitter, uint256 indexed epochId, bytes32 hash, uint256 timestamp\n    );\n\n    event PriceRevealed(\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 random, uint256 timestamp,\n        uint256 votePowerNat, uint256 votePowerAsset\n    );\n\n    event PriceFinalized(\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \n        PriceFinalizationType finalizationType, uint256 timestamp\n    );\n\n    event PriceEpochInitializedOnFtso(\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\n    );\n\n    event LowTurnout(\n        uint256 indexed epochId,\n        uint256 natTurnout,\n        uint256 lowNatTurnoutThresholdBIPS,\n        uint256 timestamp\n    );\n\n    /**\n     * @notice Returns if FTSO is active\n     */\n    function active() external view returns (bool);\n\n    /**\n     * @notice Returns the FTSO symbol\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @notice Returns current epoch id\n     */\n    function getCurrentEpochId() external view returns (uint256);\n\n    /**\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\n     * @param _timestamp            Timestamp as seconds from unix epoch\n     */\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\n    \n    /**\n     * @notice Returns random number of the specified epoch\n     * @param _epochId              Id of the epoch\n     */\n    function getRandom(uint256 _epochId) external view returns (uint256);\n\n    /**\n     * @notice Returns asset price consented in specific epoch\n     * @param _epochId              Id of the epoch\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     */\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\n\n    /**\n     * @notice Returns current epoch data\n     * @return _epochId                 Current epoch id\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\n     * @return _votePowerBlock          Vote power block for the current epoch\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\n     * @dev half-closed intervals - end time not included\n     */\n    function getPriceEpochData() external view returns (\n        uint256 _epochId,\n        uint256 _epochSubmitEndTime,\n        uint256 _epochRevealEndTime,\n        uint256 _votePowerBlock,\n        bool _fallbackMode\n    );\n\n    /**\n     * @notice Returns current epoch data\n     * @return _firstEpochStartTs           First epoch start timestamp\n     * @return _submitPeriodSeconds         Submit period in seconds\n     * @return _revealPeriodSeconds         Reveal period in seconds\n     */\n    function getPriceEpochConfiguration() external view returns (\n        uint256 _firstEpochStartTs,\n        uint256 _submitPeriodSeconds,\n        uint256 _revealPeriodSeconds\n    );\n    \n    /**\n     * @notice Returns asset price submitted by voter in specific epoch\n     * @param _epochId              Id of the epoch\n     * @param _voter                Address of the voter\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     */\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\n\n    /**\n     * @notice Returns current asset price\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp           Time when price was updated for the last time\n     */\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\n\n    /**\n     * @notice Returns current asset price and number of decimals\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp               Time when price was updated for the last time\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\n     */\n    function getCurrentPriceWithDecimals() external view returns (\n        uint256 _price,\n        uint256 _timestamp,\n        uint256 _assetPriceUsdDecimals\n    );\n    \n    /**\n     * @notice Returns current asset price calculated from trusted providers\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp           Time when price was updated for the last time\n     */\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\n\n    /**\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp               Time when price was updated for the last time\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\n     */\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\n        uint256 _price,\n        uint256 _timestamp,\n        uint256 _assetPriceUsdDecimals\n    );\n\n    /**\n     * @notice Returns current asset price details\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _priceTimestamp                          Time when price was updated for the last time\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\n     */\n    function getCurrentPriceDetails() external view returns (\n        uint256 _price,\n        uint256 _priceTimestamp,\n        PriceFinalizationType _priceFinalizationType,\n        uint256 _lastPriceEpochFinalizationTimestamp,\n        PriceFinalizationType _lastPriceEpochFinalizationType\n    );\n\n    /**\n     * @notice Returns current random number\n     */\n    function getCurrentRandom() external view returns (uint256);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../ftso/interface/IIFtso.sol\";\nimport \"../genesis/interface/IFtsoManagerGenesis.sol\";\n\ninterface IFtsoManager is IFtsoManagerGenesis {\n\n    event FtsoAdded(IIFtso ftso, bool add);\n    event FallbackMode(bool fallbackMode);\n    event FtsoFallbackMode(IIFtso ftso, bool fallbackMode);\n    event RewardEpochFinalized(uint256 votepowerBlock, uint256 startBlock);\n    event PriceEpochFinalized(address chosenFtso, uint256 rewardEpochId);\n    event InitializingCurrentEpochStateForRevealFailed(IIFtso ftso, uint256 epochId);\n    event FinalizingPriceEpochFailed(IIFtso ftso, uint256 epochId, IFtso.PriceFinalizationType failingType);\n    event DistributingRewardsFailed(address ftso, uint256 epochId);\n    event AccruingUnearnedRewardsFailed(uint256 epochId);\n    event UseGoodRandomSet(bool useGoodRandom, uint256 maxWaitForGoodRandomSeconds);\n\n    function active() external view returns (bool);\n\n    function getCurrentRewardEpoch() external view returns (uint256);\n\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\n\n    function getRewardEpochToExpireNext() external view returns (uint256);\n    \n    function getCurrentPriceEpochData() external view \n        returns (\n            uint256 _priceEpochId,\n            uint256 _priceEpochStartTimestamp,\n            uint256 _priceEpochEndTimestamp,\n            uint256 _priceEpochRevealEndTimestamp,\n            uint256 _currentTimestamp\n        );\n\n    function getFtsos() external view returns (IIFtso[] memory _ftsos);\n\n    function getPriceEpochConfiguration() external view \n        returns (\n            uint256 _firstPriceEpochStartTs,\n            uint256 _priceEpochDurationSeconds,\n            uint256 _revealEpochDurationSeconds\n        );\n\n    function getRewardEpochConfiguration() external view \n        returns (\n            uint256 _firstRewardEpochStartTs,\n            uint256 _rewardEpochDurationSeconds\n        );\n\n    function getFallbackMode() external view \n        returns (\n            bool _fallbackMode,\n            IIFtso[] memory _ftsos,\n            bool[] memory _ftsoInFallbackMode\n        );\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\nimport \"../ftso/interface/IIFtso.sol\";\nimport \"../genesis/interface/IFtsoRegistryGenesis.sol\";\n\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\n\n    struct PriceInfo {\n        uint256 ftsoIndex;\n        uint256 price;\n        uint256 decimals;\n        uint256 timestamp;\n    }\n\n    function getFtso(uint256 _ftsoIndex) external view returns(IIFtso _activeFtsoAddress);\n    function getFtsoBySymbol(string memory _symbol) external view returns(IIFtso _activeFtsoAddress);\n    function getSupportedIndices() external view returns(uint256[] memory _supportedIndices);\n    function getSupportedSymbols() external view returns(string[] memory _supportedSymbols);\n    function getSupportedFtsos() external view returns(IIFtso[] memory _ftsos);\n    function getFtsoIndex(string memory _symbol) external view returns (uint256 _assetIndex);\n    function getFtsoSymbol(uint256 _ftsoIndex) external view returns (string memory _symbol);\n    function getCurrentPrice(uint256 _ftsoIndex) external view returns(uint256 _price, uint256 _timestamp);\n    function getCurrentPrice(string memory _symbol) external view returns(uint256 _price, uint256 _timestamp);\n    function getCurrentPriceWithDecimals(uint256 _assetIndex) external view\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\n    function getCurrentPriceWithDecimals(string memory _symbol) external view\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\n\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\n    function getCurrentPricesByIndices(uint256[] memory _indices) external view returns (PriceInfo[] memory);\n    function getCurrentPricesBySymbols(string[] memory _symbols) external view returns (PriceInfo[] memory);\n\n    function getSupportedIndicesAndFtsos() external view \n        returns(uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\n\n    function getSupportedSymbolsAndFtsos() external view \n        returns(string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\n\n    function getSupportedIndicesAndSymbols() external view \n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols);\n\n    function getSupportedIndicesSymbolsAndFtsos() external view \n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IFtsoRewardManager {\n\n    event RewardClaimed(\n        address indexed dataProvider,\n        address indexed whoClaimed,\n        address indexed sentTo,\n        uint256 rewardEpoch, \n        uint256 amount\n    );\n\n    event UnearnedRewardsAccrued(\n        uint256 epochId,\n        uint256 reward\n    );\n\n    event RewardsDistributed(\n        address indexed ftso,\n        uint256 epochId,\n        address[] addresses,\n        uint256[] rewards\n    );\n\n    event RewardClaimsEnabled(\n        uint256 rewardEpochId\n    ); \n\n    event FeePercentageChanged(\n        address indexed dataProvider,\n        uint256 value,\n        uint256 validFromEpoch\n    );\n\n    event RewardClaimsExpired(\n        uint256 rewardEpochId\n    );    \n\n    event FtsoRewardManagerActivated(address ftsoRewardManager);\n    event FtsoRewardManagerDeactivated(address ftsoRewardManager);\n\n    /**\n     * @notice Allows a percentage delegator to claim rewards.\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\n     * @param _recipient            address to transfer funds to\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\n     * @return _rewardAmount        amount of total claimed rewards\n     * @dev Reverts if `msg.sender` is delegating by amount\n     * @dev Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'.\n     * @dev Retained for backward compatibility.\n     * @dev This function is deprecated - use `claim` instead.\n     */\n    function claimReward(\n        address payable _recipient,\n        uint256[] calldata _rewardEpochs\n    )\n        external returns (uint256 _rewardAmount);\n\n    /**\n     * @notice Allows the sender to claim or wrap rewards for reward owner.\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\n     *   this approval is done by calling `setClaimExecutors`.\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\n     *   call, we allow the owner to control the timing of the calls.\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\n     * @param _rewardOwner          address of the reward owner\n     * @param _recipient            address to transfer funds to\n     * @param _rewardEpoch          last reward epoch to claim for\n     * @param _wrap                 should reward be wrapped immediately\n     * @return _rewardAmount        amount of total claimed rewards\n     * @dev Reverts if `msg.sender` is delegating by amount\n     */\n    function claim(\n        address _rewardOwner,\n        address payable _recipient,\n        uint256 _rewardEpoch,\n        bool _wrap\n    )\n        external returns (uint256 _rewardAmount);\n    \n    /**\n     * @notice Allows the sender to claim rewards from specified data providers.\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\n     * @param _recipient            address to transfer funds to\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\n     * @return _rewardAmount        amount of total claimed rewards\n     * @dev Function can only be used for explicit delegations.\n     * @dev This function is deprecated - use `claimFromDataProviders` instead.\n     */\n    function claimRewardFromDataProviders(\n        address payable _recipient,\n        uint256[] calldata _rewardEpochs,\n        address[] calldata _dataProviders\n    )\n        external returns (uint256 _rewardAmount);\n\n    /**\n     * @notice Allows the sender to claim or wrap rewards for reward owner from specified data providers.\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\n     *   this approval is done by calling `setClaimExecutors`.\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\n     *   call, we allow the owner to control the timing of the calls.\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\n     * @param _rewardOwner          address of the reward owner\n     * @param _recipient            address to transfer funds to\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\n     * @param _wrap                 should reward be wrapped immediately\n     * @return _rewardAmount        amount of total claimed rewards\n     * @dev Function can only be used for explicit delegations.\n     */\n    function claimFromDataProviders(\n        address _rewardOwner,\n        address payable _recipient,\n        uint256[] calldata _rewardEpochs,\n        address[] calldata _dataProviders,\n        bool _wrap\n    )\n        external returns (uint256 _rewardAmount);\n\n    /**\n     * @notice Allows batch claiming for the list of '_rewardOwners' and for all unclaimed epochs <= '_rewardEpoch'.\n     * @notice If reward owner has enabled delegation account, rewards are also claimed for that delegation account and\n     *   total claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.\n     * @notice Claimed amount is automatically wrapped.\n     * @notice Method can be used by reward owner or executor. If executor is registered with fee > 0,\n     *   then fee is paid to executor for each claimed address from the list.\n     * @param _rewardOwners         list of reward owners to claim for\n     * @param _rewardEpoch          last reward epoch to claim for\n     */\n    function autoClaim(address[] calldata _rewardOwners, uint256 _rewardEpoch) external;\n    \n    /**\n     * @notice Allows data provider to set (or update last) fee percentage.\n     * @param _feePercentageBIPS    number representing fee percentage in BIPS\n     * @return _validFromEpoch      reward epoch number when the setting becomes effective.\n     */\n    function setDataProviderFeePercentage(uint256 _feePercentageBIPS)\n        external returns (uint256 _validFromEpoch);\n\n    /**\n     * @notice Allows reward claiming\n     */\n    function active() external view returns (bool);\n\n    /**\n     * @notice Returns the current fee percentage of `_dataProvider`\n     * @param _dataProvider         address representing data provider\n     */\n    function getDataProviderCurrentFeePercentage(address _dataProvider)\n        external view returns (uint256 _feePercentageBIPS);\n\n    /**\n     * @notice Returns the fee percentage of `_dataProvider` at `_rewardEpoch`\n     * @param _dataProvider         address representing data provider\n     * @param _rewardEpoch          reward epoch number\n     */\n    function getDataProviderFeePercentage(\n        address _dataProvider,\n        uint256 _rewardEpoch\n    )\n        external view\n        returns (uint256 _feePercentageBIPS);\n\n    /**\n     * @notice Returns the scheduled fee percentage changes of `_dataProvider`\n     * @param _dataProvider         address representing data provider\n     * @return _feePercentageBIPS   positional array of fee percentages in BIPS\n     * @return _validFromEpoch      positional array of block numbers the fee settings are effective from\n     * @return _fixed               positional array of boolean values indicating if settings are subjected to change\n     */\n    function getDataProviderScheduledFeePercentageChanges(address _dataProvider) external view \n        returns (\n            uint256[] memory _feePercentageBIPS,\n            uint256[] memory _validFromEpoch,\n            bool[] memory _fixed\n        );\n\n    /**\n     * @notice Returns information on epoch reward\n     * @param _rewardEpoch          reward epoch number\n     * @return _totalReward         number representing the total epoch reward\n     * @return _claimedReward       number representing the amount of total epoch reward that has been claimed\n     */\n    function getEpochReward(uint256 _rewardEpoch) external view\n        returns (uint256 _totalReward, uint256 _claimedReward);\n\n    /**\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch`\n     * @param _beneficiary          address of reward beneficiary\n     * @param _rewardEpoch          reward epoch number\n     * @return _dataProviders       positional array of addresses representing data providers\n     * @return _rewardAmounts       positional array of reward amounts\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\n     * @return _claimable           boolean value indicating if rewards are claimable\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\n     */\n    function getStateOfRewards(\n        address _beneficiary,\n        uint256 _rewardEpoch\n    )\n        external view \n        returns (\n            address[] memory _dataProviders,\n            uint256[] memory _rewardAmounts,\n            bool[] memory _claimed,\n            bool _claimable\n        );\n\n    /**\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`\n     * @param _beneficiary          address of reward beneficiary\n     * @param _rewardEpoch          reward epoch number\n     * @param _dataProviders        positional array of addresses representing data providers\n     * @return _rewardAmounts       positional array of reward amounts\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\n     * @return _claimable           boolean value indicating if rewards are claimable\n     */\n    function getStateOfRewardsFromDataProviders(\n        address _beneficiary,\n        uint256 _rewardEpoch,\n        address[] calldata _dataProviders\n    )\n        external view\n        returns (\n            uint256[] memory _rewardAmounts,\n            bool[] memory _claimed,\n            bool _claimable\n        );\n\n    /**\n     * @notice Returns the start and the end of the reward epoch range for which the reward is claimable\n     * @param _startEpochId         the oldest epoch id that allows reward claiming\n     * @param _endEpochId           the newest epoch id that allows reward claiming\n     */\n    function getEpochsWithClaimableRewards() external view \n        returns (\n            uint256 _startEpochId,\n            uint256 _endEpochId\n        );\n\n    /**\n     * @notice Returns the next claimable reward epoch for '_rewardOwner'.\n     * @param _rewardOwner          address of the reward owner\n     */\n    function nextClaimableRewardEpoch(address _rewardOwner) external view returns (uint256);\n\n    /**\n     * @notice Returns the array of claimable epoch ids for which the reward has not yet been claimed\n     * @param _beneficiary          address of reward beneficiary\n     * @return _epochIds            array of epoch ids\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\n     */\n    function getEpochsWithUnclaimedRewards(address _beneficiary) external view returns (\n        uint256[] memory _epochIds\n    );\n\n    /**\n     * @notice Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`\n     * @param _rewardEpoch          reward epoch number\n     * @param _dataProvider         address representing the data provider\n     * @param _claimer              address representing the claimer\n     * @return _claimed             boolean indicating if reward has been claimed\n     * @return _amount              number representing the claimed amount\n     */\n    function getClaimedReward(\n        uint256 _rewardEpoch,\n        address _dataProvider,\n        address _claimer\n    )\n        external view\n        returns (\n            bool _claimed,\n            uint256 _amount\n        );\n\n    /**\n     * @notice Return reward epoch that will expire, when new reward epoch will start\n     * @return Reward epoch id that will expire next\n     */\n    function getRewardEpochToExpireNext() external view returns (uint256);\n\n    /**\n     * @notice Return reward epoch vote power block\n     * @param _rewardEpoch          reward epoch number\n     */\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\n\n    /**\n     * @notice Return current reward epoch number\n     */\n    function getCurrentRewardEpoch() external view returns (uint256);\n\n    /**\n     * @notice Return initial reward epoch number\n     */\n    function getInitialRewardEpoch() external view returns (uint256);\n\n    /**\n     * @notice Returns the information on rewards and initial vote power of `_dataProvider` for `_rewardEpoch`\n     * @param _rewardEpoch                      reward epoch number\n     * @param _dataProvider                     address representing the data provider\n     * @return _rewardAmount                    number representing the amount of rewards\n     * @return _votePowerIgnoringRevocation     number representing the vote power ignoring revocations\n     */\n    function getDataProviderPerformanceInfo(\n        uint256 _rewardEpoch,\n        address _dataProvider\n    )\n        external view \n        returns (\n            uint256 _rewardAmount,\n            uint256 _votePowerIgnoringRevocation\n        );\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../genesis/interface/IFtsoGenesis.sol\";\nimport \"../genesis/interface/IFtsoRegistryGenesis.sol\";\n\ninterface IPriceSubmitter {\n    /**\n     * Event emitted when price hashes were submitted through PriceSubmitter.\n     * @param submitter the address of the sender\n     * @param epochId current price epoch id\n     * @param ftsos array of ftsos that correspond to the indexes in call\n     * @param hashes the submitted hashes\n     * @param timestamp current block timestamp\n     */\n    event PriceHashesSubmitted(\n        address indexed submitter,\n        uint256 indexed epochId,\n        IFtsoGenesis[] ftsos,\n        bytes32[] hashes,\n        uint256 timestamp\n    );\n\n    /**\n     * Event emitted when prices were revealed through PriceSubmitter.\n     * @param voter the address of the sender\n     * @param epochId id of the epoch in which the price hash was submitted\n     * @param ftsos array of ftsos that correspond to the indexes in the call\n     * @param prices the submitted prices\n     * @param timestamp current block timestamp\n     */\n    event PricesRevealed(\n        address indexed voter,\n        uint256 indexed epochId,\n        IFtsoGenesis[] ftsos,\n        uint256[] prices,\n        uint256[] randoms,\n        uint256 timestamp\n    );\n    \n    /**\n     * @notice Submits price hashes for current epoch\n     * @param _epochId              Target epoch id to which hashes are submitted\n     * @param _ftsoIndices          List of ftso indices\n     * @param _hashes               List of hashed price and random number\n     * @notice Emits PriceHashesSubmitted event\n     */\n    function submitPriceHashes(\n        uint256 _epochId,\n        uint256[] memory _ftsoIndices,\n        bytes32[] memory _hashes\n    ) external;\n\n    /**\n     * @notice Reveals submitted prices during epoch reveal period\n     * @param _epochId              Id of the epoch in which the price hashes was submitted\n     * @param _ftsoIndices          List of ftso indices\n     * @param _prices               List of submitted prices in USD\n     * @param _randoms              List of submitted random numbers\n     * @notice The hash of _price and _random must be equal to the submitted hash\n     * @notice Emits PricesRevealed event\n     */\n    function revealPrices(\n        uint256 _epochId,\n        uint256[] memory _ftsoIndices,\n        uint256[] memory _prices,\n        uint256[] memory _randoms\n    ) external;\n\n    /**\n     * Returns bitmap of all ftso's for which `_voter` is allowed to submit prices/hashes.\n     * If voter is allowed to vote for ftso at index (see *_FTSO_INDEX), the corrsponding\n     * bit in the result will be 1.\n     */    \n    function voterWhitelistBitmap(address _voter) external view returns (uint256);\n\n    function getVoterWhitelister() external view returns (address);\n    function getFtsoRegistry() external view returns (IFtsoRegistryGenesis);\n    function getFtsoManager() external view returns (address);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IVoterWhitelister {\n    /**\n     * Raised when an account is removed from the voter whitelist.\n     */\n    event VoterWhitelisted(address voter, uint256 ftsoIndex);\n    \n    /**\n     * Raised when an account is removed from the voter whitelist.\n     */\n    event VoterRemovedFromWhitelist(address voter, uint256 ftsoIndex);\n\n    /**\n     * Raised when an account is chilled from the voter whitelist.\n     */\n    event VoterChilled(address voter, uint256 untilRewardEpoch);\n\n    /**\n     * Request to whitelist `_voter` account to ftso at `_ftsoIndex`. Will revert if vote power too low.\n     * May be called by any address.\n     */\n    function requestWhitelistingVoter(address _voter, uint256 _ftsoIndex) external;\n\n    /**\n     * Request to whitelist `_voter` account to all active ftsos.\n     * May be called by any address.\n     * It returns an array of supported ftso indices and success flag per index.\n     */\n    function requestFullVoterWhitelisting(\n        address _voter\n    ) \n        external \n        returns (\n            uint256[] memory _supportedIndices,\n            bool[] memory _success\n        );\n\n    /**\n     * Maximum number of voters in the whitelist for a new FTSO.\n     */\n    function defaultMaxVotersForFtso() external view returns (uint256);\n    \n    /**\n     * Maximum number of voters in the whitelist for FTSO at index `_ftsoIndex`.\n     */\n    function maxVotersForFtso(uint256 _ftsoIndex) external view returns (uint256);\n\n    /**\n     * Get whitelisted price providers for ftso with `_symbol`\n     */\n    function getFtsoWhitelistedPriceProvidersBySymbol(string memory _symbol) external view returns (address[] memory);\n\n    /**\n     * Get whitelisted price providers for ftso at `_ftsoIndex`\n     */\n    function getFtsoWhitelistedPriceProviders(uint256 _ftsoIndex) external view returns (address[] memory);\n\n    /**\n     * In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs.\n     * A voter can whitelist again from a returned reward epoch onwards.\n     */\n    function chilledUntilRewardEpoch(address _voter) external view returns (uint256);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IGovernanceVotePower {\n    /**\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\n     * @param _to The address of the recipient\n     **/\n    function delegate(address _to) external;\n\n    /**\n     * @notice Undelegate all governance vote power of `msg.sender``.\n     **/\n    function undelegate() external;\n\n    /**\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\n    * @param _who The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\n    */\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\n\n    /**\n    * @notice Get the vote power of `account` at the current block.\n    * @param account The address to get voting power.\n    * @return Vote power of `account` at the current block number.\n    */    \n    function getVotes(address account) external view returns (uint256);\n\n    /**\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\n    * @param _who The address to get delegate's address.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Delegate's address of `_who` at `_blockNumber`.\n    */\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\n\n    /**\n    * @notice Get the delegate's address of `_who` at the current block.\n    * @param _who The address to get delegate's address.\n    * @return Delegate's address of `_who` at the current block number.\n    */    \n    function getDelegateOfAtNow(address _who) external  view returns (address);\n\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name AddressValidity\n * @custom:id 0x05\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n * @author Flare\n * @notice An assertion whether a string represents a valid address on an external chain.\n * @custom:verification The address is checked against all validity criteria of the chain with `sourceId`.\n * Indicator of validity is provided.\n * If the address is valid, its standard form and standard hash are computed.\n * Validity criteria for each supported chain:\n * - [BTC](/specs/attestations/external-chains/address-validity/BTC.md)\n * - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md)\n * - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\n * @custom:lut `0xffffffffffffffff` ($2^{64}-1$ in hex)\n */\ninterface AddressValidity {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId Id of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for AddressValidity attestation type\n     * @param addressStr Address to be verified.\n     */\n    struct RequestBody {\n        string addressStr;\n    }\n\n    /**\n     * @notice Response body for AddressValidity attestation type\n     * @param isValid Boolean indicator of the address validity.\n     * @param standardAddress If `isValid`, standard form of the validated address. Otherwise an empty string.\n     * @param standardAddressHash If `isValid`, standard address hash of the validated address. Otherwise a zero bytes32 string.\n     */\n    struct ResponseBody {\n        bool isValid;\n        string standardAddress;\n        bytes32 standardAddressHash;\n    }\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name BalanceDecreasingTransaction\n * @custom:id 0x02\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n * @author Flare\n * @notice A detection of a transaction that either decreases the balance for some address or is signed by the source address.\n * Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate some funds locked by a smart contract on Flare.\n *\n * A transaction is considered “balance decreasing” for the address, if the balance after the transaction is lower than before or the address is among the signers of the transaction (even if its balance is greater than before the transaction).\n * @custom:verification The transaction with `transactionId` is fetched from the API of the source blockchain node or relevant indexer.\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n *\n * Once the transaction is received, the response fields are extracted if the transaction is balance decreasing for the indicated address.\n * Some of the request and response fields are chain specific as described below.\n * The fields can be computed with the help of a [balance decreasing summary](/specs/attestations/external-chains/transactions.md#balance-decreasing-summary).\n *\n * ### UTXO (Bitcoin and Dogecoin)\n *\n * - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\n * If the indicated input does not exist or the indicated input does not have the address, the attestation request is rejected.\n * The `sourceAddress` is the address of the indicated transaction input.\n * - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of all outputs with `sourceAddress`.\n * Can be negative.\n * - `blockTimestamp` is the mediantime of a block.\n *\n * ### XRPL\n *\n * - `sourceAddressIndicator` is the [standard address hash](/specs/attestations/external-chains/standardAddress.md#standard-address-hash) of the address whose balance has been decreased.\n * If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance of the address was not lowered in the transaction, the attestation request is rejected.\n *\n * - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\n * Can be negative.\n * - `blockTimestamp` is the close_time of a ledger converted to unix time.\n *\n * @custom:lut `blockTimestamp`\n */\ninterface BalanceDecreasingTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered. This is a security measure to prevent a collision of attestation hashes.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for BalanceDecreasingTransaction attestation type\n     * @param transactionId ID of the payment transaction.\n     * @param sourceAddressIndicator The indicator of the address whose balance has been decreased.\n     */\n    struct RequestBody {\n        bytes32 transactionId;\n        bytes32 sourceAddressIndicator;\n    }\n\n    /**\n     * @notice Response body for BalanceDecreasingTransaction attestation type.\n     * @param blockNumber The number of the block in which the transaction is included.\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\n     * @param sourceAddressHash Standard address hash of the address indicated by the `sourceAddressIndicator`.\n     * @param spentAmount Amount spent by the source address in minimal units.\n     * @param standardPaymentReference Standard payment reference of the transaction.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 blockTimestamp;\n        bytes32 sourceAddressHash;\n        int256 spentAmount;\n        bytes32 standardPaymentReference;\n    }\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name ConfirmedBlockHeightExists\n * @custom:id 0x02\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n * @author Flare\n * @notice An assertion that a block with `blockNumber` is confirmed.\n * It also provides data to compute the block production rate in the given time range.\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`.\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\n *\n *\n *  Current confirmation heights consensus:\n *\n *\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\n * | ------- | --------- | ----------------------- | ------------ |\n * | `BTC`   | 0         | 6                       | mediantime   |\n * | `DOGE`  | 2         | 60                      | mediantime   |\n * | `XRP`   | 3         | 3                       | close_time   |\n *\n *\n *\n *\n * @custom:lut `lowestQueryWindowBlockTimestamp`\n */\ninterface ConfirmedBlockHeightExists {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\n     * @param blockNumber The number of the block the request wants a confirmation of.\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\n     */\n    struct RequestBody {\n        uint64 blockNumber;\n        uint64 queryWindow;\n    }\n\n    /**\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp` and `lowestQueryWindowBlockTimestamp` can be used to compute the average block production time in the specified block range.\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain. All attestation providers must agree on this number.\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`.\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 blockTimestamp;\n        uint64 numberOfConfirmations;\n        uint64 lowestQueryWindowBlockNumber;\n        uint64 lowestQueryWindowBlockTimestamp;\n    }\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name EVMTransaction\n * @custom:id 0x06\n * @custom:supported ETH, FLR, SGB, testETH, testFLR, testSGB\n * @author Flare\n * @notice A relay of a transaction from an EVM chain.\n * This type is only relevant for EVM-compatible chains.\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed.\n * If an indicated event does not exist, the request is rejected.\n * @custom:lut `timestamp`\n */\ninterface EVMTransaction {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId  ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for EVM transaction attestation type\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\n     * @param transactionHash Hash of the transaction(transactionHash).\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\n     * @param provideInput If true, \"input\" field is included in the response.\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\n     */\n    struct RequestBody {\n        bytes32 transactionHash;\n        uint16 requiredConfirmations;\n        bool provideInput;\n        bool listEvents;\n        uint32[] logIndices;\n    }\n\n    /**\n     * @notice Response body for EVM transaction attestation type\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param timestamp Timestamp of the block in which the transaction is included.\n     * @param sourceAddress The address (from) that signed the transaction.\n     * @param isDeployment Indicate whether it is a contract creation transaction.\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\n     * @param value The value transferred by the initial transaction in wei.\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\n     * @param status Status of the transaction 1 - success, 0 - failure.\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 timestamp;\n        address sourceAddress;\n        bool isDeployment;\n        address receivingAddress;\n        uint256 value;\n        bytes input;\n        uint8 status;\n        Event[] events;\n    }\n\n    /**\n     * @notice Event log record\n     * @custom:above An `Event` is a struct with the following fields:\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n     * @param logIndex The consecutive number of the event in block.\n     * @param emitterAddress The address of the contract that emitted the event.\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\n     */\n    struct Event {\n        uint32 logIndex;\n        address emitterAddress;\n        bytes32[] topics;\n        bytes data;\n        bool removed;\n    }\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./AddressValidity.sol\";\n\ninterface IAddressValidityVerification {\n\n   function verifyAddressValidity(\n      AddressValidity.Proof calldata _proof\n   ) external view returns (bool _proved);\n}\n   "},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./BalanceDecreasingTransaction.sol\";\n\ninterface IBalanceDecreasingTransactionVerification {\n\n   function verifyBalanceDecreasingTransaction(\n      BalanceDecreasingTransaction.Proof calldata _proof\n   ) external view returns (bool _proved);\n}\n   "},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./ConfirmedBlockHeightExists.sol\";\n\ninterface IConfirmedBlockHeightExistsVerification {\n\n   function verifyConfirmedBlockHeightExists(\n      ConfirmedBlockHeightExists.Proof calldata _proof\n   ) external view returns (bool _proved);\n}\n   "},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./EVMTransaction.sol\";\n\ninterface IEVMTransactionVerification {\n\n   function verifyEVMTransaction(\n      EVMTransaction.Proof calldata _proof\n   ) external view returns (bool _proved);\n}\n   "},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./Payment.sol\";\n\ninterface IPaymentVerification {\n\n   function verifyPayment(\n      Payment.Proof calldata _proof\n   ) external view returns (bool _proved);\n}\n   "},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./ReferencedPaymentNonexistence.sol\";\n\ninterface IReferencedPaymentNonexistenceVerification {\n\n   function verifyReferencedPaymentNonexistence(\n      ReferencedPaymentNonexistence.Proof calldata _proof\n   ) external view returns (bool _proved);\n}\n   "},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n// solhint-disable func-name-mixedcase\ninterface IStateConnector {\n    event AttestationRequest(\n        address sender,\n        uint256 timestamp,\n        bytes data\n    );\n\n    event RoundFinalised(\n        uint256 indexed roundId,\n        bytes32 merkleRoot\n    );\n\n    /**\n     * The method to call for requesting a new attestation.\n     * Emits event `AttestationRequest`, which triggers work by attestation providers.\n     */\n    function requestAttestations(bytes calldata _data) external;\n\n    /**\n     * Last finalized round id.\n     */\n    function lastFinalizedRoundId() external view returns (uint256 _roundId);\n\n    /**\n     * Get Merkle root for the round and check for buffer overflows.\n     */\n    function merkleRoot(uint256 _roundId) external view returns (bytes32);\n\n    /**\n     * The first buffer timestamp\n     * (start time in seconds for converting the timestamp into a round number).\n     */\n    function BUFFER_TIMESTAMP_OFFSET() external view returns (uint256);\n\n    /**\n     * Amount of time a buffer is active before cycling to the next one\n     * (round length in seconds for converting the timestamp into a round number).\n     */\n    function BUFFER_WINDOW() external view returns (uint256);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name Payment\n * @custom:id 0x01\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n * @author Flare\n * @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\n * Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\n * transaction should be formed to be provable by this attestation type.\n * The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.\n * @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer.\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n *\n * Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain.\n * If the summary is successfully calculated, the response is assembled from the summary.\n * `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\n * For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\n * For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\n *\n * If the summary is not successfully calculated, the attestation request is rejected.\n * @custom:lut `blockTimestamp`\n */\ninterface Payment {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for Payment attestation type\n     * @param transactionId ID of the payment transaction.\n     * @param inUtxo For UTXO chains, this is the index of the transaction input with source address. Always 0 for the non-utxo chains.\n     * @param utxo For UTXO chains, this is the index of the transaction output with receiving address. Always 0 for the non-utxo chains.\n     */\n    struct RequestBody {\n        bytes32 transactionId;\n        uint256 inUtxo;\n        uint256 utxo;\n    }\n\n    /**\n     * @notice Response body for Payment attestation type\n     * @param blockNumber Number of the block in which the transaction is included.\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\n     * @param sourceAddressHash Standard address hash of the source address.\n     * @param receivingAddressHash Standard address hash of the receiving address. The zero 32-byte string if there is no receivingAddress (if `status` is not success).\n     * @param intendedReceivingAddressHash Standard address hash of the intended receiving address. Relevant if the transaction is unsuccessful.\n     * @param spentAmount Amount in minimal units spent by the source address.\n     * @param intendedSpentAmount Amount in minimal units to be spent by the source address. Relevant if the transaction status is unsuccessful.\n     * @param receivedAmount Amount in minimal units received by the receiving address.\n     * @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address. Relevant if the transaction is unsuccessful.\n     * @param standardPaymentReference [Standard payment reference](/specs/attestations/external-chains/standardPaymentReference.md) of the transaction.\n     * @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\n     * @param status  [Succes status](/specs/attestations/external-chains/transactions.md#transaction-success-status) of the transaction: 0 - success, 1 - failed by sender's fault,x  2 - failed by receiver's fault.\n     */\n    struct ResponseBody {\n        uint64 blockNumber;\n        uint64 blockTimestamp;\n        bytes32 sourceAddressHash;\n        bytes32 receivingAddressHash;\n        bytes32 intendedReceivingAddressHash;\n        int256 spentAmount;\n        int256 intendedSpentAmount;\n        int256 receivedAmount;\n        int256 intendedReceivedAmount;\n        bytes32 standardPaymentReference;\n        bool oneToOne;\n        uint8 status;\n    }\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * @custom:name ReferencedPaymentNonexistence\n * @custom:id 0x04\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n * @author Flare\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.\n * \n * \n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed. \n *\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected.\n *\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\n * The criteria and timestamp are chain specific.\n * ### UTXO (Bitcoin and Dogecoin)\n *\n *\n * Criteria for the transaction:\n *\n *\n * - It is not coinbase transaction.\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains).\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).\n *\n * \n * Timestamp is `mediantime`.\n\n * ### XRPL\n *\n *\n *\n * Criteria for the transaction:\n * - The transaction is of type payment.\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp),\n * - One of the following is true:\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.\n *\n * \n * Timestamp is `close_time` converted to UNIX time.\n *\n * @custom:lut `minimalBlockTimestamp`\n */\ninterface ReferencedPaymentNonexistence {\n    /**\n     * @notice Toplevel request\n     * @param attestationType ID of the attestation type.\n     * @param sourceId ID of the data source.\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\n     */\n    struct Request {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        bytes32 messageIntegrityCode;\n        RequestBody requestBody;\n    }\n\n    /**\n     * @notice Toplevel response\n     * @param attestationType Extracted from the request.\n     * @param sourceId Extracted from the request.\n     * @param votingRound The ID of the State Connector round in which the request was considered.\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n     * @param requestBody Extracted from the request.\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\n     */\n    struct Response {\n        bytes32 attestationType;\n        bytes32 sourceId;\n        uint64 votingRound;\n        uint64 lowestUsedTimestamp;\n        RequestBody requestBody;\n        ResponseBody responseBody;\n    }\n\n    /**\n     * @notice Toplevel proof\n     * @param merkleProof Merkle proof corresponding to the attestation response.\n     * @param data Attestation response.\n     */\n    struct Proof {\n        bytes32[] merkleProof;\n        Response data;\n    }\n\n    /**\n     * @notice Request body for ReferencePaymentNonexistence attestation type\n     * @param minimalBlockNumber The start block of the search range.\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\n     * @param deadlineTimestamp The timestamp to be included in the search range.\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\n     * @param amount The requested amount in minimal units that had to be payed.\n     * @param standardPaymentReference The requested standard payment reference.\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\n     */\n    struct RequestBody {\n        uint64 minimalBlockNumber;\n        uint64 deadlineBlockNumber;\n        uint64 deadlineTimestamp;\n        bytes32 destinationAddressHash;\n        uint256 amount;\n        bytes32 standardPaymentReference;\n    }\n\n    /**\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\n     * The specified search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n     */\n    struct ResponseBody {\n        uint64 minimalBlockTimestamp;\n        uint64 firstOverflowBlockNumber;\n        uint64 firstOverflowBlockTimestamp;\n    }\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IFlareContractRegistry} from \"./userInterfaces/IFlareContractRegistry.sol\";\n// Auto generated imports\n// AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\nimport { IStateConnector } from \"../stateConnector/interface/IStateConnector.sol\";\nimport { IPriceSubmitter } from \"../ftso/userInterfaces/IPriceSubmitter.sol\";\nimport { IFtsoRewardManager } from \"../ftso/userInterfaces/IFtsoRewardManager.sol\";\nimport { IFtsoRegistry } from \"../ftso/userInterfaces/IFtsoRegistry.sol\";\nimport { IVoterWhitelister } from \"../ftso/userInterfaces/IVoterWhitelister.sol\";\nimport { IFtsoManager } from \"../ftso/userInterfaces/IFtsoManager.sol\";\nimport { IWNat } from \"../util-contracts/token/userInterfaces/IWNat.sol\";\nimport { IEVMTransactionVerification } from \"../stateConnector/interface/IEVMTransactionVerification.sol\";\nimport { IAddressValidityVerification } from \"../stateConnector/interface/IAddressValidityVerification.sol\";\nimport { IBalanceDecreasingTransactionVerification } from \"../stateConnector/interface/IBalanceDecreasingTransactionVerification.sol\";\nimport { IConfirmedBlockHeightExistsVerification } from \"../stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol\";\nimport { IPaymentVerification } from \"../stateConnector/interface/IPaymentVerification.sol\";\nimport { IReferencedPaymentNonexistenceVerification } from \"../stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol\"; \n// END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\n\n// Library is intended to be used inline, so the strings are all memory allocated (instead of calldata)\nlibrary FlareContractsRegistryLibrary {\n    address internal constant FLARE_CONTRACT_REGISTRY_ADDRESS =\n        0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019;\n\n    IFlareContractRegistry internal constant FLARE_CONTRACT_REGISTRY =\n        IFlareContractRegistry(FLARE_CONTRACT_REGISTRY_ADDRESS);\n\n    /**\n     * @notice Returns contract address for the given name - might be address(0)\n     * @param _name             name of the contract\n     */\n    function getContractAddressByName(\n        string memory _name\n    ) internal view returns (address) {\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByName(_name);\n    }\n\n    /**\n     * @notice Returns contract address for the given name hash - might be address(0)\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\n     */\n    function getContractAddressByHash(\n        bytes32 _nameHash\n    ) internal view returns (address) {\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByHash(_nameHash);\n    }\n\n    /**\n     * @notice Returns contract addresses for the given names - might be address(0)\n     * @param _names            names of the contracts\n     */\n    function getContractAddressesByName(\n        string[] memory _names\n    ) internal view returns (address[] memory) {\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByName(_names);\n    }\n\n    /**\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\n     */\n    function getContractAddressesByHash(\n        bytes32[] memory _nameHashes\n    ) internal view returns (address[] memory) {\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByHash(_nameHashes);\n    }\n\n    /**\n     * @notice Returns all contract names and corresponding addresses\n     */\n    function getAllContracts()\n        internal\n        view\n        returns (string[] memory _names, address[] memory _addresses)\n    {\n        return FLARE_CONTRACT_REGISTRY.getAllContracts();\n    }\n\n    // Nice typed getters for all the important contracts\n    // AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\n    function getStateConnector() internal view returns(IStateConnector){\nreturn IStateConnector(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\"StateConnector\"));\n\n}\n\n\nfunction getPriceSubmitter() internal view returns(IPriceSubmitter){\nreturn IPriceSubmitter(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\"PriceSubmitter\"));\n\n}\n\n\nfunction getFtsoRewardManager() internal view returns(IFtsoRewardManager){\nreturn IFtsoRewardManager(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\"FtsoRewardManager\"));\n\n}\n\n\nfunction getFtsoRegistry() internal view returns(IFtsoRegistry){\nreturn IFtsoRegistry(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\"FtsoRegistry\"));\n\n}\n\n\nfunction getVoterWhitelister() internal view returns(IVoterWhitelister){\nreturn IVoterWhitelister(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\"VoterWhitelister\"));\n\n}\n\n\nfunction getFtsoManager() internal view returns(IFtsoManager){\nreturn IFtsoManager(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\"FtsoManager\"));\n\n}\n\n\nfunction getWNat() internal view returns(IWNat){\nreturn IWNat(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\"WNat\"));\n\n}\n\n\n// Returns hardcoded unofficial deployment instances of Flare core contracts\nfunction auxiliaryGetIEVMTransactionVerification() internal view returns(IEVMTransactionVerification){\nreturn IEVMTransactionVerification(0xf37AD1278917c04fb291C75a42e61710964Cb57c);\n\n}\n\n\n// Returns hardcoded unofficial deployment instances of Flare core contracts\nfunction auxiliaryGetIAddressValidityVerification() internal view returns(IAddressValidityVerification){\nreturn IAddressValidityVerification(0xd94721da1dD5e222020D256fC073e8Be301ebdCB);\n\n}\n\n\n// Returns hardcoded unofficial deployment instances of Flare core contracts\nfunction auxiliaryGetIBalanceDecreasingTransactionVerification() internal view returns(IBalanceDecreasingTransactionVerification){\nreturn IBalanceDecreasingTransactionVerification(0xeDa84A2eeDfdA53e7c33ef5fDe7B2798B910BF4A);\n\n}\n\n\n// Returns hardcoded unofficial deployment instances of Flare core contracts\nfunction auxiliaryGetIConfirmedBlockHeightExistsVerification() internal view returns(IConfirmedBlockHeightExistsVerification){\nreturn IConfirmedBlockHeightExistsVerification(0x632A984d63f9Ae3C2Eb31e0dc2EeEaE1E282E0da);\n\n}\n\n\n// Returns hardcoded unofficial deployment instances of Flare core contracts\nfunction auxiliaryGetIPaymentVerification() internal view returns(IPaymentVerification){\nreturn IPaymentVerification(0x1ECe6dd08D19c0faf3AB8cEcB146cd5ea5b9b7d9);\n\n}\n\n\n// Returns hardcoded unofficial deployment instances of Flare core contracts\nfunction auxiliaryGetIReferencedPaymentNonexistenceVerification() internal view returns(IReferencedPaymentNonexistenceVerification){\nreturn IReferencedPaymentNonexistenceVerification(0xDfE5926fABA166187B29C33BC95DfDb18bbE52cd);\n\n}\n \n    // END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IICleanable {\n    /**\n     * Set the contract that is allowed to call history cleaning methods.\n     */\n    function setCleanerContract(address _cleanerContract) external;\n    \n    /**\n     * Set the cleanup block number.\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\n     * history before that block should never be used since it can be inconsistent.\n     * In particular, cleanup block number must be before current vote power block.\n     * @param _blockNumber The new cleanup block number.\n     */\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\n    \n    /**\n     * Set the contract that is allowed to set cleanupBlockNumber.\n     * Usually this will be an instance of CleanupBlockNumberManager.\n     */\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\n    \n    /**\n     * Get the current cleanup block number.\n     */\n    function cleanupBlockNumber() external view returns (uint256);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../userInterfaces/IVPToken.sol\";\nimport \"../../../../governance/userInterfaces/IGovernanceVotePower.sol\";\n\ninterface IIGovernanceVotePower is IGovernanceVotePower {\n    /**\n     * Event triggered when an delegator's balance changes.\n     *\n     * Note: the event is always emitted from `GovernanceVotePower`.\n     */\n    event DelegateVotesChanged(\n    address indexed delegate, \n    uint256 previousBalance, \n    uint256 newBalance\n    );\n\n    /**\n     * Event triggered when an account delegates to another account.\n     *\n     * Note: the event is always emitted from `GovernanceVotePower`.\n     */\n    event DelegateChanged(\n    address indexed delegator, \n    address indexed fromDelegate, \n    address indexed toDelegate\n    );\n\n    /**\n     * Update vote powers when tokens are transferred.\n     **/\n    function updateAtTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _fromBalance,\n        uint256 _toBalance,\n        uint256 _amount\n    ) external;\n\n    /**\n     * Set the cleanup block number.\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\n     * history before that block should never be used since it can be inconsistent.\n     * In particular, cleanup block number must be before current vote power block.\n     * @param _blockNumber The new cleanup block number.\n     */\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\n\n    /**\n     * Set the contract that is allowed to call history cleaning methods.\n     */\n    function setCleanerContract(address _cleanerContract) external;\n\n    /**\n     * @notice Get the token that this governance vote power contract belongs to.\n     */\n    function ownerToken() external view returns (IVPToken);\n\n    function getCleanupBlockNumber() external view returns(uint256);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../userInterfaces/IVPToken.sol\";\nimport \"../../userInterfaces/IVPContractEvents.sol\";\nimport \"./IICleanable.sol\";\n\ninterface IIVPContract is IICleanable, IVPContractEvents {\n    /**\n     * Update vote powers when tokens are transferred.\n     * Also update delegated vote powers for percentage delegation\n     * and check for enough funds for explicit delegations.\n     **/\n    function updateAtTokenTransfer(\n        address _from, \n        address _to, \n        uint256 _fromBalance,\n        uint256 _toBalance,\n        uint256 _amount\n    ) external;\n\n    /**\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\n     * @param _from The address of the delegator\n     * @param _to The address of the recipient\n     * @param _balance The delegator's current balance\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).\n     **/\n    function delegate(\n        address _from, \n        address _to, \n        uint256 _balance, \n        uint256 _bips\n    ) external;\n    \n    /**\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\n     * @param _from The address of the delegator\n     * @param _to The address of the recipient\n     * @param _balance The delegator's current balance\n     * @param _amount An explicit vote power amount to be delegated.\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\n     **/    \n    function delegateExplicit(\n        address _from, \n        address _to, \n        uint256 _balance, \n        uint _amount\n    ) external;    \n\n    /**\n     * @notice Revoke all delegation from sender to `_who` at given block. \n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\n     *    Block `_blockNumber` must be in the past. \n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\n     * @param _from The address of the delegator\n     * @param _who Address of the delegatee\n     * @param _balance The delegator's current balance\n     * @param _blockNumber The block number at which to revoke delegation.\n     **/\n    function revokeDelegationAt(\n        address _from, \n        address _who, \n        uint256 _balance,\n        uint _blockNumber\n    ) external;\n    \n        /**\n     * @notice Undelegate all voting power for delegates of `msg.sender`\n     *    Can only be used with percentage delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     * @param _from The address of the delegator\n     **/\n    function undelegateAll(\n        address _from,\n        uint256 _balance\n    ) external;\n    \n    /**\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\n     *    Can only be used with explicit delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     * @param _from The address of the delegator\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \n     *   so the caller must supply them.\n     * @return The amount still delegated (in case the list of delegates was incomplete).\n     */\n    function undelegateAllExplicit(\n        address _from, \n        address[] memory _delegateAddresses\n    ) external returns (uint256);\n    \n    /**\n    * @notice Get the vote power of `_who` at block `_blockNumber`\n    *   Reads/updates cache and upholds revocations.\n    * @param _who The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_who` at `_blockNumber`.\n    */\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\n    \n    /**\n     * @notice Get the current vote power of `_who`.\n     * @param _who The address to get voting power.\n     * @return Current vote power of `_who`.\n     */\n    function votePowerOf(address _who) external view returns(uint256);\n    \n    /**\n    * @notice Get the vote power of `_who` at block `_blockNumber`\n    * @param _who The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_who` at `_blockNumber`.\n    */\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\n\n    /**\n     * Return vote powers for several addresses in a batch.\n     * @param _owners The list of addresses to fetch vote power of.\n     * @param _blockNumber The block number at which to fetch.\n     * @return A list of vote powers.\n     */    \n    function batchVotePowerOfAt(\n        address[] memory _owners, \n        uint256 _blockNumber\n    )\n        external view returns(uint256[] memory);\n\n    /**\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\n    * @param _from Address of delegator\n    * @param _to Address of delegatee\n    * @param _balance The delegator's current balance\n    * @return The delegated vote power.\n    */\n    function votePowerFromTo(\n        address _from, \n        address _to, \n        uint256 _balance\n    ) external view returns(uint256);\n    \n    /**\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\n    * @param _from Address of delegator\n    * @param _to Address of delegatee\n    * @param _balance The delegator's current balance\n    * @param _blockNumber The block number at which to fetch.\n    * @return The delegated vote power.\n    */\n    function votePowerFromToAt(\n        address _from, \n        address _to, \n        uint256 _balance,\n        uint _blockNumber\n    ) external view returns(uint256);\n\n    /**\n     * @notice Compute the current undelegated vote power of `_owner`\n     * @param _owner The address to get undelegated voting power.\n     * @param _balance Owner's current balance\n     * @return The unallocated vote power of `_owner`\n     */\n    function undelegatedVotePowerOf(\n        address _owner,\n        uint256 _balance\n    ) external view returns(uint256);\n\n    /**\n     * @notice Get the undelegated vote power of `_owner` at given block.\n     * @param _owner The address to get undelegated voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\n     */\n    function undelegatedVotePowerOfAt(\n        address _owner, \n        uint256 _balance,\n        uint256 _blockNumber\n    ) external view returns(uint256);\n\n    /**\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\n     *  allocated by percentage or by explicit value.\n     * @param _who The address to get delegation mode.\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\n     */\n    function delegationModeOf(address _who) external view returns (uint256);\n    \n    /**\n    * @notice Get the vote power delegation `_delegateAddresses` \n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\n    * @param _owner The address to get delegations.\n    * @return _delegateAddresses Positional array of delegation addresses.\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n    * @return _count The number of delegates.\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n    */\n    function delegatesOf(\n        address _owner\n    )\n        external view \n        returns (\n            address[] memory _delegateAddresses, \n            uint256[] memory _bips,\n            uint256 _count,\n            uint256 _delegationMode\n        );\n\n    /**\n    * @notice Get the vote power delegation `delegationAddresses` \n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\n    * @param _owner The address to get delegations.\n    * @param _blockNumber The block for which we want to know the delegations.\n    * @return _delegateAddresses Positional array of delegation addresses.\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n    * @return _count The number of delegates.\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n    */\n    function delegatesOfAt(\n        address _owner,\n        uint256 _blockNumber\n    )\n        external view \n        returns (\n            address[] memory _delegateAddresses, \n            uint256[] memory _bips,\n            uint256 _count,\n            uint256 _delegationMode\n        );\n\n    /**\n     * The VPToken (or some other contract) that owns this VPContract.\n     * All state changing methods may be called only from this address.\n     * This is because original msg.sender is sent in `_from` parameter\n     * and we must be sure that it cannot be faked by directly calling VPContract.\n     * Owner token is also used in case of replacement to recover vote powers from balances.\n     */\n    function ownerToken() external view returns (IVPToken);\n    \n    /**\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\n     * It means that vote powers are not necessarily correct at the initialization, therefore\n     * every method that reads vote power must check whether it is initialized for that address and block.\n     */\n    function isReplacement() external view returns (bool);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../userInterfaces/IVPToken.sol\";\nimport \"../../../../governance/userInterfaces/IGovernanceVotePower.sol\";\nimport \"./IIVPContract.sol\";\nimport \"./IIGovernanceVotePower.sol\";\nimport \"./IICleanable.sol\";\n\ninterface IIVPToken is IVPToken, IICleanable {\n    /**\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\n     * and delegate governance vote power. \n     */\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\n    \n    /**\n    * @notice Get the total vote power at block `_blockNumber` using cache.\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \n    * @param _blockNumber The block number at which to fetch.\n    * @return The total vote power at the block (sum of all accounts' vote powers).\n    */\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\n    \n    /**\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \n    * @param _owner The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_owner` at `_blockNumber`.\n    */\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\n\n    /**\n     * Return vote powers for several addresses in a batch.\n     * @param _owners The list of addresses to fetch vote power of.\n     * @param _blockNumber The block number at which to fetch.\n     * @return A list of vote powers.\n     */    \n    function batchVotePowerOfAt(\n        address[] memory _owners, \n        uint256 _blockNumber\n    ) external view returns(uint256[] memory);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IVPContractEvents {\n    /**\n     * Event triggered when an account delegates or undelegates another account. \n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\n     * For undelegation, `newVotePower` is 0.\n     *\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\n     */\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\n    \n    /**\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\n     * for a single block in the past (typically the current vote block).\n     *\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\n     */\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../../governance/userInterfaces/IGovernanceVotePower.sol\";\nimport \"./IVPContractEvents.sol\";\n\ninterface IVPToken is IERC20 {\n    /**\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\n     * @param _to The address of the recipient\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\n     **/\n    function delegate(address _to, uint256 _bips) external;\n    \n    /**\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\n     * @param _to The address of the recipient\n     * @param _amount An explicit vote power amount to be delegated.\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\n     **/    \n    function delegateExplicit(address _to, uint _amount) external;\n\n    /**\n    * @notice Revoke all delegation from sender to `_who` at given block. \n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\n    *    Block `_blockNumber` must be in the past. \n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\n    * @param _who Address of the delegatee\n    * @param _blockNumber The block number at which to revoke delegation.\n    */\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\n    \n    /**\n     * @notice Undelegate all voting power for delegates of `msg.sender`\n     *    Can only be used with percentage delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     **/\n    function undelegateAll() external;\n    \n    /**\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\n     *    Can only be used with explicit delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \n     *   so the caller must supply them.\n     * @return The amount still delegated (in case the list of delegates was incomplete).\n     */\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\n\n\n    /**\n     * @dev Should be compatible with ERC20 method\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Should be compatible with ERC20 method\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Should be compatible with ERC20 method\n     */\n    function decimals() external view returns (uint8);\n    \n\n    /**\n     * @notice Total amount of tokens at a specific `_blockNumber`.\n     * @param _blockNumber The block number when the totalSupply is queried\n     * @return The total amount of tokens at `_blockNumber`\n     **/\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\n\n    /**\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\n     * @param _owner The address from which the balance will be retrieved.\n     * @param _blockNumber The block number when the balance is queried.\n     * @return The balance at `_blockNumber`.\n     **/\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\n\n    \n    /**\n     * @notice Get the current total vote power.\n     * @return The current total vote power (sum of all accounts' vote powers).\n     */\n    function totalVotePower() external view returns(uint256);\n    \n    /**\n    * @notice Get the total vote power at block `_blockNumber`\n    * @param _blockNumber The block number at which to fetch.\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\n    */\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\n\n    /**\n     * @notice Get the current vote power of `_owner`.\n     * @param _owner The address to get voting power.\n     * @return Current vote power of `_owner`.\n     */\n    function votePowerOf(address _owner) external view returns(uint256);\n    \n    /**\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\n    * @param _owner The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_owner` at `_blockNumber`.\n    */\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\n\n\n    /**\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \n     *  it never changes, even if all delegations are removed.\n     * @param _who The address to get delegation mode.\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\n     */\n    function delegationModeOf(address _who) external view returns(uint256);\n        \n    /**\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\n    * @param _from Address of delegator\n    * @param _to Address of delegatee\n    * @return The delegated vote power.\n    */\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\n    \n    /**\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\n    * @param _from Address of delegator\n    * @param _to Address of delegatee\n    * @param _blockNumber The block number at which to fetch.\n    * @return The delegated vote power.\n    */\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\n    \n    /**\n     * @notice Compute the current undelegated vote power of `_owner`\n     * @param _owner The address to get undelegated voting power.\n     * @return The unallocated vote power of `_owner`\n     */\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\n    \n    /**\n     * @notice Get the undelegated vote power of `_owner` at given block.\n     * @param _owner The address to get undelegated voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\n     */\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\n    \n    /**\n    * @notice Get the vote power delegation `delegationAddresses` \n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\n    * @param _who The address to get delegations.\n    * @return _delegateAddresses Positional array of delegation addresses.\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n    * @return _count The number of delegates.\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n    */\n    function delegatesOf(address _who)\n        external view \n        returns (\n            address[] memory _delegateAddresses,\n            uint256[] memory _bips,\n            uint256 _count, \n            uint256 _delegationMode\n        );\n        \n    /**\n    * @notice Get the vote power delegation `delegationAddresses` \n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\n    * @param _who The address to get delegations.\n    * @param _blockNumber The block for which we want to know the delegations.\n    * @return _delegateAddresses Positional array of delegation addresses.\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n    * @return _count The number of delegates.\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n    */\n    function delegatesOfAt(address _who, uint256 _blockNumber)\n        external view \n        returns (\n            address[] memory _delegateAddresses, \n            uint256[] memory _bips, \n            uint256 _count, \n            uint256 _delegationMode\n        );\n\n    /**\n     * Returns VPContract used for readonly operations (view methods).\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\n     *\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\n     * except during upgrade from one VPContract to a new version (which should happen\n     * rarely or never and will be anounced before).\n     *\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\n     * via VPToken (and state changing methods are forbidden from direct calls). \n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\n     * for listening to events (`Revoke` only).\n     */\n    function readVotePowerContract() external view returns (IVPContractEvents);\n\n    /**\n     * Returns VPContract used for state changing operations (non-view methods).\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\n     *\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\n     * except during upgrade from one VPContract to a new version (which should happen\n     * rarely or never and will be anounced before). In the case of upgrade,\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\n     *\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\n     * via VPToken (and state changing methods are forbidden from direct calls). \n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\n     * for listening to events (`Delegate` and `Revoke` only).\n     */\n    function writeVotePowerContract() external view returns (IVPContractEvents);\n    \n    /**\n     * When set, allows token owners to participate in governance voting\n     * and delegate governance vote power.\n     */\n    function governanceVotePower() external view returns (IGovernanceVotePower);\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IWNat {\n    /**\n     * @notice Deposit native token and mint WNAT ERC20.\n     */\n    function deposit() external payable;\n\n    /**\n     * @notice Withdraw native token and burn WNAT ERC20.\n     * @param _amount The amount to withdraw.\n     */\n    function withdraw(uint256 _amount) external;\n    \n    /**\n     * @notice Deposit native token from msg.sender and mint WNAT ERC20.\n     * @param _recipient An address to receive minted WNAT.\n     */\n    function depositTo(address _recipient) external payable;\n    \n    /**\n     * @notice Withdraw WNAT from an owner and send NAT to msg.sender given an allowance.\n     * @param _owner An address spending the native tokens.\n     * @param _amount The amount to spend.\n     *\n     * Requirements:\n     *\n     * - `_owner` must have a balance of at least `_amount`.\n     * - the caller must have allowance for `_owners`'s tokens of at least\n     * `_amount`.\n     */\n    function withdrawFrom(address _owner, uint256 _amount) external;\n}\n"},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\ninterface IFlareContractRegistry {\n    /**\n     * @notice Returns contract address for the given name - might be address(0)\n     * @param _name             name of the contract\n     */\n    function getContractAddressByName(string calldata _name) external view returns(address);\n\n    /**\n     * @notice Returns contract address for the given name hash - might be address(0)\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\n     */\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\n\n    /**\n     * @notice Returns contract addresses for the given names - might be address(0)\n     * @param _names            names of the contracts\n     */\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\n\n    /**\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\n     */\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\n\n    /**\n     * @notice Returns all contract names and corresponding addresses\n     */\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/FirelinkBridge.sol":{"content":"// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.15;\n\n// import \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { ERC165Checker } from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IFlareRelayer } from \"./IFlareRelayer.sol\";\nimport { FirelinkMintableERC20 } from './FirelinkMintableERC20.sol';\nimport { IFirelinkMintableERC20, ILegacyMintableERC20 } from './IFirelinkMintableERC20.sol';\nimport { IEVMTransactionVerification } from \"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol\";\nimport { EVMTransaction } from \"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol\";\nimport { FlareContractsRegistryLibrary } from \"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol\";\n\ncontract FirelinkBridge is Initializable, OwnableUpgradeable, UUPSUpgradeable {\n    using SafeERC20 for IERC20;\n\n    uint32 internal constant RECEIVE_DEFAULT_GAS_LIMIT = 200_000;\n\n    IFlareRelayer public  MESSENGER;\n    FirelinkBridge public  OTHER_BRIDGE;\n    TransactionInfo[] public transactions;\n\n    address private spacer_0_2_20;\n    address private spacer_1_0_20;\n    mapping(address => mapping(address => uint256)) public deposits;\n\n    uint256[47] private __gap;\n\n    IFirelinkMintableERC20 ethContract;\n    \n    \n    event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData);\n    event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData);\n    event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData);\n    event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData);\n\n    \n    \n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address initialOwner, address payable _messenger, address payable _otherBridge) initializer public {\n        // __Pausable_init();\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n        MESSENGER = IFlareRelayer(_messenger);\n        OTHER_BRIDGE = FirelinkBridge(_otherBridge);\n        super.transferOwnership(initialOwner);\n    }\n\n   \n\n    // function pause() public onlyOwner {\n    //     _pause();\n    // }\n\n    // function unpause() public onlyOwner {\n    //     _unpause();\n    // }\n\n    modifier onlyEOA() {\n        require(!Address.isContract(msg.sender), \"FirelinkBridge: function can only be called from an EOA\");\n        _;\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        onlyOwner\n        override\n    {}\n\n    receive() external payable {\n\n    }\n\n\n    function setEthERC20ContractAddress(address _ethAddress) public onlyOwner {\n        ethContract = IFirelinkMintableERC20(_ethAddress);\n    }\n\n\nfunction bridgeETH(uint32 _minGasLimit, bytes calldata _extraData) public payable onlyEOA {\n        _initiateBridgeETH(msg.sender, msg.sender, msg.value, _minGasLimit, _extraData);\n    }\n\n    function bridgeETHTo(address _to, uint32 _minGasLimit, bytes calldata _extraData) public payable {\n        _initiateBridgeETH(msg.sender, _to, msg.value, _minGasLimit, _extraData);\n    }\n\n    function bridgeERC20(\n        address _localToken,\n        address _remoteToken,\n        uint256 _amount,\n        uint32 _minGasLimit,\n        bytes calldata _extraData\n    )\n        public\n        virtual\n        onlyEOA\n    {\n        _initiateBridgeERC20(_localToken, _remoteToken, msg.sender, msg.sender, _amount, _minGasLimit, _extraData);\n    }\n\n    function bridgeERC20To(\n        address _localToken,\n        address _remoteToken,\n        address _to,\n        uint256 _amount,\n        uint32 _minGasLimit,\n        bytes calldata _extraData\n    )\n        public\n        virtual\n    {\n        _initiateBridgeERC20(_localToken, _remoteToken, msg.sender, _to, _amount, _minGasLimit, _extraData);\n    }\n\n    function finalizeBridgeETH(\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _extraData\n    )\n        public\n        payable\n        // onlyOtherBridge\n    {\n        // require(paused() == false, \"FirelinkBridge: paused\");\n        require(msg.value == _amount, \"FirelinkBridge: amount sent does not match amount required\");\n        require(_to != address(this), \"FirelinkBridge: cannot send to self\");\n        require(_to != address(MESSENGER), \"FirelinkBridge: cannot send to messenger\");\n        _emitETHBridgeFinalized(_from, _to, _amount, _extraData);\n\n        bool success = call(_to, gasleft(), _amount, hex\"\");\n        require(success, \"FirelinkBridge: ETH transfer failed\");\n    }\n\n    function finalizeBridgeERC20(\n        address _localToken,\n        address _remoteToken,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _extraData\n    )\n        public\n        // onlyOtherBridge\n    {\n        // require(paused() == false, \"FirelinkBridge: paused\");\n        if (_isFirelinkMintableERC20(_localToken)) {\n            require(\n                _isCorrectTokenPair(_localToken, _remoteToken),\n                \"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token\"\n            );\n\n            FirelinkMintableERC20(_localToken).mint(_to, _amount);\n        } else {\n            deposits[_localToken][_remoteToken] = deposits[_localToken][_remoteToken] - _amount;\n            IERC20(_localToken).safeTransfer(_to, _amount);\n        }\n\n        _emitERC20BridgeFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData);\n    }\n\n    function _initiateBridgeETH(\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint32 _minGasLimit,\n        bytes memory _extraData\n    )\n        internal\n    {\n        require(msg.value == _amount, \"FirelinkBridge: bridging ETH must include sufficient ETH value\");\n\n        _emitETHBridgeInitiated(_from, _to, _amount, _extraData);\n    }\n\n    function _initiateBridgeERC20(\n        address _localToken,\n        address _remoteToken,\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint32 _minGasLimit,\n        bytes memory _extraData\n    )\n        internal\n    {\n        if (_isFirelinkMintableERC20(_localToken)) {\n            require(\n                _isCorrectTokenPair(_localToken, _remoteToken),\n                \"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token\"\n            );\n\n            FirelinkMintableERC20(_localToken).burn(_from, _amount);\n        } else {\n            IERC20(_localToken).safeTransferFrom(_from, address(this), _amount);\n            deposits[_localToken][_remoteToken] = deposits[_localToken][_remoteToken] + _amount;\n        }\n\n        _emitERC20BridgeInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData);\n\n        // MESSENGER.sendMessage(\n        //     address(OTHER_BRIDGE),\n        //     abi.encodeWithSelector(\n        //         this.finalizeBridgeERC20.selector,\n        //         _remoteToken,\n        //         _localToken,\n        //         _from,\n        //         _to,\n        //         _amount,\n        //         _extraData\n        //     ),\n        //     _minGasLimit\n        // );\n    }\n\n    function _isFirelinkMintableERC20(address _token) internal view returns (bool) {\n        return ERC165Checker.supportsInterface(_token, type(ILegacyMintableERC20).interfaceId) ||\n            ERC165Checker.supportsInterface(_token, type(IFirelinkMintableERC20).interfaceId);\n    }\n\n    function _isCorrectTokenPair(address _mintableToken, address _otherToken) internal view returns (bool) {\n        if (ERC165Checker.supportsInterface(_mintableToken, type(ILegacyMintableERC20).interfaceId)) {\n            return _otherToken == ILegacyMintableERC20(_mintableToken).l1Token();\n        } else {\n            return _otherToken == IFirelinkMintableERC20(_mintableToken).remoteToken();\n        }\n    }\n\n    function _emitETHBridgeInitiated(\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _extraData\n    )\n        internal\n        virtual\n    {\n        emit ETHBridgeInitiated(_from, _to, _amount, _extraData);\n    }\n\n    function _emitETHBridgeFinalized(\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _extraData\n    )\n        internal\n        virtual\n    {\n        emit ETHBridgeFinalized(_from, _to, _amount, _extraData);\n    }\n\n    function _emitERC20BridgeInitiated(\n        address _localToken,\n        address _remoteToken,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _extraData\n    )\n        internal\n        virtual\n    {\n        emit ERC20BridgeInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData);\n    }\n\n    function _emitERC20BridgeFinalized(\n        address _localToken,\n        address _remoteToken,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _extraData\n    )\n        internal\n        virtual\n    {\n        emit ERC20BridgeFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData);\n    }\n\n    function call(address _target, uint256 _gas, uint256 _value, bytes memory _calldata) internal returns (bool) {\n        bool _success;\n        assembly {\n            _success :=\n                call(\n                    _gas, // gas\n                    _target, // recipient\n                    _value, // ether value\n                    add(_calldata, 32), // inloc\n                    mload(_calldata), // inlen\n                    0, // outloc\n                    0 // outlen\n                )\n        }\n        return _success;\n    }\n\n    struct EventInfo {\n        address sender;\n        address receiver;\n        uint256 value;\n        bytes data;\n    }\n\n    struct TransactionInfo {\n        EVMTransaction.Proof originalTransaction;\n        uint256 eventNumber;\n        EventInfo[] eventInfo;\n    }\n\n    function isEVMTransactionProofValid(\n        EVMTransaction.Proof calldata transaction\n    ) public view returns (bool) {\n        return FlareContractsRegistryLibrary\n                .auxiliaryGetIEVMTransactionVerification()\n                .verifyEVMTransaction(transaction);\n    }\n\n    function FinalizeBridgeAndReleaseEth(EVMTransaction.Proof calldata _transaction) external {\n        require(isEVMTransactionProofValid(_transaction), \"Invalid transaction proof\");\n\n        uint256 transactionIndex = transactions.length;\n        transactions.push();\n        transactions[transactionIndex].originalTransaction = _transaction;\n        transactions[transactionIndex].eventNumber = _transaction.data.responseBody.events.length;\n        EventInfo[] storage eventInfo = transactions[transactionIndex].eventInfo;\n        for(uint256 i = 0; i < _transaction.data.responseBody.events.length; i++) {\n            (address sender, address receiver, uint256 value, bytes memory data) = abi.decode(_transaction.data.responseBody.events[i].data, (address, address, uint256, bytes));\n            eventInfo.push(EventInfo({\n                sender: sender,\n                receiver: receiver,\n                value: value,\n                data: data\n            }));\n        }\n\n        ethContract.mint(eventInfo[0].receiver, eventInfo[0].value);\n    }\n\n    function getTransactionCount() external view returns (uint256) {\n        return transactions.length;\n    }\n\n    function getAllTransactions() external view returns (TransactionInfo[] memory) {\n        TransactionInfo[] memory result = new TransactionInfo[](transactions.length);\n        for(uint256 i = 0; i < transactions.length; i++) {\n            result[i] = transactions[i];\n        }\n        return result;\n    }\n\n}"},"contracts/FirelinkMintableERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport { ILegacyMintableERC20, IFirelinkMintableERC20 } from \"./IFirelinkMintableERC20.sol\";\nimport { ISemver } from \"./ISemver.sol\";\n\n/// @title FirelinkMintableERC20\n/// @notice FirelinkMintableERC20 is a standard extension of the base ERC20 token contract designed\n///         to allow the StandardBridge contracts to mint and burn tokens. This makes it possible to\n///         use an FirelinkMintableRC20 as the L2 representation of an L1 token, or vice-versa.\n///         Designed to be backwards compatible with the older StandardL2ERC20 token which was only\n///         meant for use on L2.\ncontract FirelinkMintableERC20 is IFirelinkMintableERC20, ILegacyMintableERC20, ERC20, ISemver {\n    /// @notice Address of the corresponding version of this token on the remote chain.\n    address public immutable REMOTE_TOKEN;\n\n    /// @notice Address of the StandardBridge on this network.\n    address public immutable BRIDGE;\n\n    /// @notice Decimals of the token\n    uint8 private immutable DECIMALS;\n\n    /// @notice Emitted whenever tokens are minted for an account.\n    /// @param account Address of the account tokens are being minted for.\n    /// @param amount  Amount of tokens minted.\n    event Mint(address indexed account, uint256 amount);\n\n    /// @notice Emitted whenever tokens are burned from an account.\n    /// @param account Address of the account tokens are being burned from.\n    /// @param amount  Amount of tokens burned.\n    event Burn(address indexed account, uint256 amount);\n\n    /// @notice A modifier that only allows the bridge to call\n    modifier onlyBridge() {\n        require(msg.sender == BRIDGE, \"FirelinkMintableERC20: only bridge can mint and burn\");\n        _;\n    }\n\n    /// @notice Semantic version.\n    /// @custom:semver 1.3.0\n    string public constant version = \"1.3.0\";\n\n    /// @param _bridge      Address of the L2 standard bridge.\n    /// @param _remoteToken Address of the corresponding L1 token.\n    /// @param _name        ERC20 name.\n    /// @param _symbol      ERC20 symbol.\n    constructor(\n        address _bridge,\n        address _remoteToken,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    )\n        ERC20(_name, _symbol)\n    {\n        REMOTE_TOKEN = _remoteToken;\n        BRIDGE = _bridge;\n        DECIMALS = _decimals;\n    }\n\n    /// @notice Allows the StandardBridge on this network to mint tokens.\n    /// @param _to     Address to mint tokens to.\n    /// @param _amount Amount of tokens to mint.\n    function mint(\n        address _to,\n        uint256 _amount\n    )\n        external\n        virtual\n        override(IFirelinkMintableERC20, ILegacyMintableERC20)\n        onlyBridge\n    {\n        _mint(_to, _amount);\n        emit Mint(_to, _amount);\n    }\n\n    /// @notice Allows the StandardBridge on this network to burn tokens.\n    /// @param _from   Address to burn tokens from.\n    /// @param _amount Amount of tokens to burn.\n    function burn(\n        address _from,\n        uint256 _amount\n    )\n        external\n        virtual\n        override(IFirelinkMintableERC20, ILegacyMintableERC20)\n        onlyBridge\n    {\n        _burn(_from, _amount);\n        emit Burn(_from, _amount);\n    }\n\n    /// @notice ERC165 interface check function.\n    /// @param _interfaceId Interface ID to check.\n    /// @return Whether or not the interface is supported by this contract.\n    function supportsInterface(bytes4 _interfaceId) external pure virtual returns (bool) {\n        bytes4 iface1 = type(IERC165).interfaceId;\n        // Interface corresponding to the legacy L2StandardERC20.\n        bytes4 iface2 = type(ILegacyMintableERC20).interfaceId;\n        // Interface corresponding to the updated FirelinkMintableERC20 (this contract).\n        bytes4 iface3 = type(IFirelinkMintableERC20).interfaceId;\n        return _interfaceId == iface1 || _interfaceId == iface2 || _interfaceId == iface3;\n    }\n\n    /// @custom:legacy\n    /// @notice Legacy getter for the remote token. Use REMOTE_TOKEN going forward.\n    function l1Token() public view returns (address) {\n        return REMOTE_TOKEN;\n    }\n\n    /// @custom:legacy\n    /// @notice Legacy getter for the bridge. Use BRIDGE going forward.\n    function l2Bridge() public view returns (address) {\n        return BRIDGE;\n    }\n\n    /// @custom:legacy\n    /// @notice Legacy getter for REMOTE_TOKEN.\n    function remoteToken() public view returns (address) {\n        return REMOTE_TOKEN;\n    }\n\n    /// @custom:legacy\n    /// @notice Legacy getter for BRIDGE.\n    function bridge() public view returns (address) {\n        return BRIDGE;\n    }\n\n    /// @dev Returns the number of decimals used to get its user representation.\n    /// For example, if `decimals` equals `2`, a balance of `505` tokens should\n    /// be displayed to a user as `5.05` (`505 / 10 ** 2`).\n    /// NOTE: This information is only used for _display_ purposes: it in\n    /// no way affects any of the arithmetic of the contract, including\n    /// {IERC20-balanceOf} and {IERC20-transfer}.\n    function decimals() public view override returns (uint8) {\n        return DECIMALS;\n    }\n}"},"contracts/IFirelinkMintableERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/// @title IFirelinkMintableERC20\n/// @notice This interface is available on the FirelinkMintableERC20 contract.\n///         We declare it as a separate interface so that it can be used in\n///         custom implementations of FirelinkMintableERC20.\ninterface IFirelinkMintableERC20 is IERC165 {\n    function remoteToken() external view returns (address);\n\n    function bridge() external returns (address);\n\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n}\n\n/// @custom:legacy\n/// @title ILegacyMintableERC20\n/// @notice This interface was available on the legacy L2StandardERC20 contract.\n///         It remains available on the FirelinkMintableERC20 contract for\n///         backwards compatibility.\ninterface ILegacyMintableERC20 is IERC165 {\n    function l1Token() external view returns (address);\n\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n}"},"contracts/IFlareRelayer.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface IFlareRelayer {\n    function requestRelay(address _relayTarget, bytes memory _additionalCalldata, address _sourceToken, uint256 _amount) external;\n}"},"contracts/ISemver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title ISemver\n/// @notice ISemver is a simple contract for ensuring that contracts are\n///         versioned using semantic versioning.\ninterface ISemver {\n    /// @notice Getter for the semantic version of the contract. This is not\n    ///         meant to be used onchain but instead meant to be used by offchain\n    ///         tooling.\n    /// @return Semver contract version as a string.\n    function version() external view returns (string memory);\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/FirelinkBridge.sol:177:9:\n    |\n177 |         uint32 _minGasLimit,\n    |         ^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":6395,"file":"contracts/FirelinkBridge.sol","start":6376},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/FirelinkBridge.sol:193:9:\n    |\n193 |         uint32 _minGasLimit,\n    |         ^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":6827,"file":"contracts/FirelinkBridge.sol","start":6808},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> @flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol:126:1:\n    |\n126 | function auxiliaryGetIEVMTransactionVerification() internal view returns(IEVMTransactionVerification){\n    | ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":5193,"file":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol","start":5008},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> @flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol:133:1:\n    |\n133 | function auxiliaryGetIAddressValidityVerification() internal view returns(IAddressValidityVerification){\n    | ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":5461,"file":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol","start":5273},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> @flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol:140:1:\n    |\n140 | function auxiliaryGetIBalanceDecreasingTransactionVerification() internal view returns(IBalanceDecreasingTransactionVerification){\n    | ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":5768,"file":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol","start":5541},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> @flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol:147:1:\n    |\n147 | function auxiliaryGetIConfirmedBlockHeightExistsVerification() internal view returns(IConfirmedBlockHeightExistsVerification){\n    | ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":6069,"file":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol","start":5848},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> @flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol:154:1:\n    |\n154 | function auxiliaryGetIPaymentVerification() internal view returns(IPaymentVerification){\n    | ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":6313,"file":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol","start":6149},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> @flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol:161:1:\n    |\n161 | function auxiliaryGetIReferencedPaymentNonexistenceVerification() internal view returns(IReferencedPaymentNonexistenceVerification){\n    | ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":6623,"file":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol","start":6393},"type":"Warning"}],"sources":{"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol","exportedSymbols":{"IERC20":[4654],"IFtso":[438],"IFtsoGenesis":[207],"IGovernanceVotePower":[1272],"IICleanable":[2052],"IIFtso":[170],"IIGovernanceVotePower":[2115],"IIVPContract":[2337],"IIVPToken":[2386],"IVPContractEvents":[2411],"IVPToken":[2628]},"id":171,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:0"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol","file":"../../genesis/interface/IFtsoGenesis.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":171,"sourceUnit":208,"src":"63:50:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol","file":"../../userInterfaces/IFtso.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":171,"sourceUnit":439,"src":"114:40:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol","file":"../../../util-contracts/token/token/interface/IIVPToken.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":171,"sourceUnit":2387,"src":"155:69:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5,"name":"IFtso","nameLocations":["247:5:0"],"nodeType":"IdentifierPath","referencedDeclaration":438,"src":"247:5:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"247:5:0"},{"baseName":{"id":7,"name":"IFtsoGenesis","nameLocations":["254:12:0"],"nodeType":"IdentifierPath","referencedDeclaration":207,"src":"254:12:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"254:12:0"}],"canonicalName":"IIFtso","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":170,"linearizedBaseContracts":[170,207,438],"name":"IIFtso","nameLocation":"237:6:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"274:357:0","text":"function finalizePriceReveal\n called by reward manager only on correct timing.\n if price reveal period for epoch x ended. finalize.\n iterate list of price submissions\n find weighted median\n find adjucant 50% of price submissions.\n Allocate reward for any price submission which is same as a \"winning\" submission"},"functionSelector":"40462a2d","id":24,"implemented":false,"kind":"function","modifiers":[],"name":"finalizePriceEpoch","nameLocation":"645:18:0","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"_epochId","nameLocation":"672:8:0","nodeType":"VariableDeclaration","scope":24,"src":"664:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10,"name":"uint256","nodeType":"ElementaryTypeName","src":"664:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":13,"mutability":"mutable","name":"_returnRewardData","nameLocation":"687:17:0","nodeType":"VariableDeclaration","scope":24,"src":"682:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12,"name":"bool","nodeType":"ElementaryTypeName","src":"682:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"663:42:0"},"returnParameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"mutability":"mutable","name":"_eligibleAddresses","nameLocation":"761:18:0","nodeType":"VariableDeclaration","scope":24,"src":"744:35:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"744:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":16,"nodeType":"ArrayTypeName","src":"744:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":20,"mutability":"mutable","name":"_natWeights","nameLocation":"810:11:0","nodeType":"VariableDeclaration","scope":24,"src":"793:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":18,"name":"uint256","nodeType":"ElementaryTypeName","src":"793:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":19,"nodeType":"ArrayTypeName","src":"793:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":22,"mutability":"mutable","name":"_totalNatWeight","nameLocation":"843:15:0","nodeType":"VariableDeclaration","scope":24,"src":"835:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":21,"name":"uint256","nodeType":"ElementaryTypeName","src":"835:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"730:138:0"},"scope":170,"src":"636:233:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4afd5102","id":29,"implemented":false,"kind":"function","modifiers":[],"name":"fallbackFinalizePriceEpoch","nameLocation":"884:26:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"_epochId","nameLocation":"919:8:0","nodeType":"VariableDeclaration","scope":29,"src":"911:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"911:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"910:18:0"},"returnParameters":{"id":28,"nodeType":"ParameterList","parameters":[],"src":"937:0:0"},"scope":170,"src":"875:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"974d7a6b","id":34,"implemented":false,"kind":"function","modifiers":[],"name":"forceFinalizePriceEpoch","nameLocation":"953:23:0","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"_epochId","nameLocation":"985:8:0","nodeType":"VariableDeclaration","scope":34,"src":"977:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":30,"name":"uint256","nodeType":"ElementaryTypeName","src":"977:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"976:18:0"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1003:0:0"},"scope":170,"src":"944:60:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2f0a6f3c","id":43,"implemented":false,"kind":"function","modifiers":[],"name":"activateFtso","nameLocation":"1133:12:0","nodeType":"FunctionDefinition","parameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"_firstEpochStartTs","nameLocation":"1163:18:0","nodeType":"VariableDeclaration","scope":43,"src":"1155:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":35,"name":"uint256","nodeType":"ElementaryTypeName","src":"1155:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"_submitPeriodSeconds","nameLocation":"1199:20:0","nodeType":"VariableDeclaration","scope":43,"src":"1191:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"1191:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":40,"mutability":"mutable","name":"_revealPeriodSeconds","nameLocation":"1237:20:0","nodeType":"VariableDeclaration","scope":43,"src":"1229:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":39,"name":"uint256","nodeType":"ElementaryTypeName","src":"1229:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1145:118:0"},"returnParameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1272:0:0"},"scope":170,"src":"1124:149:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"555989da","id":46,"implemented":false,"kind":"function","modifiers":[],"name":"deactivateFtso","nameLocation":"1288:14:0","nodeType":"FunctionDefinition","parameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"1302:2:0"},"returnParameters":{"id":45,"nodeType":"ParameterList","parameters":[],"src":"1313:0:0"},"scope":170,"src":"1279:35:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"306ba253","id":53,"implemented":false,"kind":"function","modifiers":[],"name":"updateInitialPrice","nameLocation":"1392:18:0","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"_initialPriceUSD","nameLocation":"1419:16:0","nodeType":"VariableDeclaration","scope":53,"src":"1411:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":47,"name":"uint256","nodeType":"ElementaryTypeName","src":"1411:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":50,"mutability":"mutable","name":"_initialPriceTimestamp","nameLocation":"1445:22:0","nodeType":"VariableDeclaration","scope":53,"src":"1437:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49,"name":"uint256","nodeType":"ElementaryTypeName","src":"1437:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1410:58:0"},"returnParameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1477:0:0"},"scope":170,"src":"1383:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"5a3c9d8e","id":75,"implemented":false,"kind":"function","modifiers":[],"name":"configureEpochs","nameLocation":"1493:15:0","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55,"mutability":"mutable","name":"_maxVotePowerNatThresholdFraction","nameLocation":"1526:33:0","nodeType":"VariableDeclaration","scope":75,"src":"1518:41:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":54,"name":"uint256","nodeType":"ElementaryTypeName","src":"1518:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":57,"mutability":"mutable","name":"_maxVotePowerAssetThresholdFraction","nameLocation":"1577:35:0","nodeType":"VariableDeclaration","scope":75,"src":"1569:43:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56,"name":"uint256","nodeType":"ElementaryTypeName","src":"1569:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"_lowAssetUSDThreshold","nameLocation":"1630:21:0","nodeType":"VariableDeclaration","scope":75,"src":"1622:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":61,"mutability":"mutable","name":"_highAssetUSDThreshold","nameLocation":"1669:22:0","nodeType":"VariableDeclaration","scope":75,"src":"1661:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":60,"name":"uint256","nodeType":"ElementaryTypeName","src":"1661:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63,"mutability":"mutable","name":"_highAssetTurnoutThresholdBIPS","nameLocation":"1709:30:0","nodeType":"VariableDeclaration","scope":75,"src":"1701:38:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":62,"name":"uint256","nodeType":"ElementaryTypeName","src":"1701:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"_lowNatTurnoutThresholdBIPS","nameLocation":"1757:27:0","nodeType":"VariableDeclaration","scope":75,"src":"1749:35:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":64,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"_elasticBandRewardBIPS","nameLocation":"1802:22:0","nodeType":"VariableDeclaration","scope":75,"src":"1794:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":66,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":69,"mutability":"mutable","name":"_elasticBandWidthPPM","nameLocation":"1842:20:0","nodeType":"VariableDeclaration","scope":75,"src":"1834:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":68,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":72,"mutability":"mutable","name":"_trustedAddresses","nameLocation":"1889:17:0","nodeType":"VariableDeclaration","scope":75,"src":"1872:34:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"1872:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":71,"nodeType":"ArrayTypeName","src":"1872:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1508:404:0"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"1921:0:0"},"scope":170,"src":"1484:438:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d0d552dd","id":81,"implemented":false,"kind":"function","modifiers":[],"name":"setAsset","nameLocation":"1937:8:0","nodeType":"FunctionDefinition","parameters":{"id":79,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"_asset","nameLocation":"1956:6:0","nodeType":"VariableDeclaration","scope":81,"src":"1946:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIVPToken_$2386","typeString":"contract IIVPToken"},"typeName":{"id":77,"nodeType":"UserDefinedTypeName","pathNode":{"id":76,"name":"IIVPToken","nameLocations":["1946:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":2386,"src":"1946:9:0"},"referencedDeclaration":2386,"src":"1946:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IIVPToken_$2386","typeString":"contract IIVPToken"}},"visibility":"internal"}],"src":"1945:18:0"},"returnParameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"1972:0:0"},"scope":170,"src":"1928:45:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"131fdee2","id":88,"implemented":false,"kind":"function","modifiers":[],"name":"setAssetFtsos","nameLocation":"1988:13:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"_assetFtsos","nameLocation":"2018:11:0","nodeType":"VariableDeclaration","scope":88,"src":"2002:27:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_memory_ptr","typeString":"contract IIFtso[]"},"typeName":{"baseType":{"id":83,"nodeType":"UserDefinedTypeName","pathNode":{"id":82,"name":"IIFtso","nameLocations":["2002:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"2002:6:0"},"referencedDeclaration":170,"src":"2002:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"id":84,"nodeType":"ArrayTypeName","src":"2002:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_storage_ptr","typeString":"contract IIFtso[]"}},"visibility":"internal"}],"src":"2001:29:0"},"returnParameters":{"id":87,"nodeType":"ParameterList","parameters":[],"src":"2039:0:0"},"scope":170,"src":"1979:61:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e536f396","id":93,"implemented":false,"kind":"function","modifiers":[],"name":"setVotePowerBlock","nameLocation":"2219:17:0","nodeType":"FunctionDefinition","parameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"_blockNumber","nameLocation":"2245:12:0","nodeType":"VariableDeclaration","scope":93,"src":"2237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":89,"name":"uint256","nodeType":"ElementaryTypeName","src":"2237:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2236:22:0"},"returnParameters":{"id":92,"nodeType":"ParameterList","parameters":[],"src":"2267:0:0"},"scope":170,"src":"2210:58:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f670ebe3","id":100,"implemented":false,"kind":"function","modifiers":[],"name":"initializeCurrentEpochStateForReveal","nameLocation":"2283:36:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"_circulatingSupplyNat","nameLocation":"2328:21:0","nodeType":"VariableDeclaration","scope":100,"src":"2320:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":94,"name":"uint256","nodeType":"ElementaryTypeName","src":"2320:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"_fallbackMode","nameLocation":"2356:13:0","nodeType":"VariableDeclaration","scope":100,"src":"2351:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":96,"name":"bool","nodeType":"ElementaryTypeName","src":"2351:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2319:51:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"2379:0:0"},"scope":170,"src":"2274:106:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"2388:55:0","text":" @notice Returns ftso manager address"},"functionSelector":"11a7aaaa","id":106,"implemented":false,"kind":"function","modifiers":[],"name":"ftsoManager","nameLocation":"2457:11:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[],"src":"2468:2:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":106,"src":"2494:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:9:0"},"scope":170,"src":"2448:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":107,"nodeType":"StructuredDocumentation","src":"2509:103:0","text":" @notice Returns the FTSO asset\n @dev Asset is null in case of multi-asset FTSO"},"functionSelector":"5c222bad","id":113,"implemented":false,"kind":"function","modifiers":[],"name":"getAsset","nameLocation":"2626:8:0","nodeType":"FunctionDefinition","parameters":{"id":108,"nodeType":"ParameterList","parameters":[],"src":"2634:2:0"},"returnParameters":{"id":112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":113,"src":"2660:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIVPToken_$2386","typeString":"contract IIVPToken"},"typeName":{"id":110,"nodeType":"UserDefinedTypeName","pathNode":{"id":109,"name":"IIVPToken","nameLocations":["2660:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":2386,"src":"2660:9:0"},"referencedDeclaration":2386,"src":"2660:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IIVPToken_$2386","typeString":"contract IIVPToken"}},"visibility":"internal"}],"src":"2659:11:0"},"scope":170,"src":"2617:54:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"2677:118:0","text":" @notice Returns the Asset FTSOs\n @dev AssetFtsos is not null only in case of multi-asset FTSO"},"functionSelector":"18931c35","id":121,"implemented":false,"kind":"function","modifiers":[],"name":"getAssetFtsos","nameLocation":"2809:13:0","nodeType":"FunctionDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[],"src":"2822:2:0"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":121,"src":"2848:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_memory_ptr","typeString":"contract IIFtso[]"},"typeName":{"baseType":{"id":117,"nodeType":"UserDefinedTypeName","pathNode":{"id":116,"name":"IIFtso","nameLocations":["2848:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"2848:6:0"},"referencedDeclaration":170,"src":"2848:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"id":118,"nodeType":"ArrayTypeName","src":"2848:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_storage_ptr","typeString":"contract IIFtso[]"}},"visibility":"internal"}],"src":"2847:17:0"},"scope":170,"src":"2800:65:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"2871:1071:0","text":" @notice Returns current configuration of epoch state\n @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\n @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\n @return _lowAssetUSDThreshold            Threshold for low asset vote power\n @return _highAssetUSDThreshold           Threshold for high asset vote power\n @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\n @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\n @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \nelastic band (prices within _elasticBandWidthPPM of the median) \nand 10000 - elasticBandRewardBIPS to the IQR \n @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\n @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved"},"functionSelector":"e3749e0c","id":144,"implemented":false,"kind":"function","modifiers":[],"name":"epochsConfiguration","nameLocation":"3956:19:0","nodeType":"FunctionDefinition","parameters":{"id":123,"nodeType":"ParameterList","parameters":[],"src":"3975:2:0"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":125,"mutability":"mutable","name":"_maxVotePowerNatThresholdFraction","nameLocation":"4031:33:0","nodeType":"VariableDeclaration","scope":144,"src":"4023:41:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":124,"name":"uint256","nodeType":"ElementaryTypeName","src":"4023:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":127,"mutability":"mutable","name":"_maxVotePowerAssetThresholdFraction","nameLocation":"4086:35:0","nodeType":"VariableDeclaration","scope":144,"src":"4078:43:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":126,"name":"uint256","nodeType":"ElementaryTypeName","src":"4078:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":129,"mutability":"mutable","name":"_lowAssetUSDThreshold","nameLocation":"4143:21:0","nodeType":"VariableDeclaration","scope":144,"src":"4135:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"4135:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"_highAssetUSDThreshold","nameLocation":"4186:22:0","nodeType":"VariableDeclaration","scope":144,"src":"4178:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":130,"name":"uint256","nodeType":"ElementaryTypeName","src":"4178:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":133,"mutability":"mutable","name":"_highAssetTurnoutThresholdBIPS","nameLocation":"4230:30:0","nodeType":"VariableDeclaration","scope":144,"src":"4222:38:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":132,"name":"uint256","nodeType":"ElementaryTypeName","src":"4222:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":135,"mutability":"mutable","name":"_lowNatTurnoutThresholdBIPS","nameLocation":"4282:27:0","nodeType":"VariableDeclaration","scope":144,"src":"4274:35:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":134,"name":"uint256","nodeType":"ElementaryTypeName","src":"4274:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":137,"mutability":"mutable","name":"_elasticBandRewardBIPS","nameLocation":"4331:22:0","nodeType":"VariableDeclaration","scope":144,"src":"4323:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":136,"name":"uint256","nodeType":"ElementaryTypeName","src":"4323:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":139,"mutability":"mutable","name":"_elasticBandWidthPPM","nameLocation":"4375:20:0","nodeType":"VariableDeclaration","scope":144,"src":"4367:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":138,"name":"uint256","nodeType":"ElementaryTypeName","src":"4367:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"_trustedAddresses","nameLocation":"4426:17:0","nodeType":"VariableDeclaration","scope":144,"src":"4409:34:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":140,"name":"address","nodeType":"ElementaryTypeName","src":"4409:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":141,"nodeType":"ArrayTypeName","src":"4409:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4009:444:0"},"scope":170,"src":"3947:507:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"4460:619:0","text":" @notice Returns parameters necessary for approximately replicating vote weighting.\n @return _assets                  the list of Assets that are accounted in vote\n @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\n @return _totalVotePowerNat       total native token vote power at block\n @return _totalVotePowerAsset     total combined asset vote power at block\n @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\n @return _votePowerBlock          vote powewr block for given epoch"},"functionSelector":"8357d08c","id":163,"implemented":false,"kind":"function","modifiers":[],"name":"getVoteWeightingParameters","nameLocation":"5093:26:0","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[],"src":"5119:2:0"},"returnParameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"_assets","nameLocation":"5186:7:0","nodeType":"VariableDeclaration","scope":163,"src":"5167:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIVPToken_$2386_$dyn_memory_ptr","typeString":"contract IIVPToken[]"},"typeName":{"baseType":{"id":148,"nodeType":"UserDefinedTypeName","pathNode":{"id":147,"name":"IIVPToken","nameLocations":["5167:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":2386,"src":"5167:9:0"},"referencedDeclaration":2386,"src":"5167:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IIVPToken_$2386","typeString":"contract IIVPToken"}},"id":149,"nodeType":"ArrayTypeName","src":"5167:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIVPToken_$2386_$dyn_storage_ptr","typeString":"contract IIVPToken[]"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"_assetMultipliers","nameLocation":"5224:17:0","nodeType":"VariableDeclaration","scope":163,"src":"5207:34:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":151,"name":"uint256","nodeType":"ElementaryTypeName","src":"5207:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":152,"nodeType":"ArrayTypeName","src":"5207:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":155,"mutability":"mutable","name":"_totalVotePowerNat","nameLocation":"5263:18:0","nodeType":"VariableDeclaration","scope":163,"src":"5255:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":154,"name":"uint256","nodeType":"ElementaryTypeName","src":"5255:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"_totalVotePowerAsset","nameLocation":"5303:20:0","nodeType":"VariableDeclaration","scope":163,"src":"5295:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":156,"name":"uint256","nodeType":"ElementaryTypeName","src":"5295:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"_assetWeightRatio","nameLocation":"5345:17:0","nodeType":"VariableDeclaration","scope":163,"src":"5337:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":158,"name":"uint256","nodeType":"ElementaryTypeName","src":"5337:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"_votePowerBlock","nameLocation":"5384:15:0","nodeType":"VariableDeclaration","scope":163,"src":"5376:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":160,"name":"uint256","nodeType":"ElementaryTypeName","src":"5376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5153:256:0"},"scope":170,"src":"5084:326:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9edbf007","id":169,"implemented":false,"kind":"function","modifiers":[],"name":"wNat","nameLocation":"5425:4:0","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[],"src":"5429:2:0"},"returnParameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":169,"src":"5455:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIVPToken_$2386","typeString":"contract IIVPToken"},"typeName":{"id":166,"nodeType":"UserDefinedTypeName","pathNode":{"id":165,"name":"IIVPToken","nameLocations":["5455:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":2386,"src":"5455:9:0"},"referencedDeclaration":2386,"src":"5455:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IIVPToken_$2386","typeString":"contract IIVPToken"}},"visibility":"internal"}],"src":"5454:11:0"},"scope":170,"src":"5416:50:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":171,"src":"227:5241:0","usedErrors":[]}],"src":"32:5437:0"},"id":0},"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol","exportedSymbols":{"IFtsoGenesis":[207]},"id":208,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":172,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"33:29:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IFtsoGenesis","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":207,"linearizedBaseContracts":[207],"name":"IFtsoGenesis","nameLocation":"75:12:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"99:334:1","text":" @notice Submits price hash for current epoch - only price submitter\n @param _sender               Sender address\n @param _epochId              Target epoch id to which hashes are submitted\n @param _hash                 Hashed price and random number\n @notice Emits PriceHashSubmitted event. "},"functionSelector":"27bd2ad5","id":182,"implemented":false,"kind":"function","modifiers":[],"name":"submitPriceHashSubmitter","nameLocation":"447:24:1","nodeType":"FunctionDefinition","parameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"mutability":"mutable","name":"_sender","nameLocation":"480:7:1","nodeType":"VariableDeclaration","scope":182,"src":"472:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":174,"name":"address","nodeType":"ElementaryTypeName","src":"472:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":177,"mutability":"mutable","name":"_epochId","nameLocation":"497:8:1","nodeType":"VariableDeclaration","scope":182,"src":"489:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":176,"name":"uint256","nodeType":"ElementaryTypeName","src":"489:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":179,"mutability":"mutable","name":"_hash","nameLocation":"515:5:1","nodeType":"VariableDeclaration","scope":182,"src":"507:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"507:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"471:50:1"},"returnParameters":{"id":181,"nodeType":"ParameterList","parameters":[],"src":"530:0:1"},"scope":207,"src":"438:93:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":183,"nodeType":"StructuredDocumentation","src":"537:482:1","text":" @notice Reveals submitted price during epoch reveal period - only price submitter\n @param _voter                Voter address\n @param _epochId              Id of the epoch in which the price hash was submitted\n @param _price                Submitted price in USD\n @param _random               Submitted random number\n @notice The hash of _price and _random must be equal to the submitted hash\n @notice Emits PriceRevealed event"},"functionSelector":"55f7b69b","id":196,"implemented":false,"kind":"function","modifiers":[],"name":"revealPriceSubmitter","nameLocation":"1033:20:1","nodeType":"FunctionDefinition","parameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"_voter","nameLocation":"1071:6:1","nodeType":"VariableDeclaration","scope":196,"src":"1063:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":184,"name":"address","nodeType":"ElementaryTypeName","src":"1063:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"_epochId","nameLocation":"1095:8:1","nodeType":"VariableDeclaration","scope":196,"src":"1087:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"1087:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"_price","nameLocation":"1121:6:1","nodeType":"VariableDeclaration","scope":196,"src":"1113:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint256","nodeType":"ElementaryTypeName","src":"1113:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"_random","nameLocation":"1145:7:1","nodeType":"VariableDeclaration","scope":196,"src":"1137:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":193,"mutability":"mutable","name":"_wNatVP","nameLocation":"1170:7:1","nodeType":"VariableDeclaration","scope":196,"src":"1162:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":192,"name":"uint256","nodeType":"ElementaryTypeName","src":"1162:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1053:130:1"},"returnParameters":{"id":195,"nodeType":"ParameterList","parameters":[],"src":"1192:0:1"},"scope":207,"src":"1024:169:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"1199:268:1","text":" @notice Get (and cache) wNat vote power for specified voter and given epoch id\n @param _voter                Voter address\n @param _epochId              Id of the epoch in which the price hash was submitted\n @return wNat vote power"},"functionSelector":"f72cab28","id":206,"implemented":false,"kind":"function","modifiers":[],"name":"wNatVotePowerCached","nameLocation":"1481:19:1","nodeType":"FunctionDefinition","parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":199,"mutability":"mutable","name":"_voter","nameLocation":"1509:6:1","nodeType":"VariableDeclaration","scope":206,"src":"1501:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":198,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"_epochId","nameLocation":"1525:8:1","nodeType":"VariableDeclaration","scope":206,"src":"1517:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":200,"name":"uint256","nodeType":"ElementaryTypeName","src":"1517:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1500:34:1"},"returnParameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":206,"src":"1553:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"1553:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1552:9:1"},"scope":207,"src":"1472:90:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":208,"src":"65:1499:1","usedErrors":[]}],"src":"33:1532:1"},"id":1},"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol","exportedSymbols":{"IFtsoManagerGenesis":[215]},"id":216,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":209,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"33:29:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IFtsoManagerGenesis","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":215,"linearizedBaseContracts":[215],"name":"IFtsoManagerGenesis","nameLocation":"75:19:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"08a7f402","id":214,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPriceEpochId","nameLocation":"111:22:2","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"133:2:2"},"returnParameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"_priceEpochId","nameLocation":"167:13:2","nodeType":"VariableDeclaration","scope":214,"src":"159:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint256","nodeType":"ElementaryTypeName","src":"159:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"158:23:2"},"scope":215,"src":"102:80:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":216,"src":"65:120:2","usedErrors":[]}],"src":"33:153:2"},"id":2},"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol","exportedSymbols":{"IFtsoGenesis":[207],"IFtsoRegistryGenesis":[229]},"id":230,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":217,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"33:29:3"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol","file":"./IFtsoGenesis.sol","id":218,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":230,"sourceUnit":208,"src":"64:28:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IFtsoRegistryGenesis","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":229,"linearizedBaseContracts":[229],"name":"IFtsoRegistryGenesis","nameLocation":"105:20:3","nodeType":"ContractDefinition","nodes":[{"functionSelector":"9cb47538","id":228,"implemented":false,"kind":"function","modifiers":[],"name":"getFtsos","nameLocation":"142:8:3","nodeType":"FunctionDefinition","parameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"mutability":"mutable","name":"_indices","nameLocation":"168:8:3","nodeType":"VariableDeclaration","scope":228,"src":"151:25:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":219,"name":"uint256","nodeType":"ElementaryTypeName","src":"151:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":220,"nodeType":"ArrayTypeName","src":"151:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"150:27:3"},"returnParameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"_ftsos","nameLocation":"222:6:3","nodeType":"VariableDeclaration","scope":228,"src":"200:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IFtsoGenesis_$207_$dyn_memory_ptr","typeString":"contract IFtsoGenesis[]"},"typeName":{"baseType":{"id":224,"nodeType":"UserDefinedTypeName","pathNode":{"id":223,"name":"IFtsoGenesis","nameLocations":["200:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":207,"src":"200:12:3"},"referencedDeclaration":207,"src":"200:12:3","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoGenesis_$207","typeString":"contract IFtsoGenesis"}},"id":225,"nodeType":"ArrayTypeName","src":"200:14:3","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IFtsoGenesis_$207_$dyn_storage_ptr","typeString":"contract IFtsoGenesis[]"}},"visibility":"internal"}],"src":"199:30:3"},"scope":229,"src":"133:97:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":230,"src":"95:137:3","usedErrors":[]}],"src":"33:200:3"},"id":3},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol","exportedSymbols":{"IFtso":[438]},"id":439,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":231,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IFtso","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":438,"linearizedBaseContracts":[438],"name":"IFtso","nameLocation":"73:5:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IFtso.PriceFinalizationType","id":238,"members":[{"id":232,"name":"NOT_FINALIZED","nameLocation":"147:13:4","nodeType":"EnumValue","src":"147:13:4"},{"id":233,"name":"WEIGHTED_MEDIAN","nameLocation":"219:15:4","nodeType":"EnumValue","src":"219:15:4"},{"id":234,"name":"TRUSTED_ADDRESSES","nameLocation":"319:17:4","nodeType":"EnumValue","src":"319:17:4"},{"id":235,"name":"PREVIOUS_PRICE_COPIED","nameLocation":"438:21:4","nodeType":"EnumValue","src":"438:21:4"},{"id":236,"name":"TRUSTED_ADDRESSES_EXCEPTION","nameLocation":"562:27:4","nodeType":"EnumValue","src":"562:27:4"},{"id":237,"name":"PREVIOUS_PRICE_COPIED_EXCEPTION","nameLocation":"664:31:4","nodeType":"EnumValue","src":"664:31:4"}],"name":"PriceFinalizationType","nameLocation":"90:21:4","nodeType":"EnumDefinition","src":"85:616:4"},{"anonymous":false,"eventSelector":"615c0184a2b16dbbcd09eae0bf239e28977aa4e6ff2204eda59c14016310bb66","id":248,"name":"PriceHashSubmitted","nameLocation":"727:18:4","nodeType":"EventDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"indexed":true,"mutability":"mutable","name":"submitter","nameLocation":"771:9:4","nodeType":"VariableDeclaration","scope":248,"src":"755:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"755:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":242,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"798:7:4","nodeType":"VariableDeclaration","scope":248,"src":"782:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":241,"name":"uint256","nodeType":"ElementaryTypeName","src":"782:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":244,"indexed":false,"mutability":"mutable","name":"hash","nameLocation":"815:4:4","nodeType":"VariableDeclaration","scope":248,"src":"807:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"807:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":246,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"829:9:4","nodeType":"VariableDeclaration","scope":248,"src":"821:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":245,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"745:99:4"},"src":"721:124:4"},{"anonymous":false,"eventSelector":"408bc8c9d02102257c33373c2df5771b03067bd8ea7ec60c35f314ec4ee99d05","id":264,"name":"PriceRevealed","nameLocation":"857:13:4","nodeType":"EventDefinition","parameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"indexed":true,"mutability":"mutable","name":"voter","nameLocation":"896:5:4","nodeType":"VariableDeclaration","scope":264,"src":"880:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"880:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":252,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"919:7:4","nodeType":"VariableDeclaration","scope":264,"src":"903:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":251,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":254,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"936:5:4","nodeType":"VariableDeclaration","scope":264,"src":"928:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"928:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":256,"indexed":false,"mutability":"mutable","name":"random","nameLocation":"951:6:4","nodeType":"VariableDeclaration","scope":264,"src":"943:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":255,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":258,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"967:9:4","nodeType":"VariableDeclaration","scope":264,"src":"959:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":257,"name":"uint256","nodeType":"ElementaryTypeName","src":"959:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":260,"indexed":false,"mutability":"mutable","name":"votePowerNat","nameLocation":"994:12:4","nodeType":"VariableDeclaration","scope":264,"src":"986:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":259,"name":"uint256","nodeType":"ElementaryTypeName","src":"986:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":262,"indexed":false,"mutability":"mutable","name":"votePowerAsset","nameLocation":"1016:14:4","nodeType":"VariableDeclaration","scope":264,"src":"1008:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":261,"name":"uint256","nodeType":"ElementaryTypeName","src":"1008:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"870:166:4"},"src":"851:186:4"},{"anonymous":false,"eventSelector":"1856740832ecbdceafeb109e01b188b9c0499df6a33dc8129aa0dd8f9d9a9db0","id":285,"name":"PriceFinalized","nameLocation":"1049:14:4","nodeType":"EventDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"1089:7:4","nodeType":"VariableDeclaration","scope":285,"src":"1073:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":265,"name":"uint256","nodeType":"ElementaryTypeName","src":"1073:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":268,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"1106:5:4","nodeType":"VariableDeclaration","scope":285,"src":"1098:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":267,"name":"uint256","nodeType":"ElementaryTypeName","src":"1098:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":270,"indexed":false,"mutability":"mutable","name":"rewardedFtso","nameLocation":"1118:12:4","nodeType":"VariableDeclaration","scope":285,"src":"1113:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":269,"name":"bool","nodeType":"ElementaryTypeName","src":"1113:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":272,"indexed":false,"mutability":"mutable","name":"lowIQRRewardPrice","nameLocation":"1148:17:4","nodeType":"VariableDeclaration","scope":285,"src":"1140:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":271,"name":"uint256","nodeType":"ElementaryTypeName","src":"1140:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":274,"indexed":false,"mutability":"mutable","name":"highIQRRewardPrice","nameLocation":"1175:18:4","nodeType":"VariableDeclaration","scope":285,"src":"1167:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":273,"name":"uint256","nodeType":"ElementaryTypeName","src":"1167:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":276,"indexed":false,"mutability":"mutable","name":"lowElasticBandRewardPrice","nameLocation":"1211:25:4","nodeType":"VariableDeclaration","scope":285,"src":"1203:33:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":278,"indexed":false,"mutability":"mutable","name":"highElasticBandRewardPrice","nameLocation":"1246:26:4","nodeType":"VariableDeclaration","scope":285,"src":"1238:34:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"1238:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":281,"indexed":false,"mutability":"mutable","name":"finalizationType","nameLocation":"1305:16:4","nodeType":"VariableDeclaration","scope":285,"src":"1283:38:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PriceFinalizationType_$238","typeString":"enum IFtso.PriceFinalizationType"},"typeName":{"id":280,"nodeType":"UserDefinedTypeName","pathNode":{"id":279,"name":"PriceFinalizationType","nameLocations":["1283:21:4"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"1283:21:4"},"referencedDeclaration":238,"src":"1283:21:4","typeDescriptions":{"typeIdentifier":"t_enum$_PriceFinalizationType_$238","typeString":"enum IFtso.PriceFinalizationType"}},"visibility":"internal"},{"constant":false,"id":283,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1331:9:4","nodeType":"VariableDeclaration","scope":285,"src":"1323:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":282,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1063:283:4"},"src":"1043:304:4"},{"anonymous":false,"eventSelector":"c0eaa359541c7c642d9947c9496507c134f3e4f8e1fd433313eb27dc48cb1fb7","id":293,"name":"PriceEpochInitializedOnFtso","nameLocation":"1359:27:4","nodeType":"EventDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"1412:7:4","nodeType":"VariableDeclaration","scope":293,"src":"1396:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"1396:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":289,"indexed":false,"mutability":"mutable","name":"endTime","nameLocation":"1429:7:4","nodeType":"VariableDeclaration","scope":293,"src":"1421:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":288,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":291,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1446:9:4","nodeType":"VariableDeclaration","scope":293,"src":"1438:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":290,"name":"uint256","nodeType":"ElementaryTypeName","src":"1438:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1386:75:4"},"src":"1353:109:4"},{"anonymous":false,"eventSelector":"bece8aa526cdc5e528cdaa56c1d03edc19da51e41845aa146f64a7071f74c65a","id":303,"name":"LowTurnout","nameLocation":"1474:10:4","nodeType":"EventDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"1510:7:4","nodeType":"VariableDeclaration","scope":303,"src":"1494:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":294,"name":"uint256","nodeType":"ElementaryTypeName","src":"1494:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":297,"indexed":false,"mutability":"mutable","name":"natTurnout","nameLocation":"1535:10:4","nodeType":"VariableDeclaration","scope":303,"src":"1527:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":296,"name":"uint256","nodeType":"ElementaryTypeName","src":"1527:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":299,"indexed":false,"mutability":"mutable","name":"lowNatTurnoutThresholdBIPS","nameLocation":"1563:26:4","nodeType":"VariableDeclaration","scope":303,"src":"1555:34:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":298,"name":"uint256","nodeType":"ElementaryTypeName","src":"1555:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":301,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1607:9:4","nodeType":"VariableDeclaration","scope":303,"src":"1599:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":300,"name":"uint256","nodeType":"ElementaryTypeName","src":"1599:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1484:138:4"},"src":"1468:155:4"},{"documentation":{"id":304,"nodeType":"StructuredDocumentation","src":"1629:52:4","text":" @notice Returns if FTSO is active"},"functionSelector":"02fb0c5e","id":309,"implemented":false,"kind":"function","modifiers":[],"name":"active","nameLocation":"1695:6:4","nodeType":"FunctionDefinition","parameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"1701:2:4"},"returnParameters":{"id":308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":309,"src":"1727:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":306,"name":"bool","nodeType":"ElementaryTypeName","src":"1727:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1726:6:4"},"scope":438,"src":"1686:47:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":310,"nodeType":"StructuredDocumentation","src":"1739:50:4","text":" @notice Returns the FTSO symbol"},"functionSelector":"95d89b41","id":315,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"1803:6:4","nodeType":"FunctionDefinition","parameters":{"id":311,"nodeType":"ParameterList","parameters":[],"src":"1809:2:4"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":315,"src":"1835:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":312,"name":"string","nodeType":"ElementaryTypeName","src":"1835:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1834:15:4"},"scope":438,"src":"1794:56:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":316,"nodeType":"StructuredDocumentation","src":"1856:51:4","text":" @notice Returns current epoch id"},"functionSelector":"a29a839f","id":321,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentEpochId","nameLocation":"1921:17:4","nodeType":"FunctionDefinition","parameters":{"id":317,"nodeType":"ParameterList","parameters":[],"src":"1938:2:4"},"returnParameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":321,"src":"1964:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":318,"name":"uint256","nodeType":"ElementaryTypeName","src":"1964:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1963:9:4"},"scope":438,"src":"1912:61:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"1979:188:4","text":" @notice Returns id of the epoch which was opened for price submission at the specified timestamp\n @param _timestamp            Timestamp as seconds from unix epoch"},"functionSelector":"5303548b","id":329,"implemented":false,"kind":"function","modifiers":[],"name":"getEpochId","nameLocation":"2181:10:4","nodeType":"FunctionDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":324,"mutability":"mutable","name":"_timestamp","nameLocation":"2200:10:4","nodeType":"VariableDeclaration","scope":329,"src":"2192:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":323,"name":"uint256","nodeType":"ElementaryTypeName","src":"2192:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2191:20:4"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":329,"src":"2235:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":326,"name":"uint256","nodeType":"ElementaryTypeName","src":"2235:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2234:9:4"},"scope":438,"src":"2172:72:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"2254:123:4","text":" @notice Returns random number of the specified epoch\n @param _epochId              Id of the epoch"},"functionSelector":"cd4b6914","id":337,"implemented":false,"kind":"function","modifiers":[],"name":"getRandom","nameLocation":"2391:9:4","nodeType":"FunctionDefinition","parameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"_epochId","nameLocation":"2409:8:4","nodeType":"VariableDeclaration","scope":337,"src":"2401:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"2401:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2400:18:4"},"returnParameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":337,"src":"2442:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint256","nodeType":"ElementaryTypeName","src":"2442:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:9:4"},"scope":438,"src":"2382:69:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"2457:193:4","text":" @notice Returns asset price consented in specific epoch\n @param _epochId              Id of the epoch\n @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS"},"functionSelector":"7d1d6f12","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"getEpochPrice","nameLocation":"2664:13:4","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"_epochId","nameLocation":"2686:8:4","nodeType":"VariableDeclaration","scope":345,"src":"2678:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":339,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2677:18:4"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":345,"src":"2719:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":342,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2718:9:4"},"scope":438,"src":"2655:73:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"2734:591:4","text":" @notice Returns current epoch data\n @return _epochId                 Current epoch id\n @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\n @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\n @return _votePowerBlock          Vote power block for the current epoch\n @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\n @dev half-closed intervals - end time not included"},"functionSelector":"e3b3a3b3","id":359,"implemented":false,"kind":"function","modifiers":[],"name":"getPriceEpochData","nameLocation":"3339:17:4","nodeType":"FunctionDefinition","parameters":{"id":347,"nodeType":"ParameterList","parameters":[],"src":"3356:2:4"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"_epochId","nameLocation":"3399:8:4","nodeType":"VariableDeclaration","scope":359,"src":"3391:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":348,"name":"uint256","nodeType":"ElementaryTypeName","src":"3391:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":351,"mutability":"mutable","name":"_epochSubmitEndTime","nameLocation":"3425:19:4","nodeType":"VariableDeclaration","scope":359,"src":"3417:27:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":350,"name":"uint256","nodeType":"ElementaryTypeName","src":"3417:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"_epochRevealEndTime","nameLocation":"3462:19:4","nodeType":"VariableDeclaration","scope":359,"src":"3454:27:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":352,"name":"uint256","nodeType":"ElementaryTypeName","src":"3454:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":355,"mutability":"mutable","name":"_votePowerBlock","nameLocation":"3499:15:4","nodeType":"VariableDeclaration","scope":359,"src":"3491:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":354,"name":"uint256","nodeType":"ElementaryTypeName","src":"3491:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":357,"mutability":"mutable","name":"_fallbackMode","nameLocation":"3529:13:4","nodeType":"VariableDeclaration","scope":359,"src":"3524:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":356,"name":"bool","nodeType":"ElementaryTypeName","src":"3524:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3381:167:4"},"scope":438,"src":"3330:219:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":360,"nodeType":"StructuredDocumentation","src":"3555:263:4","text":" @notice Returns current epoch data\n @return _firstEpochStartTs           First epoch start timestamp\n @return _submitPeriodSeconds         Submit period in seconds\n @return _revealPeriodSeconds         Reveal period in seconds"},"functionSelector":"144e1591","id":369,"implemented":false,"kind":"function","modifiers":[],"name":"getPriceEpochConfiguration","nameLocation":"3832:26:4","nodeType":"FunctionDefinition","parameters":{"id":361,"nodeType":"ParameterList","parameters":[],"src":"3858:2:4"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"_firstEpochStartTs","nameLocation":"3901:18:4","nodeType":"VariableDeclaration","scope":369,"src":"3893:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":362,"name":"uint256","nodeType":"ElementaryTypeName","src":"3893:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":365,"mutability":"mutable","name":"_submitPeriodSeconds","nameLocation":"3937:20:4","nodeType":"VariableDeclaration","scope":369,"src":"3929:28:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":364,"name":"uint256","nodeType":"ElementaryTypeName","src":"3929:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":367,"mutability":"mutable","name":"_revealPeriodSeconds","nameLocation":"3975:20:4","nodeType":"VariableDeclaration","scope":369,"src":"3967:28:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":366,"name":"uint256","nodeType":"ElementaryTypeName","src":"3967:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3883:118:4"},"scope":438,"src":"3823:179:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"4012:259:4","text":" @notice Returns asset price submitted by voter in specific epoch\n @param _epochId              Id of the epoch\n @param _voter                Address of the voter\n @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS"},"functionSelector":"c5d8b9e7","id":379,"implemented":false,"kind":"function","modifiers":[],"name":"getEpochPriceForVoter","nameLocation":"4285:21:4","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"_epochId","nameLocation":"4315:8:4","nodeType":"VariableDeclaration","scope":379,"src":"4307:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"4307:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"_voter","nameLocation":"4333:6:4","nodeType":"VariableDeclaration","scope":379,"src":"4325:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"4325:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4306:34:4"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":379,"src":"4364:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":376,"name":"uint256","nodeType":"ElementaryTypeName","src":"4364:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4363:9:4"},"scope":438,"src":"4276:97:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"4379:224:4","text":" @notice Returns current asset price\n @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n @return _timestamp           Time when price was updated for the last time"},"functionSelector":"eb91d37e","id":387,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPrice","nameLocation":"4617:15:4","nodeType":"FunctionDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[],"src":"4632:2:4"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"_price","nameLocation":"4666:6:4","nodeType":"VariableDeclaration","scope":387,"src":"4658:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":382,"name":"uint256","nodeType":"ElementaryTypeName","src":"4658:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"_timestamp","nameLocation":"4682:10:4","nodeType":"VariableDeclaration","scope":387,"src":"4674:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":384,"name":"uint256","nodeType":"ElementaryTypeName","src":"4674:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4657:36:4"},"scope":438,"src":"4608:86:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"4700:333:4","text":" @notice Returns current asset price and number of decimals\n @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n @return _timestamp               Time when price was updated for the last time\n @return _assetPriceUsdDecimals   Number of decimals used for USD price"},"functionSelector":"65f5cd86","id":397,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPriceWithDecimals","nameLocation":"5047:27:4","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[],"src":"5074:2:4"},"returnParameters":{"id":396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"_price","nameLocation":"5117:6:4","nodeType":"VariableDeclaration","scope":397,"src":"5109:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":390,"name":"uint256","nodeType":"ElementaryTypeName","src":"5109:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":393,"mutability":"mutable","name":"_timestamp","nameLocation":"5141:10:4","nodeType":"VariableDeclaration","scope":397,"src":"5133:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":392,"name":"uint256","nodeType":"ElementaryTypeName","src":"5133:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":395,"mutability":"mutable","name":"_assetPriceUsdDecimals","nameLocation":"5169:22:4","nodeType":"VariableDeclaration","scope":397,"src":"5161:30:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":394,"name":"uint256","nodeType":"ElementaryTypeName","src":"5161:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5099:98:4"},"scope":438,"src":"5038:160:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"5208:258:4","text":" @notice Returns current asset price calculated from trusted providers\n @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n @return _timestamp           Time when price was updated for the last time"},"functionSelector":"af52df08","id":405,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPriceFromTrustedProviders","nameLocation":"5480:35:4","nodeType":"FunctionDefinition","parameters":{"id":399,"nodeType":"ParameterList","parameters":[],"src":"5515:2:4"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"mutability":"mutable","name":"_price","nameLocation":"5549:6:4","nodeType":"VariableDeclaration","scope":405,"src":"5541:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":400,"name":"uint256","nodeType":"ElementaryTypeName","src":"5541:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":403,"mutability":"mutable","name":"_timestamp","nameLocation":"5565:10:4","nodeType":"VariableDeclaration","scope":405,"src":"5557:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"5557:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5540:36:4"},"scope":438,"src":"5471:106:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"5583:367:4","text":" @notice Returns current asset price calculated from trusted providers and number of decimals\n @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n @return _timestamp               Time when price was updated for the last time\n @return _assetPriceUsdDecimals   Number of decimals used for USD price"},"functionSelector":"3cacb3ae","id":415,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPriceWithDecimalsFromTrustedProviders","nameLocation":"5964:47:4","nodeType":"FunctionDefinition","parameters":{"id":407,"nodeType":"ParameterList","parameters":[],"src":"6011:2:4"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"_price","nameLocation":"6054:6:4","nodeType":"VariableDeclaration","scope":415,"src":"6046:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":408,"name":"uint256","nodeType":"ElementaryTypeName","src":"6046:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":411,"mutability":"mutable","name":"_timestamp","nameLocation":"6078:10:4","nodeType":"VariableDeclaration","scope":415,"src":"6070:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":410,"name":"uint256","nodeType":"ElementaryTypeName","src":"6070:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":413,"mutability":"mutable","name":"_assetPriceUsdDecimals","nameLocation":"6106:22:4","nodeType":"VariableDeclaration","scope":415,"src":"6098:30:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":412,"name":"uint256","nodeType":"ElementaryTypeName","src":"6098:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6036:98:4"},"scope":438,"src":"5955:180:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"6141:588:4","text":" @notice Returns current asset price details\n @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n @return _priceTimestamp                          Time when price was updated for the last time\n @return _priceFinalizationType                   Finalization type when price was updated for the last time\n @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\n @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch"},"functionSelector":"040d73b8","id":431,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPriceDetails","nameLocation":"6743:22:4","nodeType":"FunctionDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[],"src":"6765:2:4"},"returnParameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"mutability":"mutable","name":"_price","nameLocation":"6808:6:4","nodeType":"VariableDeclaration","scope":431,"src":"6800:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":418,"name":"uint256","nodeType":"ElementaryTypeName","src":"6800:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":421,"mutability":"mutable","name":"_priceTimestamp","nameLocation":"6832:15:4","nodeType":"VariableDeclaration","scope":431,"src":"6824:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":420,"name":"uint256","nodeType":"ElementaryTypeName","src":"6824:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":424,"mutability":"mutable","name":"_priceFinalizationType","nameLocation":"6879:22:4","nodeType":"VariableDeclaration","scope":431,"src":"6857:44:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PriceFinalizationType_$238","typeString":"enum IFtso.PriceFinalizationType"},"typeName":{"id":423,"nodeType":"UserDefinedTypeName","pathNode":{"id":422,"name":"PriceFinalizationType","nameLocations":["6857:21:4"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"6857:21:4"},"referencedDeclaration":238,"src":"6857:21:4","typeDescriptions":{"typeIdentifier":"t_enum$_PriceFinalizationType_$238","typeString":"enum IFtso.PriceFinalizationType"}},"visibility":"internal"},{"constant":false,"id":426,"mutability":"mutable","name":"_lastPriceEpochFinalizationTimestamp","nameLocation":"6919:36:4","nodeType":"VariableDeclaration","scope":431,"src":"6911:44:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":425,"name":"uint256","nodeType":"ElementaryTypeName","src":"6911:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":429,"mutability":"mutable","name":"_lastPriceEpochFinalizationType","nameLocation":"6987:31:4","nodeType":"VariableDeclaration","scope":431,"src":"6965:53:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PriceFinalizationType_$238","typeString":"enum IFtso.PriceFinalizationType"},"typeName":{"id":428,"nodeType":"UserDefinedTypeName","pathNode":{"id":427,"name":"PriceFinalizationType","nameLocations":["6965:21:4"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"6965:21:4"},"referencedDeclaration":238,"src":"6965:21:4","typeDescriptions":{"typeIdentifier":"t_enum$_PriceFinalizationType_$238","typeString":"enum IFtso.PriceFinalizationType"}},"visibility":"internal"}],"src":"6790:234:4"},"scope":438,"src":"6734:291:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"7031:56:4","text":" @notice Returns current random number"},"functionSelector":"d89601fd","id":437,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentRandom","nameLocation":"7101:16:4","nodeType":"FunctionDefinition","parameters":{"id":433,"nodeType":"ParameterList","parameters":[],"src":"7117:2:4"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":437,"src":"7143:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":434,"name":"uint256","nodeType":"ElementaryTypeName","src":"7143:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7142:9:4"},"scope":438,"src":"7092:60:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":439,"src":"63:7091:4","usedErrors":[]}],"src":"32:7123:4"},"id":4},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol","exportedSymbols":{"IERC20":[4654],"IFtso":[438],"IFtsoGenesis":[207],"IFtsoManager":[578],"IFtsoManagerGenesis":[215],"IGovernanceVotePower":[1272],"IICleanable":[2052],"IIFtso":[170],"IIGovernanceVotePower":[2115],"IIVPContract":[2337],"IIVPToken":[2386],"IVPContractEvents":[2411],"IVPToken":[2628]},"id":579,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":440,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:5"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol","file":"../ftso/interface/IIFtso.sol","id":441,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":579,"sourceUnit":171,"src":"63:38:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol","file":"../genesis/interface/IFtsoManagerGenesis.sol","id":442,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":579,"sourceUnit":216,"src":"102:54:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":443,"name":"IFtsoManagerGenesis","nameLocations":["184:19:5"],"nodeType":"IdentifierPath","referencedDeclaration":215,"src":"184:19:5"},"id":444,"nodeType":"InheritanceSpecifier","src":"184:19:5"}],"canonicalName":"IFtsoManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":578,"linearizedBaseContracts":[578,215],"name":"IFtsoManager","nameLocation":"168:12:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"a0985424f2efdcae4b57a7c84bbf0a0b19f93054f21e9eb1cfcd5a59813fe1da","id":451,"name":"FtsoAdded","nameLocation":"217:9:5","nodeType":"EventDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"indexed":false,"mutability":"mutable","name":"ftso","nameLocation":"234:4:5","nodeType":"VariableDeclaration","scope":451,"src":"227:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"},"typeName":{"id":446,"nodeType":"UserDefinedTypeName","pathNode":{"id":445,"name":"IIFtso","nameLocations":["227:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"227:6:5"},"referencedDeclaration":170,"src":"227:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"visibility":"internal"},{"constant":false,"id":449,"indexed":false,"mutability":"mutable","name":"add","nameLocation":"245:3:5","nodeType":"VariableDeclaration","scope":451,"src":"240:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":448,"name":"bool","nodeType":"ElementaryTypeName","src":"240:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"226:23:5"},"src":"211:39:5"},{"anonymous":false,"eventSelector":"217a37a37fc40a97159886f80c3d45986e6fc4330ce6ad7283478b5e5ab705bc","id":455,"name":"FallbackMode","nameLocation":"261:12:5","nodeType":"EventDefinition","parameters":{"id":454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":453,"indexed":false,"mutability":"mutable","name":"fallbackMode","nameLocation":"279:12:5","nodeType":"VariableDeclaration","scope":455,"src":"274:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":452,"name":"bool","nodeType":"ElementaryTypeName","src":"274:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"273:19:5"},"src":"255:38:5"},{"anonymous":false,"eventSelector":"24462ede4d3e8e5a69fecec6290d42a311016ca752216d9a3d681e284791b7ac","id":462,"name":"FtsoFallbackMode","nameLocation":"304:16:5","nodeType":"EventDefinition","parameters":{"id":461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"indexed":false,"mutability":"mutable","name":"ftso","nameLocation":"328:4:5","nodeType":"VariableDeclaration","scope":462,"src":"321:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"},"typeName":{"id":457,"nodeType":"UserDefinedTypeName","pathNode":{"id":456,"name":"IIFtso","nameLocations":["321:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"321:6:5"},"referencedDeclaration":170,"src":"321:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"visibility":"internal"},{"constant":false,"id":460,"indexed":false,"mutability":"mutable","name":"fallbackMode","nameLocation":"339:12:5","nodeType":"VariableDeclaration","scope":462,"src":"334:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":459,"name":"bool","nodeType":"ElementaryTypeName","src":"334:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"320:32:5"},"src":"298:55:5"},{"anonymous":false,"eventSelector":"1813f880dc24666c8b69c9d771a487ea620a27fde1514be3112847056c0c5322","id":468,"name":"RewardEpochFinalized","nameLocation":"364:20:5","nodeType":"EventDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"indexed":false,"mutability":"mutable","name":"votepowerBlock","nameLocation":"393:14:5","nodeType":"VariableDeclaration","scope":468,"src":"385:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":463,"name":"uint256","nodeType":"ElementaryTypeName","src":"385:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":466,"indexed":false,"mutability":"mutable","name":"startBlock","nameLocation":"417:10:5","nodeType":"VariableDeclaration","scope":468,"src":"409:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":465,"name":"uint256","nodeType":"ElementaryTypeName","src":"409:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"384:44:5"},"src":"358:71:5"},{"anonymous":false,"eventSelector":"98b050a4042fbd1b89934ef40b9342e593f15081a348af940573a0179031f4ad","id":474,"name":"PriceEpochFinalized","nameLocation":"440:19:5","nodeType":"EventDefinition","parameters":{"id":473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":470,"indexed":false,"mutability":"mutable","name":"chosenFtso","nameLocation":"468:10:5","nodeType":"VariableDeclaration","scope":474,"src":"460:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":469,"name":"address","nodeType":"ElementaryTypeName","src":"460:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":472,"indexed":false,"mutability":"mutable","name":"rewardEpochId","nameLocation":"488:13:5","nodeType":"VariableDeclaration","scope":474,"src":"480:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":471,"name":"uint256","nodeType":"ElementaryTypeName","src":"480:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"459:43:5"},"src":"434:69:5"},{"anonymous":false,"eventSelector":"61156899176547b8075bfa81fa2996c6057ce9c71320884b11c0179d9dc2e462","id":481,"name":"InitializingCurrentEpochStateForRevealFailed","nameLocation":"514:44:5","nodeType":"EventDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":477,"indexed":false,"mutability":"mutable","name":"ftso","nameLocation":"566:4:5","nodeType":"VariableDeclaration","scope":481,"src":"559:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"},"typeName":{"id":476,"nodeType":"UserDefinedTypeName","pathNode":{"id":475,"name":"IIFtso","nameLocations":["559:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"559:6:5"},"referencedDeclaration":170,"src":"559:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"visibility":"internal"},{"constant":false,"id":479,"indexed":false,"mutability":"mutable","name":"epochId","nameLocation":"580:7:5","nodeType":"VariableDeclaration","scope":481,"src":"572:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":478,"name":"uint256","nodeType":"ElementaryTypeName","src":"572:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"558:30:5"},"src":"508:81:5"},{"anonymous":false,"eventSelector":"79f4c7cc43bfb79f5a3aad0d92f75b6fed7db061bb5cc2580a01c8132711b881","id":491,"name":"FinalizingPriceEpochFailed","nameLocation":"600:26:5","nodeType":"EventDefinition","parameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"indexed":false,"mutability":"mutable","name":"ftso","nameLocation":"634:4:5","nodeType":"VariableDeclaration","scope":491,"src":"627:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"},"typeName":{"id":483,"nodeType":"UserDefinedTypeName","pathNode":{"id":482,"name":"IIFtso","nameLocations":["627:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"627:6:5"},"referencedDeclaration":170,"src":"627:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"visibility":"internal"},{"constant":false,"id":486,"indexed":false,"mutability":"mutable","name":"epochId","nameLocation":"648:7:5","nodeType":"VariableDeclaration","scope":491,"src":"640:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":485,"name":"uint256","nodeType":"ElementaryTypeName","src":"640:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":489,"indexed":false,"mutability":"mutable","name":"failingType","nameLocation":"685:11:5","nodeType":"VariableDeclaration","scope":491,"src":"657:39:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PriceFinalizationType_$238","typeString":"enum IFtso.PriceFinalizationType"},"typeName":{"id":488,"nodeType":"UserDefinedTypeName","pathNode":{"id":487,"name":"IFtso.PriceFinalizationType","nameLocations":["657:5:5","663:21:5"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"657:27:5"},"referencedDeclaration":238,"src":"657:27:5","typeDescriptions":{"typeIdentifier":"t_enum$_PriceFinalizationType_$238","typeString":"enum IFtso.PriceFinalizationType"}},"visibility":"internal"}],"src":"626:71:5"},"src":"594:104:5"},{"anonymous":false,"eventSelector":"175a1d13d190d6a1e14461c214b3ecf6118b828797750b7bffd7c4f2c1eba54c","id":497,"name":"DistributingRewardsFailed","nameLocation":"709:25:5","nodeType":"EventDefinition","parameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"indexed":false,"mutability":"mutable","name":"ftso","nameLocation":"743:4:5","nodeType":"VariableDeclaration","scope":497,"src":"735:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"735:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":495,"indexed":false,"mutability":"mutable","name":"epochId","nameLocation":"757:7:5","nodeType":"VariableDeclaration","scope":497,"src":"749:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":494,"name":"uint256","nodeType":"ElementaryTypeName","src":"749:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"734:31:5"},"src":"703:63:5"},{"anonymous":false,"eventSelector":"8eb60f903ef61e0e490d7d7ba6e5b85cd949ebece7a5e5b3346eb046c041413f","id":501,"name":"AccruingUnearnedRewardsFailed","nameLocation":"777:29:5","nodeType":"EventDefinition","parameters":{"id":500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"indexed":false,"mutability":"mutable","name":"epochId","nameLocation":"815:7:5","nodeType":"VariableDeclaration","scope":501,"src":"807:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":498,"name":"uint256","nodeType":"ElementaryTypeName","src":"807:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"806:17:5"},"src":"771:53:5"},{"anonymous":false,"eventSelector":"5c9bf067f2a8b23128e64d5ce119251f51d6c0c24e0d7bf430c2dd77df3ec092","id":507,"name":"UseGoodRandomSet","nameLocation":"835:16:5","nodeType":"EventDefinition","parameters":{"id":506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"indexed":false,"mutability":"mutable","name":"useGoodRandom","nameLocation":"857:13:5","nodeType":"VariableDeclaration","scope":507,"src":"852:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":502,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":505,"indexed":false,"mutability":"mutable","name":"maxWaitForGoodRandomSeconds","nameLocation":"880:27:5","nodeType":"VariableDeclaration","scope":507,"src":"872:35:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"872:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"851:57:5"},"src":"829:80:5"},{"functionSelector":"02fb0c5e","id":512,"implemented":false,"kind":"function","modifiers":[],"name":"active","nameLocation":"924:6:5","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[],"src":"930:2:5"},"returnParameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":512,"src":"956:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":509,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:5"},"scope":578,"src":"915:47:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e7c830d4","id":517,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentRewardEpoch","nameLocation":"977:21:5","nodeType":"FunctionDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"998:2:5"},"returnParameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":517,"src":"1024:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1024:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1023:9:5"},"scope":578,"src":"968:65:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f2edab5a","id":524,"implemented":false,"kind":"function","modifiers":[],"name":"getRewardEpochVotePowerBlock","nameLocation":"1048:28:5","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"1085:12:5","nodeType":"VariableDeclaration","scope":524,"src":"1077:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":518,"name":"uint256","nodeType":"ElementaryTypeName","src":"1077:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1076:22:5"},"returnParameters":{"id":523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":524,"src":"1122:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":521,"name":"uint256","nodeType":"ElementaryTypeName","src":"1122:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1121:9:5"},"scope":578,"src":"1039:92:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"3e7ff857","id":529,"implemented":false,"kind":"function","modifiers":[],"name":"getRewardEpochToExpireNext","nameLocation":"1146:26:5","nodeType":"FunctionDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[],"src":"1172:2:5"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":529,"src":"1198:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":526,"name":"uint256","nodeType":"ElementaryTypeName","src":"1198:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1197:9:5"},"scope":578,"src":"1137:70:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"93a79025","id":542,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPriceEpochData","nameLocation":"1226:24:5","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[],"src":"1250:2:5"},"returnParameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":532,"mutability":"mutable","name":"_priceEpochId","nameLocation":"1306:13:5","nodeType":"VariableDeclaration","scope":542,"src":"1298:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":531,"name":"uint256","nodeType":"ElementaryTypeName","src":"1298:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":534,"mutability":"mutable","name":"_priceEpochStartTimestamp","nameLocation":"1341:25:5","nodeType":"VariableDeclaration","scope":542,"src":"1333:33:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":533,"name":"uint256","nodeType":"ElementaryTypeName","src":"1333:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":536,"mutability":"mutable","name":"_priceEpochEndTimestamp","nameLocation":"1388:23:5","nodeType":"VariableDeclaration","scope":542,"src":"1380:31:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":535,"name":"uint256","nodeType":"ElementaryTypeName","src":"1380:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":538,"mutability":"mutable","name":"_priceEpochRevealEndTimestamp","nameLocation":"1433:29:5","nodeType":"VariableDeclaration","scope":542,"src":"1425:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":537,"name":"uint256","nodeType":"ElementaryTypeName","src":"1425:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":540,"mutability":"mutable","name":"_currentTimestamp","nameLocation":"1484:17:5","nodeType":"VariableDeclaration","scope":542,"src":"1476:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":539,"name":"uint256","nodeType":"ElementaryTypeName","src":"1476:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1284:227:5"},"scope":578,"src":"1217:295:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ce69f833","id":549,"implemented":false,"kind":"function","modifiers":[],"name":"getFtsos","nameLocation":"1527:8:5","nodeType":"FunctionDefinition","parameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"1535:2:5"},"returnParameters":{"id":548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":547,"mutability":"mutable","name":"_ftsos","nameLocation":"1577:6:5","nodeType":"VariableDeclaration","scope":549,"src":"1561:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_memory_ptr","typeString":"contract IIFtso[]"},"typeName":{"baseType":{"id":545,"nodeType":"UserDefinedTypeName","pathNode":{"id":544,"name":"IIFtso","nameLocations":["1561:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"1561:6:5"},"referencedDeclaration":170,"src":"1561:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"id":546,"nodeType":"ArrayTypeName","src":"1561:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_storage_ptr","typeString":"contract IIFtso[]"}},"visibility":"internal"}],"src":"1560:24:5"},"scope":578,"src":"1518:67:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"144e1591","id":558,"implemented":false,"kind":"function","modifiers":[],"name":"getPriceEpochConfiguration","nameLocation":"1600:26:5","nodeType":"FunctionDefinition","parameters":{"id":550,"nodeType":"ParameterList","parameters":[],"src":"1626:2:5"},"returnParameters":{"id":557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":552,"mutability":"mutable","name":"_firstPriceEpochStartTs","nameLocation":"1682:23:5","nodeType":"VariableDeclaration","scope":558,"src":"1674:31:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":551,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":554,"mutability":"mutable","name":"_priceEpochDurationSeconds","nameLocation":"1727:26:5","nodeType":"VariableDeclaration","scope":558,"src":"1719:34:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":553,"name":"uint256","nodeType":"ElementaryTypeName","src":"1719:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"_revealEpochDurationSeconds","nameLocation":"1775:27:5","nodeType":"VariableDeclaration","scope":558,"src":"1767:35:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":555,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1660:152:5"},"scope":578,"src":"1591:222:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1cb513f7","id":565,"implemented":false,"kind":"function","modifiers":[],"name":"getRewardEpochConfiguration","nameLocation":"1828:27:5","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[],"src":"1855:2:5"},"returnParameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"_firstRewardEpochStartTs","nameLocation":"1911:24:5","nodeType":"VariableDeclaration","scope":565,"src":"1903:32:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":560,"name":"uint256","nodeType":"ElementaryTypeName","src":"1903:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"_rewardEpochDurationSeconds","nameLocation":"1957:27:5","nodeType":"VariableDeclaration","scope":565,"src":"1949:35:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"1949:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1889:105:5"},"scope":578,"src":"1819:176:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4b48dd5e","id":577,"implemented":false,"kind":"function","modifiers":[],"name":"getFallbackMode","nameLocation":"2010:15:5","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[],"src":"2025:2:5"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"_fallbackMode","nameLocation":"2078:13:5","nodeType":"VariableDeclaration","scope":577,"src":"2073:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":567,"name":"bool","nodeType":"ElementaryTypeName","src":"2073:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"_ftsos","nameLocation":"2121:6:5","nodeType":"VariableDeclaration","scope":577,"src":"2105:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_memory_ptr","typeString":"contract IIFtso[]"},"typeName":{"baseType":{"id":570,"nodeType":"UserDefinedTypeName","pathNode":{"id":569,"name":"IIFtso","nameLocations":["2105:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"2105:6:5"},"referencedDeclaration":170,"src":"2105:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"id":571,"nodeType":"ArrayTypeName","src":"2105:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_storage_ptr","typeString":"contract IIFtso[]"}},"visibility":"internal"},{"constant":false,"id":575,"mutability":"mutable","name":"_ftsoInFallbackMode","nameLocation":"2155:19:5","nodeType":"VariableDeclaration","scope":577,"src":"2141:33:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":573,"name":"bool","nodeType":"ElementaryTypeName","src":"2141:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":574,"nodeType":"ArrayTypeName","src":"2141:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"2059:125:5"},"scope":578,"src":"2001:184:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":579,"src":"158:2029:5","usedErrors":[]}],"src":"32:2156:5"},"id":5},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol","exportedSymbols":{"IERC20":[4654],"IFtso":[438],"IFtsoGenesis":[207],"IFtsoRegistry":[753],"IFtsoRegistryGenesis":[229],"IGovernanceVotePower":[1272],"IICleanable":[2052],"IIFtso":[170],"IIGovernanceVotePower":[2115],"IIVPContract":[2337],"IIVPToken":[2386],"IVPContractEvents":[2411],"IVPToken":[2628]},"id":754,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":580,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:6"},{"id":581,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"62:19:6"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol","file":"../ftso/interface/IIFtso.sol","id":582,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":171,"src":"83:38:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol","file":"../genesis/interface/IFtsoRegistryGenesis.sol","id":583,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":230,"src":"122:55:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":584,"name":"IFtsoRegistryGenesis","nameLocations":["206:20:6"],"nodeType":"IdentifierPath","referencedDeclaration":229,"src":"206:20:6"},"id":585,"nodeType":"InheritanceSpecifier","src":"206:20:6"}],"canonicalName":"IFtsoRegistry","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":753,"linearizedBaseContracts":[753,229],"name":"IFtsoRegistry","nameLocation":"189:13:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IFtsoRegistry.PriceInfo","id":594,"members":[{"constant":false,"id":587,"mutability":"mutable","name":"ftsoIndex","nameLocation":"269:9:6","nodeType":"VariableDeclaration","scope":594,"src":"261:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":586,"name":"uint256","nodeType":"ElementaryTypeName","src":"261:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":589,"mutability":"mutable","name":"price","nameLocation":"296:5:6","nodeType":"VariableDeclaration","scope":594,"src":"288:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"288:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":591,"mutability":"mutable","name":"decimals","nameLocation":"319:8:6","nodeType":"VariableDeclaration","scope":594,"src":"311:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":590,"name":"uint256","nodeType":"ElementaryTypeName","src":"311:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"timestamp","nameLocation":"345:9:6","nodeType":"VariableDeclaration","scope":594,"src":"337:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"337:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PriceInfo","nameLocation":"241:9:6","nodeType":"StructDefinition","scope":753,"src":"234:127:6","visibility":"public"},{"functionSelector":"d75f6d81","id":602,"implemented":false,"kind":"function","modifiers":[],"name":"getFtso","nameLocation":"376:7:6","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"_ftsoIndex","nameLocation":"392:10:6","nodeType":"VariableDeclaration","scope":602,"src":"384:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":595,"name":"uint256","nodeType":"ElementaryTypeName","src":"384:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"383:20:6"},"returnParameters":{"id":601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":600,"mutability":"mutable","name":"_activeFtsoAddress","nameLocation":"433:18:6","nodeType":"VariableDeclaration","scope":602,"src":"426:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"},"typeName":{"id":599,"nodeType":"UserDefinedTypeName","pathNode":{"id":598,"name":"IIFtso","nameLocations":["426:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"426:6:6"},"referencedDeclaration":170,"src":"426:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"visibility":"internal"}],"src":"425:27:6"},"scope":753,"src":"367:86:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"97da6af4","id":610,"implemented":false,"kind":"function","modifiers":[],"name":"getFtsoBySymbol","nameLocation":"467:15:6","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"_symbol","nameLocation":"497:7:6","nodeType":"VariableDeclaration","scope":610,"src":"483:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":603,"name":"string","nodeType":"ElementaryTypeName","src":"483:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"482:23:6"},"returnParameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":608,"mutability":"mutable","name":"_activeFtsoAddress","nameLocation":"535:18:6","nodeType":"VariableDeclaration","scope":610,"src":"528:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"},"typeName":{"id":607,"nodeType":"UserDefinedTypeName","pathNode":{"id":606,"name":"IIFtso","nameLocations":["528:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"528:6:6"},"referencedDeclaration":170,"src":"528:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"visibility":"internal"}],"src":"527:27:6"},"scope":753,"src":"458:97:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"798aac5b","id":616,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedIndices","nameLocation":"569:19:6","nodeType":"FunctionDefinition","parameters":{"id":611,"nodeType":"ParameterList","parameters":[],"src":"588:2:6"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":614,"mutability":"mutable","name":"_supportedIndices","nameLocation":"630:17:6","nodeType":"VariableDeclaration","scope":616,"src":"613:34:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":612,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":613,"nodeType":"ArrayTypeName","src":"613:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"612:36:6"},"scope":753,"src":"560:89:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ce1c0e4d","id":622,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedSymbols","nameLocation":"663:19:6","nodeType":"FunctionDefinition","parameters":{"id":617,"nodeType":"ParameterList","parameters":[],"src":"682:2:6"},"returnParameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"_supportedSymbols","nameLocation":"723:17:6","nodeType":"VariableDeclaration","scope":622,"src":"707:33:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":618,"name":"string","nodeType":"ElementaryTypeName","src":"707:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":619,"nodeType":"ArrayTypeName","src":"707:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"706:35:6"},"scope":753,"src":"654:88:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a40060ba","id":629,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedFtsos","nameLocation":"756:17:6","nodeType":"FunctionDefinition","parameters":{"id":623,"nodeType":"ParameterList","parameters":[],"src":"773:2:6"},"returnParameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"_ftsos","nameLocation":"814:6:6","nodeType":"VariableDeclaration","scope":629,"src":"798:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_memory_ptr","typeString":"contract IIFtso[]"},"typeName":{"baseType":{"id":625,"nodeType":"UserDefinedTypeName","pathNode":{"id":624,"name":"IIFtso","nameLocations":["798:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"798:6:6"},"referencedDeclaration":170,"src":"798:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"id":626,"nodeType":"ArrayTypeName","src":"798:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_storage_ptr","typeString":"contract IIFtso[]"}},"visibility":"internal"}],"src":"797:24:6"},"scope":753,"src":"747:75:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e848da30","id":636,"implemented":false,"kind":"function","modifiers":[],"name":"getFtsoIndex","nameLocation":"836:12:6","nodeType":"FunctionDefinition","parameters":{"id":632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":631,"mutability":"mutable","name":"_symbol","nameLocation":"863:7:6","nodeType":"VariableDeclaration","scope":636,"src":"849:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":630,"name":"string","nodeType":"ElementaryTypeName","src":"849:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"848:23:6"},"returnParameters":{"id":635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":634,"mutability":"mutable","name":"_assetIndex","nameLocation":"903:11:6","nodeType":"VariableDeclaration","scope":636,"src":"895:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":633,"name":"uint256","nodeType":"ElementaryTypeName","src":"895:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"894:21:6"},"scope":753,"src":"827:89:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"136d3f64","id":643,"implemented":false,"kind":"function","modifiers":[],"name":"getFtsoSymbol","nameLocation":"930:13:6","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"_ftsoIndex","nameLocation":"952:10:6","nodeType":"VariableDeclaration","scope":643,"src":"944:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":637,"name":"uint256","nodeType":"ElementaryTypeName","src":"944:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"943:20:6"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"_symbol","nameLocation":"1001:7:6","nodeType":"VariableDeclaration","scope":643,"src":"987:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":640,"name":"string","nodeType":"ElementaryTypeName","src":"987:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"986:23:6"},"scope":753,"src":"921:89:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c55d0f56","id":652,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPrice","nameLocation":"1024:15:6","nodeType":"FunctionDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"_ftsoIndex","nameLocation":"1048:10:6","nodeType":"VariableDeclaration","scope":652,"src":"1040:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":644,"name":"uint256","nodeType":"ElementaryTypeName","src":"1040:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1039:20:6"},"returnParameters":{"id":651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"_price","nameLocation":"1090:6:6","nodeType":"VariableDeclaration","scope":652,"src":"1082:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":647,"name":"uint256","nodeType":"ElementaryTypeName","src":"1082:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":650,"mutability":"mutable","name":"_timestamp","nameLocation":"1106:10:6","nodeType":"VariableDeclaration","scope":652,"src":"1098:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":649,"name":"uint256","nodeType":"ElementaryTypeName","src":"1098:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1081:36:6"},"scope":753,"src":"1015:103:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"42a0f243","id":661,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPrice","nameLocation":"1132:15:6","nodeType":"FunctionDefinition","parameters":{"id":655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":654,"mutability":"mutable","name":"_symbol","nameLocation":"1162:7:6","nodeType":"VariableDeclaration","scope":661,"src":"1148:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":653,"name":"string","nodeType":"ElementaryTypeName","src":"1148:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1147:23:6"},"returnParameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":657,"mutability":"mutable","name":"_price","nameLocation":"1201:6:6","nodeType":"VariableDeclaration","scope":661,"src":"1193:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":656,"name":"uint256","nodeType":"ElementaryTypeName","src":"1193:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":659,"mutability":"mutable","name":"_timestamp","nameLocation":"1217:10:6","nodeType":"VariableDeclaration","scope":661,"src":"1209:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"1209:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1192:36:6"},"scope":753,"src":"1123:106:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"257cbd3a","id":672,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPriceWithDecimals","nameLocation":"1243:27:6","nodeType":"FunctionDefinition","parameters":{"id":664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"_assetIndex","nameLocation":"1279:11:6","nodeType":"VariableDeclaration","scope":672,"src":"1271:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":662,"name":"uint256","nodeType":"ElementaryTypeName","src":"1271:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1270:21:6"},"returnParameters":{"id":671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":666,"mutability":"mutable","name":"_price","nameLocation":"1330:6:6","nodeType":"VariableDeclaration","scope":672,"src":"1322:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1322:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":668,"mutability":"mutable","name":"_timestamp","nameLocation":"1346:10:6","nodeType":"VariableDeclaration","scope":672,"src":"1338:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":667,"name":"uint256","nodeType":"ElementaryTypeName","src":"1338:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":670,"mutability":"mutable","name":"_assetPriceUsdDecimals","nameLocation":"1366:22:6","nodeType":"VariableDeclaration","scope":672,"src":"1358:30:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":669,"name":"uint256","nodeType":"ElementaryTypeName","src":"1358:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1321:68:6"},"scope":753,"src":"1234:156:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a69afdc6","id":683,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPriceWithDecimals","nameLocation":"1404:27:6","nodeType":"FunctionDefinition","parameters":{"id":675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":674,"mutability":"mutable","name":"_symbol","nameLocation":"1446:7:6","nodeType":"VariableDeclaration","scope":683,"src":"1432:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":673,"name":"string","nodeType":"ElementaryTypeName","src":"1432:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1431:23:6"},"returnParameters":{"id":682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":677,"mutability":"mutable","name":"_price","nameLocation":"1493:6:6","nodeType":"VariableDeclaration","scope":683,"src":"1485:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":676,"name":"uint256","nodeType":"ElementaryTypeName","src":"1485:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":679,"mutability":"mutable","name":"_timestamp","nameLocation":"1509:10:6","nodeType":"VariableDeclaration","scope":683,"src":"1501:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":678,"name":"uint256","nodeType":"ElementaryTypeName","src":"1501:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":681,"mutability":"mutable","name":"_assetPriceUsdDecimals","nameLocation":"1529:22:6","nodeType":"VariableDeclaration","scope":683,"src":"1521:30:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":680,"name":"uint256","nodeType":"ElementaryTypeName","src":"1521:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1484:68:6"},"scope":753,"src":"1395:158:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"58f9296f","id":690,"implemented":false,"kind":"function","modifiers":[],"name":"getAllCurrentPrices","nameLocation":"1568:19:6","nodeType":"FunctionDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[],"src":"1587:2:6"},"returnParameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":690,"src":"1613:18:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceInfo_$594_memory_ptr_$dyn_memory_ptr","typeString":"struct IFtsoRegistry.PriceInfo[]"},"typeName":{"baseType":{"id":686,"nodeType":"UserDefinedTypeName","pathNode":{"id":685,"name":"PriceInfo","nameLocations":["1613:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"1613:9:6"},"referencedDeclaration":594,"src":"1613:9:6","typeDescriptions":{"typeIdentifier":"t_struct$_PriceInfo_$594_storage_ptr","typeString":"struct IFtsoRegistry.PriceInfo"}},"id":687,"nodeType":"ArrayTypeName","src":"1613:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceInfo_$594_storage_$dyn_storage_ptr","typeString":"struct IFtsoRegistry.PriceInfo[]"}},"visibility":"internal"}],"src":"1612:20:6"},"scope":753,"src":"1559:74:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6ba31fa1","id":700,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPricesByIndices","nameLocation":"1647:25:6","nodeType":"FunctionDefinition","parameters":{"id":694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"_indices","nameLocation":"1690:8:6","nodeType":"VariableDeclaration","scope":700,"src":"1673:25:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"1673:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":692,"nodeType":"ArrayTypeName","src":"1673:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1672:27:6"},"returnParameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":700,"src":"1723:18:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceInfo_$594_memory_ptr_$dyn_memory_ptr","typeString":"struct IFtsoRegistry.PriceInfo[]"},"typeName":{"baseType":{"id":696,"nodeType":"UserDefinedTypeName","pathNode":{"id":695,"name":"PriceInfo","nameLocations":["1723:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"1723:9:6"},"referencedDeclaration":594,"src":"1723:9:6","typeDescriptions":{"typeIdentifier":"t_struct$_PriceInfo_$594_storage_ptr","typeString":"struct IFtsoRegistry.PriceInfo"}},"id":697,"nodeType":"ArrayTypeName","src":"1723:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceInfo_$594_storage_$dyn_storage_ptr","typeString":"struct IFtsoRegistry.PriceInfo[]"}},"visibility":"internal"}],"src":"1722:20:6"},"scope":753,"src":"1638:105:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"79d5ea4b","id":710,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentPricesBySymbols","nameLocation":"1757:25:6","nodeType":"FunctionDefinition","parameters":{"id":704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":703,"mutability":"mutable","name":"_symbols","nameLocation":"1799:8:6","nodeType":"VariableDeclaration","scope":710,"src":"1783:24:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":701,"name":"string","nodeType":"ElementaryTypeName","src":"1783:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":702,"nodeType":"ArrayTypeName","src":"1783:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"1782:26:6"},"returnParameters":{"id":709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":710,"src":"1832:18:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceInfo_$594_memory_ptr_$dyn_memory_ptr","typeString":"struct IFtsoRegistry.PriceInfo[]"},"typeName":{"baseType":{"id":706,"nodeType":"UserDefinedTypeName","pathNode":{"id":705,"name":"PriceInfo","nameLocations":["1832:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"1832:9:6"},"referencedDeclaration":594,"src":"1832:9:6","typeDescriptions":{"typeIdentifier":"t_struct$_PriceInfo_$594_storage_ptr","typeString":"struct IFtsoRegistry.PriceInfo"}},"id":707,"nodeType":"ArrayTypeName","src":"1832:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PriceInfo_$594_storage_$dyn_storage_ptr","typeString":"struct IFtsoRegistry.PriceInfo[]"}},"visibility":"internal"}],"src":"1831:20:6"},"scope":753,"src":"1748:104:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"06a2ba29","id":720,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedIndicesAndFtsos","nameLocation":"1867:27:6","nodeType":"FunctionDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[],"src":"1894:2:6"},"returnParameters":{"id":719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":714,"mutability":"mutable","name":"_supportedIndices","nameLocation":"1945:17:6","nodeType":"VariableDeclaration","scope":720,"src":"1928:34:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":712,"name":"uint256","nodeType":"ElementaryTypeName","src":"1928:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":713,"nodeType":"ArrayTypeName","src":"1928:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":718,"mutability":"mutable","name":"_ftsos","nameLocation":"1980:6:6","nodeType":"VariableDeclaration","scope":720,"src":"1964:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_memory_ptr","typeString":"contract IIFtso[]"},"typeName":{"baseType":{"id":716,"nodeType":"UserDefinedTypeName","pathNode":{"id":715,"name":"IIFtso","nameLocations":["1964:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"1964:6:6"},"referencedDeclaration":170,"src":"1964:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"id":717,"nodeType":"ArrayTypeName","src":"1964:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_storage_ptr","typeString":"contract IIFtso[]"}},"visibility":"internal"}],"src":"1927:60:6"},"scope":753,"src":"1858:130:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0cf48497","id":730,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedSymbolsAndFtsos","nameLocation":"2003:27:6","nodeType":"FunctionDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[],"src":"2030:2:6"},"returnParameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"_supportedSymbols","nameLocation":"2080:17:6","nodeType":"VariableDeclaration","scope":730,"src":"2064:33:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":722,"name":"string","nodeType":"ElementaryTypeName","src":"2064:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":723,"nodeType":"ArrayTypeName","src":"2064:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":728,"mutability":"mutable","name":"_ftsos","nameLocation":"2115:6:6","nodeType":"VariableDeclaration","scope":730,"src":"2099:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_memory_ptr","typeString":"contract IIFtso[]"},"typeName":{"baseType":{"id":726,"nodeType":"UserDefinedTypeName","pathNode":{"id":725,"name":"IIFtso","nameLocations":["2099:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"2099:6:6"},"referencedDeclaration":170,"src":"2099:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"id":727,"nodeType":"ArrayTypeName","src":"2099:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_storage_ptr","typeString":"contract IIFtso[]"}},"visibility":"internal"}],"src":"2063:59:6"},"scope":753,"src":"1994:129:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e68f283b","id":739,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedIndicesAndSymbols","nameLocation":"2138:29:6","nodeType":"FunctionDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"2167:2:6"},"returnParameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"_supportedIndices","nameLocation":"2218:17:6","nodeType":"VariableDeclaration","scope":739,"src":"2201:34:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":732,"name":"uint256","nodeType":"ElementaryTypeName","src":"2201:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":733,"nodeType":"ArrayTypeName","src":"2201:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"_supportedSymbols","nameLocation":"2253:17:6","nodeType":"VariableDeclaration","scope":739,"src":"2237:33:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":735,"name":"string","nodeType":"ElementaryTypeName","src":"2237:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":736,"nodeType":"ArrayTypeName","src":"2237:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"2200:71:6"},"scope":753,"src":"2129:143:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7687542c","id":752,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedIndicesSymbolsAndFtsos","nameLocation":"2287:34:6","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[],"src":"2321:2:6"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":743,"mutability":"mutable","name":"_supportedIndices","nameLocation":"2372:17:6","nodeType":"VariableDeclaration","scope":752,"src":"2355:34:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":741,"name":"uint256","nodeType":"ElementaryTypeName","src":"2355:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":742,"nodeType":"ArrayTypeName","src":"2355:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":746,"mutability":"mutable","name":"_supportedSymbols","nameLocation":"2407:17:6","nodeType":"VariableDeclaration","scope":752,"src":"2391:33:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":744,"name":"string","nodeType":"ElementaryTypeName","src":"2391:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":745,"nodeType":"ArrayTypeName","src":"2391:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":750,"mutability":"mutable","name":"_ftsos","nameLocation":"2442:6:6","nodeType":"VariableDeclaration","scope":752,"src":"2426:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_memory_ptr","typeString":"contract IIFtso[]"},"typeName":{"baseType":{"id":748,"nodeType":"UserDefinedTypeName","pathNode":{"id":747,"name":"IIFtso","nameLocations":["2426:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":170,"src":"2426:6:6"},"referencedDeclaration":170,"src":"2426:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IIFtso_$170","typeString":"contract IIFtso"}},"id":749,"nodeType":"ArrayTypeName","src":"2426:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IIFtso_$170_$dyn_storage_ptr","typeString":"contract IIFtso[]"}},"visibility":"internal"}],"src":"2354:95:6"},"scope":753,"src":"2278:172:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":754,"src":"179:2273:6","usedErrors":[]}],"src":"32:2421:6"},"id":6},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol","exportedSymbols":{"IFtsoRewardManager":[1048]},"id":1049,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":755,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IFtsoRewardManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1048,"linearizedBaseContracts":[1048],"name":"IFtsoRewardManager","nameLocation":"73:18:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"6ec685171a9028d19dc155a48e7824e3c68b03bc8995410e006abe3cbbeb3e2d","id":767,"name":"RewardClaimed","nameLocation":"105:13:7","nodeType":"EventDefinition","parameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"indexed":true,"mutability":"mutable","name":"dataProvider","nameLocation":"144:12:7","nodeType":"VariableDeclaration","scope":767,"src":"128:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"128:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":759,"indexed":true,"mutability":"mutable","name":"whoClaimed","nameLocation":"182:10:7","nodeType":"VariableDeclaration","scope":767,"src":"166:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":758,"name":"address","nodeType":"ElementaryTypeName","src":"166:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":761,"indexed":true,"mutability":"mutable","name":"sentTo","nameLocation":"218:6:7","nodeType":"VariableDeclaration","scope":767,"src":"202:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":760,"name":"address","nodeType":"ElementaryTypeName","src":"202:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":763,"indexed":false,"mutability":"mutable","name":"rewardEpoch","nameLocation":"242:11:7","nodeType":"VariableDeclaration","scope":767,"src":"234:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":762,"name":"uint256","nodeType":"ElementaryTypeName","src":"234:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":765,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"272:6:7","nodeType":"VariableDeclaration","scope":767,"src":"264:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":764,"name":"uint256","nodeType":"ElementaryTypeName","src":"264:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"118:166:7"},"src":"99:186:7"},{"anonymous":false,"eventSelector":"754fa5a3ace0438b80ec651f7d61e44f761a808ebd17d7ce70da619399611a08","id":773,"name":"UnearnedRewardsAccrued","nameLocation":"297:22:7","nodeType":"EventDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"indexed":false,"mutability":"mutable","name":"epochId","nameLocation":"337:7:7","nodeType":"VariableDeclaration","scope":773,"src":"329:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":768,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":771,"indexed":false,"mutability":"mutable","name":"reward","nameLocation":"362:6:7","nodeType":"VariableDeclaration","scope":773,"src":"354:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":770,"name":"uint256","nodeType":"ElementaryTypeName","src":"354:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"319:55:7"},"src":"291:84:7"},{"anonymous":false,"eventSelector":"8b2bc56c62594afde5b520e83e1ca19ebd071798db21382e328014f47b31ce57","id":785,"name":"RewardsDistributed","nameLocation":"387:18:7","nodeType":"EventDefinition","parameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"indexed":true,"mutability":"mutable","name":"ftso","nameLocation":"431:4:7","nodeType":"VariableDeclaration","scope":785,"src":"415:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":774,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":777,"indexed":false,"mutability":"mutable","name":"epochId","nameLocation":"453:7:7","nodeType":"VariableDeclaration","scope":785,"src":"445:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":780,"indexed":false,"mutability":"mutable","name":"addresses","nameLocation":"480:9:7","nodeType":"VariableDeclaration","scope":785,"src":"470:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":778,"name":"address","nodeType":"ElementaryTypeName","src":"470:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":779,"nodeType":"ArrayTypeName","src":"470:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":783,"indexed":false,"mutability":"mutable","name":"rewards","nameLocation":"509:7:7","nodeType":"VariableDeclaration","scope":785,"src":"499:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":781,"name":"uint256","nodeType":"ElementaryTypeName","src":"499:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":782,"nodeType":"ArrayTypeName","src":"499:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"405:117:7"},"src":"381:142:7"},{"anonymous":false,"eventSelector":"1cfb844c44f9325fc9ad6cc6191a4a24b0415137fe300b6c9071523a253f7a08","id":789,"name":"RewardClaimsEnabled","nameLocation":"535:19:7","nodeType":"EventDefinition","parameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":787,"indexed":false,"mutability":"mutable","name":"rewardEpochId","nameLocation":"572:13:7","nodeType":"VariableDeclaration","scope":789,"src":"564:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":786,"name":"uint256","nodeType":"ElementaryTypeName","src":"564:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"554:37:7"},"src":"529:63:7"},{"anonymous":false,"eventSelector":"d89f05622c2dcb0b4fcaa19e62fc2a2b0923955685fb7b0c641467f764244abc","id":797,"name":"FeePercentageChanged","nameLocation":"605:20:7","nodeType":"EventDefinition","parameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"indexed":true,"mutability":"mutable","name":"dataProvider","nameLocation":"651:12:7","nodeType":"VariableDeclaration","scope":797,"src":"635:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":790,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":793,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"681:5:7","nodeType":"VariableDeclaration","scope":797,"src":"673:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":792,"name":"uint256","nodeType":"ElementaryTypeName","src":"673:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":795,"indexed":false,"mutability":"mutable","name":"validFromEpoch","nameLocation":"704:14:7","nodeType":"VariableDeclaration","scope":797,"src":"696:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":794,"name":"uint256","nodeType":"ElementaryTypeName","src":"696:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"625:99:7"},"src":"599:126:7"},{"anonymous":false,"eventSelector":"5d05c64f281304391697cf987812e1a736413a062a9bdf39af4102209eb6fa58","id":801,"name":"RewardClaimsExpired","nameLocation":"737:19:7","nodeType":"EventDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":799,"indexed":false,"mutability":"mutable","name":"rewardEpochId","nameLocation":"774:13:7","nodeType":"VariableDeclaration","scope":801,"src":"766:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":798,"name":"uint256","nodeType":"ElementaryTypeName","src":"766:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"756:37:7"},"src":"731:63:7"},{"anonymous":false,"eventSelector":"2d9c100169d5e24ef79d07ec273fcbbd5ce996a849ef0223f37c49f6418df84d","id":805,"name":"FtsoRewardManagerActivated","nameLocation":"810:26:7","nodeType":"EventDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"indexed":false,"mutability":"mutable","name":"ftsoRewardManager","nameLocation":"845:17:7","nodeType":"VariableDeclaration","scope":805,"src":"837:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:27:7"},"src":"804:60:7"},{"anonymous":false,"eventSelector":"a391f4e911c33688045cc1f43dc17c05924f79ad72a8cf5a58cf00c3acc9090e","id":809,"name":"FtsoRewardManagerDeactivated","nameLocation":"875:28:7","nodeType":"EventDefinition","parameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"indexed":false,"mutability":"mutable","name":"ftsoRewardManager","nameLocation":"912:17:7","nodeType":"VariableDeclaration","scope":809,"src":"904:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":806,"name":"address","nodeType":"ElementaryTypeName","src":"904:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"903:27:7"},"src":"869:62:7"},{"documentation":{"id":810,"nodeType":"StructuredDocumentation","src":"937:644:7","text":" @notice Allows a percentage delegator to claim rewards.\n @notice This function is intended to be used to claim rewards in case of delegation by percentage.\n @param _recipient            address to transfer funds to\n @param _rewardEpochs         array of reward epoch numbers to claim for\n @return _rewardAmount        amount of total claimed rewards\n @dev Reverts if `msg.sender` is delegating by amount\n @dev Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'.\n @dev Retained for backward compatibility.\n @dev This function is deprecated - use `claim` instead."},"functionSelector":"b2af870a","id":820,"implemented":false,"kind":"function","modifiers":[],"name":"claimReward","nameLocation":"1595:11:7","nodeType":"FunctionDefinition","parameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":812,"mutability":"mutable","name":"_recipient","nameLocation":"1632:10:7","nodeType":"VariableDeclaration","scope":820,"src":"1616:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":811,"name":"address","nodeType":"ElementaryTypeName","src":"1616:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":815,"mutability":"mutable","name":"_rewardEpochs","nameLocation":"1671:13:7","nodeType":"VariableDeclaration","scope":820,"src":"1652:32:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":813,"name":"uint256","nodeType":"ElementaryTypeName","src":"1652:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":814,"nodeType":"ArrayTypeName","src":"1652:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1606:84:7"},"returnParameters":{"id":819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"_rewardAmount","nameLocation":"1725:13:7","nodeType":"VariableDeclaration","scope":820,"src":"1717:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"1717:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1716:23:7"},"scope":1048,"src":"1586:154:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":821,"nodeType":"StructuredDocumentation","src":"1746:1182:7","text":" @notice Allows the sender to claim or wrap rewards for reward owner.\n @notice This function is intended to be used to claim rewards in case of delegation by percentage.\n @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\n   this approval is done by calling `setClaimExecutors`.\n @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\n   call, we allow the owner to control the timing of the calls.\n @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\n   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\n @param _rewardOwner          address of the reward owner\n @param _recipient            address to transfer funds to\n @param _rewardEpoch          last reward epoch to claim for\n @param _wrap                 should reward be wrapped immediately\n @return _rewardAmount        amount of total claimed rewards\n @dev Reverts if `msg.sender` is delegating by amount"},"functionSelector":"b2c12192","id":834,"implemented":false,"kind":"function","modifiers":[],"name":"claim","nameLocation":"2942:5:7","nodeType":"FunctionDefinition","parameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":823,"mutability":"mutable","name":"_rewardOwner","nameLocation":"2965:12:7","nodeType":"VariableDeclaration","scope":834,"src":"2957:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":822,"name":"address","nodeType":"ElementaryTypeName","src":"2957:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":825,"mutability":"mutable","name":"_recipient","nameLocation":"3003:10:7","nodeType":"VariableDeclaration","scope":834,"src":"2987:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":824,"name":"address","nodeType":"ElementaryTypeName","src":"2987:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":827,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"3031:12:7","nodeType":"VariableDeclaration","scope":834,"src":"3023:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":826,"name":"uint256","nodeType":"ElementaryTypeName","src":"3023:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":829,"mutability":"mutable","name":"_wrap","nameLocation":"3058:5:7","nodeType":"VariableDeclaration","scope":834,"src":"3053:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":828,"name":"bool","nodeType":"ElementaryTypeName","src":"3053:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2947:122:7"},"returnParameters":{"id":833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":832,"mutability":"mutable","name":"_rewardAmount","nameLocation":"3104:13:7","nodeType":"VariableDeclaration","scope":834,"src":"3096:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"3096:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3095:23:7"},"scope":1048,"src":"2933:186:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"3129:658:7","text":" @notice Allows the sender to claim rewards from specified data providers.\n @notice This function is intended to be used to claim rewards in case of delegation by amount.\n @param _recipient            address to transfer funds to\n @param _rewardEpochs         array of reward epoch numbers to claim for\n @param _dataProviders        array of addresses representing data providers to claim the reward from\n @return _rewardAmount        amount of total claimed rewards\n @dev Function can only be used for explicit delegations.\n @dev This function is deprecated - use `claimFromDataProviders` instead."},"functionSelector":"d20bb542","id":848,"implemented":false,"kind":"function","modifiers":[],"name":"claimRewardFromDataProviders","nameLocation":"3801:28:7","nodeType":"FunctionDefinition","parameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"_recipient","nameLocation":"3855:10:7","nodeType":"VariableDeclaration","scope":848,"src":"3839:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"3839:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":840,"mutability":"mutable","name":"_rewardEpochs","nameLocation":"3894:13:7","nodeType":"VariableDeclaration","scope":848,"src":"3875:32:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":838,"name":"uint256","nodeType":"ElementaryTypeName","src":"3875:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":839,"nodeType":"ArrayTypeName","src":"3875:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":843,"mutability":"mutable","name":"_dataProviders","nameLocation":"3936:14:7","nodeType":"VariableDeclaration","scope":848,"src":"3917:33:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":841,"name":"address","nodeType":"ElementaryTypeName","src":"3917:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":842,"nodeType":"ArrayTypeName","src":"3917:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3829:127:7"},"returnParameters":{"id":847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":846,"mutability":"mutable","name":"_rewardAmount","nameLocation":"3991:13:7","nodeType":"VariableDeclaration","scope":848,"src":"3983:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":845,"name":"uint256","nodeType":"ElementaryTypeName","src":"3983:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3982:23:7"},"scope":1048,"src":"3792:214:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":849,"nodeType":"StructuredDocumentation","src":"4012:1332:7","text":" @notice Allows the sender to claim or wrap rewards for reward owner from specified data providers.\n @notice This function is intended to be used to claim rewards in case of delegation by amount.\n @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\n   this approval is done by calling `setClaimExecutors`.\n @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\n   call, we allow the owner to control the timing of the calls.\n @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\n   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\n @param _rewardOwner          address of the reward owner\n @param _recipient            address to transfer funds to\n @param _rewardEpochs         array of reward epoch numbers to claim for\n @param _dataProviders        array of addresses representing data providers to claim the reward from\n @param _wrap                 should reward be wrapped immediately\n @return _rewardAmount        amount of total claimed rewards\n @dev Function can only be used for explicit delegations."},"functionSelector":"21bb25af","id":866,"implemented":false,"kind":"function","modifiers":[],"name":"claimFromDataProviders","nameLocation":"5358:22:7","nodeType":"FunctionDefinition","parameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"_rewardOwner","nameLocation":"5398:12:7","nodeType":"VariableDeclaration","scope":866,"src":"5390:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":850,"name":"address","nodeType":"ElementaryTypeName","src":"5390:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":853,"mutability":"mutable","name":"_recipient","nameLocation":"5436:10:7","nodeType":"VariableDeclaration","scope":866,"src":"5420:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"5420:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":856,"mutability":"mutable","name":"_rewardEpochs","nameLocation":"5475:13:7","nodeType":"VariableDeclaration","scope":866,"src":"5456:32:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":854,"name":"uint256","nodeType":"ElementaryTypeName","src":"5456:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":855,"nodeType":"ArrayTypeName","src":"5456:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"_dataProviders","nameLocation":"5517:14:7","nodeType":"VariableDeclaration","scope":866,"src":"5498:33:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":857,"name":"address","nodeType":"ElementaryTypeName","src":"5498:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":858,"nodeType":"ArrayTypeName","src":"5498:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":861,"mutability":"mutable","name":"_wrap","nameLocation":"5546:5:7","nodeType":"VariableDeclaration","scope":866,"src":"5541:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":860,"name":"bool","nodeType":"ElementaryTypeName","src":"5541:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5380:177:7"},"returnParameters":{"id":865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":864,"mutability":"mutable","name":"_rewardAmount","nameLocation":"5592:13:7","nodeType":"VariableDeclaration","scope":866,"src":"5584:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":863,"name":"uint256","nodeType":"ElementaryTypeName","src":"5584:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5583:23:7"},"scope":1048,"src":"5349:258:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":867,"nodeType":"StructuredDocumentation","src":"5613:742:7","text":" @notice Allows batch claiming for the list of '_rewardOwners' and for all unclaimed epochs <= '_rewardEpoch'.\n @notice If reward owner has enabled delegation account, rewards are also claimed for that delegation account and\n   total claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.\n @notice Claimed amount is automatically wrapped.\n @notice Method can be used by reward owner or executor. If executor is registered with fee > 0,\n   then fee is paid to executor for each claimed address from the list.\n @param _rewardOwners         list of reward owners to claim for\n @param _rewardEpoch          last reward epoch to claim for"},"functionSelector":"8dc305fa","id":875,"implemented":false,"kind":"function","modifiers":[],"name":"autoClaim","nameLocation":"6369:9:7","nodeType":"FunctionDefinition","parameters":{"id":873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"_rewardOwners","nameLocation":"6398:13:7","nodeType":"VariableDeclaration","scope":875,"src":"6379:32:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"6379:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":869,"nodeType":"ArrayTypeName","src":"6379:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":872,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"6421:12:7","nodeType":"VariableDeclaration","scope":875,"src":"6413:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":871,"name":"uint256","nodeType":"ElementaryTypeName","src":"6413:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6378:56:7"},"returnParameters":{"id":874,"nodeType":"ParameterList","parameters":[],"src":"6443:0:7"},"scope":1048,"src":"6360:84:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":876,"nodeType":"StructuredDocumentation","src":"6454:258:7","text":" @notice Allows data provider to set (or update last) fee percentage.\n @param _feePercentageBIPS    number representing fee percentage in BIPS\n @return _validFromEpoch      reward epoch number when the setting becomes effective."},"functionSelector":"16e69328","id":883,"implemented":false,"kind":"function","modifiers":[],"name":"setDataProviderFeePercentage","nameLocation":"6726:28:7","nodeType":"FunctionDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"_feePercentageBIPS","nameLocation":"6763:18:7","nodeType":"VariableDeclaration","scope":883,"src":"6755:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":877,"name":"uint256","nodeType":"ElementaryTypeName","src":"6755:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6754:28:7"},"returnParameters":{"id":882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"_validFromEpoch","nameLocation":"6817:15:7","nodeType":"VariableDeclaration","scope":883,"src":"6809:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":880,"name":"uint256","nodeType":"ElementaryTypeName","src":"6809:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6808:25:7"},"scope":1048,"src":"6717:117:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":884,"nodeType":"StructuredDocumentation","src":"6840:49:7","text":" @notice Allows reward claiming"},"functionSelector":"02fb0c5e","id":889,"implemented":false,"kind":"function","modifiers":[],"name":"active","nameLocation":"6903:6:7","nodeType":"FunctionDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[],"src":"6909:2:7"},"returnParameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":889,"src":"6935:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":886,"name":"bool","nodeType":"ElementaryTypeName","src":"6935:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6934:6:7"},"scope":1048,"src":"6894:47:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"6947:151:7","text":" @notice Returns the current fee percentage of `_dataProvider`\n @param _dataProvider         address representing data provider"},"functionSelector":"cfbcd25f","id":897,"implemented":false,"kind":"function","modifiers":[],"name":"getDataProviderCurrentFeePercentage","nameLocation":"7112:35:7","nodeType":"FunctionDefinition","parameters":{"id":893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"_dataProvider","nameLocation":"7156:13:7","nodeType":"VariableDeclaration","scope":897,"src":"7148:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":891,"name":"address","nodeType":"ElementaryTypeName","src":"7148:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7147:23:7"},"returnParameters":{"id":896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":895,"mutability":"mutable","name":"_feePercentageBIPS","nameLocation":"7210:18:7","nodeType":"VariableDeclaration","scope":897,"src":"7202:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":894,"name":"uint256","nodeType":"ElementaryTypeName","src":"7202:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7201:28:7"},"scope":1048,"src":"7103:127:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":898,"nodeType":"StructuredDocumentation","src":"7236:217:7","text":" @notice Returns the fee percentage of `_dataProvider` at `_rewardEpoch`\n @param _dataProvider         address representing data provider\n @param _rewardEpoch          reward epoch number"},"functionSelector":"961c00ed","id":907,"implemented":false,"kind":"function","modifiers":[],"name":"getDataProviderFeePercentage","nameLocation":"7467:28:7","nodeType":"FunctionDefinition","parameters":{"id":903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":900,"mutability":"mutable","name":"_dataProvider","nameLocation":"7513:13:7","nodeType":"VariableDeclaration","scope":907,"src":"7505:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":899,"name":"address","nodeType":"ElementaryTypeName","src":"7505:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":902,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"7544:12:7","nodeType":"VariableDeclaration","scope":907,"src":"7536:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":901,"name":"uint256","nodeType":"ElementaryTypeName","src":"7536:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7495:67:7"},"returnParameters":{"id":906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":905,"mutability":"mutable","name":"_feePercentageBIPS","nameLocation":"7610:18:7","nodeType":"VariableDeclaration","scope":907,"src":"7602:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":904,"name":"uint256","nodeType":"ElementaryTypeName","src":"7602:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7601:28:7"},"scope":1048,"src":"7458:172:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":908,"nodeType":"StructuredDocumentation","src":"7636:465:7","text":" @notice Returns the scheduled fee percentage changes of `_dataProvider`\n @param _dataProvider         address representing data provider\n @return _feePercentageBIPS   positional array of fee percentages in BIPS\n @return _validFromEpoch      positional array of block numbers the fee settings are effective from\n @return _fixed               positional array of boolean values indicating if settings are subjected to change"},"functionSelector":"33b7971e","id":922,"implemented":false,"kind":"function","modifiers":[],"name":"getDataProviderScheduledFeePercentageChanges","nameLocation":"8115:44:7","nodeType":"FunctionDefinition","parameters":{"id":911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":910,"mutability":"mutable","name":"_dataProvider","nameLocation":"8168:13:7","nodeType":"VariableDeclaration","scope":922,"src":"8160:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":909,"name":"address","nodeType":"ElementaryTypeName","src":"8160:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8159:23:7"},"returnParameters":{"id":921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":914,"mutability":"mutable","name":"_feePercentageBIPS","nameLocation":"8245:18:7","nodeType":"VariableDeclaration","scope":922,"src":"8228:35:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"8228:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":913,"nodeType":"ArrayTypeName","src":"8228:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":917,"mutability":"mutable","name":"_validFromEpoch","nameLocation":"8294:15:7","nodeType":"VariableDeclaration","scope":922,"src":"8277:32:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"8277:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":916,"nodeType":"ArrayTypeName","src":"8277:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":920,"mutability":"mutable","name":"_fixed","nameLocation":"8337:6:7","nodeType":"VariableDeclaration","scope":922,"src":"8323:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":918,"name":"bool","nodeType":"ElementaryTypeName","src":"8323:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":919,"nodeType":"ArrayTypeName","src":"8323:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"8214:139:7"},"scope":1048,"src":"8106:248:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":923,"nodeType":"StructuredDocumentation","src":"8360:308:7","text":" @notice Returns information on epoch reward\n @param _rewardEpoch          reward epoch number\n @return _totalReward         number representing the total epoch reward\n @return _claimedReward       number representing the amount of total epoch reward that has been claimed"},"functionSelector":"d418634a","id":932,"implemented":false,"kind":"function","modifiers":[],"name":"getEpochReward","nameLocation":"8682:14:7","nodeType":"FunctionDefinition","parameters":{"id":926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":925,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"8705:12:7","nodeType":"VariableDeclaration","scope":932,"src":"8697:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":924,"name":"uint256","nodeType":"ElementaryTypeName","src":"8697:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8696:22:7"},"returnParameters":{"id":931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"mutability":"mutable","name":"_totalReward","nameLocation":"8758:12:7","nodeType":"VariableDeclaration","scope":932,"src":"8750:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":927,"name":"uint256","nodeType":"ElementaryTypeName","src":"8750:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":930,"mutability":"mutable","name":"_claimedReward","nameLocation":"8780:14:7","nodeType":"VariableDeclaration","scope":932,"src":"8772:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"8772:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8749:46:7"},"scope":1048,"src":"8673:123:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":933,"nodeType":"StructuredDocumentation","src":"8802:642:7","text":" @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch`\n @param _beneficiary          address of reward beneficiary\n @param _rewardEpoch          reward epoch number\n @return _dataProviders       positional array of addresses representing data providers\n @return _rewardAmounts       positional array of reward amounts\n @return _claimed             positional array of boolean values indicating if reward is claimed\n @return _claimable           boolean value indicating if rewards are claimable\n @dev Reverts when queried with `_beneficiary` delegating by amount"},"functionSelector":"a4472c10","id":951,"implemented":false,"kind":"function","modifiers":[],"name":"getStateOfRewards","nameLocation":"9458:17:7","nodeType":"FunctionDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":935,"mutability":"mutable","name":"_beneficiary","nameLocation":"9493:12:7","nodeType":"VariableDeclaration","scope":951,"src":"9485:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":934,"name":"address","nodeType":"ElementaryTypeName","src":"9485:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"9523:12:7","nodeType":"VariableDeclaration","scope":951,"src":"9515:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":936,"name":"uint256","nodeType":"ElementaryTypeName","src":"9515:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9475:66:7"},"returnParameters":{"id":950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":941,"mutability":"mutable","name":"_dataProviders","nameLocation":"9612:14:7","nodeType":"VariableDeclaration","scope":951,"src":"9595:31:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"9595:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":940,"nodeType":"ArrayTypeName","src":"9595:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"_rewardAmounts","nameLocation":"9657:14:7","nodeType":"VariableDeclaration","scope":951,"src":"9640:31:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":942,"name":"uint256","nodeType":"ElementaryTypeName","src":"9640:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":943,"nodeType":"ArrayTypeName","src":"9640:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":947,"mutability":"mutable","name":"_claimed","nameLocation":"9699:8:7","nodeType":"VariableDeclaration","scope":951,"src":"9685:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":945,"name":"bool","nodeType":"ElementaryTypeName","src":"9685:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":946,"nodeType":"ArrayTypeName","src":"9685:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":949,"mutability":"mutable","name":"_claimable","nameLocation":"9726:10:7","nodeType":"VariableDeclaration","scope":951,"src":"9721:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":948,"name":"bool","nodeType":"ElementaryTypeName","src":"9721:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9581:165:7"},"scope":1048,"src":"9449:298:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":952,"nodeType":"StructuredDocumentation","src":"9753:590:7","text":" @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`\n @param _beneficiary          address of reward beneficiary\n @param _rewardEpoch          reward epoch number\n @param _dataProviders        positional array of addresses representing data providers\n @return _rewardAmounts       positional array of reward amounts\n @return _claimed             positional array of boolean values indicating if reward is claimed\n @return _claimable           boolean value indicating if rewards are claimable"},"functionSelector":"e416b7e1","id":970,"implemented":false,"kind":"function","modifiers":[],"name":"getStateOfRewardsFromDataProviders","nameLocation":"10357:34:7","nodeType":"FunctionDefinition","parameters":{"id":960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"_beneficiary","nameLocation":"10409:12:7","nodeType":"VariableDeclaration","scope":970,"src":"10401:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"10401:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":956,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"10439:12:7","nodeType":"VariableDeclaration","scope":970,"src":"10431:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"10431:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":959,"mutability":"mutable","name":"_dataProviders","nameLocation":"10480:14:7","nodeType":"VariableDeclaration","scope":970,"src":"10461:33:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":957,"name":"address","nodeType":"ElementaryTypeName","src":"10461:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":958,"nodeType":"ArrayTypeName","src":"10461:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10391:109:7"},"returnParameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":963,"mutability":"mutable","name":"_rewardAmounts","nameLocation":"10570:14:7","nodeType":"VariableDeclaration","scope":970,"src":"10553:31:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":961,"name":"uint256","nodeType":"ElementaryTypeName","src":"10553:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":962,"nodeType":"ArrayTypeName","src":"10553:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":966,"mutability":"mutable","name":"_claimed","nameLocation":"10612:8:7","nodeType":"VariableDeclaration","scope":970,"src":"10598:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":964,"name":"bool","nodeType":"ElementaryTypeName","src":"10598:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":965,"nodeType":"ArrayTypeName","src":"10598:6:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":968,"mutability":"mutable","name":"_claimable","nameLocation":"10639:10:7","nodeType":"VariableDeclaration","scope":970,"src":"10634:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":967,"name":"bool","nodeType":"ElementaryTypeName","src":"10634:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10539:120:7"},"scope":1048,"src":"10348:312:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":971,"nodeType":"StructuredDocumentation","src":"10666:284:7","text":" @notice Returns the start and the end of the reward epoch range for which the reward is claimable\n @param _startEpochId         the oldest epoch id that allows reward claiming\n @param _endEpochId           the newest epoch id that allows reward claiming"},"functionSelector":"0441218e","id":978,"implemented":false,"kind":"function","modifiers":[],"name":"getEpochsWithClaimableRewards","nameLocation":"10964:29:7","nodeType":"FunctionDefinition","parameters":{"id":972,"nodeType":"ParameterList","parameters":[],"src":"10993:2:7"},"returnParameters":{"id":977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"_startEpochId","nameLocation":"11049:13:7","nodeType":"VariableDeclaration","scope":978,"src":"11041:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":973,"name":"uint256","nodeType":"ElementaryTypeName","src":"11041:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":976,"mutability":"mutable","name":"_endEpochId","nameLocation":"11084:11:7","nodeType":"VariableDeclaration","scope":978,"src":"11076:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":975,"name":"uint256","nodeType":"ElementaryTypeName","src":"11076:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11027:78:7"},"scope":1048,"src":"10955:151:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":979,"nodeType":"StructuredDocumentation","src":"11112:150:7","text":" @notice Returns the next claimable reward epoch for '_rewardOwner'.\n @param _rewardOwner          address of the reward owner"},"functionSelector":"69b91b59","id":986,"implemented":false,"kind":"function","modifiers":[],"name":"nextClaimableRewardEpoch","nameLocation":"11276:24:7","nodeType":"FunctionDefinition","parameters":{"id":982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"_rewardOwner","nameLocation":"11309:12:7","nodeType":"VariableDeclaration","scope":986,"src":"11301:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":980,"name":"address","nodeType":"ElementaryTypeName","src":"11301:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11300:22:7"},"returnParameters":{"id":985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":986,"src":"11346:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":983,"name":"uint256","nodeType":"ElementaryTypeName","src":"11346:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11345:9:7"},"scope":1048,"src":"11267:88:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"11361:308:7","text":" @notice Returns the array of claimable epoch ids for which the reward has not yet been claimed\n @param _beneficiary          address of reward beneficiary\n @return _epochIds            array of epoch ids\n @dev Reverts when queried with `_beneficiary` delegating by amount"},"functionSelector":"b4a2043d","id":995,"implemented":false,"kind":"function","modifiers":[],"name":"getEpochsWithUnclaimedRewards","nameLocation":"11683:29:7","nodeType":"FunctionDefinition","parameters":{"id":990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":989,"mutability":"mutable","name":"_beneficiary","nameLocation":"11721:12:7","nodeType":"VariableDeclaration","scope":995,"src":"11713:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":988,"name":"address","nodeType":"ElementaryTypeName","src":"11713:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11712:22:7"},"returnParameters":{"id":994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":993,"mutability":"mutable","name":"_epochIds","nameLocation":"11784:9:7","nodeType":"VariableDeclaration","scope":995,"src":"11767:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":991,"name":"uint256","nodeType":"ElementaryTypeName","src":"11767:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":992,"nodeType":"ArrayTypeName","src":"11767:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11757:42:7"},"scope":1048,"src":"11674:126:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"11806:477:7","text":" @notice Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`\n @param _rewardEpoch          reward epoch number\n @param _dataProvider         address representing the data provider\n @param _claimer              address representing the claimer\n @return _claimed             boolean indicating if reward has been claimed\n @return _amount              number representing the claimed amount"},"functionSelector":"85b4c538","id":1009,"implemented":false,"kind":"function","modifiers":[],"name":"getClaimedReward","nameLocation":"12297:16:7","nodeType":"FunctionDefinition","parameters":{"id":1003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"12331:12:7","nodeType":"VariableDeclaration","scope":1009,"src":"12323:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":997,"name":"uint256","nodeType":"ElementaryTypeName","src":"12323:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1000,"mutability":"mutable","name":"_dataProvider","nameLocation":"12361:13:7","nodeType":"VariableDeclaration","scope":1009,"src":"12353:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"12353:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"_claimer","nameLocation":"12392:8:7","nodeType":"VariableDeclaration","scope":1009,"src":"12384:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1001,"name":"address","nodeType":"ElementaryTypeName","src":"12384:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12313:93:7"},"returnParameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"mutability":"mutable","name":"_claimed","nameLocation":"12464:8:7","nodeType":"VariableDeclaration","scope":1009,"src":"12459:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1004,"name":"bool","nodeType":"ElementaryTypeName","src":"12459:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"_amount","nameLocation":"12494:7:7","nodeType":"VariableDeclaration","scope":1009,"src":"12486:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1006,"name":"uint256","nodeType":"ElementaryTypeName","src":"12486:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12445:66:7"},"scope":1048,"src":"12288:224:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1010,"nodeType":"StructuredDocumentation","src":"12518:150:7","text":" @notice Return reward epoch that will expire, when new reward epoch will start\n @return Reward epoch id that will expire next"},"functionSelector":"3e7ff857","id":1015,"implemented":false,"kind":"function","modifiers":[],"name":"getRewardEpochToExpireNext","nameLocation":"12682:26:7","nodeType":"FunctionDefinition","parameters":{"id":1011,"nodeType":"ParameterList","parameters":[],"src":"12708:2:7"},"returnParameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1015,"src":"12734:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1012,"name":"uint256","nodeType":"ElementaryTypeName","src":"12734:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12733:9:7"},"scope":1048,"src":"12673:70:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1016,"nodeType":"StructuredDocumentation","src":"12749:119:7","text":" @notice Return reward epoch vote power block\n @param _rewardEpoch          reward epoch number"},"functionSelector":"f2edab5a","id":1023,"implemented":false,"kind":"function","modifiers":[],"name":"getRewardEpochVotePowerBlock","nameLocation":"12882:28:7","nodeType":"FunctionDefinition","parameters":{"id":1019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1018,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"12919:12:7","nodeType":"VariableDeclaration","scope":1023,"src":"12911:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1017,"name":"uint256","nodeType":"ElementaryTypeName","src":"12911:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12910:22:7"},"returnParameters":{"id":1022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1023,"src":"12956:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1020,"name":"uint256","nodeType":"ElementaryTypeName","src":"12956:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12955:9:7"},"scope":1048,"src":"12873:92:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1024,"nodeType":"StructuredDocumentation","src":"12971:61:7","text":" @notice Return current reward epoch number"},"functionSelector":"e7c830d4","id":1029,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentRewardEpoch","nameLocation":"13046:21:7","nodeType":"FunctionDefinition","parameters":{"id":1025,"nodeType":"ParameterList","parameters":[],"src":"13067:2:7"},"returnParameters":{"id":1028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1027,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1029,"src":"13093:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1026,"name":"uint256","nodeType":"ElementaryTypeName","src":"13093:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13092:9:7"},"scope":1048,"src":"13037:65:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1030,"nodeType":"StructuredDocumentation","src":"13108:61:7","text":" @notice Return initial reward epoch number"},"functionSelector":"3123b7d8","id":1035,"implemented":false,"kind":"function","modifiers":[],"name":"getInitialRewardEpoch","nameLocation":"13183:21:7","nodeType":"FunctionDefinition","parameters":{"id":1031,"nodeType":"ParameterList","parameters":[],"src":"13204:2:7"},"returnParameters":{"id":1034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1035,"src":"13230:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1032,"name":"uint256","nodeType":"ElementaryTypeName","src":"13230:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13229:9:7"},"scope":1048,"src":"13174:65:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1036,"nodeType":"StructuredDocumentation","src":"13245:471:7","text":" @notice Returns the information on rewards and initial vote power of `_dataProvider` for `_rewardEpoch`\n @param _rewardEpoch                      reward epoch number\n @param _dataProvider                     address representing the data provider\n @return _rewardAmount                    number representing the amount of rewards\n @return _votePowerIgnoringRevocation     number representing the vote power ignoring revocations"},"functionSelector":"eb82dd7f","id":1047,"implemented":false,"kind":"function","modifiers":[],"name":"getDataProviderPerformanceInfo","nameLocation":"13730:30:7","nodeType":"FunctionDefinition","parameters":{"id":1041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1038,"mutability":"mutable","name":"_rewardEpoch","nameLocation":"13778:12:7","nodeType":"VariableDeclaration","scope":1047,"src":"13770:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1037,"name":"uint256","nodeType":"ElementaryTypeName","src":"13770:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1040,"mutability":"mutable","name":"_dataProvider","nameLocation":"13808:13:7","nodeType":"VariableDeclaration","scope":1047,"src":"13800:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1039,"name":"address","nodeType":"ElementaryTypeName","src":"13800:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13760:67:7"},"returnParameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1043,"mutability":"mutable","name":"_rewardAmount","nameLocation":"13889:13:7","nodeType":"VariableDeclaration","scope":1047,"src":"13881:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1042,"name":"uint256","nodeType":"ElementaryTypeName","src":"13881:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1045,"mutability":"mutable","name":"_votePowerIgnoringRevocation","nameLocation":"13924:28:7","nodeType":"VariableDeclaration","scope":1047,"src":"13916:36:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"13916:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13867:95:7"},"scope":1048,"src":"13721:242:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1049,"src":"63:13902:7","usedErrors":[]}],"src":"32:13934:7"},"id":7},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol","exportedSymbols":{"IFtsoGenesis":[207],"IFtsoRegistryGenesis":[229],"IPriceSubmitter":[1139]},"id":1140,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1050,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:8"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol","file":"../genesis/interface/IFtsoGenesis.sol","id":1051,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1140,"sourceUnit":208,"src":"63:47:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol","file":"../genesis/interface/IFtsoRegistryGenesis.sol","id":1052,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1140,"sourceUnit":230,"src":"111:55:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPriceSubmitter","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1139,"linearizedBaseContracts":[1139],"name":"IPriceSubmitter","nameLocation":"178:15:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1053,"nodeType":"StructuredDocumentation","src":"200:348:8","text":" Event emitted when price hashes were submitted through PriceSubmitter.\n @param submitter the address of the sender\n @param epochId current price epoch id\n @param ftsos array of ftsos that correspond to the indexes in call\n @param hashes the submitted hashes\n @param timestamp current block timestamp"},"eventSelector":"90c022ade239639b1f8c4ebb8a76df5e03a7129df46cf9bcdae3c1450ea35434","id":1068,"name":"PriceHashesSubmitted","nameLocation":"559:20:8","nodeType":"EventDefinition","parameters":{"id":1067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"indexed":true,"mutability":"mutable","name":"submitter","nameLocation":"605:9:8","nodeType":"VariableDeclaration","scope":1068,"src":"589:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"589:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1057,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"640:7:8","nodeType":"VariableDeclaration","scope":1068,"src":"624:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1056,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1061,"indexed":false,"mutability":"mutable","name":"ftsos","nameLocation":"672:5:8","nodeType":"VariableDeclaration","scope":1068,"src":"657:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IFtsoGenesis_$207_$dyn_memory_ptr","typeString":"contract IFtsoGenesis[]"},"typeName":{"baseType":{"id":1059,"nodeType":"UserDefinedTypeName","pathNode":{"id":1058,"name":"IFtsoGenesis","nameLocations":["657:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":207,"src":"657:12:8"},"referencedDeclaration":207,"src":"657:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoGenesis_$207","typeString":"contract IFtsoGenesis"}},"id":1060,"nodeType":"ArrayTypeName","src":"657:14:8","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IFtsoGenesis_$207_$dyn_storage_ptr","typeString":"contract IFtsoGenesis[]"}},"visibility":"internal"},{"constant":false,"id":1064,"indexed":false,"mutability":"mutable","name":"hashes","nameLocation":"697:6:8","nodeType":"VariableDeclaration","scope":1068,"src":"687:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1062,"name":"bytes32","nodeType":"ElementaryTypeName","src":"687:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1063,"nodeType":"ArrayTypeName","src":"687:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1066,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"721:9:8","nodeType":"VariableDeclaration","scope":1068,"src":"713:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1065,"name":"uint256","nodeType":"ElementaryTypeName","src":"713:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:157:8"},"src":"553:184:8"},{"anonymous":false,"documentation":{"id":1069,"nodeType":"StructuredDocumentation","src":"743:372:8","text":" Event emitted when prices were revealed through PriceSubmitter.\n @param voter the address of the sender\n @param epochId id of the epoch in which the price hash was submitted\n @param ftsos array of ftsos that correspond to the indexes in the call\n @param prices the submitted prices\n @param timestamp current block timestamp"},"eventSelector":"a32444a31df2f9a116229eec3193d223a6bad89f7670ff17b8e5c7014a377da1","id":1087,"name":"PricesRevealed","nameLocation":"1126:14:8","nodeType":"EventDefinition","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1071,"indexed":true,"mutability":"mutable","name":"voter","nameLocation":"1166:5:8","nodeType":"VariableDeclaration","scope":1087,"src":"1150:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1070,"name":"address","nodeType":"ElementaryTypeName","src":"1150:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1073,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"1197:7:8","nodeType":"VariableDeclaration","scope":1087,"src":"1181:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1072,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1077,"indexed":false,"mutability":"mutable","name":"ftsos","nameLocation":"1229:5:8","nodeType":"VariableDeclaration","scope":1087,"src":"1214:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IFtsoGenesis_$207_$dyn_memory_ptr","typeString":"contract IFtsoGenesis[]"},"typeName":{"baseType":{"id":1075,"nodeType":"UserDefinedTypeName","pathNode":{"id":1074,"name":"IFtsoGenesis","nameLocations":["1214:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":207,"src":"1214:12:8"},"referencedDeclaration":207,"src":"1214:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoGenesis_$207","typeString":"contract IFtsoGenesis"}},"id":1076,"nodeType":"ArrayTypeName","src":"1214:14:8","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IFtsoGenesis_$207_$dyn_storage_ptr","typeString":"contract IFtsoGenesis[]"}},"visibility":"internal"},{"constant":false,"id":1080,"indexed":false,"mutability":"mutable","name":"prices","nameLocation":"1254:6:8","nodeType":"VariableDeclaration","scope":1087,"src":"1244:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"1244:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1079,"nodeType":"ArrayTypeName","src":"1244:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1083,"indexed":false,"mutability":"mutable","name":"randoms","nameLocation":"1280:7:8","nodeType":"VariableDeclaration","scope":1087,"src":"1270:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1081,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1082,"nodeType":"ArrayTypeName","src":"1270:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1085,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1305:9:8","nodeType":"VariableDeclaration","scope":1087,"src":"1297:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"1297:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1140:180:8"},"src":"1120:201:8"},{"documentation":{"id":1088,"nodeType":"StructuredDocumentation","src":"1331:327:8","text":" @notice Submits price hashes for current epoch\n @param _epochId              Target epoch id to which hashes are submitted\n @param _ftsoIndices          List of ftso indices\n @param _hashes               List of hashed price and random number\n @notice Emits PriceHashesSubmitted event"},"functionSelector":"c5adc539","id":1099,"implemented":false,"kind":"function","modifiers":[],"name":"submitPriceHashes","nameLocation":"1672:17:8","nodeType":"FunctionDefinition","parameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1090,"mutability":"mutable","name":"_epochId","nameLocation":"1707:8:8","nodeType":"VariableDeclaration","scope":1099,"src":"1699:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"1699:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"_ftsoIndices","nameLocation":"1742:12:8","nodeType":"VariableDeclaration","scope":1099,"src":"1725:29:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1091,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1092,"nodeType":"ArrayTypeName","src":"1725:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1096,"mutability":"mutable","name":"_hashes","nameLocation":"1781:7:8","nodeType":"VariableDeclaration","scope":1099,"src":"1764:24:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1764:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1095,"nodeType":"ArrayTypeName","src":"1764:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1689:105:8"},"returnParameters":{"id":1098,"nodeType":"ParameterList","parameters":[],"src":"1803:0:8"},"scope":1139,"src":"1663:141:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1100,"nodeType":"StructuredDocumentation","src":"1810:488:8","text":" @notice Reveals submitted prices during epoch reveal period\n @param _epochId              Id of the epoch in which the price hashes was submitted\n @param _ftsoIndices          List of ftso indices\n @param _prices               List of submitted prices in USD\n @param _randoms              List of submitted random numbers\n @notice The hash of _price and _random must be equal to the submitted hash\n @notice Emits PricesRevealed event"},"functionSelector":"60848b44","id":1114,"implemented":false,"kind":"function","modifiers":[],"name":"revealPrices","nameLocation":"2312:12:8","nodeType":"FunctionDefinition","parameters":{"id":1112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"_epochId","nameLocation":"2342:8:8","nodeType":"VariableDeclaration","scope":1114,"src":"2334:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1101,"name":"uint256","nodeType":"ElementaryTypeName","src":"2334:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"_ftsoIndices","nameLocation":"2377:12:8","nodeType":"VariableDeclaration","scope":1114,"src":"2360:29:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1103,"name":"uint256","nodeType":"ElementaryTypeName","src":"2360:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1104,"nodeType":"ArrayTypeName","src":"2360:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1108,"mutability":"mutable","name":"_prices","nameLocation":"2416:7:8","nodeType":"VariableDeclaration","scope":1114,"src":"2399:24:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1106,"name":"uint256","nodeType":"ElementaryTypeName","src":"2399:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1107,"nodeType":"ArrayTypeName","src":"2399:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"_randoms","nameLocation":"2450:8:8","nodeType":"VariableDeclaration","scope":1114,"src":"2433:25:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1109,"name":"uint256","nodeType":"ElementaryTypeName","src":"2433:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1110,"nodeType":"ArrayTypeName","src":"2433:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2324:140:8"},"returnParameters":{"id":1113,"nodeType":"ParameterList","parameters":[],"src":"2473:0:8"},"scope":1139,"src":"2303:171:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"2480:228:8","text":" Returns bitmap of all ftso's for which `_voter` is allowed to submit prices/hashes.\n If voter is allowed to vote for ftso at index (see *_FTSO_INDEX), the corrsponding\n bit in the result will be 1."},"functionSelector":"7ac420ad","id":1122,"implemented":false,"kind":"function","modifiers":[],"name":"voterWhitelistBitmap","nameLocation":"2726:20:8","nodeType":"FunctionDefinition","parameters":{"id":1118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1117,"mutability":"mutable","name":"_voter","nameLocation":"2755:6:8","nodeType":"VariableDeclaration","scope":1122,"src":"2747:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1116,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2746:16:8"},"returnParameters":{"id":1121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1122,"src":"2786:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"2786:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2785:9:8"},"scope":1139,"src":"2717:78:8","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"71e1fad9","id":1127,"implemented":false,"kind":"function","modifiers":[],"name":"getVoterWhitelister","nameLocation":"2810:19:8","nodeType":"FunctionDefinition","parameters":{"id":1123,"nodeType":"ParameterList","parameters":[],"src":"2829:2:8"},"returnParameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1127,"src":"2855:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1124,"name":"address","nodeType":"ElementaryTypeName","src":"2855:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2854:9:8"},"scope":1139,"src":"2801:63:8","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"8c9d28b6","id":1133,"implemented":false,"kind":"function","modifiers":[],"name":"getFtsoRegistry","nameLocation":"2878:15:8","nodeType":"FunctionDefinition","parameters":{"id":1128,"nodeType":"ParameterList","parameters":[],"src":"2893:2:8"},"returnParameters":{"id":1132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1133,"src":"2919:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoRegistryGenesis_$229","typeString":"contract IFtsoRegistryGenesis"},"typeName":{"id":1130,"nodeType":"UserDefinedTypeName","pathNode":{"id":1129,"name":"IFtsoRegistryGenesis","nameLocations":["2919:20:8"],"nodeType":"IdentifierPath","referencedDeclaration":229,"src":"2919:20:8"},"referencedDeclaration":229,"src":"2919:20:8","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoRegistryGenesis_$229","typeString":"contract IFtsoRegistryGenesis"}},"visibility":"internal"}],"src":"2918:22:8"},"scope":1139,"src":"2869:72:8","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b39c6858","id":1138,"implemented":false,"kind":"function","modifiers":[],"name":"getFtsoManager","nameLocation":"2955:14:8","nodeType":"FunctionDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[],"src":"2969:2:8"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1138,"src":"2995:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1135,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2994:9:8"},"scope":1139,"src":"2946:58:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1140,"src":"168:2838:8","usedErrors":[]}],"src":"32:2975:8"},"id":8},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol","exportedSymbols":{"IVoterWhitelister":[1223]},"id":1224,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1141,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IVoterWhitelister","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1223,"linearizedBaseContracts":[1223],"name":"IVoterWhitelister","nameLocation":"73:17:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1142,"nodeType":"StructuredDocumentation","src":"97:78:9","text":" Raised when an account is removed from the voter whitelist."},"eventSelector":"66a8b13abe95391d1851f5bc319f3dde54ce8f2f40a5fe226aa3251d805832e3","id":1148,"name":"VoterWhitelisted","nameLocation":"186:16:9","nodeType":"EventDefinition","parameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1144,"indexed":false,"mutability":"mutable","name":"voter","nameLocation":"211:5:9","nodeType":"VariableDeclaration","scope":1148,"src":"203:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1143,"name":"address","nodeType":"ElementaryTypeName","src":"203:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1146,"indexed":false,"mutability":"mutable","name":"ftsoIndex","nameLocation":"226:9:9","nodeType":"VariableDeclaration","scope":1148,"src":"218:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1145,"name":"uint256","nodeType":"ElementaryTypeName","src":"218:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"202:34:9"},"src":"180:57:9"},{"anonymous":false,"documentation":{"id":1149,"nodeType":"StructuredDocumentation","src":"247:78:9","text":" Raised when an account is removed from the voter whitelist."},"eventSelector":"33359f2769756ca8d0da4683f25ee440744d6f18bfb166dbfb59315a8c62b016","id":1155,"name":"VoterRemovedFromWhitelist","nameLocation":"336:25:9","nodeType":"EventDefinition","parameters":{"id":1154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1151,"indexed":false,"mutability":"mutable","name":"voter","nameLocation":"370:5:9","nodeType":"VariableDeclaration","scope":1155,"src":"362:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1150,"name":"address","nodeType":"ElementaryTypeName","src":"362:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1153,"indexed":false,"mutability":"mutable","name":"ftsoIndex","nameLocation":"385:9:9","nodeType":"VariableDeclaration","scope":1155,"src":"377:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1152,"name":"uint256","nodeType":"ElementaryTypeName","src":"377:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"361:34:9"},"src":"330:66:9"},{"anonymous":false,"documentation":{"id":1156,"nodeType":"StructuredDocumentation","src":"402:78:9","text":" Raised when an account is chilled from the voter whitelist."},"eventSelector":"0c2fcef22ab22997ed46cd27f7f0aa308600145401a7a141065d61c5d87341d2","id":1162,"name":"VoterChilled","nameLocation":"491:12:9","nodeType":"EventDefinition","parameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"indexed":false,"mutability":"mutable","name":"voter","nameLocation":"512:5:9","nodeType":"VariableDeclaration","scope":1162,"src":"504:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1157,"name":"address","nodeType":"ElementaryTypeName","src":"504:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1160,"indexed":false,"mutability":"mutable","name":"untilRewardEpoch","nameLocation":"527:16:9","nodeType":"VariableDeclaration","scope":1162,"src":"519:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1159,"name":"uint256","nodeType":"ElementaryTypeName","src":"519:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"503:41:9"},"src":"485:60:9"},{"documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"551:153:9","text":" Request to whitelist `_voter` account to ftso at `_ftsoIndex`. Will revert if vote power too low.\n May be called by any address."},"functionSelector":"3de2cb1c","id":1170,"implemented":false,"kind":"function","modifiers":[],"name":"requestWhitelistingVoter","nameLocation":"718:24:9","nodeType":"FunctionDefinition","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"_voter","nameLocation":"751:6:9","nodeType":"VariableDeclaration","scope":1170,"src":"743:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"_ftsoIndex","nameLocation":"767:10:9","nodeType":"VariableDeclaration","scope":1170,"src":"759:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1166,"name":"uint256","nodeType":"ElementaryTypeName","src":"759:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"742:36:9"},"returnParameters":{"id":1169,"nodeType":"ParameterList","parameters":[],"src":"787:0:9"},"scope":1223,"src":"709:79:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1171,"nodeType":"StructuredDocumentation","src":"794:195:9","text":" Request to whitelist `_voter` account to all active ftsos.\n May be called by any address.\n It returns an array of supported ftso indices and success flag per index."},"functionSelector":"b06cbaf7","id":1182,"implemented":false,"kind":"function","modifiers":[],"name":"requestFullVoterWhitelisting","nameLocation":"1003:28:9","nodeType":"FunctionDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1173,"mutability":"mutable","name":"_voter","nameLocation":"1049:6:9","nodeType":"VariableDeclaration","scope":1182,"src":"1041:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1031:30:9"},"returnParameters":{"id":1181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"_supportedIndices","nameLocation":"1128:17:9","nodeType":"VariableDeclaration","scope":1182,"src":"1111:34:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1175,"name":"uint256","nodeType":"ElementaryTypeName","src":"1111:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1176,"nodeType":"ArrayTypeName","src":"1111:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1180,"mutability":"mutable","name":"_success","nameLocation":"1173:8:9","nodeType":"VariableDeclaration","scope":1182,"src":"1159:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1178,"name":"bool","nodeType":"ElementaryTypeName","src":"1159:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1179,"nodeType":"ArrayTypeName","src":"1159:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"1097:94:9"},"scope":1223,"src":"994:198:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1183,"nodeType":"StructuredDocumentation","src":"1198:76:9","text":" Maximum number of voters in the whitelist for a new FTSO."},"functionSelector":"47ed51b1","id":1188,"implemented":false,"kind":"function","modifiers":[],"name":"defaultMaxVotersForFtso","nameLocation":"1288:23:9","nodeType":"FunctionDefinition","parameters":{"id":1184,"nodeType":"ParameterList","parameters":[],"src":"1311:2:9"},"returnParameters":{"id":1187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1186,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1188,"src":"1337:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1185,"name":"uint256","nodeType":"ElementaryTypeName","src":"1337:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1336:9:9"},"scope":1223,"src":"1279:67:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1189,"nodeType":"StructuredDocumentation","src":"1356:92:9","text":" Maximum number of voters in the whitelist for FTSO at index `_ftsoIndex`."},"functionSelector":"98dccfc2","id":1196,"implemented":false,"kind":"function","modifiers":[],"name":"maxVotersForFtso","nameLocation":"1462:16:9","nodeType":"FunctionDefinition","parameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"_ftsoIndex","nameLocation":"1487:10:9","nodeType":"VariableDeclaration","scope":1196,"src":"1479:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1479:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1478:20:9"},"returnParameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1194,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1196,"src":"1522:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1193,"name":"uint256","nodeType":"ElementaryTypeName","src":"1522:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1521:9:9"},"scope":1223,"src":"1453:78:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1197,"nodeType":"StructuredDocumentation","src":"1537:74:9","text":" Get whitelisted price providers for ftso with `_symbol`"},"functionSelector":"aa89dfd4","id":1205,"implemented":false,"kind":"function","modifiers":[],"name":"getFtsoWhitelistedPriceProvidersBySymbol","nameLocation":"1625:40:9","nodeType":"FunctionDefinition","parameters":{"id":1200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1199,"mutability":"mutable","name":"_symbol","nameLocation":"1680:7:9","nodeType":"VariableDeclaration","scope":1205,"src":"1666:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1198,"name":"string","nodeType":"ElementaryTypeName","src":"1666:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1665:23:9"},"returnParameters":{"id":1204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1203,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1205,"src":"1712:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"1712:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1202,"nodeType":"ArrayTypeName","src":"1712:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1711:18:9"},"scope":1223,"src":"1616:114:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1206,"nodeType":"StructuredDocumentation","src":"1736:75:9","text":" Get whitelisted price providers for ftso at `_ftsoIndex`"},"functionSelector":"09fcb400","id":1214,"implemented":false,"kind":"function","modifiers":[],"name":"getFtsoWhitelistedPriceProviders","nameLocation":"1825:32:9","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"_ftsoIndex","nameLocation":"1866:10:9","nodeType":"VariableDeclaration","scope":1214,"src":"1858:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"1858:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1857:20:9"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1214,"src":"1901:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1210,"name":"address","nodeType":"ElementaryTypeName","src":"1901:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1211,"nodeType":"ArrayTypeName","src":"1901:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1900:18:9"},"scope":1223,"src":"1816:103:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1215,"nodeType":"StructuredDocumentation","src":"1925:191:9","text":" In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs.\n A voter can whitelist again from a returned reward epoch onwards."},"functionSelector":"46538074","id":1222,"implemented":false,"kind":"function","modifiers":[],"name":"chilledUntilRewardEpoch","nameLocation":"2130:23:9","nodeType":"FunctionDefinition","parameters":{"id":1218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1217,"mutability":"mutable","name":"_voter","nameLocation":"2162:6:9","nodeType":"VariableDeclaration","scope":1222,"src":"2154:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1216,"name":"address","nodeType":"ElementaryTypeName","src":"2154:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2153:16:9"},"returnParameters":{"id":1221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1222,"src":"2193:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1219,"name":"uint256","nodeType":"ElementaryTypeName","src":"2193:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2192:9:9"},"scope":1223,"src":"2121:81:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1224,"src":"63:2141:9","usedErrors":[]}],"src":"32:2173:9"},"id":9},"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol","exportedSymbols":{"IGovernanceVotePower":[1272]},"id":1273,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1225,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IGovernanceVotePower","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1272,"linearizedBaseContracts":[1272],"name":"IGovernanceVotePower","nameLocation":"73:20:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1226,"nodeType":"StructuredDocumentation","src":"100:135:10","text":" @notice Delegate all governance vote power of `msg.sender` to `_to`.\n @param _to The address of the recipient*"},"functionSelector":"5c19a95c","id":1231,"implemented":false,"kind":"function","modifiers":[],"name":"delegate","nameLocation":"249:8:10","nodeType":"FunctionDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1228,"mutability":"mutable","name":"_to","nameLocation":"266:3:10","nodeType":"VariableDeclaration","scope":1231,"src":"258:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1227,"name":"address","nodeType":"ElementaryTypeName","src":"258:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"257:13:10"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[],"src":"279:0:10"},"scope":1272,"src":"240:40:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1232,"nodeType":"StructuredDocumentation","src":"286:82:10","text":" @notice Undelegate all governance vote power of `msg.sender``.*"},"functionSelector":"92ab89bb","id":1235,"implemented":false,"kind":"function","modifiers":[],"name":"undelegate","nameLocation":"382:10:10","nodeType":"FunctionDefinition","parameters":{"id":1233,"nodeType":"ParameterList","parameters":[],"src":"392:2:10"},"returnParameters":{"id":1234,"nodeType":"ParameterList","parameters":[],"src":"403:0:10"},"scope":1272,"src":"373:31:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"410:280:10","text":" @notice Get the governance vote power of `_who` at block `_blockNumber`\n @param _who The address to get voting power.\n @param _blockNumber The block number at which to fetch.\n @return _votePower    Governance vote power of `_who` at `_blockNumber`."},"functionSelector":"92bfe6d8","id":1245,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerOfAt","nameLocation":"704:13:10","nodeType":"FunctionDefinition","parameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"_who","nameLocation":"726:4:10","nodeType":"VariableDeclaration","scope":1245,"src":"718:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"718:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"_blockNumber","nameLocation":"740:12:10","nodeType":"VariableDeclaration","scope":1245,"src":"732:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1239,"name":"uint256","nodeType":"ElementaryTypeName","src":"732:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"717:36:10"},"returnParameters":{"id":1244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1245,"src":"776:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"776:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"775:9:10"},"scope":1272,"src":"695:90:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1246,"nodeType":"StructuredDocumentation","src":"791:199:10","text":" @notice Get the vote power of `account` at the current block.\n @param account The address to get voting power.\n @return Vote power of `account` at the current block number."},"functionSelector":"9ab24eb0","id":1253,"implemented":false,"kind":"function","modifiers":[],"name":"getVotes","nameLocation":"1008:8:10","nodeType":"FunctionDefinition","parameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"account","nameLocation":"1025:7:10","nodeType":"VariableDeclaration","scope":1253,"src":"1017:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1247,"name":"address","nodeType":"ElementaryTypeName","src":"1017:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1016:17:10"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1253,"src":"1057:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1250,"name":"uint256","nodeType":"ElementaryTypeName","src":"1057:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1056:9:10"},"scope":1272,"src":"999:67:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1254,"nodeType":"StructuredDocumentation","src":"1072:266:10","text":" @notice Get the delegate's address of `_who` at block `_blockNumber`\n @param _who The address to get delegate's address.\n @param _blockNumber The block number at which to fetch.\n @return Delegate's address of `_who` at `_blockNumber`."},"functionSelector":"3c028e9d","id":1263,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegateOfAt","nameLocation":"1352:15:10","nodeType":"FunctionDefinition","parameters":{"id":1259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1256,"mutability":"mutable","name":"_who","nameLocation":"1376:4:10","nodeType":"VariableDeclaration","scope":1263,"src":"1368:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1255,"name":"address","nodeType":"ElementaryTypeName","src":"1368:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1258,"mutability":"mutable","name":"_blockNumber","nameLocation":"1390:12:10","nodeType":"VariableDeclaration","scope":1263,"src":"1382:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1257,"name":"uint256","nodeType":"ElementaryTypeName","src":"1382:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1367:36:10"},"returnParameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1263,"src":"1427:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1260,"name":"address","nodeType":"ElementaryTypeName","src":"1427:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1426:9:10"},"scope":1272,"src":"1343:93:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1264,"nodeType":"StructuredDocumentation","src":"1442:212:10","text":" @notice Get the delegate's address of `_who` at the current block.\n @param _who The address to get delegate's address.\n @return Delegate's address of `_who` at the current block number."},"functionSelector":"b3e871ee","id":1271,"implemented":false,"kind":"function","modifiers":[],"name":"getDelegateOfAtNow","nameLocation":"1672:18:10","nodeType":"FunctionDefinition","parameters":{"id":1267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"_who","nameLocation":"1699:4:10","nodeType":"VariableDeclaration","scope":1271,"src":"1691:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"1691:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1690:14:10"},"returnParameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1271,"src":"1729:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1268,"name":"address","nodeType":"ElementaryTypeName","src":"1729:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1728:9:10"},"scope":1272,"src":"1663:75:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1273,"src":"63:1678:10","usedErrors":[]}],"src":"32:1710:10"},"id":10},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol","exportedSymbols":{"AddressValidity":[1318]},"id":1319,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1274,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:11"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressValidity","contractDependencies":[],"contractKind":"interface","documentation":{"id":1275,"nodeType":"StructuredDocumentation","src":"63:775:11","text":" @custom:name AddressValidity\n @custom:id 0x05\n @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n @author Flare\n @notice An assertion whether a string represents a valid address on an external chain.\n @custom:verification The address is checked against all validity criteria of the chain with `sourceId`.\n Indicator of validity is provided.\n If the address is valid, its standard form and standard hash are computed.\n Validity criteria for each supported chain:\n - [BTC](/specs/attestations/external-chains/address-validity/BTC.md)\n - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md)\n - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\n @custom:lut `0xffffffffffffffff` ($2^{64}-1$ in hex)"},"fullyImplemented":true,"id":1318,"linearizedBaseContracts":[1318],"name":"AddressValidity","nameLocation":"849:15:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AddressValidity.Request","id":1285,"members":[{"constant":false,"id":1277,"mutability":"mutable","name":"attestationType","nameLocation":"1284:15:11","nodeType":"VariableDeclaration","scope":1285,"src":"1276:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1276,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1276:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1279,"mutability":"mutable","name":"sourceId","nameLocation":"1317:8:11","nodeType":"VariableDeclaration","scope":1285,"src":"1309:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1278,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1309:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1281,"mutability":"mutable","name":"messageIntegrityCode","nameLocation":"1343:20:11","nodeType":"VariableDeclaration","scope":1285,"src":"1335:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1335:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"requestBody","nameLocation":"1385:11:11","nodeType":"VariableDeclaration","scope":1285,"src":"1373:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1310_storage_ptr","typeString":"struct AddressValidity.RequestBody"},"typeName":{"id":1283,"nodeType":"UserDefinedTypeName","pathNode":{"id":1282,"name":"RequestBody","nameLocations":["1373:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":1310,"src":"1373:11:11"},"referencedDeclaration":1310,"src":"1373:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1310_storage_ptr","typeString":"struct AddressValidity.RequestBody"}},"visibility":"internal"}],"name":"Request","nameLocation":"1258:7:11","nodeType":"StructDefinition","scope":1318,"src":"1251:152:11","visibility":"public"},{"canonicalName":"AddressValidity.Response","id":1300,"members":[{"constant":false,"id":1287,"mutability":"mutable","name":"attestationType","nameLocation":"2017:15:11","nodeType":"VariableDeclaration","scope":1300,"src":"2009:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2009:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"sourceId","nameLocation":"2050:8:11","nodeType":"VariableDeclaration","scope":1300,"src":"2042:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1288,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2042:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1291,"mutability":"mutable","name":"votingRound","nameLocation":"2075:11:11","nodeType":"VariableDeclaration","scope":1300,"src":"2068:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1290,"name":"uint64","nodeType":"ElementaryTypeName","src":"2068:6:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1293,"mutability":"mutable","name":"lowestUsedTimestamp","nameLocation":"2103:19:11","nodeType":"VariableDeclaration","scope":1300,"src":"2096:26:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1292,"name":"uint64","nodeType":"ElementaryTypeName","src":"2096:6:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1296,"mutability":"mutable","name":"requestBody","nameLocation":"2144:11:11","nodeType":"VariableDeclaration","scope":1300,"src":"2132:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1310_storage_ptr","typeString":"struct AddressValidity.RequestBody"},"typeName":{"id":1295,"nodeType":"UserDefinedTypeName","pathNode":{"id":1294,"name":"RequestBody","nameLocations":["2132:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":1310,"src":"2132:11:11"},"referencedDeclaration":1310,"src":"2132:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1310_storage_ptr","typeString":"struct AddressValidity.RequestBody"}},"visibility":"internal"},{"constant":false,"id":1299,"mutability":"mutable","name":"responseBody","nameLocation":"2178:12:11","nodeType":"VariableDeclaration","scope":1300,"src":"2165:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1317_storage_ptr","typeString":"struct AddressValidity.ResponseBody"},"typeName":{"id":1298,"nodeType":"UserDefinedTypeName","pathNode":{"id":1297,"name":"ResponseBody","nameLocations":["2165:12:11"],"nodeType":"IdentifierPath","referencedDeclaration":1317,"src":"2165:12:11"},"referencedDeclaration":1317,"src":"2165:12:11","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1317_storage_ptr","typeString":"struct AddressValidity.ResponseBody"}},"visibility":"internal"}],"name":"Response","nameLocation":"1990:8:11","nodeType":"StructDefinition","scope":1318,"src":"1983:214:11","visibility":"public"},{"canonicalName":"AddressValidity.Proof","id":1307,"members":[{"constant":false,"id":1303,"mutability":"mutable","name":"merkleProof","nameLocation":"2405:11:11","nodeType":"VariableDeclaration","scope":1307,"src":"2395:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2395:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1302,"nodeType":"ArrayTypeName","src":"2395:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1306,"mutability":"mutable","name":"data","nameLocation":"2435:4:11","nodeType":"VariableDeclaration","scope":1307,"src":"2426:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1300_storage_ptr","typeString":"struct AddressValidity.Response"},"typeName":{"id":1305,"nodeType":"UserDefinedTypeName","pathNode":{"id":1304,"name":"Response","nameLocations":["2426:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":1300,"src":"2426:8:11"},"referencedDeclaration":1300,"src":"2426:8:11","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1300_storage_ptr","typeString":"struct AddressValidity.Response"}},"visibility":"internal"}],"name":"Proof","nameLocation":"2379:5:11","nodeType":"StructDefinition","scope":1318,"src":"2372:74:11","visibility":"public"},{"canonicalName":"AddressValidity.RequestBody","id":1310,"members":[{"constant":false,"id":1309,"mutability":"mutable","name":"addressStr","nameLocation":"2618:10:11","nodeType":"VariableDeclaration","scope":1310,"src":"2611:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1308,"name":"string","nodeType":"ElementaryTypeName","src":"2611:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"RequestBody","nameLocation":"2589:11:11","nodeType":"StructDefinition","scope":1318,"src":"2582:53:11","visibility":"public"},{"canonicalName":"AddressValidity.ResponseBody","id":1317,"members":[{"constant":false,"id":1312,"mutability":"mutable","name":"isValid","nameLocation":"3063:7:11","nodeType":"VariableDeclaration","scope":1317,"src":"3058:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1311,"name":"bool","nodeType":"ElementaryTypeName","src":"3058:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1314,"mutability":"mutable","name":"standardAddress","nameLocation":"3087:15:11","nodeType":"VariableDeclaration","scope":1317,"src":"3080:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1313,"name":"string","nodeType":"ElementaryTypeName","src":"3080:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1316,"mutability":"mutable","name":"standardAddressHash","nameLocation":"3120:19:11","nodeType":"VariableDeclaration","scope":1317,"src":"3112:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1315,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3112:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"ResponseBody","nameLocation":"3035:12:11","nodeType":"StructDefinition","scope":1318,"src":"3028:118:11","visibility":"public"}],"scope":1319,"src":"839:2309:11","usedErrors":[]}],"src":"32:3117:11"},"id":11},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol","exportedSymbols":{"BalanceDecreasingTransaction":[1370]},"id":1371,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1320,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:12"},{"abstract":false,"baseContracts":[],"canonicalName":"BalanceDecreasingTransaction","contractDependencies":[],"contractKind":"interface","documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"63:2644:12","text":" @custom:name BalanceDecreasingTransaction\n @custom:id 0x02\n @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n @author Flare\n @notice A detection of a transaction that either decreases the balance for some address or is signed by the source address.\n Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate some funds locked by a smart contract on Flare.\n A transaction is considered “balance decreasing” for the address, if the balance after the transaction is lower than before or the address is among the signers of the transaction (even if its balance is greater than before the transaction).\n @custom:verification The transaction with `transactionId` is fetched from the API of the source blockchain node or relevant indexer.\n If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n Once the transaction is received, the response fields are extracted if the transaction is balance decreasing for the indicated address.\n Some of the request and response fields are chain specific as described below.\n The fields can be computed with the help of a [balance decreasing summary](/specs/attestations/external-chains/transactions.md#balance-decreasing-summary).\n ### UTXO (Bitcoin and Dogecoin)\n - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\n If the indicated input does not exist or the indicated input does not have the address, the attestation request is rejected.\n The `sourceAddress` is the address of the indicated transaction input.\n - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of all outputs with `sourceAddress`.\n Can be negative.\n - `blockTimestamp` is the mediantime of a block.\n ### XRPL\n - `sourceAddressIndicator` is the [standard address hash](/specs/attestations/external-chains/standardAddress.md#standard-address-hash) of the address whose balance has been decreased.\n If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance of the address was not lowered in the transaction, the attestation request is rejected.\n - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\n Can be negative.\n - `blockTimestamp` is the close_time of a ledger converted to unix time.\n @custom:lut `blockTimestamp`"},"fullyImplemented":true,"id":1370,"linearizedBaseContracts":[1370],"name":"BalanceDecreasingTransaction","nameLocation":"2718:28:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"BalanceDecreasingTransaction.Request","id":1331,"members":[{"constant":false,"id":1323,"mutability":"mutable","name":"attestationType","nameLocation":"3166:15:12","nodeType":"VariableDeclaration","scope":1331,"src":"3158:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3158:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1325,"mutability":"mutable","name":"sourceId","nameLocation":"3199:8:12","nodeType":"VariableDeclaration","scope":1331,"src":"3191:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3191:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1327,"mutability":"mutable","name":"messageIntegrityCode","nameLocation":"3225:20:12","nodeType":"VariableDeclaration","scope":1331,"src":"3217:28:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3217:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1330,"mutability":"mutable","name":"requestBody","nameLocation":"3267:11:12","nodeType":"VariableDeclaration","scope":1331,"src":"3255:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1358_storage_ptr","typeString":"struct BalanceDecreasingTransaction.RequestBody"},"typeName":{"id":1329,"nodeType":"UserDefinedTypeName","pathNode":{"id":1328,"name":"RequestBody","nameLocations":["3255:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1358,"src":"3255:11:12"},"referencedDeclaration":1358,"src":"3255:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1358_storage_ptr","typeString":"struct BalanceDecreasingTransaction.RequestBody"}},"visibility":"internal"}],"name":"Request","nameLocation":"3140:7:12","nodeType":"StructDefinition","scope":1370,"src":"3133:152:12","visibility":"public"},{"canonicalName":"BalanceDecreasingTransaction.Response","id":1346,"members":[{"constant":false,"id":1333,"mutability":"mutable","name":"attestationType","nameLocation":"3972:15:12","nodeType":"VariableDeclaration","scope":1346,"src":"3964:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1332,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3964:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1335,"mutability":"mutable","name":"sourceId","nameLocation":"4005:8:12","nodeType":"VariableDeclaration","scope":1346,"src":"3997:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3997:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1337,"mutability":"mutable","name":"votingRound","nameLocation":"4030:11:12","nodeType":"VariableDeclaration","scope":1346,"src":"4023:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1336,"name":"uint64","nodeType":"ElementaryTypeName","src":"4023:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1339,"mutability":"mutable","name":"lowestUsedTimestamp","nameLocation":"4058:19:12","nodeType":"VariableDeclaration","scope":1346,"src":"4051:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1338,"name":"uint64","nodeType":"ElementaryTypeName","src":"4051:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1342,"mutability":"mutable","name":"requestBody","nameLocation":"4099:11:12","nodeType":"VariableDeclaration","scope":1346,"src":"4087:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1358_storage_ptr","typeString":"struct BalanceDecreasingTransaction.RequestBody"},"typeName":{"id":1341,"nodeType":"UserDefinedTypeName","pathNode":{"id":1340,"name":"RequestBody","nameLocations":["4087:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":1358,"src":"4087:11:12"},"referencedDeclaration":1358,"src":"4087:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1358_storage_ptr","typeString":"struct BalanceDecreasingTransaction.RequestBody"}},"visibility":"internal"},{"constant":false,"id":1345,"mutability":"mutable","name":"responseBody","nameLocation":"4133:12:12","nodeType":"VariableDeclaration","scope":1346,"src":"4120:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1369_storage_ptr","typeString":"struct BalanceDecreasingTransaction.ResponseBody"},"typeName":{"id":1344,"nodeType":"UserDefinedTypeName","pathNode":{"id":1343,"name":"ResponseBody","nameLocations":["4120:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":1369,"src":"4120:12:12"},"referencedDeclaration":1369,"src":"4120:12:12","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1369_storage_ptr","typeString":"struct BalanceDecreasingTransaction.ResponseBody"}},"visibility":"internal"}],"name":"Response","nameLocation":"3945:8:12","nodeType":"StructDefinition","scope":1370,"src":"3938:214:12","visibility":"public"},{"canonicalName":"BalanceDecreasingTransaction.Proof","id":1353,"members":[{"constant":false,"id":1349,"mutability":"mutable","name":"merkleProof","nameLocation":"4360:11:12","nodeType":"VariableDeclaration","scope":1353,"src":"4350:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4350:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1348,"nodeType":"ArrayTypeName","src":"4350:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1352,"mutability":"mutable","name":"data","nameLocation":"4390:4:12","nodeType":"VariableDeclaration","scope":1353,"src":"4381:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1346_storage_ptr","typeString":"struct BalanceDecreasingTransaction.Response"},"typeName":{"id":1351,"nodeType":"UserDefinedTypeName","pathNode":{"id":1350,"name":"Response","nameLocations":["4381:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":1346,"src":"4381:8:12"},"referencedDeclaration":1346,"src":"4381:8:12","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1346_storage_ptr","typeString":"struct BalanceDecreasingTransaction.Response"}},"visibility":"internal"}],"name":"Proof","nameLocation":"4334:5:12","nodeType":"StructDefinition","scope":1370,"src":"4327:74:12","visibility":"public"},{"canonicalName":"BalanceDecreasingTransaction.RequestBody","id":1358,"members":[{"constant":false,"id":1355,"mutability":"mutable","name":"transactionId","nameLocation":"4697:13:12","nodeType":"VariableDeclaration","scope":1358,"src":"4689:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4689:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1357,"mutability":"mutable","name":"sourceAddressIndicator","nameLocation":"4728:22:12","nodeType":"VariableDeclaration","scope":1358,"src":"4720:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1356,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4720:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RequestBody","nameLocation":"4667:11:12","nodeType":"StructDefinition","scope":1370,"src":"4660:97:12","visibility":"public"},{"canonicalName":"BalanceDecreasingTransaction.ResponseBody","id":1369,"members":[{"constant":false,"id":1360,"mutability":"mutable","name":"blockNumber","nameLocation":"5355:11:12","nodeType":"VariableDeclaration","scope":1369,"src":"5348:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1359,"name":"uint64","nodeType":"ElementaryTypeName","src":"5348:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1362,"mutability":"mutable","name":"blockTimestamp","nameLocation":"5383:14:12","nodeType":"VariableDeclaration","scope":1369,"src":"5376:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1361,"name":"uint64","nodeType":"ElementaryTypeName","src":"5376:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"sourceAddressHash","nameLocation":"5415:17:12","nodeType":"VariableDeclaration","scope":1369,"src":"5407:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5407:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"spentAmount","nameLocation":"5449:11:12","nodeType":"VariableDeclaration","scope":1369,"src":"5442:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1365,"name":"int256","nodeType":"ElementaryTypeName","src":"5442:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"standardPaymentReference","nameLocation":"5478:24:12","nodeType":"VariableDeclaration","scope":1369,"src":"5470:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5470:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"ResponseBody","nameLocation":"5325:12:12","nodeType":"StructDefinition","scope":1370,"src":"5318:191:12","visibility":"public"}],"scope":1371,"src":"2708:2803:12","usedErrors":[]}],"src":"32:5480:12"},"id":12},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol","exportedSymbols":{"ConfirmedBlockHeightExists":[1420]},"id":1421,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1372,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:13"},{"abstract":false,"baseContracts":[],"canonicalName":"ConfirmedBlockHeightExists","contractDependencies":[],"contractKind":"interface","documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"63:1084:13","text":" @custom:name ConfirmedBlockHeightExists\n @custom:id 0x02\n @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n @author Flare\n @notice An assertion that a block with `blockNumber` is confirmed.\n It also provides data to compute the block production rate in the given time range.\n @custom:verification It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`.\n If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\n Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\n  Current confirmation heights consensus:\n | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\n | ------- | --------- | ----------------------- | ------------ |\n | `BTC`   | 0         | 6                       | mediantime   |\n | `DOGE`  | 2         | 60                      | mediantime   |\n | `XRP`   | 3         | 3                       | close_time   |\n @custom:lut `lowestQueryWindowBlockTimestamp`"},"fullyImplemented":true,"id":1420,"linearizedBaseContracts":[1420],"name":"ConfirmedBlockHeightExists","nameLocation":"1158:26:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ConfirmedBlockHeightExists.Request","id":1383,"members":[{"constant":false,"id":1375,"mutability":"mutable","name":"attestationType","nameLocation":"1615:15:13","nodeType":"VariableDeclaration","scope":1383,"src":"1607:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1607:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1377,"mutability":"mutable","name":"sourceId","nameLocation":"1648:8:13","nodeType":"VariableDeclaration","scope":1383,"src":"1640:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1640:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1379,"mutability":"mutable","name":"messageIntegrityCode","nameLocation":"1674:20:13","nodeType":"VariableDeclaration","scope":1383,"src":"1666:28:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1666:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1382,"mutability":"mutable","name":"requestBody","nameLocation":"1716:11:13","nodeType":"VariableDeclaration","scope":1383,"src":"1704:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1410_storage_ptr","typeString":"struct ConfirmedBlockHeightExists.RequestBody"},"typeName":{"id":1381,"nodeType":"UserDefinedTypeName","pathNode":{"id":1380,"name":"RequestBody","nameLocations":["1704:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1410,"src":"1704:11:13"},"referencedDeclaration":1410,"src":"1704:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1410_storage_ptr","typeString":"struct ConfirmedBlockHeightExists.RequestBody"}},"visibility":"internal"}],"name":"Request","nameLocation":"1589:7:13","nodeType":"StructDefinition","scope":1420,"src":"1582:152:13","visibility":"public"},{"canonicalName":"ConfirmedBlockHeightExists.Response","id":1398,"members":[{"constant":false,"id":1385,"mutability":"mutable","name":"attestationType","nameLocation":"2348:15:13","nodeType":"VariableDeclaration","scope":1398,"src":"2340:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1384,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2340:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1387,"mutability":"mutable","name":"sourceId","nameLocation":"2381:8:13","nodeType":"VariableDeclaration","scope":1398,"src":"2373:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1386,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2373:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1389,"mutability":"mutable","name":"votingRound","nameLocation":"2406:11:13","nodeType":"VariableDeclaration","scope":1398,"src":"2399:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1388,"name":"uint64","nodeType":"ElementaryTypeName","src":"2399:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1391,"mutability":"mutable","name":"lowestUsedTimestamp","nameLocation":"2434:19:13","nodeType":"VariableDeclaration","scope":1398,"src":"2427:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1390,"name":"uint64","nodeType":"ElementaryTypeName","src":"2427:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1394,"mutability":"mutable","name":"requestBody","nameLocation":"2475:11:13","nodeType":"VariableDeclaration","scope":1398,"src":"2463:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1410_storage_ptr","typeString":"struct ConfirmedBlockHeightExists.RequestBody"},"typeName":{"id":1393,"nodeType":"UserDefinedTypeName","pathNode":{"id":1392,"name":"RequestBody","nameLocations":["2463:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1410,"src":"2463:11:13"},"referencedDeclaration":1410,"src":"2463:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1410_storage_ptr","typeString":"struct ConfirmedBlockHeightExists.RequestBody"}},"visibility":"internal"},{"constant":false,"id":1397,"mutability":"mutable","name":"responseBody","nameLocation":"2509:12:13","nodeType":"VariableDeclaration","scope":1398,"src":"2496:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1419_storage_ptr","typeString":"struct ConfirmedBlockHeightExists.ResponseBody"},"typeName":{"id":1396,"nodeType":"UserDefinedTypeName","pathNode":{"id":1395,"name":"ResponseBody","nameLocations":["2496:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":1419,"src":"2496:12:13"},"referencedDeclaration":1419,"src":"2496:12:13","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1419_storage_ptr","typeString":"struct ConfirmedBlockHeightExists.ResponseBody"}},"visibility":"internal"}],"name":"Response","nameLocation":"2321:8:13","nodeType":"StructDefinition","scope":1420,"src":"2314:214:13","visibility":"public"},{"canonicalName":"ConfirmedBlockHeightExists.Proof","id":1405,"members":[{"constant":false,"id":1401,"mutability":"mutable","name":"merkleProof","nameLocation":"2736:11:13","nodeType":"VariableDeclaration","scope":1405,"src":"2726:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1399,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2726:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1400,"nodeType":"ArrayTypeName","src":"2726:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"data","nameLocation":"2766:4:13","nodeType":"VariableDeclaration","scope":1405,"src":"2757:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1398_storage_ptr","typeString":"struct ConfirmedBlockHeightExists.Response"},"typeName":{"id":1403,"nodeType":"UserDefinedTypeName","pathNode":{"id":1402,"name":"Response","nameLocations":["2757:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1398,"src":"2757:8:13"},"referencedDeclaration":1398,"src":"2757:8:13","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1398_storage_ptr","typeString":"struct ConfirmedBlockHeightExists.Response"}},"visibility":"internal"}],"name":"Proof","nameLocation":"2710:5:13","nodeType":"StructDefinition","scope":1420,"src":"2703:74:13","visibility":"public"},{"canonicalName":"ConfirmedBlockHeightExists.RequestBody","id":1410,"members":[{"constant":false,"id":1407,"mutability":"mutable","name":"blockNumber","nameLocation":"3107:11:13","nodeType":"VariableDeclaration","scope":1410,"src":"3100:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1406,"name":"uint64","nodeType":"ElementaryTypeName","src":"3100:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1409,"mutability":"mutable","name":"queryWindow","nameLocation":"3135:11:13","nodeType":"VariableDeclaration","scope":1410,"src":"3128:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1408,"name":"uint64","nodeType":"ElementaryTypeName","src":"3128:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"RequestBody","nameLocation":"3078:11:13","nodeType":"StructDefinition","scope":1420,"src":"3071:82:13","visibility":"public"},{"canonicalName":"ConfirmedBlockHeightExists.ResponseBody","id":1419,"members":[{"constant":false,"id":1412,"mutability":"mutable","name":"blockTimestamp","nameLocation":"4015:14:13","nodeType":"VariableDeclaration","scope":1419,"src":"4008:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1411,"name":"uint64","nodeType":"ElementaryTypeName","src":"4008:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1414,"mutability":"mutable","name":"numberOfConfirmations","nameLocation":"4046:21:13","nodeType":"VariableDeclaration","scope":1419,"src":"4039:28:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1413,"name":"uint64","nodeType":"ElementaryTypeName","src":"4039:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1416,"mutability":"mutable","name":"lowestQueryWindowBlockNumber","nameLocation":"4084:28:13","nodeType":"VariableDeclaration","scope":1419,"src":"4077:35:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1415,"name":"uint64","nodeType":"ElementaryTypeName","src":"4077:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1418,"mutability":"mutable","name":"lowestQueryWindowBlockTimestamp","nameLocation":"4129:31:13","nodeType":"VariableDeclaration","scope":1419,"src":"4122:38:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1417,"name":"uint64","nodeType":"ElementaryTypeName","src":"4122:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"ResponseBody","nameLocation":"3985:12:13","nodeType":"StructDefinition","scope":1420,"src":"3978:189:13","visibility":"public"}],"scope":1421,"src":"1148:3021:13","usedErrors":[]}],"src":"32:4138:13"},"id":13},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol","exportedSymbols":{"EVMTransaction":[1501]},"id":1502,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1422,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:14"},{"abstract":false,"baseContracts":[],"canonicalName":"EVMTransaction","contractDependencies":[],"contractKind":"interface","documentation":{"id":1423,"nodeType":"StructuredDocumentation","src":"63:510:14","text":" @custom:name EVMTransaction\n @custom:id 0x06\n @custom:supported ETH, FLR, SGB, testETH, testFLR, testSGB\n @author Flare\n @notice A relay of a transaction from an EVM chain.\n This type is only relevant for EVM-compatible chains.\n @custom:verification If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed.\n If an indicated event does not exist, the request is rejected.\n @custom:lut `timestamp`"},"fullyImplemented":true,"id":1501,"linearizedBaseContracts":[1501],"name":"EVMTransaction","nameLocation":"584:14:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EVMTransaction.Request","id":1433,"members":[{"constant":false,"id":1425,"mutability":"mutable","name":"attestationType","nameLocation":"1019:15:14","nodeType":"VariableDeclaration","scope":1433,"src":"1011:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1011:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1427,"mutability":"mutable","name":"sourceId","nameLocation":"1052:8:14","nodeType":"VariableDeclaration","scope":1433,"src":"1044:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1426,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1044:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1429,"mutability":"mutable","name":"messageIntegrityCode","nameLocation":"1078:20:14","nodeType":"VariableDeclaration","scope":1433,"src":"1070:28:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1428,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1070:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1432,"mutability":"mutable","name":"requestBody","nameLocation":"1120:11:14","nodeType":"VariableDeclaration","scope":1433,"src":"1108:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1467_storage_ptr","typeString":"struct EVMTransaction.RequestBody"},"typeName":{"id":1431,"nodeType":"UserDefinedTypeName","pathNode":{"id":1430,"name":"RequestBody","nameLocations":["1108:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"1108:11:14"},"referencedDeclaration":1467,"src":"1108:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1467_storage_ptr","typeString":"struct EVMTransaction.RequestBody"}},"visibility":"internal"}],"name":"Request","nameLocation":"993:7:14","nodeType":"StructDefinition","scope":1501,"src":"986:152:14","visibility":"public"},{"canonicalName":"EVMTransaction.Response","id":1448,"members":[{"constant":false,"id":1435,"mutability":"mutable","name":"attestationType","nameLocation":"1752:15:14","nodeType":"VariableDeclaration","scope":1448,"src":"1744:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1434,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1744:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"sourceId","nameLocation":"1785:8:14","nodeType":"VariableDeclaration","scope":1448,"src":"1777:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1777:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1439,"mutability":"mutable","name":"votingRound","nameLocation":"1810:11:14","nodeType":"VariableDeclaration","scope":1448,"src":"1803:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1438,"name":"uint64","nodeType":"ElementaryTypeName","src":"1803:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1441,"mutability":"mutable","name":"lowestUsedTimestamp","nameLocation":"1838:19:14","nodeType":"VariableDeclaration","scope":1448,"src":"1831:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1440,"name":"uint64","nodeType":"ElementaryTypeName","src":"1831:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1444,"mutability":"mutable","name":"requestBody","nameLocation":"1879:11:14","nodeType":"VariableDeclaration","scope":1448,"src":"1867:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1467_storage_ptr","typeString":"struct EVMTransaction.RequestBody"},"typeName":{"id":1443,"nodeType":"UserDefinedTypeName","pathNode":{"id":1442,"name":"RequestBody","nameLocations":["1867:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1467,"src":"1867:11:14"},"referencedDeclaration":1467,"src":"1867:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1467_storage_ptr","typeString":"struct EVMTransaction.RequestBody"}},"visibility":"internal"},{"constant":false,"id":1447,"mutability":"mutable","name":"responseBody","nameLocation":"1913:12:14","nodeType":"VariableDeclaration","scope":1448,"src":"1900:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1488_storage_ptr","typeString":"struct EVMTransaction.ResponseBody"},"typeName":{"id":1446,"nodeType":"UserDefinedTypeName","pathNode":{"id":1445,"name":"ResponseBody","nameLocations":["1900:12:14"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"1900:12:14"},"referencedDeclaration":1488,"src":"1900:12:14","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1488_storage_ptr","typeString":"struct EVMTransaction.ResponseBody"}},"visibility":"internal"}],"name":"Response","nameLocation":"1725:8:14","nodeType":"StructDefinition","scope":1501,"src":"1718:214:14","visibility":"public"},{"canonicalName":"EVMTransaction.Proof","id":1455,"members":[{"constant":false,"id":1451,"mutability":"mutable","name":"merkleProof","nameLocation":"2140:11:14","nodeType":"VariableDeclaration","scope":1455,"src":"2130:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2130:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1450,"nodeType":"ArrayTypeName","src":"2130:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1454,"mutability":"mutable","name":"data","nameLocation":"2170:4:14","nodeType":"VariableDeclaration","scope":1455,"src":"2161:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1448_storage_ptr","typeString":"struct EVMTransaction.Response"},"typeName":{"id":1453,"nodeType":"UserDefinedTypeName","pathNode":{"id":1452,"name":"Response","nameLocations":["2161:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1448,"src":"2161:8:14"},"referencedDeclaration":1448,"src":"2161:8:14","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1448_storage_ptr","typeString":"struct EVMTransaction.Response"}},"visibility":"internal"}],"name":"Proof","nameLocation":"2114:5:14","nodeType":"StructDefinition","scope":1501,"src":"2107:74:14","visibility":"public"},{"canonicalName":"EVMTransaction.RequestBody","id":1467,"members":[{"constant":false,"id":1457,"mutability":"mutable","name":"transactionHash","nameLocation":"3382:15:14","nodeType":"VariableDeclaration","scope":1467,"src":"3374:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1456,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3374:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1459,"mutability":"mutable","name":"requiredConfirmations","nameLocation":"3414:21:14","nodeType":"VariableDeclaration","scope":1467,"src":"3407:28:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1458,"name":"uint16","nodeType":"ElementaryTypeName","src":"3407:6:14","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1461,"mutability":"mutable","name":"provideInput","nameLocation":"3450:12:14","nodeType":"VariableDeclaration","scope":1467,"src":"3445:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1460,"name":"bool","nodeType":"ElementaryTypeName","src":"3445:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1463,"mutability":"mutable","name":"listEvents","nameLocation":"3477:10:14","nodeType":"VariableDeclaration","scope":1467,"src":"3472:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1462,"name":"bool","nodeType":"ElementaryTypeName","src":"3472:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1466,"mutability":"mutable","name":"logIndices","nameLocation":"3506:10:14","nodeType":"VariableDeclaration","scope":1467,"src":"3497:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":1464,"name":"uint32","nodeType":"ElementaryTypeName","src":"3497:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1465,"nodeType":"ArrayTypeName","src":"3497:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"}],"name":"RequestBody","nameLocation":"3352:11:14","nodeType":"StructDefinition","scope":1501,"src":"3345:178:14","visibility":"public"},{"canonicalName":"EVMTransaction.ResponseBody","id":1488,"members":[{"constant":false,"id":1469,"mutability":"mutable","name":"blockNumber","nameLocation":"4732:11:14","nodeType":"VariableDeclaration","scope":1488,"src":"4725:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1468,"name":"uint64","nodeType":"ElementaryTypeName","src":"4725:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"timestamp","nameLocation":"4760:9:14","nodeType":"VariableDeclaration","scope":1488,"src":"4753:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1470,"name":"uint64","nodeType":"ElementaryTypeName","src":"4753:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1473,"mutability":"mutable","name":"sourceAddress","nameLocation":"4787:13:14","nodeType":"VariableDeclaration","scope":1488,"src":"4779:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1472,"name":"address","nodeType":"ElementaryTypeName","src":"4779:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1475,"mutability":"mutable","name":"isDeployment","nameLocation":"4815:12:14","nodeType":"VariableDeclaration","scope":1488,"src":"4810:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1474,"name":"bool","nodeType":"ElementaryTypeName","src":"4810:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1477,"mutability":"mutable","name":"receivingAddress","nameLocation":"4845:16:14","nodeType":"VariableDeclaration","scope":1488,"src":"4837:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1476,"name":"address","nodeType":"ElementaryTypeName","src":"4837:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1479,"mutability":"mutable","name":"value","nameLocation":"4879:5:14","nodeType":"VariableDeclaration","scope":1488,"src":"4871:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1478,"name":"uint256","nodeType":"ElementaryTypeName","src":"4871:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1481,"mutability":"mutable","name":"input","nameLocation":"4900:5:14","nodeType":"VariableDeclaration","scope":1488,"src":"4894:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1480,"name":"bytes","nodeType":"ElementaryTypeName","src":"4894:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"status","nameLocation":"4921:6:14","nodeType":"VariableDeclaration","scope":1488,"src":"4915:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1482,"name":"uint8","nodeType":"ElementaryTypeName","src":"4915:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1487,"mutability":"mutable","name":"events","nameLocation":"4945:6:14","nodeType":"VariableDeclaration","scope":1488,"src":"4937:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Event_$1500_storage_$dyn_storage_ptr","typeString":"struct EVMTransaction.Event[]"},"typeName":{"baseType":{"id":1485,"nodeType":"UserDefinedTypeName","pathNode":{"id":1484,"name":"Event","nameLocations":["4937:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":1500,"src":"4937:5:14"},"referencedDeclaration":1500,"src":"4937:5:14","typeDescriptions":{"typeIdentifier":"t_struct$_Event_$1500_storage_ptr","typeString":"struct EVMTransaction.Event"}},"id":1486,"nodeType":"ArrayTypeName","src":"4937:7:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Event_$1500_storage_$dyn_storage_ptr","typeString":"struct EVMTransaction.Event[]"}},"visibility":"internal"}],"name":"ResponseBody","nameLocation":"4702:12:14","nodeType":"StructDefinition","scope":1501,"src":"4695:263:14","visibility":"public"},{"canonicalName":"EVMTransaction.Event","id":1500,"members":[{"constant":false,"id":1490,"mutability":"mutable","name":"logIndex","nameLocation":"5717:8:14","nodeType":"VariableDeclaration","scope":1500,"src":"5710:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1489,"name":"uint32","nodeType":"ElementaryTypeName","src":"5710:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1492,"mutability":"mutable","name":"emitterAddress","nameLocation":"5743:14:14","nodeType":"VariableDeclaration","scope":1500,"src":"5735:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1491,"name":"address","nodeType":"ElementaryTypeName","src":"5735:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1495,"mutability":"mutable","name":"topics","nameLocation":"5777:6:14","nodeType":"VariableDeclaration","scope":1500,"src":"5767:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5767:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1494,"nodeType":"ArrayTypeName","src":"5767:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"data","nameLocation":"5799:4:14","nodeType":"VariableDeclaration","scope":1500,"src":"5793:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1496,"name":"bytes","nodeType":"ElementaryTypeName","src":"5793:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1499,"mutability":"mutable","name":"removed","nameLocation":"5818:7:14","nodeType":"VariableDeclaration","scope":1500,"src":"5813:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1498,"name":"bool","nodeType":"ElementaryTypeName","src":"5813:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Event","nameLocation":"5694:5:14","nodeType":"StructDefinition","scope":1501,"src":"5687:145:14","visibility":"public"}],"scope":1502,"src":"574:5260:14","usedErrors":[]}],"src":"32:5803:14"},"id":14},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol","exportedSymbols":{"AddressValidity":[1318],"IAddressValidityVerification":[1513]},"id":1514,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1503,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:15"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol","file":"./AddressValidity.sol","id":1504,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1514,"sourceUnit":1319,"src":"63:31:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAddressValidityVerification","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1513,"linearizedBaseContracts":[1513],"name":"IAddressValidityVerification","nameLocation":"106:28:15","nodeType":"ContractDefinition","nodes":[{"functionSelector":"f34ef587","id":1512,"implemented":false,"kind":"function","modifiers":[],"name":"verifyAddressValidity","nameLocation":"150:21:15","nodeType":"FunctionDefinition","parameters":{"id":1508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"_proof","nameLocation":"210:6:15","nodeType":"VariableDeclaration","scope":1512,"src":"179:37:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1307_calldata_ptr","typeString":"struct AddressValidity.Proof"},"typeName":{"id":1506,"nodeType":"UserDefinedTypeName","pathNode":{"id":1505,"name":"AddressValidity.Proof","nameLocations":["179:15:15","195:5:15"],"nodeType":"IdentifierPath","referencedDeclaration":1307,"src":"179:21:15"},"referencedDeclaration":1307,"src":"179:21:15","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1307_storage_ptr","typeString":"struct AddressValidity.Proof"}},"visibility":"internal"}],"src":"171:50:15"},"returnParameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"mutability":"mutable","name":"_proved","nameLocation":"250:7:15","nodeType":"VariableDeclaration","scope":1512,"src":"245:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1509,"name":"bool","nodeType":"ElementaryTypeName","src":"245:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"244:14:15"},"scope":1513,"src":"141:118:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1514,"src":"96:165:15","usedErrors":[]}],"src":"32:233:15"},"id":15},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol","exportedSymbols":{"BalanceDecreasingTransaction":[1370],"IBalanceDecreasingTransactionVerification":[1525]},"id":1526,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1515,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:16"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol","file":"./BalanceDecreasingTransaction.sol","id":1516,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1526,"sourceUnit":1371,"src":"63:44:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IBalanceDecreasingTransactionVerification","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1525,"linearizedBaseContracts":[1525],"name":"IBalanceDecreasingTransactionVerification","nameLocation":"119:41:16","nodeType":"ContractDefinition","nodes":[{"functionSelector":"6ec659c7","id":1524,"implemented":false,"kind":"function","modifiers":[],"name":"verifyBalanceDecreasingTransaction","nameLocation":"176:34:16","nodeType":"FunctionDefinition","parameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"_proof","nameLocation":"262:6:16","nodeType":"VariableDeclaration","scope":1524,"src":"218:50:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1353_calldata_ptr","typeString":"struct BalanceDecreasingTransaction.Proof"},"typeName":{"id":1518,"nodeType":"UserDefinedTypeName","pathNode":{"id":1517,"name":"BalanceDecreasingTransaction.Proof","nameLocations":["218:28:16","247:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":1353,"src":"218:34:16"},"referencedDeclaration":1353,"src":"218:34:16","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1353_storage_ptr","typeString":"struct BalanceDecreasingTransaction.Proof"}},"visibility":"internal"}],"src":"210:63:16"},"returnParameters":{"id":1523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1522,"mutability":"mutable","name":"_proved","nameLocation":"302:7:16","nodeType":"VariableDeclaration","scope":1524,"src":"297:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1521,"name":"bool","nodeType":"ElementaryTypeName","src":"297:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"296:14:16"},"scope":1525,"src":"167:144:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1526,"src":"109:204:16","usedErrors":[]}],"src":"32:285:16"},"id":16},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol","exportedSymbols":{"ConfirmedBlockHeightExists":[1420],"IConfirmedBlockHeightExistsVerification":[1537]},"id":1538,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1527,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:17"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol","file":"./ConfirmedBlockHeightExists.sol","id":1528,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1538,"sourceUnit":1421,"src":"63:42:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IConfirmedBlockHeightExistsVerification","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1537,"linearizedBaseContracts":[1537],"name":"IConfirmedBlockHeightExistsVerification","nameLocation":"117:39:17","nodeType":"ContractDefinition","nodes":[{"functionSelector":"5e30ebfb","id":1536,"implemented":false,"kind":"function","modifiers":[],"name":"verifyConfirmedBlockHeightExists","nameLocation":"172:32:17","nodeType":"FunctionDefinition","parameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"mutability":"mutable","name":"_proof","nameLocation":"254:6:17","nodeType":"VariableDeclaration","scope":1536,"src":"212:48:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1405_calldata_ptr","typeString":"struct ConfirmedBlockHeightExists.Proof"},"typeName":{"id":1530,"nodeType":"UserDefinedTypeName","pathNode":{"id":1529,"name":"ConfirmedBlockHeightExists.Proof","nameLocations":["212:26:17","239:5:17"],"nodeType":"IdentifierPath","referencedDeclaration":1405,"src":"212:32:17"},"referencedDeclaration":1405,"src":"212:32:17","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1405_storage_ptr","typeString":"struct ConfirmedBlockHeightExists.Proof"}},"visibility":"internal"}],"src":"204:61:17"},"returnParameters":{"id":1535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1534,"mutability":"mutable","name":"_proved","nameLocation":"294:7:17","nodeType":"VariableDeclaration","scope":1536,"src":"289:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1533,"name":"bool","nodeType":"ElementaryTypeName","src":"289:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"288:14:17"},"scope":1537,"src":"163:140:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1538,"src":"107:198:17","usedErrors":[]}],"src":"32:277:17"},"id":17},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol","exportedSymbols":{"EVMTransaction":[1501],"IEVMTransactionVerification":[1549]},"id":1550,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1539,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:18"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol","file":"./EVMTransaction.sol","id":1540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1550,"sourceUnit":1502,"src":"63:30:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IEVMTransactionVerification","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1549,"linearizedBaseContracts":[1549],"name":"IEVMTransactionVerification","nameLocation":"105:27:18","nodeType":"ContractDefinition","nodes":[{"functionSelector":"58fbe9e1","id":1548,"implemented":false,"kind":"function","modifiers":[],"name":"verifyEVMTransaction","nameLocation":"148:20:18","nodeType":"FunctionDefinition","parameters":{"id":1544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1543,"mutability":"mutable","name":"_proof","nameLocation":"206:6:18","nodeType":"VariableDeclaration","scope":1548,"src":"176:36:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof"},"typeName":{"id":1542,"nodeType":"UserDefinedTypeName","pathNode":{"id":1541,"name":"EVMTransaction.Proof","nameLocations":["176:14:18","191:5:18"],"nodeType":"IdentifierPath","referencedDeclaration":1455,"src":"176:20:18"},"referencedDeclaration":1455,"src":"176:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_storage_ptr","typeString":"struct EVMTransaction.Proof"}},"visibility":"internal"}],"src":"168:49:18"},"returnParameters":{"id":1547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"mutability":"mutable","name":"_proved","nameLocation":"246:7:18","nodeType":"VariableDeclaration","scope":1548,"src":"241:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1545,"name":"bool","nodeType":"ElementaryTypeName","src":"241:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"240:14:18"},"scope":1549,"src":"139:116:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1550,"src":"95:162:18","usedErrors":[]}],"src":"32:229:18"},"id":18},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol","exportedSymbols":{"IPaymentVerification":[1561],"Payment":[1690]},"id":1562,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1551,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:19"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol","file":"./Payment.sol","id":1552,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1562,"sourceUnit":1691,"src":"63:23:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPaymentVerification","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1561,"linearizedBaseContracts":[1561],"name":"IPaymentVerification","nameLocation":"98:20:19","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8cc386ce","id":1560,"implemented":false,"kind":"function","modifiers":[],"name":"verifyPayment","nameLocation":"134:13:19","nodeType":"FunctionDefinition","parameters":{"id":1556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1555,"mutability":"mutable","name":"_proof","nameLocation":"178:6:19","nodeType":"VariableDeclaration","scope":1560,"src":"155:29:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1657_calldata_ptr","typeString":"struct Payment.Proof"},"typeName":{"id":1554,"nodeType":"UserDefinedTypeName","pathNode":{"id":1553,"name":"Payment.Proof","nameLocations":["155:7:19","163:5:19"],"nodeType":"IdentifierPath","referencedDeclaration":1657,"src":"155:13:19"},"referencedDeclaration":1657,"src":"155:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1657_storage_ptr","typeString":"struct Payment.Proof"}},"visibility":"internal"}],"src":"147:42:19"},"returnParameters":{"id":1559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1558,"mutability":"mutable","name":"_proved","nameLocation":"218:7:19","nodeType":"VariableDeclaration","scope":1560,"src":"213:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1557,"name":"bool","nodeType":"ElementaryTypeName","src":"213:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"212:14:19"},"scope":1561,"src":"125:102:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1562,"src":"88:141:19","usedErrors":[]}],"src":"32:201:19"},"id":19},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol","exportedSymbols":{"IReferencedPaymentNonexistenceVerification":[1573],"ReferencedPaymentNonexistence":[1746]},"id":1574,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1563,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:20"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol","file":"./ReferencedPaymentNonexistence.sol","id":1564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1574,"sourceUnit":1747,"src":"63:45:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IReferencedPaymentNonexistenceVerification","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1573,"linearizedBaseContracts":[1573],"name":"IReferencedPaymentNonexistenceVerification","nameLocation":"120:42:20","nodeType":"ContractDefinition","nodes":[{"functionSelector":"be4b1ed8","id":1572,"implemented":false,"kind":"function","modifiers":[],"name":"verifyReferencedPaymentNonexistence","nameLocation":"178:35:20","nodeType":"FunctionDefinition","parameters":{"id":1568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1567,"mutability":"mutable","name":"_proof","nameLocation":"266:6:20","nodeType":"VariableDeclaration","scope":1572,"src":"221:51:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1725_calldata_ptr","typeString":"struct ReferencedPaymentNonexistence.Proof"},"typeName":{"id":1566,"nodeType":"UserDefinedTypeName","pathNode":{"id":1565,"name":"ReferencedPaymentNonexistence.Proof","nameLocations":["221:29:20","251:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":1725,"src":"221:35:20"},"referencedDeclaration":1725,"src":"221:35:20","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1725_storage_ptr","typeString":"struct ReferencedPaymentNonexistence.Proof"}},"visibility":"internal"}],"src":"213:64:20"},"returnParameters":{"id":1571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"_proved","nameLocation":"306:7:20","nodeType":"VariableDeclaration","scope":1572,"src":"301:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1569,"name":"bool","nodeType":"ElementaryTypeName","src":"301:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"300:14:20"},"scope":1573,"src":"169:146:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1574,"src":"110:207:20","usedErrors":[]}],"src":"32:289:20"},"id":20},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol","exportedSymbols":{"IStateConnector":[1622]},"id":1623,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1575,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IStateConnector","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1622,"linearizedBaseContracts":[1622],"name":"IStateConnector","nameLocation":"112:15:21","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"7cbc6812801238dea8eb58356bb62b95dbce8dc28498aa30e7d2c6873ed36cc7","id":1583,"name":"AttestationRequest","nameLocation":"140:18:21","nodeType":"EventDefinition","parameters":{"id":1582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1577,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"176:6:21","nodeType":"VariableDeclaration","scope":1583,"src":"168:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1576,"name":"address","nodeType":"ElementaryTypeName","src":"168:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1579,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"200:9:21","nodeType":"VariableDeclaration","scope":1583,"src":"192:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1578,"name":"uint256","nodeType":"ElementaryTypeName","src":"192:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1581,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"225:4:21","nodeType":"VariableDeclaration","scope":1583,"src":"219:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1580,"name":"bytes","nodeType":"ElementaryTypeName","src":"219:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"158:77:21"},"src":"134:102:21"},{"anonymous":false,"eventSelector":"8ffd19aa79a62d0764e560d21b1245698310783be781d7d80b38233d4d7d288c","id":1589,"name":"RoundFinalised","nameLocation":"248:14:21","nodeType":"EventDefinition","parameters":{"id":1588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1585,"indexed":true,"mutability":"mutable","name":"roundId","nameLocation":"288:7:21","nodeType":"VariableDeclaration","scope":1589,"src":"272:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1584,"name":"uint256","nodeType":"ElementaryTypeName","src":"272:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1587,"indexed":false,"mutability":"mutable","name":"merkleRoot","nameLocation":"313:10:21","nodeType":"VariableDeclaration","scope":1589,"src":"305:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"305:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"262:67:21"},"src":"242:88:21"},{"documentation":{"id":1590,"nodeType":"StructuredDocumentation","src":"336:158:21","text":" The method to call for requesting a new attestation.\n Emits event `AttestationRequest`, which triggers work by attestation providers."},"functionSelector":"f64b6fda","id":1595,"implemented":false,"kind":"function","modifiers":[],"name":"requestAttestations","nameLocation":"508:19:21","nodeType":"FunctionDefinition","parameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1592,"mutability":"mutable","name":"_data","nameLocation":"543:5:21","nodeType":"VariableDeclaration","scope":1595,"src":"528:20:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1591,"name":"bytes","nodeType":"ElementaryTypeName","src":"528:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"527:22:21"},"returnParameters":{"id":1594,"nodeType":"ParameterList","parameters":[],"src":"558:0:21"},"scope":1622,"src":"499:60:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1596,"nodeType":"StructuredDocumentation","src":"565:43:21","text":" Last finalized round id."},"functionSelector":"dd862157","id":1601,"implemented":false,"kind":"function","modifiers":[],"name":"lastFinalizedRoundId","nameLocation":"622:20:21","nodeType":"FunctionDefinition","parameters":{"id":1597,"nodeType":"ParameterList","parameters":[],"src":"642:2:21"},"returnParameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1599,"mutability":"mutable","name":"_roundId","nameLocation":"676:8:21","nodeType":"VariableDeclaration","scope":1601,"src":"668:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1598,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"667:18:21"},"scope":1622,"src":"613:73:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1602,"nodeType":"StructuredDocumentation","src":"692:80:21","text":" Get Merkle root for the round and check for buffer overflows."},"functionSelector":"3c70b357","id":1609,"implemented":false,"kind":"function","modifiers":[],"name":"merkleRoot","nameLocation":"786:10:21","nodeType":"FunctionDefinition","parameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1604,"mutability":"mutable","name":"_roundId","nameLocation":"805:8:21","nodeType":"VariableDeclaration","scope":1609,"src":"797:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"796:18:21"},"returnParameters":{"id":1608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1609,"src":"838:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"838:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"837:9:21"},"scope":1622,"src":"777:70:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1610,"nodeType":"StructuredDocumentation","src":"853:126:21","text":" The first buffer timestamp\n (start time in seconds for converting the timestamp into a round number)."},"functionSelector":"4b8a125f","id":1615,"implemented":false,"kind":"function","modifiers":[],"name":"BUFFER_TIMESTAMP_OFFSET","nameLocation":"993:23:21","nodeType":"FunctionDefinition","parameters":{"id":1611,"nodeType":"ParameterList","parameters":[],"src":"1016:2:21"},"returnParameters":{"id":1614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1615,"src":"1042:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"1042:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1041:9:21"},"scope":1622,"src":"984:67:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1616,"nodeType":"StructuredDocumentation","src":"1057:166:21","text":" Amount of time a buffer is active before cycling to the next one\n (round length in seconds for converting the timestamp into a round number)."},"functionSelector":"f5f59a4a","id":1621,"implemented":false,"kind":"function","modifiers":[],"name":"BUFFER_WINDOW","nameLocation":"1237:13:21","nodeType":"FunctionDefinition","parameters":{"id":1617,"nodeType":"ParameterList","parameters":[],"src":"1250:2:21"},"returnParameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1621,"src":"1276:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1618,"name":"uint256","nodeType":"ElementaryTypeName","src":"1276:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1275:9:21"},"scope":1622,"src":"1228:57:21","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1623,"src":"102:1185:21","usedErrors":[]}],"src":"32:1256:21"},"id":21},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol","exportedSymbols":{"Payment":[1690]},"id":1691,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1624,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:22"},{"abstract":false,"baseContracts":[],"canonicalName":"Payment","contractDependencies":[],"contractKind":"interface","documentation":{"id":1625,"nodeType":"StructuredDocumentation","src":"63:1597:22","text":" @custom:name Payment\n @custom:id 0x01\n @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n @author Flare\n @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\n Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\n transaction should be formed to be provable by this attestation type.\n The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.\n @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer.\n If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain.\n If the summary is successfully calculated, the response is assembled from the summary.\n `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\n For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\n For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\n If the summary is not successfully calculated, the attestation request is rejected.\n @custom:lut `blockTimestamp`"},"fullyImplemented":true,"id":1690,"linearizedBaseContracts":[1690],"name":"Payment","nameLocation":"1671:7:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Payment.Request","id":1635,"members":[{"constant":false,"id":1627,"mutability":"mutable","name":"attestationType","nameLocation":"2098:15:22","nodeType":"VariableDeclaration","scope":1635,"src":"2090:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2090:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1629,"mutability":"mutable","name":"sourceId","nameLocation":"2131:8:22","nodeType":"VariableDeclaration","scope":1635,"src":"2123:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2123:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1631,"mutability":"mutable","name":"messageIntegrityCode","nameLocation":"2157:20:22","nodeType":"VariableDeclaration","scope":1635,"src":"2149:28:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1630,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2149:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1634,"mutability":"mutable","name":"requestBody","nameLocation":"2199:11:22","nodeType":"VariableDeclaration","scope":1635,"src":"2187:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1664_storage_ptr","typeString":"struct Payment.RequestBody"},"typeName":{"id":1633,"nodeType":"UserDefinedTypeName","pathNode":{"id":1632,"name":"RequestBody","nameLocations":["2187:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":1664,"src":"2187:11:22"},"referencedDeclaration":1664,"src":"2187:11:22","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1664_storage_ptr","typeString":"struct Payment.RequestBody"}},"visibility":"internal"}],"name":"Request","nameLocation":"2072:7:22","nodeType":"StructDefinition","scope":1690,"src":"2065:152:22","visibility":"public"},{"canonicalName":"Payment.Response","id":1650,"members":[{"constant":false,"id":1637,"mutability":"mutable","name":"attestationType","nameLocation":"2831:15:22","nodeType":"VariableDeclaration","scope":1650,"src":"2823:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2823:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1639,"mutability":"mutable","name":"sourceId","nameLocation":"2864:8:22","nodeType":"VariableDeclaration","scope":1650,"src":"2856:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1638,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2856:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1641,"mutability":"mutable","name":"votingRound","nameLocation":"2889:11:22","nodeType":"VariableDeclaration","scope":1650,"src":"2882:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1640,"name":"uint64","nodeType":"ElementaryTypeName","src":"2882:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1643,"mutability":"mutable","name":"lowestUsedTimestamp","nameLocation":"2917:19:22","nodeType":"VariableDeclaration","scope":1650,"src":"2910:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1642,"name":"uint64","nodeType":"ElementaryTypeName","src":"2910:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"requestBody","nameLocation":"2958:11:22","nodeType":"VariableDeclaration","scope":1650,"src":"2946:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1664_storage_ptr","typeString":"struct Payment.RequestBody"},"typeName":{"id":1645,"nodeType":"UserDefinedTypeName","pathNode":{"id":1644,"name":"RequestBody","nameLocations":["2946:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":1664,"src":"2946:11:22"},"referencedDeclaration":1664,"src":"2946:11:22","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1664_storage_ptr","typeString":"struct Payment.RequestBody"}},"visibility":"internal"},{"constant":false,"id":1649,"mutability":"mutable","name":"responseBody","nameLocation":"2992:12:22","nodeType":"VariableDeclaration","scope":1650,"src":"2979:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1689_storage_ptr","typeString":"struct Payment.ResponseBody"},"typeName":{"id":1648,"nodeType":"UserDefinedTypeName","pathNode":{"id":1647,"name":"ResponseBody","nameLocations":["2979:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":1689,"src":"2979:12:22"},"referencedDeclaration":1689,"src":"2979:12:22","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1689_storage_ptr","typeString":"struct Payment.ResponseBody"}},"visibility":"internal"}],"name":"Response","nameLocation":"2804:8:22","nodeType":"StructDefinition","scope":1690,"src":"2797:214:22","visibility":"public"},{"canonicalName":"Payment.Proof","id":1657,"members":[{"constant":false,"id":1653,"mutability":"mutable","name":"merkleProof","nameLocation":"3219:11:22","nodeType":"VariableDeclaration","scope":1657,"src":"3209:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3209:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1652,"nodeType":"ArrayTypeName","src":"3209:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"data","nameLocation":"3249:4:22","nodeType":"VariableDeclaration","scope":1657,"src":"3240:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1650_storage_ptr","typeString":"struct Payment.Response"},"typeName":{"id":1655,"nodeType":"UserDefinedTypeName","pathNode":{"id":1654,"name":"Response","nameLocations":["3240:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":1650,"src":"3240:8:22"},"referencedDeclaration":1650,"src":"3240:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1650_storage_ptr","typeString":"struct Payment.Response"}},"visibility":"internal"}],"name":"Proof","nameLocation":"3193:5:22","nodeType":"StructDefinition","scope":1690,"src":"3186:74:22","visibility":"public"},{"canonicalName":"Payment.RequestBody","id":1664,"members":[{"constant":false,"id":1659,"mutability":"mutable","name":"transactionId","nameLocation":"3709:13:22","nodeType":"VariableDeclaration","scope":1664,"src":"3701:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1658,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3701:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1661,"mutability":"mutable","name":"inUtxo","nameLocation":"3740:6:22","nodeType":"VariableDeclaration","scope":1664,"src":"3732:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1660,"name":"uint256","nodeType":"ElementaryTypeName","src":"3732:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1663,"mutability":"mutable","name":"utxo","nameLocation":"3764:4:22","nodeType":"VariableDeclaration","scope":1664,"src":"3756:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"3756:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"RequestBody","nameLocation":"3679:11:22","nodeType":"StructDefinition","scope":1690,"src":"3672:103:22","visibility":"public"},{"canonicalName":"Payment.ResponseBody","id":1689,"members":[{"constant":false,"id":1666,"mutability":"mutable","name":"blockNumber","nameLocation":"5404:11:22","nodeType":"VariableDeclaration","scope":1689,"src":"5397:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1665,"name":"uint64","nodeType":"ElementaryTypeName","src":"5397:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1668,"mutability":"mutable","name":"blockTimestamp","nameLocation":"5432:14:22","nodeType":"VariableDeclaration","scope":1689,"src":"5425:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1667,"name":"uint64","nodeType":"ElementaryTypeName","src":"5425:6:22","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1670,"mutability":"mutable","name":"sourceAddressHash","nameLocation":"5464:17:22","nodeType":"VariableDeclaration","scope":1689,"src":"5456:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1669,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5456:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1672,"mutability":"mutable","name":"receivingAddressHash","nameLocation":"5499:20:22","nodeType":"VariableDeclaration","scope":1689,"src":"5491:28:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1671,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5491:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1674,"mutability":"mutable","name":"intendedReceivingAddressHash","nameLocation":"5537:28:22","nodeType":"VariableDeclaration","scope":1689,"src":"5529:36:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1673,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5529:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1676,"mutability":"mutable","name":"spentAmount","nameLocation":"5582:11:22","nodeType":"VariableDeclaration","scope":1689,"src":"5575:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1675,"name":"int256","nodeType":"ElementaryTypeName","src":"5575:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1678,"mutability":"mutable","name":"intendedSpentAmount","nameLocation":"5610:19:22","nodeType":"VariableDeclaration","scope":1689,"src":"5603:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1677,"name":"int256","nodeType":"ElementaryTypeName","src":"5603:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1680,"mutability":"mutable","name":"receivedAmount","nameLocation":"5646:14:22","nodeType":"VariableDeclaration","scope":1689,"src":"5639:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1679,"name":"int256","nodeType":"ElementaryTypeName","src":"5639:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1682,"mutability":"mutable","name":"intendedReceivedAmount","nameLocation":"5677:22:22","nodeType":"VariableDeclaration","scope":1689,"src":"5670:29:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1681,"name":"int256","nodeType":"ElementaryTypeName","src":"5670:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1684,"mutability":"mutable","name":"standardPaymentReference","nameLocation":"5717:24:22","nodeType":"VariableDeclaration","scope":1689,"src":"5709:32:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1683,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5709:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1686,"mutability":"mutable","name":"oneToOne","nameLocation":"5756:8:22","nodeType":"VariableDeclaration","scope":1689,"src":"5751:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1685,"name":"bool","nodeType":"ElementaryTypeName","src":"5751:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"status","nameLocation":"5780:6:22","nodeType":"VariableDeclaration","scope":1689,"src":"5774:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1687,"name":"uint8","nodeType":"ElementaryTypeName","src":"5774:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"name":"ResponseBody","nameLocation":"5374:12:22","nodeType":"StructDefinition","scope":1690,"src":"5367:426:22","visibility":"public"}],"scope":1691,"src":"1661:4134:22","usedErrors":[]}],"src":"32:5764:22"},"id":22},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol","exportedSymbols":{"ReferencedPaymentNonexistence":[1746]},"id":1747,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1692,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:23"},{"abstract":false,"baseContracts":[],"canonicalName":"ReferencedPaymentNonexistence","contractDependencies":[],"contractKind":"interface","documentation":{"id":1693,"nodeType":"StructuredDocumentation","src":"63:2535:23","text":" @custom:name ReferencedPaymentNonexistence\n @custom:id 0x04\n @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n @author Flare\n @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\n A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.\n \n \n This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed. \n @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\n The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\n If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected.\n The request is confirmed if no transaction meeting the specified criteria is found in the search range.\n The criteria and timestamp are chain specific.\n ### UTXO (Bitcoin and Dogecoin)\n Criteria for the transaction:\n - It is not coinbase transaction.\n - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains).\n - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).\n \n Timestamp is `mediantime`.\n ### XRPL\n Criteria for the transaction:\n - The transaction is of type payment.\n - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp),\n - One of the following is true:\n   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.\n   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.\n \n Timestamp is `close_time` converted to UNIX time.\n @custom:lut `minimalBlockTimestamp`"},"fullyImplemented":true,"id":1746,"linearizedBaseContracts":[1746],"name":"ReferencedPaymentNonexistence","nameLocation":"2609:29:23","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ReferencedPaymentNonexistence.Request","id":1703,"members":[{"constant":false,"id":1695,"mutability":"mutable","name":"attestationType","nameLocation":"3069:15:23","nodeType":"VariableDeclaration","scope":1703,"src":"3061:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3061:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"sourceId","nameLocation":"3102:8:23","nodeType":"VariableDeclaration","scope":1703,"src":"3094:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1696,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3094:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1699,"mutability":"mutable","name":"messageIntegrityCode","nameLocation":"3128:20:23","nodeType":"VariableDeclaration","scope":1703,"src":"3120:28:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1698,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3120:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1702,"mutability":"mutable","name":"requestBody","nameLocation":"3170:11:23","nodeType":"VariableDeclaration","scope":1703,"src":"3158:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1738_storage_ptr","typeString":"struct ReferencedPaymentNonexistence.RequestBody"},"typeName":{"id":1701,"nodeType":"UserDefinedTypeName","pathNode":{"id":1700,"name":"RequestBody","nameLocations":["3158:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":1738,"src":"3158:11:23"},"referencedDeclaration":1738,"src":"3158:11:23","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1738_storage_ptr","typeString":"struct ReferencedPaymentNonexistence.RequestBody"}},"visibility":"internal"}],"name":"Request","nameLocation":"3043:7:23","nodeType":"StructDefinition","scope":1746,"src":"3036:152:23","visibility":"public"},{"canonicalName":"ReferencedPaymentNonexistence.Response","id":1718,"members":[{"constant":false,"id":1705,"mutability":"mutable","name":"attestationType","nameLocation":"3802:15:23","nodeType":"VariableDeclaration","scope":1718,"src":"3794:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1704,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3794:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1707,"mutability":"mutable","name":"sourceId","nameLocation":"3835:8:23","nodeType":"VariableDeclaration","scope":1718,"src":"3827:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1706,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3827:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1709,"mutability":"mutable","name":"votingRound","nameLocation":"3860:11:23","nodeType":"VariableDeclaration","scope":1718,"src":"3853:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1708,"name":"uint64","nodeType":"ElementaryTypeName","src":"3853:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1711,"mutability":"mutable","name":"lowestUsedTimestamp","nameLocation":"3888:19:23","nodeType":"VariableDeclaration","scope":1718,"src":"3881:26:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1710,"name":"uint64","nodeType":"ElementaryTypeName","src":"3881:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1714,"mutability":"mutable","name":"requestBody","nameLocation":"3929:11:23","nodeType":"VariableDeclaration","scope":1718,"src":"3917:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1738_storage_ptr","typeString":"struct ReferencedPaymentNonexistence.RequestBody"},"typeName":{"id":1713,"nodeType":"UserDefinedTypeName","pathNode":{"id":1712,"name":"RequestBody","nameLocations":["3917:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":1738,"src":"3917:11:23"},"referencedDeclaration":1738,"src":"3917:11:23","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBody_$1738_storage_ptr","typeString":"struct ReferencedPaymentNonexistence.RequestBody"}},"visibility":"internal"},{"constant":false,"id":1717,"mutability":"mutable","name":"responseBody","nameLocation":"3963:12:23","nodeType":"VariableDeclaration","scope":1718,"src":"3950:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1745_storage_ptr","typeString":"struct ReferencedPaymentNonexistence.ResponseBody"},"typeName":{"id":1716,"nodeType":"UserDefinedTypeName","pathNode":{"id":1715,"name":"ResponseBody","nameLocations":["3950:12:23"],"nodeType":"IdentifierPath","referencedDeclaration":1745,"src":"3950:12:23"},"referencedDeclaration":1745,"src":"3950:12:23","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1745_storage_ptr","typeString":"struct ReferencedPaymentNonexistence.ResponseBody"}},"visibility":"internal"}],"name":"Response","nameLocation":"3775:8:23","nodeType":"StructDefinition","scope":1746,"src":"3768:214:23","visibility":"public"},{"canonicalName":"ReferencedPaymentNonexistence.Proof","id":1725,"members":[{"constant":false,"id":1721,"mutability":"mutable","name":"merkleProof","nameLocation":"4190:11:23","nodeType":"VariableDeclaration","scope":1725,"src":"4180:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4180:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1720,"nodeType":"ArrayTypeName","src":"4180:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"data","nameLocation":"4220:4:23","nodeType":"VariableDeclaration","scope":1725,"src":"4211:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1718_storage_ptr","typeString":"struct ReferencedPaymentNonexistence.Response"},"typeName":{"id":1723,"nodeType":"UserDefinedTypeName","pathNode":{"id":1722,"name":"Response","nameLocations":["4211:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":1718,"src":"4211:8:23"},"referencedDeclaration":1718,"src":"4211:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1718_storage_ptr","typeString":"struct ReferencedPaymentNonexistence.Response"}},"visibility":"internal"}],"name":"Proof","nameLocation":"4164:5:23","nodeType":"StructDefinition","scope":1746,"src":"4157:74:23","visibility":"public"},{"canonicalName":"ReferencedPaymentNonexistence.RequestBody","id":1738,"members":[{"constant":false,"id":1727,"mutability":"mutable","name":"minimalBlockNumber","nameLocation":"4978:18:23","nodeType":"VariableDeclaration","scope":1738,"src":"4971:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1726,"name":"uint64","nodeType":"ElementaryTypeName","src":"4971:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1729,"mutability":"mutable","name":"deadlineBlockNumber","nameLocation":"5013:19:23","nodeType":"VariableDeclaration","scope":1738,"src":"5006:26:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1728,"name":"uint64","nodeType":"ElementaryTypeName","src":"5006:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1731,"mutability":"mutable","name":"deadlineTimestamp","nameLocation":"5049:17:23","nodeType":"VariableDeclaration","scope":1738,"src":"5042:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1730,"name":"uint64","nodeType":"ElementaryTypeName","src":"5042:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1733,"mutability":"mutable","name":"destinationAddressHash","nameLocation":"5084:22:23","nodeType":"VariableDeclaration","scope":1738,"src":"5076:30:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1732,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5076:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1735,"mutability":"mutable","name":"amount","nameLocation":"5124:6:23","nodeType":"VariableDeclaration","scope":1738,"src":"5116:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1734,"name":"uint256","nodeType":"ElementaryTypeName","src":"5116:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1737,"mutability":"mutable","name":"standardPaymentReference","nameLocation":"5148:24:23","nodeType":"VariableDeclaration","scope":1738,"src":"5140:32:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5140:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RequestBody","nameLocation":"4949:11:23","nodeType":"StructDefinition","scope":1746,"src":"4942:237:23","visibility":"public"},{"canonicalName":"ReferencedPaymentNonexistence.ResponseBody","id":1745,"members":[{"constant":false,"id":1740,"mutability":"mutable","name":"minimalBlockTimestamp","nameLocation":"5846:21:23","nodeType":"VariableDeclaration","scope":1745,"src":"5839:28:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1739,"name":"uint64","nodeType":"ElementaryTypeName","src":"5839:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1742,"mutability":"mutable","name":"firstOverflowBlockNumber","nameLocation":"5884:24:23","nodeType":"VariableDeclaration","scope":1745,"src":"5877:31:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1741,"name":"uint64","nodeType":"ElementaryTypeName","src":"5877:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1744,"mutability":"mutable","name":"firstOverflowBlockTimestamp","nameLocation":"5925:27:23","nodeType":"VariableDeclaration","scope":1745,"src":"5918:34:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1743,"name":"uint64","nodeType":"ElementaryTypeName","src":"5918:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"ResponseBody","nameLocation":"5816:12:23","nodeType":"StructDefinition","scope":1746,"src":"5809:150:23","visibility":"public"}],"scope":1747,"src":"2599:3362:23","usedErrors":[]}],"src":"32:5930:23"},"id":23},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol","exportedSymbols":{"FlareContractsRegistryLibrary":[2025],"IAddressValidityVerification":[1513],"IBalanceDecreasingTransactionVerification":[1525],"IConfirmedBlockHeightExistsVerification":[1537],"IEVMTransactionVerification":[1549],"IFlareContractRegistry":[2705],"IFtsoManager":[578],"IFtsoRegistry":[753],"IFtsoRewardManager":[1048],"IPaymentVerification":[1561],"IPriceSubmitter":[1139],"IReferencedPaymentNonexistenceVerification":[1573],"IStateConnector":[1622],"IVoterWhitelister":[1223],"IWNat":[2655]},"id":2026,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1748,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:24"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol","file":"./userInterfaces/IFlareContractRegistry.sol","id":1750,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":2706,"src":"57:83:24","symbolAliases":[{"foreign":{"id":1749,"name":"IFlareContractRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"65:22:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol","file":"../stateConnector/interface/IStateConnector.sol","id":1752,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1623,"src":"215:82:24","symbolAliases":[{"foreign":{"id":1751,"name":"IStateConnector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"224:15:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol","file":"../ftso/userInterfaces/IPriceSubmitter.sol","id":1754,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1140,"src":"298:77:24","symbolAliases":[{"foreign":{"id":1753,"name":"IPriceSubmitter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"307:15:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol","file":"../ftso/userInterfaces/IFtsoRewardManager.sol","id":1756,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1049,"src":"376:83:24","symbolAliases":[{"foreign":{"id":1755,"name":"IFtsoRewardManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"385:18:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol","file":"../ftso/userInterfaces/IFtsoRegistry.sol","id":1758,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":754,"src":"460:73:24","symbolAliases":[{"foreign":{"id":1757,"name":"IFtsoRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"469:13:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol","file":"../ftso/userInterfaces/IVoterWhitelister.sol","id":1760,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1224,"src":"534:81:24","symbolAliases":[{"foreign":{"id":1759,"name":"IVoterWhitelister","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"543:17:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol","file":"../ftso/userInterfaces/IFtsoManager.sol","id":1762,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":579,"src":"616:71:24","symbolAliases":[{"foreign":{"id":1761,"name":"IFtsoManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"625:12:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol","file":"../util-contracts/token/userInterfaces/IWNat.sol","id":1764,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":2656,"src":"688:73:24","symbolAliases":[{"foreign":{"id":1763,"name":"IWNat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"697:5:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol","file":"../stateConnector/interface/IEVMTransactionVerification.sol","id":1766,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1550,"src":"762:106:24","symbolAliases":[{"foreign":{"id":1765,"name":"IEVMTransactionVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"771:27:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol","file":"../stateConnector/interface/IAddressValidityVerification.sol","id":1768,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1514,"src":"869:108:24","symbolAliases":[{"foreign":{"id":1767,"name":"IAddressValidityVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"878:28:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol","file":"../stateConnector/interface/IBalanceDecreasingTransactionVerification.sol","id":1770,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1526,"src":"978:134:24","symbolAliases":[{"foreign":{"id":1769,"name":"IBalanceDecreasingTransactionVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"987:41:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol","file":"../stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol","id":1772,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1538,"src":"1113:130:24","symbolAliases":[{"foreign":{"id":1771,"name":"IConfirmedBlockHeightExistsVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1122:39:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol","file":"../stateConnector/interface/IPaymentVerification.sol","id":1774,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1562,"src":"1244:92:24","symbolAliases":[{"foreign":{"id":1773,"name":"IPaymentVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"1253:20:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol","file":"../stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol","id":1776,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2026,"sourceUnit":1574,"src":"1337:136:24","symbolAliases":[{"foreign":{"id":1775,"name":"IReferencedPaymentNonexistenceVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"1346:42:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"FlareContractsRegistryLibrary","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2025,"linearizedBaseContracts":[2025],"name":"FlareContractsRegistryLibrary","nameLocation":"1640:29:24","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1779,"mutability":"constant","name":"FLARE_CONTRACT_REGISTRY_ADDRESS","nameLocation":"1702:31:24","nodeType":"VariableDeclaration","scope":2025,"src":"1676:110:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1777,"name":"address","nodeType":"ElementaryTypeName","src":"1676:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307861443637464536363636304662386446453964366231623432343064383635306533304636303139","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1744:42:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019"},"visibility":"internal"},{"constant":true,"id":1785,"mutability":"constant","name":"FLARE_CONTRACT_REGISTRY","nameLocation":"1834:23:24","nodeType":"VariableDeclaration","scope":2025,"src":"1793:130:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"},"typeName":{"id":1781,"nodeType":"UserDefinedTypeName","pathNode":{"id":1780,"name":"IFlareContractRegistry","nameLocations":["1793:22:24"],"nodeType":"IdentifierPath","referencedDeclaration":2705,"src":"1793:22:24"},"referencedDeclaration":2705,"src":"1793:22:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"value":{"arguments":[{"id":1783,"name":"FLARE_CONTRACT_REGISTRY_ADDRESS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"1891:31:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1782,"name":"IFlareContractRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"1868:22:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFlareContractRegistry_$2705_$","typeString":"type(contract IFlareContractRegistry)"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1868:55:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"visibility":"internal"},{"body":{"id":1798,"nodeType":"Block","src":"2181:79:24","statements":[{"expression":{"arguments":[{"id":1795,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"2247:5:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1793,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"2198:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2222:24:24","memberName":"getContractAddressByName","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"2198:48:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$returns$_t_address_$","typeString":"function (string memory) view external returns (address)"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2198:55:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1792,"id":1797,"nodeType":"Return","src":"2191:62:24"}]},"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"1930:145:24","text":" @notice Returns contract address for the given name - might be address(0)\n @param _name             name of the contract"},"id":1799,"implemented":true,"kind":"function","modifiers":[],"name":"getContractAddressByName","nameLocation":"2089:24:24","nodeType":"FunctionDefinition","parameters":{"id":1789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"_name","nameLocation":"2137:5:24","nodeType":"VariableDeclaration","scope":1799,"src":"2123:19:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1787,"name":"string","nodeType":"ElementaryTypeName","src":"2123:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2113:35:24"},"returnParameters":{"id":1792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1799,"src":"2172:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1790,"name":"address","nodeType":"ElementaryTypeName","src":"2172:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2171:9:24"},"scope":2025,"src":"2080:180:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1812,"nodeType":"Block","src":"2554:83:24","statements":[{"expression":{"arguments":[{"id":1809,"name":"_nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"2620:9:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1807,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"2571:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2595:24:24","memberName":"getContractAddressByHash","nodeType":"MemberAccess","referencedDeclaration":2674,"src":"2571:48:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32) view external returns (address)"}},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2571:59:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1806,"id":1811,"nodeType":"Return","src":"2564:66:24"}]},"documentation":{"id":1800,"nodeType":"StructuredDocumentation","src":"2266:184:24","text":" @notice Returns contract address for the given name hash - might be address(0)\n @param _nameHash         hash of the contract name (keccak256(abi.encode(name))"},"id":1813,"implemented":true,"kind":"function","modifiers":[],"name":"getContractAddressByHash","nameLocation":"2464:24:24","nodeType":"FunctionDefinition","parameters":{"id":1803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1802,"mutability":"mutable","name":"_nameHash","nameLocation":"2506:9:24","nodeType":"VariableDeclaration","scope":1813,"src":"2498:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1801,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2498:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2488:33:24"},"returnParameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1813,"src":"2545:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1804,"name":"address","nodeType":"ElementaryTypeName","src":"2545:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2544:9:24"},"scope":2025,"src":"2455:182:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1828,"nodeType":"Block","src":"2913:82:24","statements":[{"expression":{"arguments":[{"id":1825,"name":"_names","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"2981:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}],"expression":{"id":1823,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"2930:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2954:26:24","memberName":"getContractAddressesByName","nodeType":"MemberAccess","referencedDeclaration":2684,"src":"2930:50:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (string memory[] memory) view external returns (address[] memory)"}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2930:58:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":1822,"id":1827,"nodeType":"Return","src":"2923:65:24"}]},"documentation":{"id":1814,"nodeType":"StructuredDocumentation","src":"2643:150:24","text":" @notice Returns contract addresses for the given names - might be address(0)\n @param _names            names of the contracts"},"id":1829,"implemented":true,"kind":"function","modifiers":[],"name":"getContractAddressesByName","nameLocation":"2807:26:24","nodeType":"FunctionDefinition","parameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"_names","nameLocation":"2859:6:24","nodeType":"VariableDeclaration","scope":1829,"src":"2843:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":1815,"name":"string","nodeType":"ElementaryTypeName","src":"2843:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":1816,"nodeType":"ArrayTypeName","src":"2843:8:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"2833:38:24"},"returnParameters":{"id":1822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1829,"src":"2895:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1819,"name":"address","nodeType":"ElementaryTypeName","src":"2895:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1820,"nodeType":"ArrayTypeName","src":"2895:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2894:18:24"},"scope":2025,"src":"2798:197:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1844,"nodeType":"Block","src":"3318:87:24","statements":[{"expression":{"arguments":[{"id":1841,"name":"_nameHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"3386:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"expression":{"id":1839,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"3335:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3359:26:24","memberName":"getContractAddressesByHash","nodeType":"MemberAccess","referencedDeclaration":2694,"src":"3335:50:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory) view external returns (address[] memory)"}},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3335:63:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":1838,"id":1843,"nodeType":"Return","src":"3328:70:24"}]},"documentation":{"id":1830,"nodeType":"StructuredDocumentation","src":"3001:191:24","text":" @notice Returns contract addresses for the given name hashes - might be address(0)\n @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))"},"id":1845,"implemented":true,"kind":"function","modifiers":[],"name":"getContractAddressesByHash","nameLocation":"3206:26:24","nodeType":"FunctionDefinition","parameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"_nameHashes","nameLocation":"3259:11:24","nodeType":"VariableDeclaration","scope":1845,"src":"3242:28:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3242:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1832,"nodeType":"ArrayTypeName","src":"3242:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3232:44:24"},"returnParameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1845,"src":"3300:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"3300:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1836,"nodeType":"ArrayTypeName","src":"3300:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3299:18:24"},"scope":2025,"src":"3197:208:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1859,"nodeType":"Block","src":"3628:65:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1855,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"3645:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3669:15:24","memberName":"getAllContracts","nodeType":"MemberAccess","referencedDeclaration":2704,"src":"3645:39:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function () view external returns (string memory[] memory,address[] memory)"}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3645:41:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"tuple(string memory[] memory,address[] memory)"}},"functionReturnParameters":1854,"id":1858,"nodeType":"Return","src":"3638:48:24"}]},"documentation":{"id":1846,"nodeType":"StructuredDocumentation","src":"3411:81:24","text":" @notice Returns all contract names and corresponding addresses"},"id":1860,"implemented":true,"kind":"function","modifiers":[],"name":"getAllContracts","nameLocation":"3506:15:24","nodeType":"FunctionDefinition","parameters":{"id":1847,"nodeType":"ParameterList","parameters":[],"src":"3521:2:24"},"returnParameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"_names","nameLocation":"3587:6:24","nodeType":"VariableDeclaration","scope":1860,"src":"3571:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":1848,"name":"string","nodeType":"ElementaryTypeName","src":"3571:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":1849,"nodeType":"ArrayTypeName","src":"3571:8:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":1853,"mutability":"mutable","name":"_addresses","nameLocation":"3612:10:24","nodeType":"VariableDeclaration","scope":1860,"src":"3595:27:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1851,"name":"address","nodeType":"ElementaryTypeName","src":"3595:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1852,"nodeType":"ArrayTypeName","src":"3595:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3570:53:24"},"scope":2025,"src":"3497:196:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1873,"nodeType":"Block","src":"3876:96:24","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"5374617465436f6e6e6563746f72","id":1869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3950:16:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb156593cc5abb320b766ab414f6ce28cd0664d6713d44304bffea64bdbc8f8c","typeString":"literal_string \"StateConnector\""},"value":"StateConnector"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_eb156593cc5abb320b766ab414f6ce28cd0664d6713d44304bffea64bdbc8f8c","typeString":"literal_string \"StateConnector\""}],"expression":{"id":1867,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"3901:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3925:24:24","memberName":"getContractAddressByName","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"3901:48:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$returns$_t_address_$","typeString":"function (string memory) view external returns (address)"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3901:66:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1866,"name":"IStateConnector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"3885:15:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IStateConnector_$1622_$","typeString":"type(contract IStateConnector)"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3885:83:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IStateConnector_$1622","typeString":"contract IStateConnector"}},"functionReturnParameters":1865,"id":1872,"nodeType":"Return","src":"3878:90:24"}]},"id":1874,"implemented":true,"kind":"function","modifiers":[],"name":"getStateConnector","nameLocation":"3818:17:24","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[],"src":"3835:2:24"},"returnParameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1874,"src":"3860:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStateConnector_$1622","typeString":"contract IStateConnector"},"typeName":{"id":1863,"nodeType":"UserDefinedTypeName","pathNode":{"id":1862,"name":"IStateConnector","nameLocations":["3860:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":1622,"src":"3860:15:24"},"referencedDeclaration":1622,"src":"3860:15:24","typeDescriptions":{"typeIdentifier":"t_contract$_IStateConnector_$1622","typeString":"contract IStateConnector"}},"visibility":"internal"}],"src":"3859:17:24"},"scope":2025,"src":"3809:163:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1887,"nodeType":"Block","src":"4042:96:24","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"50726963655375626d6974746572","id":1883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4116:16:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_f0303ebfd70ee979bf60ff859c5baccb508910b0e488becf8bfe0a44b5d707f1","typeString":"literal_string \"PriceSubmitter\""},"value":"PriceSubmitter"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f0303ebfd70ee979bf60ff859c5baccb508910b0e488becf8bfe0a44b5d707f1","typeString":"literal_string \"PriceSubmitter\""}],"expression":{"id":1881,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"4067:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4091:24:24","memberName":"getContractAddressByName","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"4067:48:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$returns$_t_address_$","typeString":"function (string memory) view external returns (address)"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4067:66:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1880,"name":"IPriceSubmitter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"4051:15:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPriceSubmitter_$1139_$","typeString":"type(contract IPriceSubmitter)"}},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4051:83:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPriceSubmitter_$1139","typeString":"contract IPriceSubmitter"}},"functionReturnParameters":1879,"id":1886,"nodeType":"Return","src":"4044:90:24"}]},"id":1888,"implemented":true,"kind":"function","modifiers":[],"name":"getPriceSubmitter","nameLocation":"3984:17:24","nodeType":"FunctionDefinition","parameters":{"id":1875,"nodeType":"ParameterList","parameters":[],"src":"4001:2:24"},"returnParameters":{"id":1879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1888,"src":"4026:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceSubmitter_$1139","typeString":"contract IPriceSubmitter"},"typeName":{"id":1877,"nodeType":"UserDefinedTypeName","pathNode":{"id":1876,"name":"IPriceSubmitter","nameLocations":["4026:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":1139,"src":"4026:15:24"},"referencedDeclaration":1139,"src":"4026:15:24","typeDescriptions":{"typeIdentifier":"t_contract$_IPriceSubmitter_$1139","typeString":"contract IPriceSubmitter"}},"visibility":"internal"}],"src":"4025:17:24"},"scope":2025,"src":"3975:163:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1901,"nodeType":"Block","src":"4214:102:24","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"4674736f5265776172644d616e61676572","id":1897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4291:19:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_ea47904b1168df3b5315a386def8088fcd457a624be14eb8fe9e6d8d5216e284","typeString":"literal_string \"FtsoRewardManager\""},"value":"FtsoRewardManager"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ea47904b1168df3b5315a386def8088fcd457a624be14eb8fe9e6d8d5216e284","typeString":"literal_string \"FtsoRewardManager\""}],"expression":{"id":1895,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"4242:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4266:24:24","memberName":"getContractAddressByName","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"4242:48:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$returns$_t_address_$","typeString":"function (string memory) view external returns (address)"}},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4242:69:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1894,"name":"IFtsoRewardManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"4223:18:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFtsoRewardManager_$1048_$","typeString":"type(contract IFtsoRewardManager)"}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4223:89:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoRewardManager_$1048","typeString":"contract IFtsoRewardManager"}},"functionReturnParameters":1893,"id":1900,"nodeType":"Return","src":"4216:96:24"}]},"id":1902,"implemented":true,"kind":"function","modifiers":[],"name":"getFtsoRewardManager","nameLocation":"4150:20:24","nodeType":"FunctionDefinition","parameters":{"id":1889,"nodeType":"ParameterList","parameters":[],"src":"4170:2:24"},"returnParameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1902,"src":"4195:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoRewardManager_$1048","typeString":"contract IFtsoRewardManager"},"typeName":{"id":1891,"nodeType":"UserDefinedTypeName","pathNode":{"id":1890,"name":"IFtsoRewardManager","nameLocations":["4195:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"4195:18:24"},"referencedDeclaration":1048,"src":"4195:18:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoRewardManager_$1048","typeString":"contract IFtsoRewardManager"}},"visibility":"internal"}],"src":"4194:20:24"},"scope":2025,"src":"4141:175:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1915,"nodeType":"Block","src":"4382:92:24","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"4674736f5265676973747279","id":1911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4454:14:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f","typeString":"literal_string \"FtsoRegistry\""},"value":"FtsoRegistry"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f","typeString":"literal_string \"FtsoRegistry\""}],"expression":{"id":1909,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"4405:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4429:24:24","memberName":"getContractAddressByName","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"4405:48:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$returns$_t_address_$","typeString":"function (string memory) view external returns (address)"}},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4405:64:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1908,"name":"IFtsoRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"4391:13:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFtsoRegistry_$753_$","typeString":"type(contract IFtsoRegistry)"}},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4391:79:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoRegistry_$753","typeString":"contract IFtsoRegistry"}},"functionReturnParameters":1907,"id":1914,"nodeType":"Return","src":"4384:86:24"}]},"id":1916,"implemented":true,"kind":"function","modifiers":[],"name":"getFtsoRegistry","nameLocation":"4328:15:24","nodeType":"FunctionDefinition","parameters":{"id":1903,"nodeType":"ParameterList","parameters":[],"src":"4343:2:24"},"returnParameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1916,"src":"4368:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoRegistry_$753","typeString":"contract IFtsoRegistry"},"typeName":{"id":1905,"nodeType":"UserDefinedTypeName","pathNode":{"id":1904,"name":"IFtsoRegistry","nameLocations":["4368:13:24"],"nodeType":"IdentifierPath","referencedDeclaration":753,"src":"4368:13:24"},"referencedDeclaration":753,"src":"4368:13:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoRegistry_$753","typeString":"contract IFtsoRegistry"}},"visibility":"internal"}],"src":"4367:15:24"},"scope":2025,"src":"4319:155:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1929,"nodeType":"Block","src":"4548:100:24","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"566f74657257686974656c6973746572","id":1925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4624:18:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_95d1b362982b2268c774d3147c2acbd95e922b70b2048b94833fe40b2ea69878","typeString":"literal_string \"VoterWhitelister\""},"value":"VoterWhitelister"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_95d1b362982b2268c774d3147c2acbd95e922b70b2048b94833fe40b2ea69878","typeString":"literal_string \"VoterWhitelister\""}],"expression":{"id":1923,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"4575:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4599:24:24","memberName":"getContractAddressByName","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"4575:48:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$returns$_t_address_$","typeString":"function (string memory) view external returns (address)"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4575:68:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1922,"name":"IVoterWhitelister","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"4557:17:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVoterWhitelister_$1223_$","typeString":"type(contract IVoterWhitelister)"}},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4557:87:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVoterWhitelister_$1223","typeString":"contract IVoterWhitelister"}},"functionReturnParameters":1921,"id":1928,"nodeType":"Return","src":"4550:94:24"}]},"id":1930,"implemented":true,"kind":"function","modifiers":[],"name":"getVoterWhitelister","nameLocation":"4486:19:24","nodeType":"FunctionDefinition","parameters":{"id":1917,"nodeType":"ParameterList","parameters":[],"src":"4505:2:24"},"returnParameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1930,"src":"4530:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVoterWhitelister_$1223","typeString":"contract IVoterWhitelister"},"typeName":{"id":1919,"nodeType":"UserDefinedTypeName","pathNode":{"id":1918,"name":"IVoterWhitelister","nameLocations":["4530:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":1223,"src":"4530:17:24"},"referencedDeclaration":1223,"src":"4530:17:24","typeDescriptions":{"typeIdentifier":"t_contract$_IVoterWhitelister_$1223","typeString":"contract IVoterWhitelister"}},"visibility":"internal"}],"src":"4529:19:24"},"scope":2025,"src":"4477:171:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1943,"nodeType":"Block","src":"4712:90:24","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"4674736f4d616e61676572","id":1939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4783:13:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_d000029e08cb943711fd5a7649a437c704b246ba675b4fc5c221afb6f7cb8c79","typeString":"literal_string \"FtsoManager\""},"value":"FtsoManager"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d000029e08cb943711fd5a7649a437c704b246ba675b4fc5c221afb6f7cb8c79","typeString":"literal_string \"FtsoManager\""}],"expression":{"id":1937,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"4734:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4758:24:24","memberName":"getContractAddressByName","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"4734:48:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$returns$_t_address_$","typeString":"function (string memory) view external returns (address)"}},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4734:63:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1936,"name":"IFtsoManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"4721:12:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFtsoManager_$578_$","typeString":"type(contract IFtsoManager)"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4721:77:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoManager_$578","typeString":"contract IFtsoManager"}},"functionReturnParameters":1935,"id":1942,"nodeType":"Return","src":"4714:84:24"}]},"id":1944,"implemented":true,"kind":"function","modifiers":[],"name":"getFtsoManager","nameLocation":"4660:14:24","nodeType":"FunctionDefinition","parameters":{"id":1931,"nodeType":"ParameterList","parameters":[],"src":"4674:2:24"},"returnParameters":{"id":1935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1944,"src":"4699:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoManager_$578","typeString":"contract IFtsoManager"},"typeName":{"id":1933,"nodeType":"UserDefinedTypeName","pathNode":{"id":1932,"name":"IFtsoManager","nameLocations":["4699:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":578,"src":"4699:12:24"},"referencedDeclaration":578,"src":"4699:12:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFtsoManager_$578","typeString":"contract IFtsoManager"}},"visibility":"internal"}],"src":"4698:14:24"},"scope":2025,"src":"4651:151:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1957,"nodeType":"Block","src":"4852:76:24","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"574e6174","id":1953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4916:6:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d124a91b40f0d055af735a75dad6d87f63162649f4dbec06b36485cff3626b9","typeString":"literal_string \"WNat\""},"value":"WNat"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9d124a91b40f0d055af735a75dad6d87f63162649f4dbec06b36485cff3626b9","typeString":"literal_string \"WNat\""}],"expression":{"id":1951,"name":"FLARE_CONTRACT_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"4867:23:24","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareContractRegistry_$2705","typeString":"contract IFlareContractRegistry"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4891:24:24","memberName":"getContractAddressByName","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"4867:48:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_string_memory_ptr_$returns$_t_address_$","typeString":"function (string memory) view external returns (address)"}},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4867:56:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1950,"name":"IWNat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"4861:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWNat_$2655_$","typeString":"type(contract IWNat)"}},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4861:63:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWNat_$2655","typeString":"contract IWNat"}},"functionReturnParameters":1949,"id":1956,"nodeType":"Return","src":"4854:70:24"}]},"id":1958,"implemented":true,"kind":"function","modifiers":[],"name":"getWNat","nameLocation":"4814:7:24","nodeType":"FunctionDefinition","parameters":{"id":1945,"nodeType":"ParameterList","parameters":[],"src":"4821:2:24"},"returnParameters":{"id":1949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1948,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1958,"src":"4846:5:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWNat_$2655","typeString":"contract IWNat"},"typeName":{"id":1947,"nodeType":"UserDefinedTypeName","pathNode":{"id":1946,"name":"IWNat","nameLocations":["4846:5:24"],"nodeType":"IdentifierPath","referencedDeclaration":2655,"src":"4846:5:24"},"referencedDeclaration":2655,"src":"4846:5:24","typeDescriptions":{"typeIdentifier":"t_contract$_IWNat_$2655","typeString":"contract IWNat"}},"visibility":"internal"}],"src":"4845:7:24"},"scope":2025,"src":"4805:123:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1968,"nodeType":"Block","src":"5109:84:24","statements":[{"expression":{"arguments":[{"hexValue":"307866333741443132373839313763303466623239314337356134326536313731303936344362353763","id":1965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5146:42:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xf37AD1278917c04fb291C75a42e61710964Cb57c"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1964,"name":"IEVMTransactionVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"5118:27:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IEVMTransactionVerification_$1549_$","typeString":"type(contract IEVMTransactionVerification)"}},"id":1966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5118:71:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEVMTransactionVerification_$1549","typeString":"contract IEVMTransactionVerification"}},"functionReturnParameters":1963,"id":1967,"nodeType":"Return","src":"5111:78:24"}]},"id":1969,"implemented":true,"kind":"function","modifiers":[],"name":"auxiliaryGetIEVMTransactionVerification","nameLocation":"5017:39:24","nodeType":"FunctionDefinition","parameters":{"id":1959,"nodeType":"ParameterList","parameters":[],"src":"5056:2:24"},"returnParameters":{"id":1963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1969,"src":"5081:27:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEVMTransactionVerification_$1549","typeString":"contract IEVMTransactionVerification"},"typeName":{"id":1961,"nodeType":"UserDefinedTypeName","pathNode":{"id":1960,"name":"IEVMTransactionVerification","nameLocations":["5081:27:24"],"nodeType":"IdentifierPath","referencedDeclaration":1549,"src":"5081:27:24"},"referencedDeclaration":1549,"src":"5081:27:24","typeDescriptions":{"typeIdentifier":"t_contract$_IEVMTransactionVerification_$1549","typeString":"contract IEVMTransactionVerification"}},"visibility":"internal"}],"src":"5080:29:24"},"scope":2025,"src":"5008:185:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1979,"nodeType":"Block","src":"5376:85:24","statements":[{"expression":{"arguments":[{"hexValue":"307864393437323164613164443565323232303230443235366643303733653842653330316562644342","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5414:42:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xd94721da1dD5e222020D256fC073e8Be301ebdCB"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1975,"name":"IAddressValidityVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"5385:28:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAddressValidityVerification_$1513_$","typeString":"type(contract IAddressValidityVerification)"}},"id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5385:72:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAddressValidityVerification_$1513","typeString":"contract IAddressValidityVerification"}},"functionReturnParameters":1974,"id":1978,"nodeType":"Return","src":"5378:79:24"}]},"id":1980,"implemented":true,"kind":"function","modifiers":[],"name":"auxiliaryGetIAddressValidityVerification","nameLocation":"5282:40:24","nodeType":"FunctionDefinition","parameters":{"id":1970,"nodeType":"ParameterList","parameters":[],"src":"5322:2:24"},"returnParameters":{"id":1974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1973,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1980,"src":"5347:28:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAddressValidityVerification_$1513","typeString":"contract IAddressValidityVerification"},"typeName":{"id":1972,"nodeType":"UserDefinedTypeName","pathNode":{"id":1971,"name":"IAddressValidityVerification","nameLocations":["5347:28:24"],"nodeType":"IdentifierPath","referencedDeclaration":1513,"src":"5347:28:24"},"referencedDeclaration":1513,"src":"5347:28:24","typeDescriptions":{"typeIdentifier":"t_contract$_IAddressValidityVerification_$1513","typeString":"contract IAddressValidityVerification"}},"visibility":"internal"}],"src":"5346:30:24"},"scope":2025,"src":"5273:188:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1990,"nodeType":"Block","src":"5670:98:24","statements":[{"expression":{"arguments":[{"hexValue":"307865446138344132656544666441353365376333336566356644653742323739384239313042463441","id":1987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5721:42:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xeDa84A2eeDfdA53e7c33ef5fDe7B2798B910BF4A"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1986,"name":"IBalanceDecreasingTransactionVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"5679:41:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBalanceDecreasingTransactionVerification_$1525_$","typeString":"type(contract IBalanceDecreasingTransactionVerification)"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5679:85:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBalanceDecreasingTransactionVerification_$1525","typeString":"contract IBalanceDecreasingTransactionVerification"}},"functionReturnParameters":1985,"id":1989,"nodeType":"Return","src":"5672:92:24"}]},"id":1991,"implemented":true,"kind":"function","modifiers":[],"name":"auxiliaryGetIBalanceDecreasingTransactionVerification","nameLocation":"5550:53:24","nodeType":"FunctionDefinition","parameters":{"id":1981,"nodeType":"ParameterList","parameters":[],"src":"5603:2:24"},"returnParameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1991,"src":"5628:41:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBalanceDecreasingTransactionVerification_$1525","typeString":"contract IBalanceDecreasingTransactionVerification"},"typeName":{"id":1983,"nodeType":"UserDefinedTypeName","pathNode":{"id":1982,"name":"IBalanceDecreasingTransactionVerification","nameLocations":["5628:41:24"],"nodeType":"IdentifierPath","referencedDeclaration":1525,"src":"5628:41:24"},"referencedDeclaration":1525,"src":"5628:41:24","typeDescriptions":{"typeIdentifier":"t_contract$_IBalanceDecreasingTransactionVerification_$1525","typeString":"contract IBalanceDecreasingTransactionVerification"}},"visibility":"internal"}],"src":"5627:43:24"},"scope":2025,"src":"5541:227:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2001,"nodeType":"Block","src":"5973:96:24","statements":[{"expression":{"arguments":[{"hexValue":"307836333241393834643633663941653343324562333165306463324565456145314532383245306461","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6022:42:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x632A984d63f9Ae3C2Eb31e0dc2EeEaE1E282E0da"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1997,"name":"IConfirmedBlockHeightExistsVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"5982:39:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IConfirmedBlockHeightExistsVerification_$1537_$","typeString":"type(contract IConfirmedBlockHeightExistsVerification)"}},"id":1999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5982:83:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IConfirmedBlockHeightExistsVerification_$1537","typeString":"contract IConfirmedBlockHeightExistsVerification"}},"functionReturnParameters":1996,"id":2000,"nodeType":"Return","src":"5975:90:24"}]},"id":2002,"implemented":true,"kind":"function","modifiers":[],"name":"auxiliaryGetIConfirmedBlockHeightExistsVerification","nameLocation":"5857:51:24","nodeType":"FunctionDefinition","parameters":{"id":1992,"nodeType":"ParameterList","parameters":[],"src":"5908:2:24"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2002,"src":"5933:39:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IConfirmedBlockHeightExistsVerification_$1537","typeString":"contract IConfirmedBlockHeightExistsVerification"},"typeName":{"id":1994,"nodeType":"UserDefinedTypeName","pathNode":{"id":1993,"name":"IConfirmedBlockHeightExistsVerification","nameLocations":["5933:39:24"],"nodeType":"IdentifierPath","referencedDeclaration":1537,"src":"5933:39:24"},"referencedDeclaration":1537,"src":"5933:39:24","typeDescriptions":{"typeIdentifier":"t_contract$_IConfirmedBlockHeightExistsVerification_$1537","typeString":"contract IConfirmedBlockHeightExistsVerification"}},"visibility":"internal"}],"src":"5932:41:24"},"scope":2025,"src":"5848:221:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2012,"nodeType":"Block","src":"6236:77:24","statements":[{"expression":{"arguments":[{"hexValue":"307831454365366464303844313963306661663341423863456342313436636435656135623962376439","id":2009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6266:42:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x1ECe6dd08D19c0faf3AB8cEcB146cd5ea5b9b7d9"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2008,"name":"IPaymentVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"6245:20:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPaymentVerification_$1561_$","typeString":"type(contract IPaymentVerification)"}},"id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6245:64:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPaymentVerification_$1561","typeString":"contract IPaymentVerification"}},"functionReturnParameters":2007,"id":2011,"nodeType":"Return","src":"6238:71:24"}]},"id":2013,"implemented":true,"kind":"function","modifiers":[],"name":"auxiliaryGetIPaymentVerification","nameLocation":"6158:32:24","nodeType":"FunctionDefinition","parameters":{"id":2003,"nodeType":"ParameterList","parameters":[],"src":"6190:2:24"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2013,"src":"6215:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPaymentVerification_$1561","typeString":"contract IPaymentVerification"},"typeName":{"id":2005,"nodeType":"UserDefinedTypeName","pathNode":{"id":2004,"name":"IPaymentVerification","nameLocations":["6215:20:24"],"nodeType":"IdentifierPath","referencedDeclaration":1561,"src":"6215:20:24"},"referencedDeclaration":1561,"src":"6215:20:24","typeDescriptions":{"typeIdentifier":"t_contract$_IPaymentVerification_$1561","typeString":"contract IPaymentVerification"}},"visibility":"internal"}],"src":"6214:22:24"},"scope":2025,"src":"6149:164:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2023,"nodeType":"Block","src":"6524:99:24","statements":[{"expression":{"arguments":[{"hexValue":"307844664535393236664142413136363138374232394333334243393544664462313862624535326364","id":2020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6576:42:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xDfE5926fABA166187B29C33BC95DfDb18bbE52cd"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2019,"name":"IReferencedPaymentNonexistenceVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"6533:42:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IReferencedPaymentNonexistenceVerification_$1573_$","typeString":"type(contract IReferencedPaymentNonexistenceVerification)"}},"id":2021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6533:86:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IReferencedPaymentNonexistenceVerification_$1573","typeString":"contract IReferencedPaymentNonexistenceVerification"}},"functionReturnParameters":2018,"id":2022,"nodeType":"Return","src":"6526:93:24"}]},"id":2024,"implemented":true,"kind":"function","modifiers":[],"name":"auxiliaryGetIReferencedPaymentNonexistenceVerification","nameLocation":"6402:54:24","nodeType":"FunctionDefinition","parameters":{"id":2014,"nodeType":"ParameterList","parameters":[],"src":"6456:2:24"},"returnParameters":{"id":2018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2024,"src":"6481:42:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IReferencedPaymentNonexistenceVerification_$1573","typeString":"contract IReferencedPaymentNonexistenceVerification"},"typeName":{"id":2016,"nodeType":"UserDefinedTypeName","pathNode":{"id":2015,"name":"IReferencedPaymentNonexistenceVerification","nameLocations":["6481:42:24"],"nodeType":"IdentifierPath","referencedDeclaration":1573,"src":"6481:42:24"},"referencedDeclaration":1573,"src":"6481:42:24","typeDescriptions":{"typeIdentifier":"t_contract$_IReferencedPaymentNonexistenceVerification_$1573","typeString":"contract IReferencedPaymentNonexistenceVerification"}},"visibility":"internal"}],"src":"6480:44:24"},"scope":2025,"src":"6393:230:24","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2026,"src":"1632:5051:24","usedErrors":[]}],"src":"32:6652:24"},"id":24},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol","exportedSymbols":{"IICleanable":[2052]},"id":2053,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2027,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IICleanable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2052,"linearizedBaseContracts":[2052],"name":"IICleanable","nameLocation":"73:11:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2028,"nodeType":"StructuredDocumentation","src":"91:85:25","text":" Set the contract that is allowed to call history cleaning methods."},"functionSelector":"f6a494af","id":2033,"implemented":false,"kind":"function","modifiers":[],"name":"setCleanerContract","nameLocation":"190:18:25","nodeType":"FunctionDefinition","parameters":{"id":2031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2030,"mutability":"mutable","name":"_cleanerContract","nameLocation":"217:16:25","nodeType":"VariableDeclaration","scope":2033,"src":"209:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2029,"name":"address","nodeType":"ElementaryTypeName","src":"209:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"208:26:25"},"returnParameters":{"id":2032,"nodeType":"ParameterList","parameters":[],"src":"243:0:25"},"scope":2052,"src":"181:63:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2034,"nodeType":"StructuredDocumentation","src":"254:352:25","text":" Set the cleanup block number.\n Historic data for the blocks before `cleanupBlockNumber` can be erased,\n history before that block should never be used since it can be inconsistent.\n In particular, cleanup block number must be before current vote power block.\n @param _blockNumber The new cleanup block number."},"functionSelector":"13de97f5","id":2039,"implemented":false,"kind":"function","modifiers":[],"name":"setCleanupBlockNumber","nameLocation":"620:21:25","nodeType":"FunctionDefinition","parameters":{"id":2037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2036,"mutability":"mutable","name":"_blockNumber","nameLocation":"650:12:25","nodeType":"VariableDeclaration","scope":2039,"src":"642:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2035,"name":"uint256","nodeType":"ElementaryTypeName","src":"642:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"641:22:25"},"returnParameters":{"id":2038,"nodeType":"ParameterList","parameters":[],"src":"672:0:25"},"scope":2052,"src":"611:62:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"683:148:25","text":" Set the contract that is allowed to set cleanupBlockNumber.\n Usually this will be an instance of CleanupBlockNumberManager."},"functionSelector":"7f4fcaa9","id":2045,"implemented":false,"kind":"function","modifiers":[],"name":"setCleanupBlockNumberManager","nameLocation":"845:28:25","nodeType":"FunctionDefinition","parameters":{"id":2043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"_cleanupBlockNumberManager","nameLocation":"882:26:25","nodeType":"VariableDeclaration","scope":2045,"src":"874:34:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2041,"name":"address","nodeType":"ElementaryTypeName","src":"874:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"873:36:25"},"returnParameters":{"id":2044,"nodeType":"ParameterList","parameters":[],"src":"918:0:25"},"scope":2052,"src":"836:83:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2046,"nodeType":"StructuredDocumentation","src":"929:56:25","text":" Get the current cleanup block number."},"functionSelector":"deea13e7","id":2051,"implemented":false,"kind":"function","modifiers":[],"name":"cleanupBlockNumber","nameLocation":"999:18:25","nodeType":"FunctionDefinition","parameters":{"id":2047,"nodeType":"ParameterList","parameters":[],"src":"1017:2:25"},"returnParameters":{"id":2050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2051,"src":"1043:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"1043:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:9:25"},"scope":2052,"src":"990:62:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2053,"src":"63:991:25","usedErrors":[]}],"src":"32:1023:25"},"id":25},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol","exportedSymbols":{"IERC20":[4654],"IGovernanceVotePower":[1272],"IIGovernanceVotePower":[2115],"IVPContractEvents":[2411],"IVPToken":[2628]},"id":2116,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2054,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:26"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol","file":"../../userInterfaces/IVPToken.sol","id":2055,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2116,"sourceUnit":2629,"src":"63:43:26","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol","file":"../../../../governance/userInterfaces/IGovernanceVotePower.sol","id":2056,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2116,"sourceUnit":1273,"src":"107:72:26","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2057,"name":"IGovernanceVotePower","nameLocations":["216:20:26"],"nodeType":"IdentifierPath","referencedDeclaration":1272,"src":"216:20:26"},"id":2058,"nodeType":"InheritanceSpecifier","src":"216:20:26"}],"canonicalName":"IIGovernanceVotePower","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2115,"linearizedBaseContracts":[2115,1272],"name":"IIGovernanceVotePower","nameLocation":"191:21:26","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"243:147:26","text":" Event triggered when an delegator's balance changes.\n Note: the event is always emitted from `GovernanceVotePower`."},"eventSelector":"dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724","id":2067,"name":"DelegateVotesChanged","nameLocation":"401:20:26","nodeType":"EventDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"indexed":true,"mutability":"mutable","name":"delegate","nameLocation":"443:8:26","nodeType":"VariableDeclaration","scope":2067,"src":"427:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2060,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2063,"indexed":false,"mutability":"mutable","name":"previousBalance","nameLocation":"466:15:26","nodeType":"VariableDeclaration","scope":2067,"src":"458:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"458:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2065,"indexed":false,"mutability":"mutable","name":"newBalance","nameLocation":"496:10:26","nodeType":"VariableDeclaration","scope":2067,"src":"488:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2064,"name":"uint256","nodeType":"ElementaryTypeName","src":"488:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"421:91:26"},"src":"395:118:26"},{"anonymous":false,"documentation":{"id":2068,"nodeType":"StructuredDocumentation","src":"519:156:26","text":" Event triggered when an account delegates to another account.\n Note: the event is always emitted from `GovernanceVotePower`."},"eventSelector":"3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f","id":2076,"name":"DelegateChanged","nameLocation":"686:15:26","nodeType":"EventDefinition","parameters":{"id":2075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"indexed":true,"mutability":"mutable","name":"delegator","nameLocation":"723:9:26","nodeType":"VariableDeclaration","scope":2076,"src":"707:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2069,"name":"address","nodeType":"ElementaryTypeName","src":"707:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2072,"indexed":true,"mutability":"mutable","name":"fromDelegate","nameLocation":"755:12:26","nodeType":"VariableDeclaration","scope":2076,"src":"739:28:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2071,"name":"address","nodeType":"ElementaryTypeName","src":"739:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2074,"indexed":true,"mutability":"mutable","name":"toDelegate","nameLocation":"790:10:26","nodeType":"VariableDeclaration","scope":2076,"src":"774:26:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2073,"name":"address","nodeType":"ElementaryTypeName","src":"774:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"701:105:26"},"src":"680:127:26"},{"documentation":{"id":2077,"nodeType":"StructuredDocumentation","src":"813:67:26","text":" Update vote powers when tokens are transferred.*"},"functionSelector":"eadb4362","id":2090,"implemented":false,"kind":"function","modifiers":[],"name":"updateAtTokenTransfer","nameLocation":"894:21:26","nodeType":"FunctionDefinition","parameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"_from","nameLocation":"933:5:26","nodeType":"VariableDeclaration","scope":2090,"src":"925:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2078,"name":"address","nodeType":"ElementaryTypeName","src":"925:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2081,"mutability":"mutable","name":"_to","nameLocation":"956:3:26","nodeType":"VariableDeclaration","scope":2090,"src":"948:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2080,"name":"address","nodeType":"ElementaryTypeName","src":"948:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2083,"mutability":"mutable","name":"_fromBalance","nameLocation":"977:12:26","nodeType":"VariableDeclaration","scope":2090,"src":"969:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2082,"name":"uint256","nodeType":"ElementaryTypeName","src":"969:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"_toBalance","nameLocation":"1007:10:26","nodeType":"VariableDeclaration","scope":2090,"src":"999:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2084,"name":"uint256","nodeType":"ElementaryTypeName","src":"999:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2087,"mutability":"mutable","name":"_amount","nameLocation":"1035:7:26","nodeType":"VariableDeclaration","scope":2090,"src":"1027:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2086,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"915:133:26"},"returnParameters":{"id":2089,"nodeType":"ParameterList","parameters":[],"src":"1057:0:26"},"scope":2115,"src":"885:173:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2091,"nodeType":"StructuredDocumentation","src":"1064:352:26","text":" Set the cleanup block number.\n Historic data for the blocks before `cleanupBlockNumber` can be erased,\n history before that block should never be used since it can be inconsistent.\n In particular, cleanup block number must be before current vote power block.\n @param _blockNumber The new cleanup block number."},"functionSelector":"13de97f5","id":2096,"implemented":false,"kind":"function","modifiers":[],"name":"setCleanupBlockNumber","nameLocation":"1430:21:26","nodeType":"FunctionDefinition","parameters":{"id":2094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2093,"mutability":"mutable","name":"_blockNumber","nameLocation":"1460:12:26","nodeType":"VariableDeclaration","scope":2096,"src":"1452:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2092,"name":"uint256","nodeType":"ElementaryTypeName","src":"1452:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1451:22:26"},"returnParameters":{"id":2095,"nodeType":"ParameterList","parameters":[],"src":"1482:0:26"},"scope":2115,"src":"1421:62:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2097,"nodeType":"StructuredDocumentation","src":"1489:85:26","text":" Set the contract that is allowed to call history cleaning methods."},"functionSelector":"f6a494af","id":2102,"implemented":false,"kind":"function","modifiers":[],"name":"setCleanerContract","nameLocation":"1588:18:26","nodeType":"FunctionDefinition","parameters":{"id":2100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2099,"mutability":"mutable","name":"_cleanerContract","nameLocation":"1615:16:26","nodeType":"VariableDeclaration","scope":2102,"src":"1607:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2098,"name":"address","nodeType":"ElementaryTypeName","src":"1607:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1606:26:26"},"returnParameters":{"id":2101,"nodeType":"ParameterList","parameters":[],"src":"1641:0:26"},"scope":2115,"src":"1579:63:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2103,"nodeType":"StructuredDocumentation","src":"1648:93:26","text":" @notice Get the token that this governance vote power contract belongs to."},"functionSelector":"65371883","id":2109,"implemented":false,"kind":"function","modifiers":[],"name":"ownerToken","nameLocation":"1755:10:26","nodeType":"FunctionDefinition","parameters":{"id":2104,"nodeType":"ParameterList","parameters":[],"src":"1765:2:26"},"returnParameters":{"id":2108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2109,"src":"1791:8:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVPToken_$2628","typeString":"contract IVPToken"},"typeName":{"id":2106,"nodeType":"UserDefinedTypeName","pathNode":{"id":2105,"name":"IVPToken","nameLocations":["1791:8:26"],"nodeType":"IdentifierPath","referencedDeclaration":2628,"src":"1791:8:26"},"referencedDeclaration":2628,"src":"1791:8:26","typeDescriptions":{"typeIdentifier":"t_contract$_IVPToken_$2628","typeString":"contract IVPToken"}},"visibility":"internal"}],"src":"1790:10:26"},"scope":2115,"src":"1746:55:26","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a72ec4b6","id":2114,"implemented":false,"kind":"function","modifiers":[],"name":"getCleanupBlockNumber","nameLocation":"1816:21:26","nodeType":"FunctionDefinition","parameters":{"id":2110,"nodeType":"ParameterList","parameters":[],"src":"1837:2:26"},"returnParameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2114,"src":"1862:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2111,"name":"uint256","nodeType":"ElementaryTypeName","src":"1862:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1861:9:26"},"scope":2115,"src":"1807:64:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2116,"src":"181:1692:26","usedErrors":[]}],"src":"32:1842:26"},"id":26},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol","exportedSymbols":{"IERC20":[4654],"IGovernanceVotePower":[1272],"IICleanable":[2052],"IIVPContract":[2337],"IVPContractEvents":[2411],"IVPToken":[2628]},"id":2338,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2117,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:27"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol","file":"../../userInterfaces/IVPToken.sol","id":2118,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2338,"sourceUnit":2629,"src":"63:43:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol","file":"../../userInterfaces/IVPContractEvents.sol","id":2119,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2338,"sourceUnit":2412,"src":"107:52:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol","file":"./IICleanable.sol","id":2120,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2338,"sourceUnit":2053,"src":"160:27:27","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2121,"name":"IICleanable","nameLocations":["215:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2052,"src":"215:11:27"},"id":2122,"nodeType":"InheritanceSpecifier","src":"215:11:27"},{"baseName":{"id":2123,"name":"IVPContractEvents","nameLocations":["228:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":2411,"src":"228:17:27"},"id":2124,"nodeType":"InheritanceSpecifier","src":"228:17:27"}],"canonicalName":"IIVPContract","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2337,"linearizedBaseContracts":[2337,2411,2052],"name":"IIVPContract","nameLocation":"199:12:27","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2125,"nodeType":"StructuredDocumentation","src":"252:194:27","text":" Update vote powers when tokens are transferred.\n Also update delegated vote powers for percentage delegation\n and check for enough funds for explicit delegations.*"},"functionSelector":"eadb4362","id":2138,"implemented":false,"kind":"function","modifiers":[],"name":"updateAtTokenTransfer","nameLocation":"460:21:27","nodeType":"FunctionDefinition","parameters":{"id":2136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2127,"mutability":"mutable","name":"_from","nameLocation":"499:5:27","nodeType":"VariableDeclaration","scope":2138,"src":"491:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2126,"name":"address","nodeType":"ElementaryTypeName","src":"491:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2129,"mutability":"mutable","name":"_to","nameLocation":"523:3:27","nodeType":"VariableDeclaration","scope":2138,"src":"515:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2128,"name":"address","nodeType":"ElementaryTypeName","src":"515:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2131,"mutability":"mutable","name":"_fromBalance","nameLocation":"545:12:27","nodeType":"VariableDeclaration","scope":2138,"src":"537:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2130,"name":"uint256","nodeType":"ElementaryTypeName","src":"537:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2133,"mutability":"mutable","name":"_toBalance","nameLocation":"575:10:27","nodeType":"VariableDeclaration","scope":2138,"src":"567:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2132,"name":"uint256","nodeType":"ElementaryTypeName","src":"567:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2135,"mutability":"mutable","name":"_amount","nameLocation":"603:7:27","nodeType":"VariableDeclaration","scope":2138,"src":"595:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2134,"name":"uint256","nodeType":"ElementaryTypeName","src":"595:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:135:27"},"returnParameters":{"id":2137,"nodeType":"ParameterList","parameters":[],"src":"625:0:27"},"scope":2337,"src":"451:175:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2139,"nodeType":"StructuredDocumentation","src":"632:464:27","text":" @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\n @param _from The address of the delegator\n @param _to The address of the recipient\n @param _balance The delegator's current balance\n @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\n   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).*"},"functionSelector":"6230001a","id":2150,"implemented":false,"kind":"function","modifiers":[],"name":"delegate","nameLocation":"1110:8:27","nodeType":"FunctionDefinition","parameters":{"id":2148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2141,"mutability":"mutable","name":"_from","nameLocation":"1136:5:27","nodeType":"VariableDeclaration","scope":2150,"src":"1128:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2140,"name":"address","nodeType":"ElementaryTypeName","src":"1128:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2143,"mutability":"mutable","name":"_to","nameLocation":"1160:3:27","nodeType":"VariableDeclaration","scope":2150,"src":"1152:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2142,"name":"address","nodeType":"ElementaryTypeName","src":"1152:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2145,"mutability":"mutable","name":"_balance","nameLocation":"1182:8:27","nodeType":"VariableDeclaration","scope":2150,"src":"1174:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2144,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2147,"mutability":"mutable","name":"_bips","nameLocation":"1209:5:27","nodeType":"VariableDeclaration","scope":2150,"src":"1201:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2146,"name":"uint256","nodeType":"ElementaryTypeName","src":"1201:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1118:102:27"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[],"src":"1229:0:27"},"scope":2337,"src":"1101:129:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2151,"nodeType":"StructuredDocumentation","src":"1240:422:27","text":" @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\n @param _from The address of the delegator\n @param _to The address of the recipient\n @param _balance The delegator's current balance\n @param _amount An explicit vote power amount to be delegated.\n   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*"},"functionSelector":"404d9e82","id":2162,"implemented":false,"kind":"function","modifiers":[],"name":"delegateExplicit","nameLocation":"1680:16:27","nodeType":"FunctionDefinition","parameters":{"id":2160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2153,"mutability":"mutable","name":"_from","nameLocation":"1714:5:27","nodeType":"VariableDeclaration","scope":2162,"src":"1706:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2152,"name":"address","nodeType":"ElementaryTypeName","src":"1706:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2155,"mutability":"mutable","name":"_to","nameLocation":"1738:3:27","nodeType":"VariableDeclaration","scope":2162,"src":"1730:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2154,"name":"address","nodeType":"ElementaryTypeName","src":"1730:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2157,"mutability":"mutable","name":"_balance","nameLocation":"1760:8:27","nodeType":"VariableDeclaration","scope":2162,"src":"1752:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2156,"name":"uint256","nodeType":"ElementaryTypeName","src":"1752:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2159,"mutability":"mutable","name":"_amount","nameLocation":"1784:7:27","nodeType":"VariableDeclaration","scope":2162,"src":"1779:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2158,"name":"uint","nodeType":"ElementaryTypeName","src":"1779:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1696:101:27"},"returnParameters":{"id":2161,"nodeType":"ParameterList","parameters":[],"src":"1806:0:27"},"scope":2337,"src":"1671:136:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2163,"nodeType":"StructuredDocumentation","src":"1817:673:27","text":" @notice Revoke all delegation from sender to `_who` at given block. \n    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\n    Block `_blockNumber` must be in the past. \n    This method should be used only to prevent rogue delegate voting in the current voting block.\n    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\n @param _from The address of the delegator\n @param _who Address of the delegatee\n @param _balance The delegator's current balance\n @param _blockNumber The block number at which to revoke delegation.*"},"functionSelector":"c7c62fab","id":2174,"implemented":false,"kind":"function","modifiers":[],"name":"revokeDelegationAt","nameLocation":"2504:18:27","nodeType":"FunctionDefinition","parameters":{"id":2172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2165,"mutability":"mutable","name":"_from","nameLocation":"2540:5:27","nodeType":"VariableDeclaration","scope":2174,"src":"2532:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2164,"name":"address","nodeType":"ElementaryTypeName","src":"2532:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2167,"mutability":"mutable","name":"_who","nameLocation":"2564:4:27","nodeType":"VariableDeclaration","scope":2174,"src":"2556:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2166,"name":"address","nodeType":"ElementaryTypeName","src":"2556:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2169,"mutability":"mutable","name":"_balance","nameLocation":"2587:8:27","nodeType":"VariableDeclaration","scope":2174,"src":"2579:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2168,"name":"uint256","nodeType":"ElementaryTypeName","src":"2579:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2171,"mutability":"mutable","name":"_blockNumber","nameLocation":"2610:12:27","nodeType":"VariableDeclaration","scope":2174,"src":"2605:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2170,"name":"uint","nodeType":"ElementaryTypeName","src":"2605:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2522:106:27"},"returnParameters":{"id":2173,"nodeType":"ParameterList","parameters":[],"src":"2637:0:27"},"scope":2337,"src":"2495:143:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2175,"nodeType":"StructuredDocumentation","src":"2652:246:27","text":" @notice Undelegate all voting power for delegates of `msg.sender`\n    Can only be used with percentage delegation.\n    Does not reset delegation mode back to NOTSET.\n @param _from The address of the delegator*"},"functionSelector":"05109ecf","id":2182,"implemented":false,"kind":"function","modifiers":[],"name":"undelegateAll","nameLocation":"2912:13:27","nodeType":"FunctionDefinition","parameters":{"id":2180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2177,"mutability":"mutable","name":"_from","nameLocation":"2943:5:27","nodeType":"VariableDeclaration","scope":2182,"src":"2935:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2176,"name":"address","nodeType":"ElementaryTypeName","src":"2935:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2179,"mutability":"mutable","name":"_balance","nameLocation":"2966:8:27","nodeType":"VariableDeclaration","scope":2182,"src":"2958:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2178,"name":"uint256","nodeType":"ElementaryTypeName","src":"2958:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2925:55:27"},"returnParameters":{"id":2181,"nodeType":"ParameterList","parameters":[],"src":"2989:0:27"},"scope":2337,"src":"2903:87:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2183,"nodeType":"StructuredDocumentation","src":"3000:481:27","text":" @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\n    Can only be used with explicit delegation.\n    Does not reset delegation mode back to NOTSET.\n @param _from The address of the delegator\n @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \n   so the caller must supply them.\n @return The amount still delegated (in case the list of delegates was incomplete)."},"functionSelector":"0f8b8af7","id":2193,"implemented":false,"kind":"function","modifiers":[],"name":"undelegateAllExplicit","nameLocation":"3495:21:27","nodeType":"FunctionDefinition","parameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2185,"mutability":"mutable","name":"_from","nameLocation":"3534:5:27","nodeType":"VariableDeclaration","scope":2193,"src":"3526:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2184,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2188,"mutability":"mutable","name":"_delegateAddresses","nameLocation":"3567:18:27","nodeType":"VariableDeclaration","scope":2193,"src":"3550:35:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2186,"name":"address","nodeType":"ElementaryTypeName","src":"3550:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2187,"nodeType":"ArrayTypeName","src":"3550:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3516:75:27"},"returnParameters":{"id":2192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2193,"src":"3610:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"3610:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3609:9:27"},"scope":2337,"src":"3486:133:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2194,"nodeType":"StructuredDocumentation","src":"3629:297:27","text":" @notice Get the vote power of `_who` at block `_blockNumber`\n   Reads/updates cache and upholds revocations.\n @param _who The address to get voting power.\n @param _blockNumber The block number at which to fetch.\n @return Vote power of `_who` at `_blockNumber`."},"functionSelector":"e587497e","id":2203,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerOfAtCached","nameLocation":"3940:19:27","nodeType":"FunctionDefinition","parameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2196,"mutability":"mutable","name":"_who","nameLocation":"3968:4:27","nodeType":"VariableDeclaration","scope":2203,"src":"3960:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2195,"name":"address","nodeType":"ElementaryTypeName","src":"3960:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2198,"mutability":"mutable","name":"_blockNumber","nameLocation":"3982:12:27","nodeType":"VariableDeclaration","scope":2203,"src":"3974:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"3974:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3959:36:27"},"returnParameters":{"id":2202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2203,"src":"4013:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2200,"name":"uint256","nodeType":"ElementaryTypeName","src":"4013:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4012:9:27"},"scope":2337,"src":"3931:91:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2204,"nodeType":"StructuredDocumentation","src":"4032:161:27","text":" @notice Get the current vote power of `_who`.\n @param _who The address to get voting power.\n @return Current vote power of `_who`."},"functionSelector":"142d1018","id":2211,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerOf","nameLocation":"4207:11:27","nodeType":"FunctionDefinition","parameters":{"id":2207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2206,"mutability":"mutable","name":"_who","nameLocation":"4227:4:27","nodeType":"VariableDeclaration","scope":2211,"src":"4219:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2205,"name":"address","nodeType":"ElementaryTypeName","src":"4219:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4218:14:27"},"returnParameters":{"id":2210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2211,"src":"4255:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2208,"name":"uint256","nodeType":"ElementaryTypeName","src":"4255:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4254:9:27"},"scope":2337,"src":"4198:66:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2212,"nodeType":"StructuredDocumentation","src":"4274:244:27","text":" @notice Get the vote power of `_who` at block `_blockNumber`\n @param _who The address to get voting power.\n @param _blockNumber The block number at which to fetch.\n @return Vote power of `_who` at `_blockNumber`."},"functionSelector":"92bfe6d8","id":2221,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerOfAt","nameLocation":"4532:13:27","nodeType":"FunctionDefinition","parameters":{"id":2217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"_who","nameLocation":"4554:4:27","nodeType":"VariableDeclaration","scope":2221,"src":"4546:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2213,"name":"address","nodeType":"ElementaryTypeName","src":"4546:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2216,"mutability":"mutable","name":"_blockNumber","nameLocation":"4568:12:27","nodeType":"VariableDeclaration","scope":2221,"src":"4560:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4545:36:27"},"returnParameters":{"id":2220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2219,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2221,"src":"4604:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2218,"name":"uint256","nodeType":"ElementaryTypeName","src":"4604:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4603:9:27"},"scope":2337,"src":"4523:90:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2222,"nodeType":"StructuredDocumentation","src":"4619:240:27","text":" Return vote powers for several addresses in a batch.\n @param _owners The list of addresses to fetch vote power of.\n @param _blockNumber The block number at which to fetch.\n @return A list of vote powers."},"functionSelector":"49e3c7e5","id":2233,"implemented":false,"kind":"function","modifiers":[],"name":"batchVotePowerOfAt","nameLocation":"4877:18:27","nodeType":"FunctionDefinition","parameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"_owners","nameLocation":"4922:7:27","nodeType":"VariableDeclaration","scope":2233,"src":"4905:24:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2223,"name":"address","nodeType":"ElementaryTypeName","src":"4905:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2224,"nodeType":"ArrayTypeName","src":"4905:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2227,"mutability":"mutable","name":"_blockNumber","nameLocation":"4948:12:27","nodeType":"VariableDeclaration","scope":2233,"src":"4940:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"4940:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4895:71:27"},"returnParameters":{"id":2232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2233,"src":"4997:16:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2229,"name":"uint256","nodeType":"ElementaryTypeName","src":"4997:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2230,"nodeType":"ArrayTypeName","src":"4997:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4996:18:27"},"scope":2337,"src":"4868:147:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2234,"nodeType":"StructuredDocumentation","src":"5021:274:27","text":" @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\n @param _from Address of delegator\n @param _to Address of delegatee\n @param _balance The delegator's current balance\n @return The delegated vote power."},"functionSelector":"9dc6b9f2","id":2245,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerFromTo","nameLocation":"5309:15:27","nodeType":"FunctionDefinition","parameters":{"id":2241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2236,"mutability":"mutable","name":"_from","nameLocation":"5342:5:27","nodeType":"VariableDeclaration","scope":2245,"src":"5334:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2235,"name":"address","nodeType":"ElementaryTypeName","src":"5334:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2238,"mutability":"mutable","name":"_to","nameLocation":"5366:3:27","nodeType":"VariableDeclaration","scope":2245,"src":"5358:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2237,"name":"address","nodeType":"ElementaryTypeName","src":"5358:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2240,"mutability":"mutable","name":"_balance","nameLocation":"5388:8:27","nodeType":"VariableDeclaration","scope":2245,"src":"5380:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2239,"name":"uint256","nodeType":"ElementaryTypeName","src":"5380:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5324:78:27"},"returnParameters":{"id":2244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2245,"src":"5425:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2242,"name":"uint256","nodeType":"ElementaryTypeName","src":"5425:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5424:9:27"},"scope":2337,"src":"5300:134:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2246,"nodeType":"StructuredDocumentation","src":"5444:350:27","text":" @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\n @param _from Address of delegator\n @param _to Address of delegatee\n @param _balance The delegator's current balance\n @param _blockNumber The block number at which to fetch.\n @return The delegated vote power."},"functionSelector":"833aca92","id":2259,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerFromToAt","nameLocation":"5808:17:27","nodeType":"FunctionDefinition","parameters":{"id":2255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2248,"mutability":"mutable","name":"_from","nameLocation":"5843:5:27","nodeType":"VariableDeclaration","scope":2259,"src":"5835:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2247,"name":"address","nodeType":"ElementaryTypeName","src":"5835:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2250,"mutability":"mutable","name":"_to","nameLocation":"5867:3:27","nodeType":"VariableDeclaration","scope":2259,"src":"5859:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2249,"name":"address","nodeType":"ElementaryTypeName","src":"5859:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2252,"mutability":"mutable","name":"_balance","nameLocation":"5889:8:27","nodeType":"VariableDeclaration","scope":2259,"src":"5881:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2251,"name":"uint256","nodeType":"ElementaryTypeName","src":"5881:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2254,"mutability":"mutable","name":"_blockNumber","nameLocation":"5912:12:27","nodeType":"VariableDeclaration","scope":2259,"src":"5907:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2253,"name":"uint","nodeType":"ElementaryTypeName","src":"5907:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5825:105:27"},"returnParameters":{"id":2258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2259,"src":"5953:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2256,"name":"uint256","nodeType":"ElementaryTypeName","src":"5953:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5952:9:27"},"scope":2337,"src":"5799:163:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2260,"nodeType":"StructuredDocumentation","src":"5968:248:27","text":" @notice Compute the current undelegated vote power of `_owner`\n @param _owner The address to get undelegated voting power.\n @param _balance Owner's current balance\n @return The unallocated vote power of `_owner`"},"functionSelector":"4a03d556","id":2269,"implemented":false,"kind":"function","modifiers":[],"name":"undelegatedVotePowerOf","nameLocation":"6230:22:27","nodeType":"FunctionDefinition","parameters":{"id":2265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2262,"mutability":"mutable","name":"_owner","nameLocation":"6270:6:27","nodeType":"VariableDeclaration","scope":2269,"src":"6262:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2261,"name":"address","nodeType":"ElementaryTypeName","src":"6262:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2264,"mutability":"mutable","name":"_balance","nameLocation":"6294:8:27","nodeType":"VariableDeclaration","scope":2269,"src":"6286:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2263,"name":"uint256","nodeType":"ElementaryTypeName","src":"6286:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6252:56:27"},"returnParameters":{"id":2268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2269,"src":"6331:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2266,"name":"uint256","nodeType":"ElementaryTypeName","src":"6331:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6330:9:27"},"scope":2337,"src":"6221:119:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2270,"nodeType":"StructuredDocumentation","src":"6346:325:27","text":" @notice Get the undelegated vote power of `_owner` at given block.\n @param _owner The address to get undelegated voting power.\n @param _blockNumber The block number at which to fetch.\n @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)"},"functionSelector":"31503927","id":2281,"implemented":false,"kind":"function","modifiers":[],"name":"undelegatedVotePowerOfAt","nameLocation":"6685:24:27","nodeType":"FunctionDefinition","parameters":{"id":2277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"_owner","nameLocation":"6727:6:27","nodeType":"VariableDeclaration","scope":2281,"src":"6719:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2271,"name":"address","nodeType":"ElementaryTypeName","src":"6719:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2274,"mutability":"mutable","name":"_balance","nameLocation":"6752:8:27","nodeType":"VariableDeclaration","scope":2281,"src":"6744:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2273,"name":"uint256","nodeType":"ElementaryTypeName","src":"6744:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2276,"mutability":"mutable","name":"_blockNumber","nameLocation":"6778:12:27","nodeType":"VariableDeclaration","scope":2281,"src":"6770:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2275,"name":"uint256","nodeType":"ElementaryTypeName","src":"6770:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6709:87:27"},"returnParameters":{"id":2280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2279,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2281,"src":"6819:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2278,"name":"uint256","nodeType":"ElementaryTypeName","src":"6819:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6818:9:27"},"scope":2337,"src":"6676:152:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2282,"nodeType":"StructuredDocumentation","src":"6834:281:27","text":" @notice Get the delegation mode for '_who'. This mode determines whether vote power is\n  allocated by percentage or by explicit value.\n @param _who The address to get delegation mode.\n @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))"},"functionSelector":"f6837767","id":2289,"implemented":false,"kind":"function","modifiers":[],"name":"delegationModeOf","nameLocation":"7129:16:27","nodeType":"FunctionDefinition","parameters":{"id":2285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2284,"mutability":"mutable","name":"_who","nameLocation":"7154:4:27","nodeType":"VariableDeclaration","scope":2289,"src":"7146:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2283,"name":"address","nodeType":"ElementaryTypeName","src":"7146:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7145:14:27"},"returnParameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2289,"src":"7183:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2286,"name":"uint256","nodeType":"ElementaryTypeName","src":"7183:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7182:9:27"},"scope":2337,"src":"7120:72:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2290,"nodeType":"StructuredDocumentation","src":"7202:527:27","text":" @notice Get the vote power delegation `_delegateAddresses` \n  and `pcts` of an `_owner`. Returned in two separate positional arrays.\n @param _owner The address to get delegations.\n @return _delegateAddresses Positional array of delegation addresses.\n @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n @return _count The number of delegates.\n @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."},"functionSelector":"7de5b8ed","id":2305,"implemented":false,"kind":"function","modifiers":[],"name":"delegatesOf","nameLocation":"7743:11:27","nodeType":"FunctionDefinition","parameters":{"id":2293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2292,"mutability":"mutable","name":"_owner","nameLocation":"7772:6:27","nodeType":"VariableDeclaration","scope":2305,"src":"7764:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2291,"name":"address","nodeType":"ElementaryTypeName","src":"7764:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7754:30:27"},"returnParameters":{"id":2304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"_delegateAddresses","nameLocation":"7855:18:27","nodeType":"VariableDeclaration","scope":2305,"src":"7838:35:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2294,"name":"address","nodeType":"ElementaryTypeName","src":"7838:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2295,"nodeType":"ArrayTypeName","src":"7838:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2299,"mutability":"mutable","name":"_bips","nameLocation":"7905:5:27","nodeType":"VariableDeclaration","scope":2305,"src":"7888:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2297,"name":"uint256","nodeType":"ElementaryTypeName","src":"7888:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2298,"nodeType":"ArrayTypeName","src":"7888:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"_count","nameLocation":"7932:6:27","nodeType":"VariableDeclaration","scope":2305,"src":"7924:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2300,"name":"uint256","nodeType":"ElementaryTypeName","src":"7924:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2303,"mutability":"mutable","name":"_delegationMode","nameLocation":"7960:15:27","nodeType":"VariableDeclaration","scope":2305,"src":"7952:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2302,"name":"uint256","nodeType":"ElementaryTypeName","src":"7952:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7824:161:27"},"scope":2337,"src":"7734:252:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2306,"nodeType":"StructuredDocumentation","src":"7992:607:27","text":" @notice Get the vote power delegation `delegationAddresses` \n  and `pcts` of an `_owner`. Returned in two separate positional arrays.\n @param _owner The address to get delegations.\n @param _blockNumber The block for which we want to know the delegations.\n @return _delegateAddresses Positional array of delegation addresses.\n @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n @return _count The number of delegates.\n @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."},"functionSelector":"ed475a79","id":2323,"implemented":false,"kind":"function","modifiers":[],"name":"delegatesOfAt","nameLocation":"8613:13:27","nodeType":"FunctionDefinition","parameters":{"id":2311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2308,"mutability":"mutable","name":"_owner","nameLocation":"8644:6:27","nodeType":"VariableDeclaration","scope":2323,"src":"8636:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2307,"name":"address","nodeType":"ElementaryTypeName","src":"8636:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2310,"mutability":"mutable","name":"_blockNumber","nameLocation":"8668:12:27","nodeType":"VariableDeclaration","scope":2323,"src":"8660:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2309,"name":"uint256","nodeType":"ElementaryTypeName","src":"8660:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8626:60:27"},"returnParameters":{"id":2322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2314,"mutability":"mutable","name":"_delegateAddresses","nameLocation":"8757:18:27","nodeType":"VariableDeclaration","scope":2323,"src":"8740:35:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2312,"name":"address","nodeType":"ElementaryTypeName","src":"8740:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2313,"nodeType":"ArrayTypeName","src":"8740:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2317,"mutability":"mutable","name":"_bips","nameLocation":"8807:5:27","nodeType":"VariableDeclaration","scope":2323,"src":"8790:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2315,"name":"uint256","nodeType":"ElementaryTypeName","src":"8790:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2316,"nodeType":"ArrayTypeName","src":"8790:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2319,"mutability":"mutable","name":"_count","nameLocation":"8834:6:27","nodeType":"VariableDeclaration","scope":2323,"src":"8826:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2318,"name":"uint256","nodeType":"ElementaryTypeName","src":"8826:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2321,"mutability":"mutable","name":"_delegationMode","nameLocation":"8862:15:27","nodeType":"VariableDeclaration","scope":2323,"src":"8854:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2320,"name":"uint256","nodeType":"ElementaryTypeName","src":"8854:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8726:161:27"},"scope":2337,"src":"8604:284:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2324,"nodeType":"StructuredDocumentation","src":"8894:402:27","text":" The VPToken (or some other contract) that owns this VPContract.\n All state changing methods may be called only from this address.\n This is because original msg.sender is sent in `_from` parameter\n and we must be sure that it cannot be faked by directly calling VPContract.\n Owner token is also used in case of replacement to recover vote powers from balances."},"functionSelector":"65371883","id":2330,"implemented":false,"kind":"function","modifiers":[],"name":"ownerToken","nameLocation":"9310:10:27","nodeType":"FunctionDefinition","parameters":{"id":2325,"nodeType":"ParameterList","parameters":[],"src":"9320:2:27"},"returnParameters":{"id":2329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2330,"src":"9346:8:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVPToken_$2628","typeString":"contract IVPToken"},"typeName":{"id":2327,"nodeType":"UserDefinedTypeName","pathNode":{"id":2326,"name":"IVPToken","nameLocations":["9346:8:27"],"nodeType":"IdentifierPath","referencedDeclaration":2628,"src":"9346:8:27"},"referencedDeclaration":2628,"src":"9346:8:27","typeDescriptions":{"typeIdentifier":"t_contract$_IVPToken_$2628","typeString":"contract IVPToken"}},"visibility":"internal"}],"src":"9345:10:27"},"scope":2337,"src":"9301:55:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2331,"nodeType":"StructuredDocumentation","src":"9366:314:27","text":" Return true if this IIVPContract is configured to be used as a replacement for other contract.\n It means that vote powers are not necessarily correct at the initialization, therefore\n every method that reads vote power must check whether it is initialized for that address and block."},"functionSelector":"aa94d3f2","id":2336,"implemented":false,"kind":"function","modifiers":[],"name":"isReplacement","nameLocation":"9694:13:27","nodeType":"FunctionDefinition","parameters":{"id":2332,"nodeType":"ParameterList","parameters":[],"src":"9707:2:27"},"returnParameters":{"id":2335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2336,"src":"9733:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2333,"name":"bool","nodeType":"ElementaryTypeName","src":"9733:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9732:6:27"},"scope":2337,"src":"9685:54:27","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2338,"src":"189:9552:27","usedErrors":[]}],"src":"32:9710:27"},"id":27},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol","exportedSymbols":{"IERC20":[4654],"IGovernanceVotePower":[1272],"IICleanable":[2052],"IIGovernanceVotePower":[2115],"IIVPContract":[2337],"IIVPToken":[2386],"IVPContractEvents":[2411],"IVPToken":[2628]},"id":2387,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2339,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:28"},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol","file":"../../userInterfaces/IVPToken.sol","id":2340,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2387,"sourceUnit":2629,"src":"63:43:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol","file":"../../../../governance/userInterfaces/IGovernanceVotePower.sol","id":2341,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2387,"sourceUnit":1273,"src":"107:72:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol","file":"./IIVPContract.sol","id":2342,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2387,"sourceUnit":2338,"src":"180:28:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol","file":"./IIGovernanceVotePower.sol","id":2343,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2387,"sourceUnit":2116,"src":"209:37:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol","file":"./IICleanable.sol","id":2344,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2387,"sourceUnit":2053,"src":"247:27:28","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2345,"name":"IVPToken","nameLocations":["299:8:28"],"nodeType":"IdentifierPath","referencedDeclaration":2628,"src":"299:8:28"},"id":2346,"nodeType":"InheritanceSpecifier","src":"299:8:28"},{"baseName":{"id":2347,"name":"IICleanable","nameLocations":["309:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2052,"src":"309:11:28"},"id":2348,"nodeType":"InheritanceSpecifier","src":"309:11:28"}],"canonicalName":"IIVPToken","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2386,"linearizedBaseContracts":[2386,2052,2628,4654],"name":"IIVPToken","nameLocation":"286:9:28","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2349,"nodeType":"StructuredDocumentation","src":"327:163:28","text":" Sets new governance vote power contract that allows token owners to participate in governance voting\n and delegate governance vote power. "},"functionSelector":"9ca2231a","id":2355,"implemented":false,"kind":"function","modifiers":[],"name":"setGovernanceVotePower","nameLocation":"504:22:28","nodeType":"FunctionDefinition","parameters":{"id":2353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2352,"mutability":"mutable","name":"_governanceVotePower","nameLocation":"549:20:28","nodeType":"VariableDeclaration","scope":2355,"src":"527:42:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIGovernanceVotePower_$2115","typeString":"contract IIGovernanceVotePower"},"typeName":{"id":2351,"nodeType":"UserDefinedTypeName","pathNode":{"id":2350,"name":"IIGovernanceVotePower","nameLocations":["527:21:28"],"nodeType":"IdentifierPath","referencedDeclaration":2115,"src":"527:21:28"},"referencedDeclaration":2115,"src":"527:21:28","typeDescriptions":{"typeIdentifier":"t_contract$_IIGovernanceVotePower_$2115","typeString":"contract IIGovernanceVotePower"}},"visibility":"internal"}],"src":"526:44:28"},"returnParameters":{"id":2354,"nodeType":"ParameterList","parameters":[],"src":"579:0:28"},"scope":2386,"src":"495:85:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2356,"nodeType":"StructuredDocumentation","src":"590:421:28","text":" @notice Get the total vote power at block `_blockNumber` using cache.\n   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \n @param _blockNumber The block number at which to fetch.\n @return The total vote power at the block (sum of all accounts' vote powers)."},"functionSelector":"caeb942b","id":2363,"implemented":false,"kind":"function","modifiers":[],"name":"totalVotePowerAtCached","nameLocation":"1025:22:28","nodeType":"FunctionDefinition","parameters":{"id":2359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2358,"mutability":"mutable","name":"_blockNumber","nameLocation":"1056:12:28","nodeType":"VariableDeclaration","scope":2363,"src":"1048:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1048:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1047:22:28"},"returnParameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2363,"src":"1087:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2360,"name":"uint256","nodeType":"ElementaryTypeName","src":"1087:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1086:9:28"},"scope":2386,"src":"1016:80:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2364,"nodeType":"StructuredDocumentation","src":"1106:450:28","text":" @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\n   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n   Can only be used if _blockNumber is in the past, otherwise reverts.    \n @param _owner The address to get voting power.\n @param _blockNumber The block number at which to fetch.\n @return Vote power of `_owner` at `_blockNumber`."},"functionSelector":"e587497e","id":2373,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerOfAtCached","nameLocation":"1570:19:28","nodeType":"FunctionDefinition","parameters":{"id":2369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2366,"mutability":"mutable","name":"_owner","nameLocation":"1598:6:28","nodeType":"VariableDeclaration","scope":2373,"src":"1590:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2365,"name":"address","nodeType":"ElementaryTypeName","src":"1590:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2368,"mutability":"mutable","name":"_blockNumber","nameLocation":"1614:12:28","nodeType":"VariableDeclaration","scope":2373,"src":"1606:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2367,"name":"uint256","nodeType":"ElementaryTypeName","src":"1606:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1589:38:28"},"returnParameters":{"id":2372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2373,"src":"1645:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2370,"name":"uint256","nodeType":"ElementaryTypeName","src":"1645:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1644:9:28"},"scope":2386,"src":"1561:93:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2374,"nodeType":"StructuredDocumentation","src":"1660:240:28","text":" Return vote powers for several addresses in a batch.\n @param _owners The list of addresses to fetch vote power of.\n @param _blockNumber The block number at which to fetch.\n @return A list of vote powers."},"functionSelector":"49e3c7e5","id":2385,"implemented":false,"kind":"function","modifiers":[],"name":"batchVotePowerOfAt","nameLocation":"1918:18:28","nodeType":"FunctionDefinition","parameters":{"id":2380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2377,"mutability":"mutable","name":"_owners","nameLocation":"1963:7:28","nodeType":"VariableDeclaration","scope":2385,"src":"1946:24:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2375,"name":"address","nodeType":"ElementaryTypeName","src":"1946:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2376,"nodeType":"ArrayTypeName","src":"1946:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2379,"mutability":"mutable","name":"_blockNumber","nameLocation":"1989:12:28","nodeType":"VariableDeclaration","scope":2385,"src":"1981:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2378,"name":"uint256","nodeType":"ElementaryTypeName","src":"1981:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1936:71:28"},"returnParameters":{"id":2384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2385,"src":"2030:16:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2381,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2382,"nodeType":"ArrayTypeName","src":"2030:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2029:18:28"},"scope":2386,"src":"1909:139:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2387,"src":"276:1774:28","usedErrors":[]}],"src":"32:2019:28"},"id":28},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol","exportedSymbols":{"IVPContractEvents":[2411]},"id":2412,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2388,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IVPContractEvents","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"id":2411,"linearizedBaseContracts":[2411],"name":"IVPContractEvents","nameLocation":"73:17:29","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2389,"nodeType":"StructuredDocumentation","src":"97:329:29","text":" Event triggered when an account delegates or undelegates another account. \n Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\n For undelegation, `newVotePower` is 0.\n Note: the event is always emitted from VPToken's `writeVotePowerContract`."},"eventSelector":"500599802164a08023e87ffc3eed0ba3ae60697b3083ba81d046683679d81c6b","id":2399,"name":"Delegate","nameLocation":"437:8:29","nodeType":"EventDefinition","parameters":{"id":2398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2391,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"462:4:29","nodeType":"VariableDeclaration","scope":2399,"src":"446:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2390,"name":"address","nodeType":"ElementaryTypeName","src":"446:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2393,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"484:2:29","nodeType":"VariableDeclaration","scope":2399,"src":"468:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2392,"name":"address","nodeType":"ElementaryTypeName","src":"468:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2395,"indexed":false,"mutability":"mutable","name":"priorVotePower","nameLocation":"496:14:29","nodeType":"VariableDeclaration","scope":2399,"src":"488:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2394,"name":"uint256","nodeType":"ElementaryTypeName","src":"488:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2397,"indexed":false,"mutability":"mutable","name":"newVotePower","nameLocation":"520:12:29","nodeType":"VariableDeclaration","scope":2399,"src":"512:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2396,"name":"uint256","nodeType":"ElementaryTypeName","src":"512:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"445:88:29"},"src":"431:103:29"},{"anonymous":false,"documentation":{"id":2400,"nodeType":"StructuredDocumentation","src":"544:292:29","text":" Event triggered only when account `delegator` revokes delegation to `delegatee`\n for a single block in the past (typically the current vote block).\n Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`."},"eventSelector":"d6f80c7d68e3e62bd7a51c3d37e575c1cfbc311c07487b69ef4eb570bc21cb68","id":2410,"name":"Revoke","nameLocation":"847:6:29","nodeType":"EventDefinition","parameters":{"id":2409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2402,"indexed":true,"mutability":"mutable","name":"delegator","nameLocation":"870:9:29","nodeType":"VariableDeclaration","scope":2410,"src":"854:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2401,"name":"address","nodeType":"ElementaryTypeName","src":"854:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2404,"indexed":true,"mutability":"mutable","name":"delegatee","nameLocation":"897:9:29","nodeType":"VariableDeclaration","scope":2410,"src":"881:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2403,"name":"address","nodeType":"ElementaryTypeName","src":"881:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2406,"indexed":false,"mutability":"mutable","name":"votePower","nameLocation":"916:9:29","nodeType":"VariableDeclaration","scope":2410,"src":"908:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2405,"name":"uint256","nodeType":"ElementaryTypeName","src":"908:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2408,"indexed":false,"mutability":"mutable","name":"blockNumber","nameLocation":"935:11:29","nodeType":"VariableDeclaration","scope":2410,"src":"927:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2407,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"853:94:29"},"src":"841:107:29"}],"scope":2412,"src":"63:887:29","usedErrors":[]}],"src":"32:919:29"},"id":29},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol","exportedSymbols":{"IERC20":[4654],"IGovernanceVotePower":[1272],"IVPContractEvents":[2411],"IVPToken":[2628]},"id":2629,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2413,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:30"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2415,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2629,"sourceUnit":4655,"src":"63:70:30","symbolAliases":[{"foreign":{"id":2414,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"71:6:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol","file":"../../../governance/userInterfaces/IGovernanceVotePower.sol","id":2416,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2629,"sourceUnit":1273,"src":"134:69:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol","file":"./IVPContractEvents.sol","id":2417,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2629,"sourceUnit":2412,"src":"204:33:30","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2418,"name":"IERC20","nameLocations":["261:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"261:6:30"},"id":2419,"nodeType":"InheritanceSpecifier","src":"261:6:30"}],"canonicalName":"IVPToken","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2628,"linearizedBaseContracts":[2628,4654],"name":"IVPToken","nameLocation":"249:8:30","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2420,"nodeType":"StructuredDocumentation","src":"274:367:30","text":" @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\n @param _to The address of the recipient\n @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\n   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*"},"functionSelector":"026e402b","id":2427,"implemented":false,"kind":"function","modifiers":[],"name":"delegate","nameLocation":"655:8:30","nodeType":"FunctionDefinition","parameters":{"id":2425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2422,"mutability":"mutable","name":"_to","nameLocation":"672:3:30","nodeType":"VariableDeclaration","scope":2427,"src":"664:11:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2421,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2424,"mutability":"mutable","name":"_bips","nameLocation":"685:5:30","nodeType":"VariableDeclaration","scope":2427,"src":"677:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2423,"name":"uint256","nodeType":"ElementaryTypeName","src":"677:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"663:28:30"},"returnParameters":{"id":2426,"nodeType":"ParameterList","parameters":[],"src":"700:0:30"},"scope":2628,"src":"646:55:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2428,"nodeType":"StructuredDocumentation","src":"711:318:30","text":" @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\n @param _to The address of the recipient\n @param _amount An explicit vote power amount to be delegated.\n   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*"},"functionSelector":"d06dc3ad","id":2435,"implemented":false,"kind":"function","modifiers":[],"name":"delegateExplicit","nameLocation":"1047:16:30","nodeType":"FunctionDefinition","parameters":{"id":2433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2430,"mutability":"mutable","name":"_to","nameLocation":"1072:3:30","nodeType":"VariableDeclaration","scope":2435,"src":"1064:11:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2429,"name":"address","nodeType":"ElementaryTypeName","src":"1064:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2432,"mutability":"mutable","name":"_amount","nameLocation":"1082:7:30","nodeType":"VariableDeclaration","scope":2435,"src":"1077:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2431,"name":"uint","nodeType":"ElementaryTypeName","src":"1077:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1063:27:30"},"returnParameters":{"id":2434,"nodeType":"ParameterList","parameters":[],"src":"1099:0:30"},"scope":2628,"src":"1038:62:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2436,"nodeType":"StructuredDocumentation","src":"1106:560:30","text":" @notice Revoke all delegation from sender to `_who` at given block. \n    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\n    Block `_blockNumber` must be in the past. \n    This method should be used only to prevent rogue delegate voting in the current voting block.\n    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\n @param _who Address of the delegatee\n @param _blockNumber The block number at which to revoke delegation."},"functionSelector":"bbd6fbf8","id":2443,"implemented":false,"kind":"function","modifiers":[],"name":"revokeDelegationAt","nameLocation":"1680:18:30","nodeType":"FunctionDefinition","parameters":{"id":2441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2438,"mutability":"mutable","name":"_who","nameLocation":"1707:4:30","nodeType":"VariableDeclaration","scope":2443,"src":"1699:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2437,"name":"address","nodeType":"ElementaryTypeName","src":"1699:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2440,"mutability":"mutable","name":"_blockNumber","nameLocation":"1718:12:30","nodeType":"VariableDeclaration","scope":2443,"src":"1713:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2439,"name":"uint","nodeType":"ElementaryTypeName","src":"1713:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1698:33:30"},"returnParameters":{"id":2442,"nodeType":"ParameterList","parameters":[],"src":"1740:0:30"},"scope":2628,"src":"1671:70:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2444,"nodeType":"StructuredDocumentation","src":"1751:197:30","text":" @notice Undelegate all voting power for delegates of `msg.sender`\n    Can only be used with percentage delegation.\n    Does not reset delegation mode back to NOTSET.*"},"functionSelector":"b302f393","id":2447,"implemented":false,"kind":"function","modifiers":[],"name":"undelegateAll","nameLocation":"1962:13:30","nodeType":"FunctionDefinition","parameters":{"id":2445,"nodeType":"ParameterList","parameters":[],"src":"1975:2:30"},"returnParameters":{"id":2446,"nodeType":"ParameterList","parameters":[],"src":"1986:0:30"},"scope":2628,"src":"1953:34:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2448,"nodeType":"StructuredDocumentation","src":"1997:432:30","text":" @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\n    Can only be used with explicit delegation.\n    Does not reset delegation mode back to NOTSET.\n @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \n   so the caller must supply them.\n @return The amount still delegated (in case the list of delegates was incomplete)."},"functionSelector":"5d6d11eb","id":2456,"implemented":false,"kind":"function","modifiers":[],"name":"undelegateAllExplicit","nameLocation":"2443:21:30","nodeType":"FunctionDefinition","parameters":{"id":2452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2451,"mutability":"mutable","name":"_delegateAddresses","nameLocation":"2482:18:30","nodeType":"VariableDeclaration","scope":2456,"src":"2465:35:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2449,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2450,"nodeType":"ArrayTypeName","src":"2465:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2464:37:30"},"returnParameters":{"id":2455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2456,"src":"2520:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2453,"name":"uint256","nodeType":"ElementaryTypeName","src":"2520:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2519:9:30"},"scope":2628,"src":"2434:95:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2457,"nodeType":"StructuredDocumentation","src":"2536:62:30","text":" @dev Should be compatible with ERC20 method"},"functionSelector":"06fdde03","id":2462,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"2612:4:30","nodeType":"FunctionDefinition","parameters":{"id":2458,"nodeType":"ParameterList","parameters":[],"src":"2616:2:30"},"returnParameters":{"id":2461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2462,"src":"2642:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2459,"name":"string","nodeType":"ElementaryTypeName","src":"2642:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2641:15:30"},"scope":2628,"src":"2603:54:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2463,"nodeType":"StructuredDocumentation","src":"2663:62:30","text":" @dev Should be compatible with ERC20 method"},"functionSelector":"95d89b41","id":2468,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2739:6:30","nodeType":"FunctionDefinition","parameters":{"id":2464,"nodeType":"ParameterList","parameters":[],"src":"2745:2:30"},"returnParameters":{"id":2467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2468,"src":"2771:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2465,"name":"string","nodeType":"ElementaryTypeName","src":"2771:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2770:15:30"},"scope":2628,"src":"2730:56:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2469,"nodeType":"StructuredDocumentation","src":"2792:62:30","text":" @dev Should be compatible with ERC20 method"},"functionSelector":"313ce567","id":2474,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"2868:8:30","nodeType":"FunctionDefinition","parameters":{"id":2470,"nodeType":"ParameterList","parameters":[],"src":"2876:2:30"},"returnParameters":{"id":2473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2474,"src":"2902:5:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2471,"name":"uint8","nodeType":"ElementaryTypeName","src":"2902:5:30","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2901:7:30"},"scope":2628,"src":"2859:50:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2475,"nodeType":"StructuredDocumentation","src":"2920:216:30","text":" @notice Total amount of tokens at a specific `_blockNumber`.\n @param _blockNumber The block number when the totalSupply is queried\n @return The total amount of tokens at `_blockNumber`*"},"functionSelector":"981b24d0","id":2482,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupplyAt","nameLocation":"3150:13:30","nodeType":"FunctionDefinition","parameters":{"id":2478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2477,"mutability":"mutable","name":"_blockNumber","nameLocation":"3169:12:30","nodeType":"VariableDeclaration","scope":2482,"src":"3164:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2476,"name":"uint","nodeType":"ElementaryTypeName","src":"3164:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3163:19:30"},"returnParameters":{"id":2481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2482,"src":"3205:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2479,"name":"uint256","nodeType":"ElementaryTypeName","src":"3205:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3204:9:30"},"scope":2628,"src":"3141:73:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2483,"nodeType":"StructuredDocumentation","src":"3220:286:30","text":" @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\n @param _owner The address from which the balance will be retrieved.\n @param _blockNumber The block number when the balance is queried.\n @return The balance at `_blockNumber`.*"},"functionSelector":"4ee2cd7e","id":2492,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfAt","nameLocation":"3520:11:30","nodeType":"FunctionDefinition","parameters":{"id":2488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"_owner","nameLocation":"3540:6:30","nodeType":"VariableDeclaration","scope":2492,"src":"3532:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2484,"name":"address","nodeType":"ElementaryTypeName","src":"3532:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2487,"mutability":"mutable","name":"_blockNumber","nameLocation":"3553:12:30","nodeType":"VariableDeclaration","scope":2492,"src":"3548:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2486,"name":"uint","nodeType":"ElementaryTypeName","src":"3548:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3531:35:30"},"returnParameters":{"id":2491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2490,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2492,"src":"3590:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2489,"name":"uint256","nodeType":"ElementaryTypeName","src":"3590:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3589:9:30"},"scope":2628,"src":"3511:88:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2493,"nodeType":"StructuredDocumentation","src":"3610:140:30","text":" @notice Get the current total vote power.\n @return The current total vote power (sum of all accounts' vote powers)."},"functionSelector":"f5f3d4f7","id":2498,"implemented":false,"kind":"function","modifiers":[],"name":"totalVotePower","nameLocation":"3764:14:30","nodeType":"FunctionDefinition","parameters":{"id":2494,"nodeType":"ParameterList","parameters":[],"src":"3778:2:30"},"returnParameters":{"id":2497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2498,"src":"3803:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2495,"name":"uint256","nodeType":"ElementaryTypeName","src":"3803:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3802:9:30"},"scope":2628,"src":"3755:57:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2499,"nodeType":"StructuredDocumentation","src":"3822:220:30","text":" @notice Get the total vote power at block `_blockNumber`\n @param _blockNumber The block number at which to fetch.\n @return The total vote power at the block  (sum of all accounts' vote powers)."},"functionSelector":"3e5aa26a","id":2506,"implemented":false,"kind":"function","modifiers":[],"name":"totalVotePowerAt","nameLocation":"4056:16:30","nodeType":"FunctionDefinition","parameters":{"id":2502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2501,"mutability":"mutable","name":"_blockNumber","nameLocation":"4078:12:30","nodeType":"VariableDeclaration","scope":2506,"src":"4073:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint","nodeType":"ElementaryTypeName","src":"4073:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4072:19:30"},"returnParameters":{"id":2505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2506,"src":"4114:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2503,"name":"uint256","nodeType":"ElementaryTypeName","src":"4114:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4113:9:30"},"scope":2628,"src":"4047:76:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2507,"nodeType":"StructuredDocumentation","src":"4129:167:30","text":" @notice Get the current vote power of `_owner`.\n @param _owner The address to get voting power.\n @return Current vote power of `_owner`."},"functionSelector":"142d1018","id":2514,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerOf","nameLocation":"4310:11:30","nodeType":"FunctionDefinition","parameters":{"id":2510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2509,"mutability":"mutable","name":"_owner","nameLocation":"4330:6:30","nodeType":"VariableDeclaration","scope":2514,"src":"4322:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2508,"name":"address","nodeType":"ElementaryTypeName","src":"4322:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4321:16:30"},"returnParameters":{"id":2513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2512,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2514,"src":"4360:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2511,"name":"uint256","nodeType":"ElementaryTypeName","src":"4360:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4359:9:30"},"scope":2628,"src":"4301:68:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2515,"nodeType":"StructuredDocumentation","src":"4379:250:30","text":" @notice Get the vote power of `_owner` at block `_blockNumber`\n @param _owner The address to get voting power.\n @param _blockNumber The block number at which to fetch.\n @return Vote power of `_owner` at `_blockNumber`."},"functionSelector":"92bfe6d8","id":2524,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerOfAt","nameLocation":"4643:13:30","nodeType":"FunctionDefinition","parameters":{"id":2520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2517,"mutability":"mutable","name":"_owner","nameLocation":"4665:6:30","nodeType":"VariableDeclaration","scope":2524,"src":"4657:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2516,"name":"address","nodeType":"ElementaryTypeName","src":"4657:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"_blockNumber","nameLocation":"4681:12:30","nodeType":"VariableDeclaration","scope":2524,"src":"4673:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2518,"name":"uint256","nodeType":"ElementaryTypeName","src":"4673:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4656:38:30"},"returnParameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2524,"src":"4717:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2521,"name":"uint256","nodeType":"ElementaryTypeName","src":"4717:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4716:9:30"},"scope":2628,"src":"4634:92:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2525,"nodeType":"StructuredDocumentation","src":"4733:398:30","text":" @notice Get the delegation mode for '_who'. This mode determines whether vote power is\n  allocated by percentage or by explicit value. Once the delegation mode is set, \n  it never changes, even if all delegations are removed.\n @param _who The address to get delegation mode.\n @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)"},"functionSelector":"f6837767","id":2532,"implemented":false,"kind":"function","modifiers":[],"name":"delegationModeOf","nameLocation":"5145:16:30","nodeType":"FunctionDefinition","parameters":{"id":2528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2527,"mutability":"mutable","name":"_who","nameLocation":"5170:4:30","nodeType":"VariableDeclaration","scope":2532,"src":"5162:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2526,"name":"address","nodeType":"ElementaryTypeName","src":"5162:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5161:14:30"},"returnParameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2532,"src":"5198:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2529,"name":"uint256","nodeType":"ElementaryTypeName","src":"5198:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5197:9:30"},"scope":2628,"src":"5136:71:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2533,"nodeType":"StructuredDocumentation","src":"5221:220:30","text":" @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\n @param _from Address of delegator\n @param _to Address of delegatee\n @return The delegated vote power."},"functionSelector":"be0ca747","id":2542,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerFromTo","nameLocation":"5455:15:30","nodeType":"FunctionDefinition","parameters":{"id":2538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2535,"mutability":"mutable","name":"_from","nameLocation":"5479:5:30","nodeType":"VariableDeclaration","scope":2542,"src":"5471:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2534,"name":"address","nodeType":"ElementaryTypeName","src":"5471:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2537,"mutability":"mutable","name":"_to","nameLocation":"5494:3:30","nodeType":"VariableDeclaration","scope":2542,"src":"5486:11:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2536,"name":"address","nodeType":"ElementaryTypeName","src":"5486:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5470:28:30"},"returnParameters":{"id":2541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2542,"src":"5521:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2539,"name":"uint256","nodeType":"ElementaryTypeName","src":"5521:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5520:9:30"},"scope":2628,"src":"5446:84:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2543,"nodeType":"StructuredDocumentation","src":"5540:296:30","text":" @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\n @param _from Address of delegator\n @param _to Address of delegatee\n @param _blockNumber The block number at which to fetch.\n @return The delegated vote power."},"functionSelector":"e64767aa","id":2554,"implemented":false,"kind":"function","modifiers":[],"name":"votePowerFromToAt","nameLocation":"5850:17:30","nodeType":"FunctionDefinition","parameters":{"id":2550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2545,"mutability":"mutable","name":"_from","nameLocation":"5876:5:30","nodeType":"VariableDeclaration","scope":2554,"src":"5868:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2544,"name":"address","nodeType":"ElementaryTypeName","src":"5868:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2547,"mutability":"mutable","name":"_to","nameLocation":"5891:3:30","nodeType":"VariableDeclaration","scope":2554,"src":"5883:11:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2546,"name":"address","nodeType":"ElementaryTypeName","src":"5883:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2549,"mutability":"mutable","name":"_blockNumber","nameLocation":"5901:12:30","nodeType":"VariableDeclaration","scope":2554,"src":"5896:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2548,"name":"uint","nodeType":"ElementaryTypeName","src":"5896:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5867:47:30"},"returnParameters":{"id":2553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2552,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2554,"src":"5937:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2551,"name":"uint256","nodeType":"ElementaryTypeName","src":"5937:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5936:9:30"},"scope":2628,"src":"5841:105:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2555,"nodeType":"StructuredDocumentation","src":"5956:201:30","text":" @notice Compute the current undelegated vote power of `_owner`\n @param _owner The address to get undelegated voting power.\n @return The unallocated vote power of `_owner`"},"functionSelector":"d6aa0b77","id":2562,"implemented":false,"kind":"function","modifiers":[],"name":"undelegatedVotePowerOf","nameLocation":"6171:22:30","nodeType":"FunctionDefinition","parameters":{"id":2558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2557,"mutability":"mutable","name":"_owner","nameLocation":"6202:6:30","nodeType":"VariableDeclaration","scope":2562,"src":"6194:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2556,"name":"address","nodeType":"ElementaryTypeName","src":"6194:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6193:16:30"},"returnParameters":{"id":2561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2562,"src":"6232:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2559,"name":"uint256","nodeType":"ElementaryTypeName","src":"6232:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6231:9:30"},"scope":2628,"src":"6162:79:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2563,"nodeType":"StructuredDocumentation","src":"6251:325:30","text":" @notice Get the undelegated vote power of `_owner` at given block.\n @param _owner The address to get undelegated voting power.\n @param _blockNumber The block number at which to fetch.\n @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)"},"functionSelector":"83035a82","id":2572,"implemented":false,"kind":"function","modifiers":[],"name":"undelegatedVotePowerOfAt","nameLocation":"6590:24:30","nodeType":"FunctionDefinition","parameters":{"id":2568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2565,"mutability":"mutable","name":"_owner","nameLocation":"6623:6:30","nodeType":"VariableDeclaration","scope":2572,"src":"6615:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2564,"name":"address","nodeType":"ElementaryTypeName","src":"6615:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2567,"mutability":"mutable","name":"_blockNumber","nameLocation":"6639:12:30","nodeType":"VariableDeclaration","scope":2572,"src":"6631:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2566,"name":"uint256","nodeType":"ElementaryTypeName","src":"6631:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6614:38:30"},"returnParameters":{"id":2571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2572,"src":"6675:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2569,"name":"uint256","nodeType":"ElementaryTypeName","src":"6675:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6674:9:30"},"scope":2628,"src":"6581:103:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2573,"nodeType":"StructuredDocumentation","src":"6694:522:30","text":" @notice Get the vote power delegation `delegationAddresses` \n  and `_bips` of `_who`. Returned in two separate positional arrays.\n @param _who The address to get delegations.\n @return _delegateAddresses Positional array of delegation addresses.\n @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n @return _count The number of delegates.\n @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."},"functionSelector":"7de5b8ed","id":2588,"implemented":false,"kind":"function","modifiers":[],"name":"delegatesOf","nameLocation":"7230:11:30","nodeType":"FunctionDefinition","parameters":{"id":2576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2575,"mutability":"mutable","name":"_who","nameLocation":"7250:4:30","nodeType":"VariableDeclaration","scope":2588,"src":"7242:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2574,"name":"address","nodeType":"ElementaryTypeName","src":"7242:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7241:14:30"},"returnParameters":{"id":2587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2579,"mutability":"mutable","name":"_delegateAddresses","nameLocation":"7326:18:30","nodeType":"VariableDeclaration","scope":2588,"src":"7309:35:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2577,"name":"address","nodeType":"ElementaryTypeName","src":"7309:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2578,"nodeType":"ArrayTypeName","src":"7309:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2582,"mutability":"mutable","name":"_bips","nameLocation":"7375:5:30","nodeType":"VariableDeclaration","scope":2588,"src":"7358:22:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2580,"name":"uint256","nodeType":"ElementaryTypeName","src":"7358:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2581,"nodeType":"ArrayTypeName","src":"7358:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2584,"mutability":"mutable","name":"_count","nameLocation":"7402:6:30","nodeType":"VariableDeclaration","scope":2588,"src":"7394:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2583,"name":"uint256","nodeType":"ElementaryTypeName","src":"7394:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2586,"mutability":"mutable","name":"_delegationMode","nameLocation":"7431:15:30","nodeType":"VariableDeclaration","scope":2588,"src":"7423:23:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"7423:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7295:161:30"},"scope":2628,"src":"7221:236:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2589,"nodeType":"StructuredDocumentation","src":"7471:600:30","text":" @notice Get the vote power delegation `delegationAddresses` \n  and `pcts` of `_who`. Returned in two separate positional arrays.\n @param _who The address to get delegations.\n @param _blockNumber The block for which we want to know the delegations.\n @return _delegateAddresses Positional array of delegation addresses.\n @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n @return _count The number of delegates.\n @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."},"functionSelector":"ed475a79","id":2606,"implemented":false,"kind":"function","modifiers":[],"name":"delegatesOfAt","nameLocation":"8085:13:30","nodeType":"FunctionDefinition","parameters":{"id":2594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2591,"mutability":"mutable","name":"_who","nameLocation":"8107:4:30","nodeType":"VariableDeclaration","scope":2606,"src":"8099:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2590,"name":"address","nodeType":"ElementaryTypeName","src":"8099:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2593,"mutability":"mutable","name":"_blockNumber","nameLocation":"8121:12:30","nodeType":"VariableDeclaration","scope":2606,"src":"8113:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"8113:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8098:36:30"},"returnParameters":{"id":2605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2597,"mutability":"mutable","name":"_delegateAddresses","nameLocation":"8205:18:30","nodeType":"VariableDeclaration","scope":2606,"src":"8188:35:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2595,"name":"address","nodeType":"ElementaryTypeName","src":"8188:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2596,"nodeType":"ArrayTypeName","src":"8188:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2600,"mutability":"mutable","name":"_bips","nameLocation":"8255:5:30","nodeType":"VariableDeclaration","scope":2606,"src":"8238:22:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2598,"name":"uint256","nodeType":"ElementaryTypeName","src":"8238:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2599,"nodeType":"ArrayTypeName","src":"8238:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2602,"mutability":"mutable","name":"_count","nameLocation":"8283:6:30","nodeType":"VariableDeclaration","scope":2606,"src":"8275:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2601,"name":"uint256","nodeType":"ElementaryTypeName","src":"8275:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2604,"mutability":"mutable","name":"_delegationMode","nameLocation":"8312:15:30","nodeType":"VariableDeclaration","scope":2606,"src":"8304:23:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2603,"name":"uint256","nodeType":"ElementaryTypeName","src":"8304:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8174:163:30"},"scope":2628,"src":"8076:262:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2607,"nodeType":"StructuredDocumentation","src":"8344:721:30","text":" Returns VPContract used for readonly operations (view methods).\n The only non-view method that might be called on it is `revokeDelegationAt`.\n @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\n except during upgrade from one VPContract to a new version (which should happen\n rarely or never and will be anounced before).\n @notice You shouldn't call any methods on VPContract directly, all are exposed\n via VPToken (and state changing methods are forbidden from direct calls). \n This is the reason why this method returns `IVPContractEvents` - it should only be used\n for listening to events (`Revoke` only)."},"functionSelector":"9b3baa0e","id":2613,"implemented":false,"kind":"function","modifiers":[],"name":"readVotePowerContract","nameLocation":"9079:21:30","nodeType":"FunctionDefinition","parameters":{"id":2608,"nodeType":"ParameterList","parameters":[],"src":"9100:2:30"},"returnParameters":{"id":2612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2613,"src":"9126:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVPContractEvents_$2411","typeString":"contract IVPContractEvents"},"typeName":{"id":2610,"nodeType":"UserDefinedTypeName","pathNode":{"id":2609,"name":"IVPContractEvents","nameLocations":["9126:17:30"],"nodeType":"IdentifierPath","referencedDeclaration":2411,"src":"9126:17:30"},"referencedDeclaration":2411,"src":"9126:17:30","typeDescriptions":{"typeIdentifier":"t_contract$_IVPContractEvents_$2411","typeString":"contract IVPContractEvents"}},"visibility":"internal"}],"src":"9125:19:30"},"scope":2628,"src":"9070:75:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2614,"nodeType":"StructuredDocumentation","src":"9151:961:30","text":" Returns VPContract used for state changing operations (non-view methods).\n The only non-view method that might be called on it is `revokeDelegationAt`.\n @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\n except during upgrade from one VPContract to a new version (which should happen\n rarely or never and will be anounced before). In the case of upgrade,\n `writeVotePowerContract` will be replaced first to establish delegations, and\n after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\n @notice You shouldn't call any methods on VPContract directly, all are exposed\n via VPToken (and state changing methods are forbidden from direct calls). \n This is the reason why this method returns `IVPContractEvents` - it should only be used\n for listening to events (`Delegate` and `Revoke` only)."},"functionSelector":"1fec092a","id":2620,"implemented":false,"kind":"function","modifiers":[],"name":"writeVotePowerContract","nameLocation":"10126:22:30","nodeType":"FunctionDefinition","parameters":{"id":2615,"nodeType":"ParameterList","parameters":[],"src":"10148:2:30"},"returnParameters":{"id":2619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2620,"src":"10174:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVPContractEvents_$2411","typeString":"contract IVPContractEvents"},"typeName":{"id":2617,"nodeType":"UserDefinedTypeName","pathNode":{"id":2616,"name":"IVPContractEvents","nameLocations":["10174:17:30"],"nodeType":"IdentifierPath","referencedDeclaration":2411,"src":"10174:17:30"},"referencedDeclaration":2411,"src":"10174:17:30","typeDescriptions":{"typeIdentifier":"t_contract$_IVPContractEvents_$2411","typeString":"contract IVPContractEvents"}},"visibility":"internal"}],"src":"10173:19:30"},"scope":2628,"src":"10117:76:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2621,"nodeType":"StructuredDocumentation","src":"10203:127:30","text":" When set, allows token owners to participate in governance voting\n and delegate governance vote power."},"functionSelector":"8c2b8ae1","id":2627,"implemented":false,"kind":"function","modifiers":[],"name":"governanceVotePower","nameLocation":"10344:19:30","nodeType":"FunctionDefinition","parameters":{"id":2622,"nodeType":"ParameterList","parameters":[],"src":"10363:2:30"},"returnParameters":{"id":2626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2627,"src":"10389:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IGovernanceVotePower_$1272","typeString":"contract IGovernanceVotePower"},"typeName":{"id":2624,"nodeType":"UserDefinedTypeName","pathNode":{"id":2623,"name":"IGovernanceVotePower","nameLocations":["10389:20:30"],"nodeType":"IdentifierPath","referencedDeclaration":1272,"src":"10389:20:30"},"referencedDeclaration":1272,"src":"10389:20:30","typeDescriptions":{"typeIdentifier":"t_contract$_IGovernanceVotePower_$1272","typeString":"contract IGovernanceVotePower"}},"visibility":"internal"}],"src":"10388:22:30"},"scope":2628,"src":"10335:76:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2629,"src":"239:10174:30","usedErrors":[]}],"src":"32:10382:30"},"id":30},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol","exportedSymbols":{"IWNat":[2655]},"id":2656,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2630,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:31"},{"abstract":false,"baseContracts":[],"canonicalName":"IWNat","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2655,"linearizedBaseContracts":[2655],"name":"IWNat","nameLocation":"73:5:31","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2631,"nodeType":"StructuredDocumentation","src":"85:68:31","text":" @notice Deposit native token and mint WNAT ERC20."},"functionSelector":"d0e30db0","id":2634,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"167:7:31","nodeType":"FunctionDefinition","parameters":{"id":2632,"nodeType":"ParameterList","parameters":[],"src":"174:2:31"},"returnParameters":{"id":2633,"nodeType":"ParameterList","parameters":[],"src":"193:0:31"},"scope":2655,"src":"158:36:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"200:115:31","text":" @notice Withdraw native token and burn WNAT ERC20.\n @param _amount The amount to withdraw."},"functionSelector":"2e1a7d4d","id":2640,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"329:8:31","nodeType":"FunctionDefinition","parameters":{"id":2638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"_amount","nameLocation":"346:7:31","nodeType":"VariableDeclaration","scope":2640,"src":"338:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"338:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"337:17:31"},"returnParameters":{"id":2639,"nodeType":"ParameterList","parameters":[],"src":"363:0:31"},"scope":2655,"src":"320:44:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2641,"nodeType":"StructuredDocumentation","src":"374:144:31","text":" @notice Deposit native token from msg.sender and mint WNAT ERC20.\n @param _recipient An address to receive minted WNAT."},"functionSelector":"b760faf9","id":2646,"implemented":false,"kind":"function","modifiers":[],"name":"depositTo","nameLocation":"532:9:31","nodeType":"FunctionDefinition","parameters":{"id":2644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2643,"mutability":"mutable","name":"_recipient","nameLocation":"550:10:31","nodeType":"VariableDeclaration","scope":2646,"src":"542:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2642,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"541:20:31"},"returnParameters":{"id":2645,"nodeType":"ParameterList","parameters":[],"src":"578:0:31"},"scope":2655,"src":"523:56:31","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2647,"nodeType":"StructuredDocumentation","src":"589:393:31","text":" @notice Withdraw WNAT from an owner and send NAT to msg.sender given an allowance.\n @param _owner An address spending the native tokens.\n @param _amount The amount to spend.\n Requirements:\n - `_owner` must have a balance of at least `_amount`.\n - the caller must have allowance for `_owners`'s tokens of at least\n `_amount`."},"functionSelector":"9470b0bd","id":2654,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawFrom","nameLocation":"996:12:31","nodeType":"FunctionDefinition","parameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2649,"mutability":"mutable","name":"_owner","nameLocation":"1017:6:31","nodeType":"VariableDeclaration","scope":2654,"src":"1009:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2648,"name":"address","nodeType":"ElementaryTypeName","src":"1009:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2651,"mutability":"mutable","name":"_amount","nameLocation":"1033:7:31","nodeType":"VariableDeclaration","scope":2654,"src":"1025:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2650,"name":"uint256","nodeType":"ElementaryTypeName","src":"1025:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1008:33:31"},"returnParameters":{"id":2653,"nodeType":"ParameterList","parameters":[],"src":"1050:0:31"},"scope":2655,"src":"987:64:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2656,"src":"63:990:31","usedErrors":[]}],"src":"32:1022:31"},"id":31},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol":{"ast":{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol","exportedSymbols":{"IFlareContractRegistry":[2705]},"id":2706,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2657,"literals":["solidity",">=","0.7",".6","<","0.9"],"nodeType":"PragmaDirective","src":"32:29:32"},{"id":2658,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"62:19:32"},{"abstract":false,"baseContracts":[],"canonicalName":"IFlareContractRegistry","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2705,"linearizedBaseContracts":[2705],"name":"IFlareContractRegistry","nameLocation":"93:22:32","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2659,"nodeType":"StructuredDocumentation","src":"122:145:32","text":" @notice Returns contract address for the given name - might be address(0)\n @param _name             name of the contract"},"functionSelector":"82760fca","id":2666,"implemented":false,"kind":"function","modifiers":[],"name":"getContractAddressByName","nameLocation":"281:24:32","nodeType":"FunctionDefinition","parameters":{"id":2662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2661,"mutability":"mutable","name":"_name","nameLocation":"322:5:32","nodeType":"VariableDeclaration","scope":2666,"src":"306:21:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2660,"name":"string","nodeType":"ElementaryTypeName","src":"306:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"305:23:32"},"returnParameters":{"id":2665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2666,"src":"351:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2663,"name":"address","nodeType":"ElementaryTypeName","src":"351:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"350:9:32"},"scope":2705,"src":"272:88:32","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2667,"nodeType":"StructuredDocumentation","src":"366:184:32","text":" @notice Returns contract address for the given name hash - might be address(0)\n @param _nameHash         hash of the contract name (keccak256(abi.encode(name))"},"functionSelector":"159354a2","id":2674,"implemented":false,"kind":"function","modifiers":[],"name":"getContractAddressByHash","nameLocation":"564:24:32","nodeType":"FunctionDefinition","parameters":{"id":2670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2669,"mutability":"mutable","name":"_nameHash","nameLocation":"597:9:32","nodeType":"VariableDeclaration","scope":2674,"src":"589:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"589:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"588:19:32"},"returnParameters":{"id":2673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2674,"src":"630:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2671,"name":"address","nodeType":"ElementaryTypeName","src":"630:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"629:9:32"},"scope":2705,"src":"555:84:32","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2675,"nodeType":"StructuredDocumentation","src":"645:150:32","text":" @notice Returns contract addresses for the given names - might be address(0)\n @param _names            names of the contracts"},"functionSelector":"76d2b1af","id":2684,"implemented":false,"kind":"function","modifiers":[],"name":"getContractAddressesByName","nameLocation":"809:26:32","nodeType":"FunctionDefinition","parameters":{"id":2679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2678,"mutability":"mutable","name":"_names","nameLocation":"854:6:32","nodeType":"VariableDeclaration","scope":2684,"src":"836:24:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2676,"name":"string","nodeType":"ElementaryTypeName","src":"836:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2677,"nodeType":"ArrayTypeName","src":"836:8:32","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"835:26:32"},"returnParameters":{"id":2683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2684,"src":"884:16:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2680,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2681,"nodeType":"ArrayTypeName","src":"884:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"883:18:32"},"scope":2705,"src":"800:102:32","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2685,"nodeType":"StructuredDocumentation","src":"908:191:32","text":" @notice Returns contract addresses for the given name hashes - might be address(0)\n @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))"},"functionSelector":"5e11e2d1","id":2694,"implemented":false,"kind":"function","modifiers":[],"name":"getContractAddressesByHash","nameLocation":"1113:26:32","nodeType":"FunctionDefinition","parameters":{"id":2689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2688,"mutability":"mutable","name":"_nameHashes","nameLocation":"1159:11:32","nodeType":"VariableDeclaration","scope":2694,"src":"1140:30:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1140:7:32","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2687,"nodeType":"ArrayTypeName","src":"1140:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1139:32:32"},"returnParameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2694,"src":"1194:16:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2690,"name":"address","nodeType":"ElementaryTypeName","src":"1194:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2691,"nodeType":"ArrayTypeName","src":"1194:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1193:18:32"},"scope":2705,"src":"1104:108:32","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2695,"nodeType":"StructuredDocumentation","src":"1218:81:32","text":" @notice Returns all contract names and corresponding addresses"},"functionSelector":"18d3ce96","id":2704,"implemented":false,"kind":"function","modifiers":[],"name":"getAllContracts","nameLocation":"1313:15:32","nodeType":"FunctionDefinition","parameters":{"id":2696,"nodeType":"ParameterList","parameters":[],"src":"1328:2:32"},"returnParameters":{"id":2703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2699,"mutability":"mutable","name":"_names","nameLocation":"1369:6:32","nodeType":"VariableDeclaration","scope":2704,"src":"1353:22:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2697,"name":"string","nodeType":"ElementaryTypeName","src":"1353:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2698,"nodeType":"ArrayTypeName","src":"1353:8:32","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":2702,"mutability":"mutable","name":"_addresses","nameLocation":"1394:10:32","nodeType":"VariableDeclaration","scope":2704,"src":"1377:27:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2700,"name":"address","nodeType":"ElementaryTypeName","src":"1377:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2701,"nodeType":"ArrayTypeName","src":"1377:9:32","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1352:53:32"},"scope":2705,"src":"1304:102:32","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2706,"src":"83:1325:32","usedErrors":[]}],"src":"32:1377:32"},"id":32},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3837],"ContextUpgradeable":[3879],"Initializable":[3371],"OwnableUpgradeable":[2837]},"id":2838,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2707,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:33"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2708,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2838,"sourceUnit":3880,"src":"127:41:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2709,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2838,"sourceUnit":3372,"src":"169:42:33","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2711,"name":"Initializable","nameLocations":["748:13:33"],"nodeType":"IdentifierPath","referencedDeclaration":3371,"src":"748:13:33"},"id":2712,"nodeType":"InheritanceSpecifier","src":"748:13:33"},{"baseName":{"id":2713,"name":"ContextUpgradeable","nameLocations":["763:18:33"],"nodeType":"IdentifierPath","referencedDeclaration":3879,"src":"763:18:33"},"id":2714,"nodeType":"InheritanceSpecifier","src":"763:18:33"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2710,"nodeType":"StructuredDocumentation","src":"213:494:33","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":2837,"linearizedBaseContracts":[2837,3879,3371],"name":"OwnableUpgradeable","nameLocation":"726:18:33","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2716,"mutability":"mutable","name":"_owner","nameLocation":"804:6:33","nodeType":"VariableDeclaration","scope":2837,"src":"788:22:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2715,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":2722,"name":"OwnershipTransferred","nameLocation":"823:20:33","nodeType":"EventDefinition","parameters":{"id":2721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2718,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:33","nodeType":"VariableDeclaration","scope":2722,"src":"844:29:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2717,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2720,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:33","nodeType":"VariableDeclaration","scope":2722,"src":"875:24:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2719,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:33"},"src":"817:84:33"},{"body":{"id":2731,"nodeType":"Block","src":"1055:43:33","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2728,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"1065:24:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2730,"nodeType":"ExpressionStatement","src":"1065:26:33"}]},"documentation":{"id":2723,"nodeType":"StructuredDocumentation","src":"907:91:33","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":2732,"implemented":true,"kind":"function","modifiers":[{"id":2726,"kind":"modifierInvocation","modifierName":{"id":2725,"name":"onlyInitializing","nameLocations":["1038:16:33"],"nodeType":"IdentifierPath","referencedDeclaration":3316,"src":"1038:16:33"},"nodeType":"ModifierInvocation","src":"1038:16:33"}],"name":"__Ownable_init","nameLocation":"1012:14:33","nodeType":"FunctionDefinition","parameters":{"id":2724,"nodeType":"ParameterList","parameters":[],"src":"1026:2:33"},"returnParameters":{"id":2727,"nodeType":"ParameterList","parameters":[],"src":"1055:0:33"},"scope":2837,"src":"1003:95:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2742,"nodeType":"Block","src":"1166:49:33","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2738,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1195:10:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2737,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"1176:18:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2741,"nodeType":"ExpressionStatement","src":"1176:32:33"}]},"id":2743,"implemented":true,"kind":"function","modifiers":[{"id":2735,"kind":"modifierInvocation","modifierName":{"id":2734,"name":"onlyInitializing","nameLocations":["1149:16:33"],"nodeType":"IdentifierPath","referencedDeclaration":3316,"src":"1149:16:33"},"nodeType":"ModifierInvocation","src":"1149:16:33"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:33","nodeType":"FunctionDefinition","parameters":{"id":2733,"nodeType":"ParameterList","parameters":[],"src":"1137:2:33"},"returnParameters":{"id":2736,"nodeType":"ParameterList","parameters":[],"src":"1166:0:33"},"scope":2837,"src":"1104:111:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2750,"nodeType":"Block","src":"1324:41:33","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2746,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"1334:11:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2748,"nodeType":"ExpressionStatement","src":"1334:13:33"},{"id":2749,"nodeType":"PlaceholderStatement","src":"1357:1:33"}]},"documentation":{"id":2744,"nodeType":"StructuredDocumentation","src":"1221:77:33","text":" @dev Throws if called by any account other than the owner."},"id":2751,"name":"onlyOwner","nameLocation":"1312:9:33","nodeType":"ModifierDefinition","parameters":{"id":2745,"nodeType":"ParameterList","parameters":[],"src":"1321:2:33"},"src":"1303:62:33","virtual":false,"visibility":"internal"},{"body":{"id":2759,"nodeType":"Block","src":"1496:30:33","statements":[{"expression":{"id":2757,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"1513:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2756,"id":2758,"nodeType":"Return","src":"1506:13:33"}]},"documentation":{"id":2752,"nodeType":"StructuredDocumentation","src":"1371:65:33","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":2760,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:33","nodeType":"FunctionDefinition","parameters":{"id":2753,"nodeType":"ParameterList","parameters":[],"src":"1455:2:33"},"returnParameters":{"id":2756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2760,"src":"1487:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2754,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:33"},"scope":2837,"src":"1441:85:33","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2773,"nodeType":"Block","src":"1644:85:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2765,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"1662:5:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2767,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"1673:10:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":2764,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2772,"nodeType":"ExpressionStatement","src":"1654:68:33"}]},"documentation":{"id":2761,"nodeType":"StructuredDocumentation","src":"1532:62:33","text":" @dev Throws if the sender is not the owner."},"id":2774,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:33","nodeType":"FunctionDefinition","parameters":{"id":2762,"nodeType":"ParameterList","parameters":[],"src":"1619:2:33"},"returnParameters":{"id":2763,"nodeType":"ParameterList","parameters":[],"src":"1644:0:33"},"scope":2837,"src":"1599:130:33","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2787,"nodeType":"Block","src":"2118:47:33","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2781,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:33","typeDescriptions":{}}},"id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2780,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"2128:18:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2786,"nodeType":"ExpressionStatement","src":"2128:30:33"}]},"documentation":{"id":2775,"nodeType":"StructuredDocumentation","src":"1735:324:33","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":2788,"implemented":true,"kind":"function","modifiers":[{"id":2778,"kind":"modifierInvocation","modifierName":{"id":2777,"name":"onlyOwner","nameLocations":["2108:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":2751,"src":"2108:9:33"},"nodeType":"ModifierInvocation","src":"2108:9:33"}],"name":"renounceOwnership","nameLocation":"2073:17:33","nodeType":"FunctionDefinition","parameters":{"id":2776,"nodeType":"ParameterList","parameters":[],"src":"2090:2:33"},"returnParameters":{"id":2779,"nodeType":"ParameterList","parameters":[],"src":"2118:0:33"},"scope":2837,"src":"2064:101:33","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2810,"nodeType":"Block","src":"2384:128:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2797,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"2402:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2798,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:33","typeDescriptions":{}}},"id":2801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":2796,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2805,"nodeType":"ExpressionStatement","src":"2394:73:33"},{"expression":{"arguments":[{"id":2807,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"2496:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2806,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"2477:18:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2809,"nodeType":"ExpressionStatement","src":"2477:28:33"}]},"documentation":{"id":2789,"nodeType":"StructuredDocumentation","src":"2171:138:33","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":2811,"implemented":true,"kind":"function","modifiers":[{"id":2794,"kind":"modifierInvocation","modifierName":{"id":2793,"name":"onlyOwner","nameLocations":["2374:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":2751,"src":"2374:9:33"},"nodeType":"ModifierInvocation","src":"2374:9:33"}],"name":"transferOwnership","nameLocation":"2323:17:33","nodeType":"FunctionDefinition","parameters":{"id":2792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2791,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:33","nodeType":"VariableDeclaration","scope":2811,"src":"2341:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2790,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:33"},"returnParameters":{"id":2795,"nodeType":"ParameterList","parameters":[],"src":"2384:0:33"},"scope":2837,"src":"2314:198:33","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2830,"nodeType":"Block","src":"2729:124:33","statements":[{"assignments":[2818],"declarations":[{"constant":false,"id":2818,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:33","nodeType":"VariableDeclaration","scope":2830,"src":"2739:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2817,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2820,"initialValue":{"id":2819,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"2758:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:33"},{"expression":{"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2821,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"2774:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2822,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"2783:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2824,"nodeType":"ExpressionStatement","src":"2774:17:33"},{"eventCall":{"arguments":[{"id":2826,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"2827:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2827,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"2837:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2825,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2722,"src":"2806:20:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2829,"nodeType":"EmitStatement","src":"2801:45:33"}]},"documentation":{"id":2812,"nodeType":"StructuredDocumentation","src":"2518:143:33","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":2831,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:33","nodeType":"FunctionDefinition","parameters":{"id":2815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2814,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:33","nodeType":"VariableDeclaration","scope":2831,"src":"2694:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2813,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:33"},"returnParameters":{"id":2816,"nodeType":"ParameterList","parameters":[],"src":"2729:0:33"},"scope":2837,"src":"2666:187:33","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2832,"nodeType":"StructuredDocumentation","src":"2859:254:33","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2836,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:33","nodeType":"VariableDeclaration","scope":2837,"src":"3118:25:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":2833,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2835,"length":{"hexValue":"3439","id":2834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:33","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":2838,"src":"708:2438:33","usedErrors":[]}],"src":"102:3045:33"},"id":33},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","exportedSymbols":{"IERC1967Upgradeable":[2858]},"id":2859,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2839,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:34"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2840,"nodeType":"StructuredDocumentation","src":"132:133:34","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":2858,"linearizedBaseContracts":[2858],"name":"IERC1967Upgradeable","nameLocation":"276:19:34","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2841,"nodeType":"StructuredDocumentation","src":"302:68:34","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":2845,"name":"Upgraded","nameLocation":"381:8:34","nodeType":"EventDefinition","parameters":{"id":2844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2843,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"406:14:34","nodeType":"VariableDeclaration","scope":2845,"src":"390:30:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2842,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"389:32:34"},"src":"375:47:34"},{"anonymous":false,"documentation":{"id":2846,"nodeType":"StructuredDocumentation","src":"428:67:34","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":2852,"name":"AdminChanged","nameLocation":"506:12:34","nodeType":"EventDefinition","parameters":{"id":2851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2848,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"527:13:34","nodeType":"VariableDeclaration","scope":2852,"src":"519:21:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2847,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2850,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"550:8:34","nodeType":"VariableDeclaration","scope":2852,"src":"542:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2849,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"518:41:34"},"src":"500:60:34"},{"anonymous":false,"documentation":{"id":2853,"nodeType":"StructuredDocumentation","src":"566:59:34","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":2857,"name":"BeaconUpgraded","nameLocation":"636:14:34","nodeType":"EventDefinition","parameters":{"id":2856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2855,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"667:6:34","nodeType":"VariableDeclaration","scope":2857,"src":"651:22:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2854,"name":"address","nodeType":"ElementaryTypeName","src":"651:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"650:24:34"},"src":"630:45:34"}],"scope":2859,"src":"266:411:34","usedErrors":[]}],"src":"107:571:34"},"id":34},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","exportedSymbols":{"IERC1822ProxiableUpgradeable":[2868]},"id":2869,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2860,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:35"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822ProxiableUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2861,"nodeType":"StructuredDocumentation","src":"138:203:35","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":2868,"linearizedBaseContracts":[2868],"name":"IERC1822ProxiableUpgradeable","nameLocation":"352:28:35","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2862,"nodeType":"StructuredDocumentation","src":"387:438:35","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":2867,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"839:13:35","nodeType":"FunctionDefinition","parameters":{"id":2863,"nodeType":"ParameterList","parameters":[],"src":"852:2:35"},"returnParameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2867,"src":"878:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2864,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:9:35"},"scope":2868,"src":"830:57:35","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2869,"src":"342:547:35","usedErrors":[]}],"src":"113:777:35"},"id":35},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3837],"ERC1967UpgradeUpgradeable":[3192],"IBeaconUpgradeable":[3202],"IERC1822ProxiableUpgradeable":[2868],"IERC1967Upgradeable":[2858],"Initializable":[3371],"StorageSlotUpgradeable":[3989]},"id":3193,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2870,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:36"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","file":"../beacon/IBeaconUpgradeable.sol","id":2871,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3193,"sourceUnit":3203,"src":"141:42:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol","file":"../../interfaces/IERC1967Upgradeable.sol","id":2872,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3193,"sourceUnit":2859,"src":"184:50:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":2873,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3193,"sourceUnit":2869,"src":"235:56:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":2874,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3193,"sourceUnit":3838,"src":"292:44:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","file":"../../utils/StorageSlotUpgradeable.sol","id":2875,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3193,"sourceUnit":3990,"src":"337:48:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../utils/Initializable.sol","id":2876,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3193,"sourceUnit":3372,"src":"386:36:36","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2878,"name":"Initializable","nameLocations":["656:13:36"],"nodeType":"IdentifierPath","referencedDeclaration":3371,"src":"656:13:36"},"id":2879,"nodeType":"InheritanceSpecifier","src":"656:13:36"},{"baseName":{"id":2880,"name":"IERC1967Upgradeable","nameLocations":["671:19:36"],"nodeType":"IdentifierPath","referencedDeclaration":2858,"src":"671:19:36"},"id":2881,"nodeType":"InheritanceSpecifier","src":"671:19:36"}],"canonicalName":"ERC1967UpgradeUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2877,"nodeType":"StructuredDocumentation","src":"424:184:36","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":3192,"linearizedBaseContracts":[3192,2858,3371],"name":"ERC1967UpgradeUpgradeable","nameLocation":"627:25:36","nodeType":"ContractDefinition","nodes":[{"body":{"id":2886,"nodeType":"Block","src":"756:7:36","statements":[]},"id":2887,"implemented":true,"kind":"function","modifiers":[{"id":2884,"kind":"modifierInvocation","modifierName":{"id":2883,"name":"onlyInitializing","nameLocations":["739:16:36"],"nodeType":"IdentifierPath","referencedDeclaration":3316,"src":"739:16:36"},"nodeType":"ModifierInvocation","src":"739:16:36"}],"name":"__ERC1967Upgrade_init","nameLocation":"706:21:36","nodeType":"FunctionDefinition","parameters":{"id":2882,"nodeType":"ParameterList","parameters":[],"src":"727:2:36"},"returnParameters":{"id":2885,"nodeType":"ParameterList","parameters":[],"src":"756:0:36"},"scope":3192,"src":"697:66:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2892,"nodeType":"Block","src":"838:7:36","statements":[]},"id":2893,"implemented":true,"kind":"function","modifiers":[{"id":2890,"kind":"modifierInvocation","modifierName":{"id":2889,"name":"onlyInitializing","nameLocations":["821:16:36"],"nodeType":"IdentifierPath","referencedDeclaration":3316,"src":"821:16:36"},"nodeType":"ModifierInvocation","src":"821:16:36"}],"name":"__ERC1967Upgrade_init_unchained","nameLocation":"778:31:36","nodeType":"FunctionDefinition","parameters":{"id":2888,"nodeType":"ParameterList","parameters":[],"src":"809:2:36"},"returnParameters":{"id":2891,"nodeType":"ParameterList","parameters":[],"src":"838:0:36"},"scope":3192,"src":"769:76:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"id":2896,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"954:14:36","nodeType":"VariableDeclaration","scope":3192,"src":"929:108:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2894,"name":"bytes32","nodeType":"ElementaryTypeName","src":"929:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":2895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"971:66:36","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":2897,"nodeType":"StructuredDocumentation","src":"1044:214:36","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":2900,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1289:20:36","nodeType":"VariableDeclaration","scope":3192,"src":"1263:115:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2898,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":2899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1312:66:36","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":2912,"nodeType":"Block","src":"1519:89:36","statements":[{"expression":{"expression":{"arguments":[{"id":2908,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"1574:20:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2906,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"1536:22:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3989_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1559:14:36","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"1536:37:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3885_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1536:59:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3885_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":2910,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1596:5:36","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3884,"src":"1536:65:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2905,"id":2911,"nodeType":"Return","src":"1529:72:36"}]},"documentation":{"id":2901,"nodeType":"StructuredDocumentation","src":"1385:67:36","text":" @dev Returns the current implementation address."},"id":2913,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1466:18:36","nodeType":"FunctionDefinition","parameters":{"id":2902,"nodeType":"ParameterList","parameters":[],"src":"1484:2:36"},"returnParameters":{"id":2905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2913,"src":"1510:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2903,"name":"address","nodeType":"ElementaryTypeName","src":"1510:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1509:9:36"},"scope":3192,"src":"1457:151:36","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2936,"nodeType":"Block","src":"1762:218:36","statements":[{"expression":{"arguments":[{"arguments":[{"id":2922,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"1810:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2920,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"1780:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3837_$","typeString":"type(library AddressUpgradeable)"}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:10:36","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3525,"src":"1780:29:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1780:48:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":2924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1830:47:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":2919,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1772:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:106:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2926,"nodeType":"ExpressionStatement","src":"1772:106:36"},{"expression":{"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":2930,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"1926:20:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2927,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"1888:22:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3989_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1911:14:36","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"1888:37:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3885_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:59:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3885_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":2932,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1948:5:36","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3884,"src":"1888:65:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2933,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"1956:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1888:85:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2935,"nodeType":"ExpressionStatement","src":"1888:85:36"}]},"documentation":{"id":2914,"nodeType":"StructuredDocumentation","src":"1614:80:36","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":2937,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1708:18:36","nodeType":"FunctionDefinition","parameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2916,"mutability":"mutable","name":"newImplementation","nameLocation":"1735:17:36","nodeType":"VariableDeclaration","scope":2937,"src":"1727:25:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2915,"name":"address","nodeType":"ElementaryTypeName","src":"1727:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1726:27:36"},"returnParameters":{"id":2918,"nodeType":"ParameterList","parameters":[],"src":"1762:0:36"},"scope":3192,"src":"1699:281:36","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2951,"nodeType":"Block","src":"2142:96:36","statements":[{"expression":{"arguments":[{"id":2944,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"2171:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2943,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"2152:18:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2152:37:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2946,"nodeType":"ExpressionStatement","src":"2152:37:36"},{"eventCall":{"arguments":[{"id":2948,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"2213:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2947,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"2204:8:36","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:27:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2950,"nodeType":"EmitStatement","src":"2199:32:36"}]},"documentation":{"id":2938,"nodeType":"StructuredDocumentation","src":"1986:95:36","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":2952,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"2095:10:36","nodeType":"FunctionDefinition","parameters":{"id":2941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2940,"mutability":"mutable","name":"newImplementation","nameLocation":"2114:17:36","nodeType":"VariableDeclaration","scope":2952,"src":"2106:25:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2939,"name":"address","nodeType":"ElementaryTypeName","src":"2106:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2105:27:36"},"returnParameters":{"id":2942,"nodeType":"ParameterList","parameters":[],"src":"2142:0:36"},"scope":3192,"src":"2086:152:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2981,"nodeType":"Block","src":"2470:178:36","statements":[{"expression":{"arguments":[{"id":2963,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"2491:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2962,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"2480:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2480:29:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2965,"nodeType":"ExpressionStatement","src":"2480:29:36"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2966,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"2523:4:36","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2528:6:36","memberName":"length","nodeType":"MemberAccess","src":"2523:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2537:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2523:15:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":2970,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"2542:9:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2523:28:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2980,"nodeType":"IfStatement","src":"2519:123:36","trueBody":{"id":2979,"nodeType":"Block","src":"2553:89:36","statements":[{"expression":{"arguments":[{"id":2975,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"2607:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2976,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"2626:4:36","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2972,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"2567:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3837_$","typeString":"type(library AddressUpgradeable)"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2586:20:36","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"2567:39:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:64:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2978,"nodeType":"ExpressionStatement","src":"2567:64:36"}]}}]},"documentation":{"id":2953,"nodeType":"StructuredDocumentation","src":"2244:123:36","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":2982,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2381:17:36","nodeType":"FunctionDefinition","parameters":{"id":2960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2955,"mutability":"mutable","name":"newImplementation","nameLocation":"2407:17:36","nodeType":"VariableDeclaration","scope":2982,"src":"2399:25:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2954,"name":"address","nodeType":"ElementaryTypeName","src":"2399:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2957,"mutability":"mutable","name":"data","nameLocation":"2439:4:36","nodeType":"VariableDeclaration","scope":2982,"src":"2426:17:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2956,"name":"bytes","nodeType":"ElementaryTypeName","src":"2426:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2959,"mutability":"mutable","name":"forceCall","nameLocation":"2450:9:36","nodeType":"VariableDeclaration","scope":2982,"src":"2445:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2958,"name":"bool","nodeType":"ElementaryTypeName","src":"2445:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2398:62:36"},"returnParameters":{"id":2961,"nodeType":"ParameterList","parameters":[],"src":"2470:0:36"},"scope":3192,"src":"2372:276:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3034,"nodeType":"Block","src":"2922:842:36","statements":[{"condition":{"expression":{"arguments":[{"id":2994,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"3274:14:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2992,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"3236:22:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3989_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3259:14:36","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":3922,"src":"3236:37:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$3888_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"}},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3236:53:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3888_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot storage pointer"}},"id":2996,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3290:5:36","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3887,"src":"3236:59:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3032,"nodeType":"Block","src":"3365:393:36","statements":[{"clauses":[{"block":{"id":3017,"nodeType":"Block","src":"3470:115:36","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3011,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"3496:4:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3012,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"3504:20:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3496:28:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3526:43:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":3010,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3488:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3488:82:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3016,"nodeType":"ExpressionStatement","src":"3488:82:36"}]},"errorName":"","id":3018,"nodeType":"TryCatchClause","parameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3008,"mutability":"mutable","name":"slot","nameLocation":"3464:4:36","nodeType":"VariableDeclaration","scope":3018,"src":"3456:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3007,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3456:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3455:14:36"},"src":"3447:138:36"},{"block":{"id":3023,"nodeType":"Block","src":"3592:89:36","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3617:48:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":3019,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3610:6:36","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3610:56:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3022,"nodeType":"ExpressionStatement","src":"3610:56:36"}]},"errorName":"","id":3024,"nodeType":"TryCatchClause","src":"3586:95:36"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3003,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"3412:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3002,"name":"IERC1822ProxiableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"3383:28:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822ProxiableUpgradeable_$2868_$","typeString":"type(contract IERC1822ProxiableUpgradeable)"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:47:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822ProxiableUpgradeable_$2868","typeString":"contract IERC1822ProxiableUpgradeable"}},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3431:13:36","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":2867,"src":"3383:61:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3383:63:36","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3025,"nodeType":"TryStatement","src":"3379:302:36"},{"expression":{"arguments":[{"id":3027,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"3712:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3028,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"3731:4:36","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3029,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"3737:9:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3026,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"3694:17:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3694:53:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3031,"nodeType":"ExpressionStatement","src":"3694:53:36"}]},"id":3033,"nodeType":"IfStatement","src":"3232:526:36","trueBody":{"id":3001,"nodeType":"Block","src":"3297:62:36","statements":[{"expression":{"arguments":[{"id":2998,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"3330:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2997,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"3311:18:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3311:37:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3000,"nodeType":"ExpressionStatement","src":"3311:37:36"}]}}]},"documentation":{"id":2983,"nodeType":"StructuredDocumentation","src":"2654:161:36","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":3035,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2829:21:36","nodeType":"FunctionDefinition","parameters":{"id":2990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2985,"mutability":"mutable","name":"newImplementation","nameLocation":"2859:17:36","nodeType":"VariableDeclaration","scope":3035,"src":"2851:25:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2984,"name":"address","nodeType":"ElementaryTypeName","src":"2851:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2987,"mutability":"mutable","name":"data","nameLocation":"2891:4:36","nodeType":"VariableDeclaration","scope":3035,"src":"2878:17:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2986,"name":"bytes","nodeType":"ElementaryTypeName","src":"2878:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2989,"mutability":"mutable","name":"forceCall","nameLocation":"2902:9:36","nodeType":"VariableDeclaration","scope":3035,"src":"2897:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2988,"name":"bool","nodeType":"ElementaryTypeName","src":"2897:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2850:62:36"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[],"src":"2922:0:36"},"scope":3192,"src":"2820:944:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":3036,"nodeType":"StructuredDocumentation","src":"3770:189:36","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":3039,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"3990:11:36","nodeType":"VariableDeclaration","scope":3192,"src":"3964:106:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3037,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3964:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4004:66:36","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":3051,"nodeType":"Block","src":"4185:80:36","statements":[{"expression":{"expression":{"arguments":[{"id":3047,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"4240:11:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3045,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"4202:22:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3989_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4225:14:36","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"4202:37:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3885_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4202:50:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3885_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":3049,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4253:5:36","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3884,"src":"4202:56:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3044,"id":3050,"nodeType":"Return","src":"4195:63:36"}]},"documentation":{"id":3040,"nodeType":"StructuredDocumentation","src":"4077:50:36","text":" @dev Returns the current admin."},"id":3052,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4141:9:36","nodeType":"FunctionDefinition","parameters":{"id":3041,"nodeType":"ParameterList","parameters":[],"src":"4150:2:36"},"returnParameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3052,"src":"4176:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3042,"name":"address","nodeType":"ElementaryTypeName","src":"4176:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4175:9:36"},"scope":3192,"src":"4132:133:36","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3077,"nodeType":"Block","src":"4392:167:36","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3059,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"4410:8:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4430:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4422:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3060,"name":"address","nodeType":"ElementaryTypeName","src":"4422:7:36","typeDescriptions":{}}},"id":3063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4422:10:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4410:22:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4434:40:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":3058,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4402:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4402:73:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3067,"nodeType":"ExpressionStatement","src":"4402:73:36"},{"expression":{"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":3071,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"4523:11:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3068,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"4485:22:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3989_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4508:14:36","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"4485:37:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3885_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4485:50:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3885_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":3073,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4536:5:36","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3884,"src":"4485:56:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3074,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"4544:8:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4485:67:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3076,"nodeType":"ExpressionStatement","src":"4485:67:36"}]},"documentation":{"id":3053,"nodeType":"StructuredDocumentation","src":"4271:71:36","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":3078,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4356:9:36","nodeType":"FunctionDefinition","parameters":{"id":3056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3055,"mutability":"mutable","name":"newAdmin","nameLocation":"4374:8:36","nodeType":"VariableDeclaration","scope":3078,"src":"4366:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3054,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4365:18:36"},"returnParameters":{"id":3057,"nodeType":"ParameterList","parameters":[],"src":"4392:0:36"},"scope":3192,"src":"4347:212:36","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3094,"nodeType":"Block","src":"4719:86:36","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3085,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"4747:9:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:11:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3087,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"4760:8:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3084,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"4734:12:36","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4734:35:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3089,"nodeType":"EmitStatement","src":"4729:40:36"},{"expression":{"arguments":[{"id":3091,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"4789:8:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3090,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"4779:9:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4779:19:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3093,"nodeType":"ExpressionStatement","src":"4779:19:36"}]},"documentation":{"id":3079,"nodeType":"StructuredDocumentation","src":"4565:100:36","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":3095,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4679:12:36","nodeType":"FunctionDefinition","parameters":{"id":3082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3081,"mutability":"mutable","name":"newAdmin","nameLocation":"4700:8:36","nodeType":"VariableDeclaration","scope":3095,"src":"4692:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3080,"name":"address","nodeType":"ElementaryTypeName","src":"4692:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4691:18:36"},"returnParameters":{"id":3083,"nodeType":"ParameterList","parameters":[],"src":"4719:0:36"},"scope":3192,"src":"4670:135:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":3096,"nodeType":"StructuredDocumentation","src":"4811:232:36","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":3099,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5074:12:36","nodeType":"VariableDeclaration","scope":3192,"src":"5048:107:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3097,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5048:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":3098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5089:66:36","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":3111,"nodeType":"Block","src":"5272:81:36","statements":[{"expression":{"expression":{"arguments":[{"id":3107,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"5327:12:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3105,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"5289:22:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3989_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5312:14:36","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"5289:37:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3885_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5289:51:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3885_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":3109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5341:5:36","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3884,"src":"5289:57:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3104,"id":3110,"nodeType":"Return","src":"5282:64:36"}]},"documentation":{"id":3100,"nodeType":"StructuredDocumentation","src":"5162:51:36","text":" @dev Returns the current beacon."},"id":3112,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5227:10:36","nodeType":"FunctionDefinition","parameters":{"id":3101,"nodeType":"ParameterList","parameters":[],"src":"5237:2:36"},"returnParameters":{"id":3104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3103,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3112,"src":"5263:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3102,"name":"address","nodeType":"ElementaryTypeName","src":"5263:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5262:9:36"},"scope":3192,"src":"5218:135:36","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3147,"nodeType":"Block","src":"5482:368:36","statements":[{"expression":{"arguments":[{"arguments":[{"id":3121,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"5530:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3119,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"5500:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3837_$","typeString":"type(library AddressUpgradeable)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5519:10:36","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3525,"src":"5500:29:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5500:40:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":3123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5542:39:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":3118,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5492:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5492:90:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3125,"nodeType":"ExpressionStatement","src":"5492:90:36"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3130,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"5662:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3129,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"5643:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$3202_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:29:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$3202","typeString":"contract IBeaconUpgradeable"}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5673:14:36","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":3201,"src":"5643:44:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:46:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3127,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"5613:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3837_$","typeString":"type(library AddressUpgradeable)"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5632:10:36","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3525,"src":"5613:29:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:77:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":3135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5704:50:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":3126,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5592:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5592:172:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3137,"nodeType":"ExpressionStatement","src":"5592:172:36"},{"expression":{"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":3141,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"5812:12:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3138,"name":"StorageSlotUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"5774:22:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlotUpgradeable_$3989_$","typeString":"type(library StorageSlotUpgradeable)"}},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5797:14:36","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"5774:37:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3885_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:51:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3885_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot storage pointer"}},"id":3143,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5826:5:36","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3884,"src":"5774:57:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3144,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"5834:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5774:69:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3146,"nodeType":"ExpressionStatement","src":"5774:69:36"}]},"documentation":{"id":3113,"nodeType":"StructuredDocumentation","src":"5359:71:36","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":3148,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5444:10:36","nodeType":"FunctionDefinition","parameters":{"id":3116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3115,"mutability":"mutable","name":"newBeacon","nameLocation":"5463:9:36","nodeType":"VariableDeclaration","scope":3148,"src":"5455:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3114,"name":"address","nodeType":"ElementaryTypeName","src":"5455:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5454:19:36"},"returnParameters":{"id":3117,"nodeType":"ParameterList","parameters":[],"src":"5482:0:36"},"scope":3192,"src":"5435:415:36","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3185,"nodeType":"Block","src":"6249:239:36","statements":[{"expression":{"arguments":[{"id":3159,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"6270:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3158,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"6259:10:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6259:21:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3161,"nodeType":"ExpressionStatement","src":"6259:21:36"},{"eventCall":{"arguments":[{"id":3163,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"6310:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3162,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2857,"src":"6295:14:36","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6295:25:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3165,"nodeType":"EmitStatement","src":"6290:30:36"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3166,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"6334:4:36","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6339:6:36","memberName":"length","nodeType":"MemberAccess","src":"6334:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6348:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6334:15:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":3170,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"6353:9:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6334:28:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3184,"nodeType":"IfStatement","src":"6330:152:36","trueBody":{"id":3183,"nodeType":"Block","src":"6364:118:36","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3176,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"6437:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3175,"name":"IBeaconUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"6418:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeaconUpgradeable_$3202_$","typeString":"type(contract IBeaconUpgradeable)"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:29:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeaconUpgradeable_$3202","typeString":"contract IBeaconUpgradeable"}},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6448:14:36","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":3201,"src":"6418:44:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6418:46:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3180,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"6466:4:36","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3172,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"6378:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3837_$","typeString":"type(library AddressUpgradeable)"}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:20:36","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3724,"src":"6378:39:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6378:93:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3182,"nodeType":"ExpressionStatement","src":"6378:93:36"}]}}]},"documentation":{"id":3149,"nodeType":"StructuredDocumentation","src":"5856:292:36","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":3186,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6162:23:36","nodeType":"FunctionDefinition","parameters":{"id":3156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3151,"mutability":"mutable","name":"newBeacon","nameLocation":"6194:9:36","nodeType":"VariableDeclaration","scope":3186,"src":"6186:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3150,"name":"address","nodeType":"ElementaryTypeName","src":"6186:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3153,"mutability":"mutable","name":"data","nameLocation":"6218:4:36","nodeType":"VariableDeclaration","scope":3186,"src":"6205:17:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3152,"name":"bytes","nodeType":"ElementaryTypeName","src":"6205:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3155,"mutability":"mutable","name":"forceCall","nameLocation":"6229:9:36","nodeType":"VariableDeclaration","scope":3186,"src":"6224:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3154,"name":"bool","nodeType":"ElementaryTypeName","src":"6224:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6185:54:36"},"returnParameters":{"id":3157,"nodeType":"ParameterList","parameters":[],"src":"6249:0:36"},"scope":3192,"src":"6153:335:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":3187,"nodeType":"StructuredDocumentation","src":"6494:254:36","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3191,"mutability":"mutable","name":"__gap","nameLocation":"6773:5:36","nodeType":"VariableDeclaration","scope":3192,"src":"6753:25:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3188,"name":"uint256","nodeType":"ElementaryTypeName","src":"6753:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3190,"length":{"hexValue":"3530","id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6761:2:36","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"6753:11:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3193,"src":"609:6172:36","usedErrors":[]}],"src":"116:6666:36"},"id":36},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol","exportedSymbols":{"IBeaconUpgradeable":[3202]},"id":3203,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3194,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:37"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeaconUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":3195,"nodeType":"StructuredDocumentation","src":"118:79:37","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":3202,"linearizedBaseContracts":[3202],"name":"IBeaconUpgradeable","nameLocation":"208:18:37","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3196,"nodeType":"StructuredDocumentation","src":"233:162:37","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":3201,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"409:14:37","nodeType":"FunctionDefinition","parameters":{"id":3197,"nodeType":"ParameterList","parameters":[],"src":"423:2:37"},"returnParameters":{"id":3200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3201,"src":"449:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3198,"name":"address","nodeType":"ElementaryTypeName","src":"449:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"448:9:37"},"scope":3202,"src":"400:58:37","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3203,"src":"198:262:37","usedErrors":[]}],"src":"93:368:37"},"id":37},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[3837],"Initializable":[3371]},"id":3372,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3204,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:38"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":3205,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3372,"sourceUnit":3838,"src":"138:44:38","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3206,"nodeType":"StructuredDocumentation","src":"184:2209:38","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":3371,"linearizedBaseContracts":[3371],"name":"Initializable","nameLocation":"2412:13:38","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":3207,"nodeType":"StructuredDocumentation","src":"2432:109:38","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":3209,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:38","nodeType":"VariableDeclaration","scope":3371,"src":"2546:26:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3208,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":3210,"nodeType":"StructuredDocumentation","src":"2579:91:38","text":" @dev Indicates that the contract is in the process of being initialized."},"id":3212,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:38","nodeType":"VariableDeclaration","scope":3371,"src":"2675:26:38","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3211,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":3213,"nodeType":"StructuredDocumentation","src":"2708:90:38","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":3217,"name":"Initialized","nameLocation":"2809:11:38","nodeType":"EventDefinition","parameters":{"id":3216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3215,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:38","nodeType":"VariableDeclaration","scope":3217,"src":"2821:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3214,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:38"},"src":"2803:33:38"},{"body":{"id":3272,"nodeType":"Block","src":"3269:483:38","statements":[{"assignments":[3221],"declarations":[{"constant":false,"id":3221,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:38","nodeType":"VariableDeclaration","scope":3272,"src":"3279:19:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3220,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3224,"initialValue":{"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:38","subExpression":{"id":3222,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"3302:13:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:38"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3226,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"3347:14:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3227,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"3365:12:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:38","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3231,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:38","subExpression":{"arguments":[{"arguments":[{"id":3236,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:38","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$3371","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$3371","typeString":"contract Initializable"}],"id":3235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:38","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3234,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:38","typeDescriptions":{}}},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3232,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"3388:18:38","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$3837_$","typeString":"type(library AddressUpgradeable)"}},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:38","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3525,"src":"3388:29:38","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3240,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"3436:12:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:38","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3244,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":3225,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3248,"nodeType":"ExpressionStatement","src":"3325:201:38"},{"expression":{"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3249,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"3536:12:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":3250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:38","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3252,"nodeType":"ExpressionStatement","src":"3536:16:38"},{"condition":{"id":3253,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"3566:14:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3259,"nodeType":"IfStatement","src":"3562:65:38","trueBody":{"id":3258,"nodeType":"Block","src":"3582:45:38","statements":[{"expression":{"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3254,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"3596:13:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3257,"nodeType":"ExpressionStatement","src":"3596:20:38"}]}},{"id":3260,"nodeType":"PlaceholderStatement","src":"3636:1:38"},{"condition":{"id":3261,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"3651:14:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3271,"nodeType":"IfStatement","src":"3647:99:38","trueBody":{"id":3270,"nodeType":"Block","src":"3667:79:38","statements":[{"expression":{"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3262,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"3681:13:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3265,"nodeType":"ExpressionStatement","src":"3681:21:38"},{"eventCall":{"arguments":[{"hexValue":"31","id":3267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:38","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3266,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"3721:11:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3269,"nodeType":"EmitStatement","src":"3716:19:38"}]}}]},"documentation":{"id":3218,"nodeType":"StructuredDocumentation","src":"2842:399:38","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":3273,"name":"initializer","nameLocation":"3255:11:38","nodeType":"ModifierDefinition","parameters":{"id":3219,"nodeType":"ParameterList","parameters":[],"src":"3266:2:38"},"src":"3246:506:38","virtual":false,"visibility":"internal"},{"body":{"id":3305,"nodeType":"Block","src":"4863:255:38","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:38","subExpression":{"id":3279,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"4882:13:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3281,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"4899:12:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3282,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"4914:7:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":3285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":3278,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3287,"nodeType":"ExpressionStatement","src":"4873:99:38"},{"expression":{"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3288,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"4982:12:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3289,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"4997:7:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3291,"nodeType":"ExpressionStatement","src":"4982:22:38"},{"expression":{"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3292,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"5014:13:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3295,"nodeType":"ExpressionStatement","src":"5014:20:38"},{"id":3296,"nodeType":"PlaceholderStatement","src":"5044:1:38"},{"expression":{"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3297,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"5055:13:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3300,"nodeType":"ExpressionStatement","src":"5055:21:38"},{"eventCall":{"arguments":[{"id":3302,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"5103:7:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3301,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"5091:11:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3304,"nodeType":"EmitStatement","src":"5086:25:38"}]},"documentation":{"id":3274,"nodeType":"StructuredDocumentation","src":"3758:1062:38","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":3306,"name":"reinitializer","nameLocation":"4834:13:38","nodeType":"ModifierDefinition","parameters":{"id":3277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3276,"mutability":"mutable","name":"version","nameLocation":"4854:7:38","nodeType":"VariableDeclaration","scope":3306,"src":"4848:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3275,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:38"},"src":"4825:293:38","virtual":false,"visibility":"internal"},{"body":{"id":3315,"nodeType":"Block","src":"5356:97:38","statements":[{"expression":{"arguments":[{"id":3310,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"5374:13:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":3311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":3309,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3313,"nodeType":"ExpressionStatement","src":"5366:69:38"},{"id":3314,"nodeType":"PlaceholderStatement","src":"5445:1:38"}]},"documentation":{"id":3307,"nodeType":"StructuredDocumentation","src":"5124:199:38","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":3316,"name":"onlyInitializing","nameLocation":"5337:16:38","nodeType":"ModifierDefinition","parameters":{"id":3308,"nodeType":"ParameterList","parameters":[],"src":"5353:2:38"},"src":"5328:125:38","virtual":false,"visibility":"internal"},{"body":{"id":3351,"nodeType":"Block","src":"5988:231:38","statements":[{"expression":{"arguments":[{"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:38","subExpression":{"id":3321,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"6007:13:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":3323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:38","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":3320,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:38","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3325,"nodeType":"ExpressionStatement","src":"5998:66:38"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3326,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"6078:12:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":3329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3328,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:38","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":3327,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":3331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:38","memberName":"max","nodeType":"MemberAccess","src":"6094:15:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3350,"nodeType":"IfStatement","src":"6074:139:38","trueBody":{"id":3349,"nodeType":"Block","src":"6111:102:38","statements":[{"expression":{"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3333,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"6125:12:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":3336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3335,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:38","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":3334,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":3338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:38","memberName":"max","nodeType":"MemberAccess","src":"6140:15:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3340,"nodeType":"ExpressionStatement","src":"6125:30:38"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":3344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:38","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3343,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:38","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":3342,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:38","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":3346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:38","memberName":"max","nodeType":"MemberAccess","src":"6186:15:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3341,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"6174:11:38","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3348,"nodeType":"EmitStatement","src":"6169:33:38"}]}}]},"documentation":{"id":3317,"nodeType":"StructuredDocumentation","src":"5459:475:38","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":3352,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:38","nodeType":"FunctionDefinition","parameters":{"id":3318,"nodeType":"ParameterList","parameters":[],"src":"5968:2:38"},"returnParameters":{"id":3319,"nodeType":"ParameterList","parameters":[],"src":"5988:0:38"},"scope":3371,"src":"5939:280:38","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3360,"nodeType":"Block","src":"6393:36:38","statements":[{"expression":{"id":3358,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"6410:12:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":3357,"id":3359,"nodeType":"Return","src":"6403:19:38"}]},"documentation":{"id":3353,"nodeType":"StructuredDocumentation","src":"6225:99:38","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":3361,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:38","nodeType":"FunctionDefinition","parameters":{"id":3354,"nodeType":"ParameterList","parameters":[],"src":"6360:2:38"},"returnParameters":{"id":3357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3356,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3361,"src":"6386:5:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3355,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:38","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:38"},"scope":3371,"src":"6329:100:38","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3369,"nodeType":"Block","src":"6601:37:38","statements":[{"expression":{"id":3367,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"6618:13:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3366,"id":3368,"nodeType":"Return","src":"6611:20:38"}]},"documentation":{"id":3362,"nodeType":"StructuredDocumentation","src":"6435:105:38","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":3370,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:38","nodeType":"FunctionDefinition","parameters":{"id":3363,"nodeType":"ParameterList","parameters":[],"src":"6569:2:38"},"returnParameters":{"id":3366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3370,"src":"6595:4:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3364,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:38"},"scope":3371,"src":"6545:93:38","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3372,"src":"2394:4246:38","usedErrors":[]}],"src":"113:6528:38"},"id":38},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3837],"ERC1967UpgradeUpgradeable":[3192],"IBeaconUpgradeable":[3202],"IERC1822ProxiableUpgradeable":[2868],"IERC1967Upgradeable":[2858],"Initializable":[3371],"StorageSlotUpgradeable":[3989],"UUPSUpgradeable":[3507]},"id":3508,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3373,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:39"},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol","file":"../../interfaces/draft-IERC1822Upgradeable.sol","id":3374,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3508,"sourceUnit":2869,"src":"140:56:39","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol","file":"../ERC1967/ERC1967UpgradeUpgradeable.sol","id":3375,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3508,"sourceUnit":3193,"src":"197:50:39","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":3376,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3508,"sourceUnit":3372,"src":"248:29:39","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3378,"name":"Initializable","nameLocations":["965:13:39"],"nodeType":"IdentifierPath","referencedDeclaration":3371,"src":"965:13:39"},"id":3379,"nodeType":"InheritanceSpecifier","src":"965:13:39"},{"baseName":{"id":3380,"name":"IERC1822ProxiableUpgradeable","nameLocations":["980:28:39"],"nodeType":"IdentifierPath","referencedDeclaration":2868,"src":"980:28:39"},"id":3381,"nodeType":"InheritanceSpecifier","src":"980:28:39"},{"baseName":{"id":3382,"name":"ERC1967UpgradeUpgradeable","nameLocations":["1010:25:39"],"nodeType":"IdentifierPath","referencedDeclaration":3192,"src":"1010:25:39"},"id":3383,"nodeType":"InheritanceSpecifier","src":"1010:25:39"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3377,"nodeType":"StructuredDocumentation","src":"279:648:39","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":3507,"linearizedBaseContracts":[3507,3192,2858,2868,3371],"name":"UUPSUpgradeable","nameLocation":"946:15:39","nodeType":"ContractDefinition","nodes":[{"body":{"id":3388,"nodeType":"Block","src":"1102:7:39","statements":[]},"id":3389,"implemented":true,"kind":"function","modifiers":[{"id":3386,"kind":"modifierInvocation","modifierName":{"id":3385,"name":"onlyInitializing","nameLocations":["1085:16:39"],"nodeType":"IdentifierPath","referencedDeclaration":3316,"src":"1085:16:39"},"nodeType":"ModifierInvocation","src":"1085:16:39"}],"name":"__UUPSUpgradeable_init","nameLocation":"1051:22:39","nodeType":"FunctionDefinition","parameters":{"id":3384,"nodeType":"ParameterList","parameters":[],"src":"1073:2:39"},"returnParameters":{"id":3387,"nodeType":"ParameterList","parameters":[],"src":"1102:0:39"},"scope":3507,"src":"1042:67:39","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3394,"nodeType":"Block","src":"1185:7:39","statements":[]},"id":3395,"implemented":true,"kind":"function","modifiers":[{"id":3392,"kind":"modifierInvocation","modifierName":{"id":3391,"name":"onlyInitializing","nameLocations":["1168:16:39"],"nodeType":"IdentifierPath","referencedDeclaration":3316,"src":"1168:16:39"},"nodeType":"ModifierInvocation","src":"1168:16:39"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"1124:32:39","nodeType":"FunctionDefinition","parameters":{"id":3390,"nodeType":"ParameterList","parameters":[],"src":"1156:2:39"},"returnParameters":{"id":3393,"nodeType":"ParameterList","parameters":[],"src":"1185:0:39"},"scope":3507,"src":"1115:77:39","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":3396,"nodeType":"StructuredDocumentation","src":"1197:87:39","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"id":3402,"mutability":"immutable","name":"__self","nameLocation":"1315:6:39","nodeType":"VariableDeclaration","scope":3507,"src":"1289:48:39","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3397,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":3400,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1332:4:39","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$3507","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$3507","typeString":"contract UUPSUpgradeable"}],"id":3399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1324:7:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3398,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:39","typeDescriptions":{}}},"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1324:13:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":3424,"nodeType":"Block","src":"1863:205:39","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3408,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1889:4:39","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$3507","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$3507","typeString":"contract UUPSUpgradeable"}],"id":3407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1881:7:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3406,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:39","typeDescriptions":{}}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:13:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3410,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"1898:6:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1881:23:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":3412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:46:39","typeDescriptions":{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""},"value":"Function must be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb","typeString":"literal_string \"Function must be called through delegatecall\""}],"id":3405,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1873:7:39","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1873:80:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3414,"nodeType":"ExpressionStatement","src":"1873:80:39"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3416,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"1971:18:39","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:20:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3418,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"1995:6:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1971:30:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879","id":3420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:46:39","typeDescriptions":{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""},"value":"Function must be called through active proxy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434","typeString":"literal_string \"Function must be called through active proxy\""}],"id":3415,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1963:7:39","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:87:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3422,"nodeType":"ExpressionStatement","src":"1963:87:39"},{"id":3423,"nodeType":"PlaceholderStatement","src":"2060:1:39"}]},"documentation":{"id":3403,"nodeType":"StructuredDocumentation","src":"1344:493:39","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":3425,"name":"onlyProxy","nameLocation":"1851:9:39","nodeType":"ModifierDefinition","parameters":{"id":3404,"nodeType":"ParameterList","parameters":[],"src":"1860:2:39"},"src":"1842:226:39","virtual":false,"visibility":"internal"},{"body":{"id":3439,"nodeType":"Block","src":"2298:120:39","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3431,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2324:4:39","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$3507","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$3507","typeString":"contract UUPSUpgradeable"}],"id":3430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2316:7:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3429,"name":"address","nodeType":"ElementaryTypeName","src":"2316:7:39","typeDescriptions":{}}},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:13:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3433,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"2333:6:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2316:23:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2341:58:39","typeDescriptions":{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""},"value":"UUPSUpgradeable: must not be called through delegatecall"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4","typeString":"literal_string \"UUPSUpgradeable: must not be called through delegatecall\""}],"id":3428,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2308:7:39","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:92:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3437,"nodeType":"ExpressionStatement","src":"2308:92:39"},{"id":3438,"nodeType":"PlaceholderStatement","src":"2410:1:39"}]},"documentation":{"id":3426,"nodeType":"StructuredDocumentation","src":"2074:195:39","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":3440,"name":"notDelegated","nameLocation":"2283:12:39","nodeType":"ModifierDefinition","parameters":{"id":3427,"nodeType":"ParameterList","parameters":[],"src":"2295:2:39"},"src":"2274:144:39","virtual":false,"visibility":"internal"},{"baseFunctions":[2867],"body":{"id":3451,"nodeType":"Block","src":"3093:44:39","statements":[{"expression":{"id":3449,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"3110:20:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3448,"id":3450,"nodeType":"Return","src":"3103:27:39"}]},"documentation":{"id":3441,"nodeType":"StructuredDocumentation","src":"2424:577:39","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":3452,"implemented":true,"kind":"function","modifiers":[{"id":3445,"kind":"modifierInvocation","modifierName":{"id":3444,"name":"notDelegated","nameLocations":["3062:12:39"],"nodeType":"IdentifierPath","referencedDeclaration":3440,"src":"3062:12:39"},"nodeType":"ModifierInvocation","src":"3062:12:39"}],"name":"proxiableUUID","nameLocation":"3015:13:39","nodeType":"FunctionDefinition","overrides":{"id":3443,"nodeType":"OverrideSpecifier","overrides":[],"src":"3053:8:39"},"parameters":{"id":3442,"nodeType":"ParameterList","parameters":[],"src":"3028:2:39"},"returnParameters":{"id":3448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3452,"src":"3084:7:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3446,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3084:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3083:9:39"},"scope":3507,"src":"3006:131:39","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":3473,"nodeType":"Block","src":"3458:124:39","statements":[{"expression":{"arguments":[{"id":3461,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"3486:17:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3460,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"3468:17:39","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3468:36:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3463,"nodeType":"ExpressionStatement","src":"3468:36:39"},{"expression":{"arguments":[{"id":3465,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"3536:17:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3565:1:39","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3555:9:39","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3466,"name":"bytes","nodeType":"ElementaryTypeName","src":"3559:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3555:12:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":3470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3569:5:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3464,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"3514:21:39","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3514:61:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3472,"nodeType":"ExpressionStatement","src":"3514:61:39"}]},"documentation":{"id":3453,"nodeType":"StructuredDocumentation","src":"3143:239:39","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"3659cfe6","id":3474,"implemented":true,"kind":"function","modifiers":[{"id":3458,"kind":"modifierInvocation","modifierName":{"id":3457,"name":"onlyProxy","nameLocations":["3448:9:39"],"nodeType":"IdentifierPath","referencedDeclaration":3425,"src":"3448:9:39"},"nodeType":"ModifierInvocation","src":"3448:9:39"}],"name":"upgradeTo","nameLocation":"3396:9:39","nodeType":"FunctionDefinition","parameters":{"id":3456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"newImplementation","nameLocation":"3414:17:39","nodeType":"VariableDeclaration","scope":3474,"src":"3406:25:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3454,"name":"address","nodeType":"ElementaryTypeName","src":"3406:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3405:27:39"},"returnParameters":{"id":3459,"nodeType":"ParameterList","parameters":[],"src":"3458:0:39"},"scope":3507,"src":"3387:195:39","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3494,"nodeType":"Block","src":"4006:115:39","statements":[{"expression":{"arguments":[{"id":3485,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"4034:17:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3484,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"4016:17:39","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4016:36:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3487,"nodeType":"ExpressionStatement","src":"4016:36:39"},{"expression":{"arguments":[{"id":3489,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"4084:17:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3490,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"4103:4:39","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4109:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3488,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"4062:21:39","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4062:52:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3493,"nodeType":"ExpressionStatement","src":"4062:52:39"}]},"documentation":{"id":3475,"nodeType":"StructuredDocumentation","src":"3588:308:39","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":3495,"implemented":true,"kind":"function","modifiers":[{"id":3482,"kind":"modifierInvocation","modifierName":{"id":3481,"name":"onlyProxy","nameLocations":["3996:9:39"],"nodeType":"IdentifierPath","referencedDeclaration":3425,"src":"3996:9:39"},"nodeType":"ModifierInvocation","src":"3996:9:39"}],"name":"upgradeToAndCall","nameLocation":"3910:16:39","nodeType":"FunctionDefinition","parameters":{"id":3480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3477,"mutability":"mutable","name":"newImplementation","nameLocation":"3935:17:39","nodeType":"VariableDeclaration","scope":3495,"src":"3927:25:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3476,"name":"address","nodeType":"ElementaryTypeName","src":"3927:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3479,"mutability":"mutable","name":"data","nameLocation":"3967:4:39","nodeType":"VariableDeclaration","scope":3495,"src":"3954:17:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3478,"name":"bytes","nodeType":"ElementaryTypeName","src":"3954:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3926:46:39"},"returnParameters":{"id":3483,"nodeType":"ParameterList","parameters":[],"src":"4006:0:39"},"scope":3507,"src":"3901:220:39","stateMutability":"payable","virtual":true,"visibility":"public"},{"documentation":{"id":3496,"nodeType":"StructuredDocumentation","src":"4127:397:39","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":3501,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"4538:17:39","nodeType":"FunctionDefinition","parameters":{"id":3499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3498,"mutability":"mutable","name":"newImplementation","nameLocation":"4564:17:39","nodeType":"VariableDeclaration","scope":3501,"src":"4556:25:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3497,"name":"address","nodeType":"ElementaryTypeName","src":"4556:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4555:27:39"},"returnParameters":{"id":3500,"nodeType":"ParameterList","parameters":[],"src":"4599:0:39"},"scope":3507,"src":"4529:71:39","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3502,"nodeType":"StructuredDocumentation","src":"4606:254:39","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3506,"mutability":"mutable","name":"__gap","nameLocation":"4885:5:39","nodeType":"VariableDeclaration","scope":3507,"src":"4865:25:39","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3503,"name":"uint256","nodeType":"ElementaryTypeName","src":"4865:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3505,"length":{"hexValue":"3530","id":3504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4873:2:39","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"4865:11:39","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3508,"src":"928:3965:39","usedErrors":[]}],"src":"115:4779:39"},"id":39},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3837]},"id":3838,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3509,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:40"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3510,"nodeType":"StructuredDocumentation","src":"126:67:40","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3837,"linearizedBaseContracts":[3837],"name":"AddressUpgradeable","nameLocation":"202:18:40","nodeType":"ContractDefinition","nodes":[{"body":{"id":3524,"nodeType":"Block","src":"1489:254:40","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3518,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3513,"src":"1713:7:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:40","memberName":"code","nodeType":"MemberAccess","src":"1713:12:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:40","memberName":"length","nodeType":"MemberAccess","src":"1713:19:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:40","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3517,"id":3523,"nodeType":"Return","src":"1706:30:40"}]},"documentation":{"id":3511,"nodeType":"StructuredDocumentation","src":"227:1191:40","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3525,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:40","nodeType":"FunctionDefinition","parameters":{"id":3514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3513,"mutability":"mutable","name":"account","nameLocation":"1451:7:40","nodeType":"VariableDeclaration","scope":3525,"src":"1443:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3512,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:40"},"returnParameters":{"id":3517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3525,"src":"1483:4:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3515,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:40"},"scope":3837,"src":"1423:320:40","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3558,"nodeType":"Block","src":"2729:241:40","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3536,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:40","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$3837","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$3837","typeString":"library AddressUpgradeable"}],"id":3535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3534,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:40","typeDescriptions":{}}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:40","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3539,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"2772:6:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3533,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:40","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3543,"nodeType":"ExpressionStatement","src":"2739:73:40"},{"assignments":[3545,null],"declarations":[{"constant":false,"id":3545,"mutability":"mutable","name":"success","nameLocation":"2829:7:40","nodeType":"VariableDeclaration","scope":3558,"src":"2824:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3544,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3552,"initialValue":{"arguments":[{"hexValue":"","id":3550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3546,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"2842:9:40","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:40","memberName":"call","nodeType":"MemberAccess","src":"2842:14:40","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3548,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"2864:6:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:40","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:40"},{"expression":{"arguments":[{"id":3554,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"2893:7:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3553,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:40","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3557,"nodeType":"ExpressionStatement","src":"2885:78:40"}]},"documentation":{"id":3526,"nodeType":"StructuredDocumentation","src":"1749:904:40","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3559,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:40","nodeType":"FunctionDefinition","parameters":{"id":3531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3528,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:40","nodeType":"VariableDeclaration","scope":3559,"src":"2677:25:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3527,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:40","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3530,"mutability":"mutable","name":"amount","nameLocation":"2712:6:40","nodeType":"VariableDeclaration","scope":3559,"src":"2704:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3529,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:40"},"returnParameters":{"id":3532,"nodeType":"ParameterList","parameters":[],"src":"2729:0:40"},"scope":3837,"src":"2658:312:40","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3576,"nodeType":"Block","src":"3801:96:40","statements":[{"expression":{"arguments":[{"id":3570,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"3840:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3571,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"3848:4:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:40","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3569,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3617,3661],"referencedDeclaration":3661,"src":"3818:21:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3568,"id":3575,"nodeType":"Return","src":"3811:79:40"}]},"documentation":{"id":3560,"nodeType":"StructuredDocumentation","src":"2976:731:40","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3577,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:40","nodeType":"FunctionDefinition","parameters":{"id":3565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3562,"mutability":"mutable","name":"target","nameLocation":"3742:6:40","nodeType":"VariableDeclaration","scope":3577,"src":"3734:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3561,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3564,"mutability":"mutable","name":"data","nameLocation":"3763:4:40","nodeType":"VariableDeclaration","scope":3577,"src":"3750:17:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3563,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:40"},"returnParameters":{"id":3568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3567,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3577,"src":"3787:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3566,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:40"},"scope":3837,"src":"3712:185:40","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3596,"nodeType":"Block","src":"4266:76:40","statements":[{"expression":{"arguments":[{"id":3590,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"4305:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3591,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"4313:4:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:40","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3593,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"4322:12:40","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3589,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3617,3661],"referencedDeclaration":3661,"src":"4283:21:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3588,"id":3595,"nodeType":"Return","src":"4276:59:40"}]},"documentation":{"id":3578,"nodeType":"StructuredDocumentation","src":"3903:211:40","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3597,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:40","nodeType":"FunctionDefinition","parameters":{"id":3585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3580,"mutability":"mutable","name":"target","nameLocation":"4158:6:40","nodeType":"VariableDeclaration","scope":3597,"src":"4150:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3579,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3582,"mutability":"mutable","name":"data","nameLocation":"4187:4:40","nodeType":"VariableDeclaration","scope":3597,"src":"4174:17:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3581,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3584,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:40","nodeType":"VariableDeclaration","scope":3597,"src":"4201:26:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3583,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:40"},"returnParameters":{"id":3588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3597,"src":"4252:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3586,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:40"},"scope":3837,"src":"4119:223:40","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3616,"nodeType":"Block","src":"4817:111:40","statements":[{"expression":{"arguments":[{"id":3610,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"4856:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3611,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"4864:4:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"4870:5:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3609,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3617,3661],"referencedDeclaration":3661,"src":"4834:21:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3608,"id":3615,"nodeType":"Return","src":"4827:94:40"}]},"documentation":{"id":3598,"nodeType":"StructuredDocumentation","src":"4348:351:40","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3617,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:40","nodeType":"FunctionDefinition","parameters":{"id":3605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3600,"mutability":"mutable","name":"target","nameLocation":"4743:6:40","nodeType":"VariableDeclaration","scope":3617,"src":"4735:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3599,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3602,"mutability":"mutable","name":"data","nameLocation":"4764:4:40","nodeType":"VariableDeclaration","scope":3617,"src":"4751:17:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3601,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3604,"mutability":"mutable","name":"value","nameLocation":"4778:5:40","nodeType":"VariableDeclaration","scope":3617,"src":"4770:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3603,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:40"},"returnParameters":{"id":3608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3617,"src":"4803:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3606,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:40"},"scope":3837,"src":"4704:224:40","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3660,"nodeType":"Block","src":"5355:267:40","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3634,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:40","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$3837","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$3837","typeString":"library AddressUpgradeable"}],"id":3633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:40","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3632,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:40","typeDescriptions":{}}},"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:40","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"5398:5:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3631,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:40","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3641,"nodeType":"ExpressionStatement","src":"5365:81:40"},{"assignments":[3643,3645],"declarations":[{"constant":false,"id":3643,"mutability":"mutable","name":"success","nameLocation":"5462:7:40","nodeType":"VariableDeclaration","scope":3660,"src":"5457:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3642,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3645,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:40","nodeType":"VariableDeclaration","scope":3660,"src":"5471:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3644,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3652,"initialValue":{"arguments":[{"id":3650,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"5524:4:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3646,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"5498:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:40","memberName":"call","nodeType":"MemberAccess","src":"5498:11:40","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"5517:5:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:40","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:40"},{"expression":{"arguments":[{"id":3654,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"5573:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3655,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3643,"src":"5581:7:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3656,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"5590:10:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3657,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"5602:12:40","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3653,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"5546:26:40","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3630,"id":3659,"nodeType":"Return","src":"5539:76:40"}]},"documentation":{"id":3618,"nodeType":"StructuredDocumentation","src":"4934:237:40","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3661,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:40","nodeType":"FunctionDefinition","parameters":{"id":3627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3620,"mutability":"mutable","name":"target","nameLocation":"5224:6:40","nodeType":"VariableDeclaration","scope":3661,"src":"5216:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3619,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3622,"mutability":"mutable","name":"data","nameLocation":"5253:4:40","nodeType":"VariableDeclaration","scope":3661,"src":"5240:17:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3621,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3624,"mutability":"mutable","name":"value","nameLocation":"5275:5:40","nodeType":"VariableDeclaration","scope":3661,"src":"5267:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3623,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3626,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:40","nodeType":"VariableDeclaration","scope":3661,"src":"5290:26:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3625,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:40"},"returnParameters":{"id":3630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3661,"src":"5341:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3628,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:40"},"scope":3837,"src":"5176:446:40","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3677,"nodeType":"Block","src":"5899:97:40","statements":[{"expression":{"arguments":[{"id":3672,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"5935:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3673,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"5943:4:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3671,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3678,3707],"referencedDeclaration":3707,"src":"5916:18:40","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3670,"id":3676,"nodeType":"Return","src":"5909:80:40"}]},"documentation":{"id":3662,"nodeType":"StructuredDocumentation","src":"5628:166:40","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3678,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:40","nodeType":"FunctionDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3664,"mutability":"mutable","name":"target","nameLocation":"5835:6:40","nodeType":"VariableDeclaration","scope":3678,"src":"5827:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3663,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3666,"mutability":"mutable","name":"data","nameLocation":"5856:4:40","nodeType":"VariableDeclaration","scope":3678,"src":"5843:17:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3665,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:40"},"returnParameters":{"id":3670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3678,"src":"5885:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3668,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:40"},"scope":3837,"src":"5799:197:40","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3706,"nodeType":"Block","src":"6338:168:40","statements":[{"assignments":[3691,3693],"declarations":[{"constant":false,"id":3691,"mutability":"mutable","name":"success","nameLocation":"6354:7:40","nodeType":"VariableDeclaration","scope":3706,"src":"6349:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3690,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3693,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:40","nodeType":"VariableDeclaration","scope":3706,"src":"6363:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3692,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3698,"initialValue":{"arguments":[{"id":3696,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6408:4:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3694,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"6390:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:40","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:40","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:40"},{"expression":{"arguments":[{"id":3700,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"6457:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3701,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"6465:7:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3702,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"6474:10:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3703,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"6486:12:40","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3699,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"6430:26:40","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3689,"id":3705,"nodeType":"Return","src":"6423:76:40"}]},"documentation":{"id":3679,"nodeType":"StructuredDocumentation","src":"6002:173:40","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3707,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:40","nodeType":"FunctionDefinition","parameters":{"id":3686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3681,"mutability":"mutable","name":"target","nameLocation":"6225:6:40","nodeType":"VariableDeclaration","scope":3707,"src":"6217:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3680,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3683,"mutability":"mutable","name":"data","nameLocation":"6254:4:40","nodeType":"VariableDeclaration","scope":3707,"src":"6241:17:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3682,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3685,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:40","nodeType":"VariableDeclaration","scope":3707,"src":"6268:26:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3684,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:40"},"returnParameters":{"id":3689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3707,"src":"6324:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3687,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:40"},"scope":3837,"src":"6180:326:40","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3723,"nodeType":"Block","src":"6782:101:40","statements":[{"expression":{"arguments":[{"id":3718,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"6820:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3719,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"6828:4:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3717,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3724,3753],"referencedDeclaration":3753,"src":"6799:20:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3716,"id":3722,"nodeType":"Return","src":"6792:84:40"}]},"documentation":{"id":3708,"nodeType":"StructuredDocumentation","src":"6512:168:40","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3724,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:40","nodeType":"FunctionDefinition","parameters":{"id":3713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3710,"mutability":"mutable","name":"target","nameLocation":"6723:6:40","nodeType":"VariableDeclaration","scope":3724,"src":"6715:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3709,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3712,"mutability":"mutable","name":"data","nameLocation":"6744:4:40","nodeType":"VariableDeclaration","scope":3724,"src":"6731:17:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3711,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:40"},"returnParameters":{"id":3716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3724,"src":"6768:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3714,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:40"},"scope":3837,"src":"6685:198:40","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3752,"nodeType":"Block","src":"7224:170:40","statements":[{"assignments":[3737,3739],"declarations":[{"constant":false,"id":3737,"mutability":"mutable","name":"success","nameLocation":"7240:7:40","nodeType":"VariableDeclaration","scope":3752,"src":"7235:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3736,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3739,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:40","nodeType":"VariableDeclaration","scope":3752,"src":"7249:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3738,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3744,"initialValue":{"arguments":[{"id":3742,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"7296:4:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3740,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"7276:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:40","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:40","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:40"},{"expression":{"arguments":[{"id":3746,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"7345:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3747,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"7353:7:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3748,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"7362:10:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3749,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"7374:12:40","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3745,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"7318:26:40","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3735,"id":3751,"nodeType":"Return","src":"7311:76:40"}]},"documentation":{"id":3725,"nodeType":"StructuredDocumentation","src":"6889:175:40","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3753,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:40","nodeType":"FunctionDefinition","parameters":{"id":3732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3727,"mutability":"mutable","name":"target","nameLocation":"7116:6:40","nodeType":"VariableDeclaration","scope":3753,"src":"7108:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3726,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3729,"mutability":"mutable","name":"data","nameLocation":"7145:4:40","nodeType":"VariableDeclaration","scope":3753,"src":"7132:17:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3728,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3731,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:40","nodeType":"VariableDeclaration","scope":3753,"src":"7159:26:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3730,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:40"},"returnParameters":{"id":3735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3734,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3753,"src":"7210:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3733,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:40"},"scope":3837,"src":"7069:325:40","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3791,"nodeType":"Block","src":"7876:434:40","statements":[{"condition":{"id":3767,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"7890:7:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3789,"nodeType":"Block","src":"8246:58:40","statements":[{"expression":{"arguments":[{"id":3785,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"8268:10:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3786,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"8280:12:40","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3784,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"8260:7:40","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3788,"nodeType":"ExpressionStatement","src":"8260:33:40"}]},"id":3790,"nodeType":"IfStatement","src":"7886:418:40","trueBody":{"id":3783,"nodeType":"Block","src":"7899:341:40","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3768,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"7917:10:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:40","memberName":"length","nodeType":"MemberAccess","src":"7917:17:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:40","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3780,"nodeType":"IfStatement","src":"7913:286:40","trueBody":{"id":3779,"nodeType":"Block","src":"7941:258:40","statements":[{"expression":{"arguments":[{"arguments":[{"id":3774,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3756,"src":"8143:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3773,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3525,"src":"8132:10:40","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:40","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3772,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:40","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3778,"nodeType":"ExpressionStatement","src":"8124:60:40"}]}},{"expression":{"id":3781,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"8219:10:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3766,"id":3782,"nodeType":"Return","src":"8212:17:40"}]}}]},"documentation":{"id":3754,"nodeType":"StructuredDocumentation","src":"7400:277:40","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3792,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:40","nodeType":"FunctionDefinition","parameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3756,"mutability":"mutable","name":"target","nameLocation":"7735:6:40","nodeType":"VariableDeclaration","scope":3792,"src":"7727:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3755,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3758,"mutability":"mutable","name":"success","nameLocation":"7756:7:40","nodeType":"VariableDeclaration","scope":3792,"src":"7751:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3757,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3760,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:40","nodeType":"VariableDeclaration","scope":3792,"src":"7773:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3759,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3762,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:40","nodeType":"VariableDeclaration","scope":3792,"src":"7806:26:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3761,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:40"},"returnParameters":{"id":3766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3792,"src":"7862:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3764,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:40"},"scope":3837,"src":"7682:628:40","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3815,"nodeType":"Block","src":"8691:135:40","statements":[{"condition":{"id":3804,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"8705:7:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3813,"nodeType":"Block","src":"8762:58:40","statements":[{"expression":{"arguments":[{"id":3809,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"8784:10:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3810,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3799,"src":"8796:12:40","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3808,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3836,"src":"8776:7:40","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3812,"nodeType":"ExpressionStatement","src":"8776:33:40"}]},"id":3814,"nodeType":"IfStatement","src":"8701:119:40","trueBody":{"id":3807,"nodeType":"Block","src":"8714:42:40","statements":[{"expression":{"id":3805,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3797,"src":"8735:10:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3803,"id":3806,"nodeType":"Return","src":"8728:17:40"}]}}]},"documentation":{"id":3793,"nodeType":"StructuredDocumentation","src":"8316:210:40","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3816,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:40","nodeType":"FunctionDefinition","parameters":{"id":3800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3795,"mutability":"mutable","name":"success","nameLocation":"8571:7:40","nodeType":"VariableDeclaration","scope":3816,"src":"8566:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3794,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3797,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:40","nodeType":"VariableDeclaration","scope":3816,"src":"8588:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3796,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3799,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:40","nodeType":"VariableDeclaration","scope":3816,"src":"8621:26:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3798,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:40"},"returnParameters":{"id":3803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3802,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3816,"src":"8677:12:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3801,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:40"},"scope":3837,"src":"8531:295:40","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3835,"nodeType":"Block","src":"8915:457:40","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3823,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"8991:10:40","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:40","memberName":"length","nodeType":"MemberAccess","src":"8991:17:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:40","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3833,"nodeType":"Block","src":"9321:45:40","statements":[{"expression":{"arguments":[{"id":3830,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"9342:12:40","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3829,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:40","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3832,"nodeType":"ExpressionStatement","src":"9335:20:40"}]},"id":3834,"nodeType":"IfStatement","src":"8987:379:40","trueBody":{"id":3828,"nodeType":"Block","src":"9014:301:40","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:40","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:40","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:40"},"nodeType":"YulFunctionCall","src":"9213:17:40"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:40","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:40","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:40"},"nodeType":"YulFunctionCall","src":"9254:19:40"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:40"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:40"},"nodeType":"YulFunctionCall","src":"9247:44:40"},"nodeType":"YulExpressionStatement","src":"9247:44:40"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3818,"isOffset":false,"isSlot":false,"src":"9219:10:40","valueSize":1},{"declaration":3818,"isOffset":false,"isSlot":false,"src":"9262:10:40","valueSize":1}],"id":3827,"nodeType":"InlineAssembly","src":"9163:142:40"}]}}]},"id":3836,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:40","nodeType":"FunctionDefinition","parameters":{"id":3821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3818,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:40","nodeType":"VariableDeclaration","scope":3836,"src":"8849:23:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3817,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3820,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:40","nodeType":"VariableDeclaration","scope":3836,"src":"8874:26:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3819,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:40","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:40"},"returnParameters":{"id":3822,"nodeType":"ParameterList","parameters":[],"src":"8915:0:40"},"scope":3837,"src":"8832:540:40","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3838,"src":"194:9180:40","usedErrors":[]}],"src":"101:9274:40"},"id":40},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[3837],"ContextUpgradeable":[3879],"Initializable":[3371]},"id":3880,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3839,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:41"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3840,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3880,"sourceUnit":3372,"src":"110:42:41","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3842,"name":"Initializable","nameLocations":["691:13:41"],"nodeType":"IdentifierPath","referencedDeclaration":3371,"src":"691:13:41"},"id":3843,"nodeType":"InheritanceSpecifier","src":"691:13:41"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3841,"nodeType":"StructuredDocumentation","src":"154:496:41","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3879,"linearizedBaseContracts":[3879,3371],"name":"ContextUpgradeable","nameLocation":"669:18:41","nodeType":"ContractDefinition","nodes":[{"body":{"id":3848,"nodeType":"Block","src":"763:7:41","statements":[]},"id":3849,"implemented":true,"kind":"function","modifiers":[{"id":3846,"kind":"modifierInvocation","modifierName":{"id":3845,"name":"onlyInitializing","nameLocations":["746:16:41"],"nodeType":"IdentifierPath","referencedDeclaration":3316,"src":"746:16:41"},"nodeType":"ModifierInvocation","src":"746:16:41"}],"name":"__Context_init","nameLocation":"720:14:41","nodeType":"FunctionDefinition","parameters":{"id":3844,"nodeType":"ParameterList","parameters":[],"src":"734:2:41"},"returnParameters":{"id":3847,"nodeType":"ParameterList","parameters":[],"src":"763:0:41"},"scope":3879,"src":"711:59:41","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3854,"nodeType":"Block","src":"838:7:41","statements":[]},"id":3855,"implemented":true,"kind":"function","modifiers":[{"id":3852,"kind":"modifierInvocation","modifierName":{"id":3851,"name":"onlyInitializing","nameLocations":["821:16:41"],"nodeType":"IdentifierPath","referencedDeclaration":3316,"src":"821:16:41"},"nodeType":"ModifierInvocation","src":"821:16:41"}],"name":"__Context_init_unchained","nameLocation":"785:24:41","nodeType":"FunctionDefinition","parameters":{"id":3850,"nodeType":"ParameterList","parameters":[],"src":"809:2:41"},"returnParameters":{"id":3853,"nodeType":"ParameterList","parameters":[],"src":"838:0:41"},"scope":3879,"src":"776:69:41","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3863,"nodeType":"Block","src":"912:34:41","statements":[{"expression":{"expression":{"id":3860,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:41","memberName":"sender","nodeType":"MemberAccess","src":"929:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3859,"id":3862,"nodeType":"Return","src":"922:17:41"}]},"id":3864,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:41","nodeType":"FunctionDefinition","parameters":{"id":3856,"nodeType":"ParameterList","parameters":[],"src":"869:2:41"},"returnParameters":{"id":3859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3864,"src":"903:7:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3857,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:41"},"scope":3879,"src":"850:96:41","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3872,"nodeType":"Block","src":"1019:32:41","statements":[{"expression":{"expression":{"id":3869,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:41","memberName":"data","nodeType":"MemberAccess","src":"1036:8:41","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3868,"id":3871,"nodeType":"Return","src":"1029:15:41"}]},"id":3873,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:41","nodeType":"FunctionDefinition","parameters":{"id":3865,"nodeType":"ParameterList","parameters":[],"src":"969:2:41"},"returnParameters":{"id":3868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3873,"src":"1003:14:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3866,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:41","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:41"},"scope":3879,"src":"952:99:41","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3874,"nodeType":"StructuredDocumentation","src":"1057:254:41","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3878,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:41","nodeType":"VariableDeclaration","scope":3879,"src":"1316:25:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3875,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3877,"length":{"hexValue":"3530","id":3876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:41","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:41","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3880,"src":"651:693:41","usedErrors":[]}],"src":"86:1259:41"},"id":41},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol","exportedSymbols":{"StorageSlotUpgradeable":[3989]},"id":3990,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3881,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:42"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3882,"nodeType":"StructuredDocumentation","src":"218:1201:42","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":3989,"linearizedBaseContracts":[3989],"name":"StorageSlotUpgradeable","nameLocation":"1428:22:42","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotUpgradeable.AddressSlot","id":3885,"members":[{"constant":false,"id":3884,"mutability":"mutable","name":"value","nameLocation":"1494:5:42","nodeType":"VariableDeclaration","scope":3885,"src":"1486:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3883,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1464:11:42","nodeType":"StructDefinition","scope":3989,"src":"1457:49:42","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BooleanSlot","id":3888,"members":[{"constant":false,"id":3887,"mutability":"mutable","name":"value","nameLocation":"1546:5:42","nodeType":"VariableDeclaration","scope":3888,"src":"1541:10:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3886,"name":"bool","nodeType":"ElementaryTypeName","src":"1541:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1519:11:42","nodeType":"StructDefinition","scope":3989,"src":"1512:46:42","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","id":3891,"members":[{"constant":false,"id":3890,"mutability":"mutable","name":"value","nameLocation":"1601:5:42","nodeType":"VariableDeclaration","scope":3891,"src":"1593:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3889,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1593:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1571:11:42","nodeType":"StructDefinition","scope":3989,"src":"1564:49:42","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.Uint256Slot","id":3894,"members":[{"constant":false,"id":3893,"mutability":"mutable","name":"value","nameLocation":"1656:5:42","nodeType":"VariableDeclaration","scope":3894,"src":"1648:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3892,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1626:11:42","nodeType":"StructDefinition","scope":3989,"src":"1619:49:42","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.StringSlot","id":3897,"members":[{"constant":false,"id":3896,"mutability":"mutable","name":"value","nameLocation":"1709:5:42","nodeType":"VariableDeclaration","scope":3897,"src":"1702:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3895,"name":"string","nodeType":"ElementaryTypeName","src":"1702:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1681:10:42","nodeType":"StructDefinition","scope":3989,"src":"1674:47:42","visibility":"public"},{"canonicalName":"StorageSlotUpgradeable.BytesSlot","id":3900,"members":[{"constant":false,"id":3899,"mutability":"mutable","name":"value","nameLocation":"1760:5:42","nodeType":"VariableDeclaration","scope":3900,"src":"1754:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3898,"name":"bytes","nodeType":"ElementaryTypeName","src":"1754:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1734:9:42","nodeType":"StructDefinition","scope":3989,"src":"1727:45:42","visibility":"public"},{"body":{"id":3910,"nodeType":"Block","src":"1954:106:42","statements":[{"AST":{"nodeType":"YulBlock","src":"2016:38:42","statements":[{"nodeType":"YulAssignment","src":"2030:14:42","value":{"name":"slot","nodeType":"YulIdentifier","src":"2040:4:42"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2030:6:42"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3907,"isOffset":false,"isSlot":true,"src":"2030:6:42","suffix":"slot","valueSize":1},{"declaration":3903,"isOffset":false,"isSlot":false,"src":"2040:4:42","valueSize":1}],"id":3909,"nodeType":"InlineAssembly","src":"2007:47:42"}]},"documentation":{"id":3901,"nodeType":"StructuredDocumentation","src":"1778:87:42","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":3911,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1879:14:42","nodeType":"FunctionDefinition","parameters":{"id":3904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3903,"mutability":"mutable","name":"slot","nameLocation":"1902:4:42","nodeType":"VariableDeclaration","scope":3911,"src":"1894:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3902,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1894:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1893:14:42"},"returnParameters":{"id":3908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3907,"mutability":"mutable","name":"r","nameLocation":"1951:1:42","nodeType":"VariableDeclaration","scope":3911,"src":"1931:21:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3885_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":3906,"nodeType":"UserDefinedTypeName","pathNode":{"id":3905,"name":"AddressSlot","nameLocations":["1931:11:42"],"nodeType":"IdentifierPath","referencedDeclaration":3885,"src":"1931:11:42"},"referencedDeclaration":3885,"src":"1931:11:42","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3885_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1930:23:42"},"scope":3989,"src":"1870:190:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3921,"nodeType":"Block","src":"2242:106:42","statements":[{"AST":{"nodeType":"YulBlock","src":"2304:38:42","statements":[{"nodeType":"YulAssignment","src":"2318:14:42","value":{"name":"slot","nodeType":"YulIdentifier","src":"2328:4:42"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2318:6:42"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3918,"isOffset":false,"isSlot":true,"src":"2318:6:42","suffix":"slot","valueSize":1},{"declaration":3914,"isOffset":false,"isSlot":false,"src":"2328:4:42","valueSize":1}],"id":3920,"nodeType":"InlineAssembly","src":"2295:47:42"}]},"documentation":{"id":3912,"nodeType":"StructuredDocumentation","src":"2066:87:42","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":3922,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2167:14:42","nodeType":"FunctionDefinition","parameters":{"id":3915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3914,"mutability":"mutable","name":"slot","nameLocation":"2190:4:42","nodeType":"VariableDeclaration","scope":3922,"src":"2182:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3913,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2182:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2181:14:42"},"returnParameters":{"id":3919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3918,"mutability":"mutable","name":"r","nameLocation":"2239:1:42","nodeType":"VariableDeclaration","scope":3922,"src":"2219:21:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3888_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":3917,"nodeType":"UserDefinedTypeName","pathNode":{"id":3916,"name":"BooleanSlot","nameLocations":["2219:11:42"],"nodeType":"IdentifierPath","referencedDeclaration":3888,"src":"2219:11:42"},"referencedDeclaration":3888,"src":"2219:11:42","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3888_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"2218:23:42"},"scope":3989,"src":"2158:190:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3932,"nodeType":"Block","src":"2530:106:42","statements":[{"AST":{"nodeType":"YulBlock","src":"2592:38:42","statements":[{"nodeType":"YulAssignment","src":"2606:14:42","value":{"name":"slot","nodeType":"YulIdentifier","src":"2616:4:42"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2606:6:42"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3929,"isOffset":false,"isSlot":true,"src":"2606:6:42","suffix":"slot","valueSize":1},{"declaration":3925,"isOffset":false,"isSlot":false,"src":"2616:4:42","valueSize":1}],"id":3931,"nodeType":"InlineAssembly","src":"2583:47:42"}]},"documentation":{"id":3923,"nodeType":"StructuredDocumentation","src":"2354:87:42","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":3933,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2455:14:42","nodeType":"FunctionDefinition","parameters":{"id":3926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3925,"mutability":"mutable","name":"slot","nameLocation":"2478:4:42","nodeType":"VariableDeclaration","scope":3933,"src":"2470:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3924,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2470:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2469:14:42"},"returnParameters":{"id":3930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3929,"mutability":"mutable","name":"r","nameLocation":"2527:1:42","nodeType":"VariableDeclaration","scope":3933,"src":"2507:21:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3891_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":3928,"nodeType":"UserDefinedTypeName","pathNode":{"id":3927,"name":"Bytes32Slot","nameLocations":["2507:11:42"],"nodeType":"IdentifierPath","referencedDeclaration":3891,"src":"2507:11:42"},"referencedDeclaration":3891,"src":"2507:11:42","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3891_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2506:23:42"},"scope":3989,"src":"2446:190:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3943,"nodeType":"Block","src":"2818:106:42","statements":[{"AST":{"nodeType":"YulBlock","src":"2880:38:42","statements":[{"nodeType":"YulAssignment","src":"2894:14:42","value":{"name":"slot","nodeType":"YulIdentifier","src":"2904:4:42"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2894:6:42"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3940,"isOffset":false,"isSlot":true,"src":"2894:6:42","suffix":"slot","valueSize":1},{"declaration":3936,"isOffset":false,"isSlot":false,"src":"2904:4:42","valueSize":1}],"id":3942,"nodeType":"InlineAssembly","src":"2871:47:42"}]},"documentation":{"id":3934,"nodeType":"StructuredDocumentation","src":"2642:87:42","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":3944,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2743:14:42","nodeType":"FunctionDefinition","parameters":{"id":3937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"mutability":"mutable","name":"slot","nameLocation":"2766:4:42","nodeType":"VariableDeclaration","scope":3944,"src":"2758:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3935,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2758:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2757:14:42"},"returnParameters":{"id":3941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"mutability":"mutable","name":"r","nameLocation":"2815:1:42","nodeType":"VariableDeclaration","scope":3944,"src":"2795:21:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3894_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":3939,"nodeType":"UserDefinedTypeName","pathNode":{"id":3938,"name":"Uint256Slot","nameLocations":["2795:11:42"],"nodeType":"IdentifierPath","referencedDeclaration":3894,"src":"2795:11:42"},"referencedDeclaration":3894,"src":"2795:11:42","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3894_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2794:23:42"},"scope":3989,"src":"2734:190:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3954,"nodeType":"Block","src":"3103:106:42","statements":[{"AST":{"nodeType":"YulBlock","src":"3165:38:42","statements":[{"nodeType":"YulAssignment","src":"3179:14:42","value":{"name":"slot","nodeType":"YulIdentifier","src":"3189:4:42"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3179:6:42"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3951,"isOffset":false,"isSlot":true,"src":"3179:6:42","suffix":"slot","valueSize":1},{"declaration":3947,"isOffset":false,"isSlot":false,"src":"3189:4:42","valueSize":1}],"id":3953,"nodeType":"InlineAssembly","src":"3156:47:42"}]},"documentation":{"id":3945,"nodeType":"StructuredDocumentation","src":"2930:86:42","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":3955,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3030:13:42","nodeType":"FunctionDefinition","parameters":{"id":3948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3947,"mutability":"mutable","name":"slot","nameLocation":"3052:4:42","nodeType":"VariableDeclaration","scope":3955,"src":"3044:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3946,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3044:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3043:14:42"},"returnParameters":{"id":3952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3951,"mutability":"mutable","name":"r","nameLocation":"3100:1:42","nodeType":"VariableDeclaration","scope":3955,"src":"3081:20:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3897_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":3950,"nodeType":"UserDefinedTypeName","pathNode":{"id":3949,"name":"StringSlot","nameLocations":["3081:10:42"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"3081:10:42"},"referencedDeclaration":3897,"src":"3081:10:42","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3897_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3080:22:42"},"scope":3989,"src":"3021:188:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3965,"nodeType":"Block","src":"3411:112:42","statements":[{"AST":{"nodeType":"YulBlock","src":"3473:44:42","statements":[{"nodeType":"YulAssignment","src":"3487:20:42","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3497:10:42"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3487:6:42"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3962,"isOffset":false,"isSlot":true,"src":"3487:6:42","suffix":"slot","valueSize":1},{"declaration":3958,"isOffset":false,"isSlot":true,"src":"3497:10:42","suffix":"slot","valueSize":1}],"id":3964,"nodeType":"InlineAssembly","src":"3464:53:42"}]},"documentation":{"id":3956,"nodeType":"StructuredDocumentation","src":"3215:101:42","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":3966,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3330:13:42","nodeType":"FunctionDefinition","parameters":{"id":3959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3958,"mutability":"mutable","name":"store","nameLocation":"3359:5:42","nodeType":"VariableDeclaration","scope":3966,"src":"3344:20:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3957,"name":"string","nodeType":"ElementaryTypeName","src":"3344:6:42","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3343:22:42"},"returnParameters":{"id":3963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3962,"mutability":"mutable","name":"r","nameLocation":"3408:1:42","nodeType":"VariableDeclaration","scope":3966,"src":"3389:20:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3897_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"},"typeName":{"id":3961,"nodeType":"UserDefinedTypeName","pathNode":{"id":3960,"name":"StringSlot","nameLocations":["3389:10:42"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"3389:10:42"},"referencedDeclaration":3897,"src":"3389:10:42","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3897_storage_ptr","typeString":"struct StorageSlotUpgradeable.StringSlot"}},"visibility":"internal"}],"src":"3388:22:42"},"scope":3989,"src":"3321:202:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3976,"nodeType":"Block","src":"3699:106:42","statements":[{"AST":{"nodeType":"YulBlock","src":"3761:38:42","statements":[{"nodeType":"YulAssignment","src":"3775:14:42","value":{"name":"slot","nodeType":"YulIdentifier","src":"3785:4:42"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3775:6:42"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3973,"isOffset":false,"isSlot":true,"src":"3775:6:42","suffix":"slot","valueSize":1},{"declaration":3969,"isOffset":false,"isSlot":false,"src":"3785:4:42","valueSize":1}],"id":3975,"nodeType":"InlineAssembly","src":"3752:47:42"}]},"documentation":{"id":3967,"nodeType":"StructuredDocumentation","src":"3529:85:42","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":3977,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3628:12:42","nodeType":"FunctionDefinition","parameters":{"id":3970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3969,"mutability":"mutable","name":"slot","nameLocation":"3649:4:42","nodeType":"VariableDeclaration","scope":3977,"src":"3641:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3968,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3641:7:42","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3640:14:42"},"returnParameters":{"id":3974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3973,"mutability":"mutable","name":"r","nameLocation":"3696:1:42","nodeType":"VariableDeclaration","scope":3977,"src":"3678:19:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3900_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":3972,"nodeType":"UserDefinedTypeName","pathNode":{"id":3971,"name":"BytesSlot","nameLocations":["3678:9:42"],"nodeType":"IdentifierPath","referencedDeclaration":3900,"src":"3678:9:42"},"referencedDeclaration":3900,"src":"3678:9:42","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3900_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3677:21:42"},"scope":3989,"src":"3619:186:42","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3987,"nodeType":"Block","src":"4002:112:42","statements":[{"AST":{"nodeType":"YulBlock","src":"4064:44:42","statements":[{"nodeType":"YulAssignment","src":"4078:20:42","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4088:10:42"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4078:6:42"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3984,"isOffset":false,"isSlot":true,"src":"4078:6:42","suffix":"slot","valueSize":1},{"declaration":3980,"isOffset":false,"isSlot":true,"src":"4088:10:42","suffix":"slot","valueSize":1}],"id":3986,"nodeType":"InlineAssembly","src":"4055:53:42"}]},"documentation":{"id":3978,"nodeType":"StructuredDocumentation","src":"3811:99:42","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":3988,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3924:12:42","nodeType":"FunctionDefinition","parameters":{"id":3981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"store","nameLocation":"3951:5:42","nodeType":"VariableDeclaration","scope":3988,"src":"3937:19:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3979,"name":"bytes","nodeType":"ElementaryTypeName","src":"3937:5:42","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3936:21:42"},"returnParameters":{"id":3985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3984,"mutability":"mutable","name":"r","nameLocation":"3999:1:42","nodeType":"VariableDeclaration","scope":3988,"src":"3981:19:42","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3900_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"},"typeName":{"id":3983,"nodeType":"UserDefinedTypeName","pathNode":{"id":3982,"name":"BytesSlot","nameLocations":["3981:9:42"],"nodeType":"IdentifierPath","referencedDeclaration":3900,"src":"3981:9:42"},"referencedDeclaration":3900,"src":"3981:9:42","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3900_storage_ptr","typeString":"struct StorageSlotUpgradeable.BytesSlot"}},"visibility":"internal"}],"src":"3980:21:42"},"scope":3989,"src":"3915:199:42","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3990,"src":"1420:2696:42","usedErrors":[]}],"src":"193:3924:42"},"id":42},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[5451],"ERC20":[4576],"IERC20":[4654],"IERC20Metadata":[4679]},"id":4577,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3991,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:43"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":3992,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4577,"sourceUnit":4655,"src":"130:22:43","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":3993,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4577,"sourceUnit":4680,"src":"153:41:43","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":3994,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4577,"sourceUnit":5452,"src":"195:33:43","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3996,"name":"Context","nameLocations":["1550:7:43"],"nodeType":"IdentifierPath","referencedDeclaration":5451,"src":"1550:7:43"},"id":3997,"nodeType":"InheritanceSpecifier","src":"1550:7:43"},{"baseName":{"id":3998,"name":"IERC20","nameLocations":["1559:6:43"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"1559:6:43"},"id":3999,"nodeType":"InheritanceSpecifier","src":"1559:6:43"},{"baseName":{"id":4000,"name":"IERC20Metadata","nameLocations":["1567:14:43"],"nodeType":"IdentifierPath","referencedDeclaration":4679,"src":"1567:14:43"},"id":4001,"nodeType":"InheritanceSpecifier","src":"1567:14:43"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":3995,"nodeType":"StructuredDocumentation","src":"230:1301:43","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":4576,"linearizedBaseContracts":[4576,4679,4654,5451],"name":"ERC20","nameLocation":"1541:5:43","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4005,"mutability":"mutable","name":"_balances","nameLocation":"1624:9:43","nodeType":"VariableDeclaration","scope":4576,"src":"1588:45:43","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4004,"keyType":{"id":4002,"name":"address","nodeType":"ElementaryTypeName","src":"1596:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1588:27:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":4003,"name":"uint256","nodeType":"ElementaryTypeName","src":"1607:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":4011,"mutability":"mutable","name":"_allowances","nameLocation":"1696:11:43","nodeType":"VariableDeclaration","scope":4576,"src":"1640:67:43","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":4010,"keyType":{"id":4006,"name":"address","nodeType":"ElementaryTypeName","src":"1648:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1640:47:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":4009,"keyType":{"id":4007,"name":"address","nodeType":"ElementaryTypeName","src":"1667:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1659:27:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":4008,"name":"uint256","nodeType":"ElementaryTypeName","src":"1678:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":4013,"mutability":"mutable","name":"_totalSupply","nameLocation":"1730:12:43","nodeType":"VariableDeclaration","scope":4576,"src":"1714:28:43","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4012,"name":"uint256","nodeType":"ElementaryTypeName","src":"1714:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4015,"mutability":"mutable","name":"_name","nameLocation":"1764:5:43","nodeType":"VariableDeclaration","scope":4576,"src":"1749:20:43","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":4014,"name":"string","nodeType":"ElementaryTypeName","src":"1749:6:43","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":4017,"mutability":"mutable","name":"_symbol","nameLocation":"1790:7:43","nodeType":"VariableDeclaration","scope":4576,"src":"1775:22:43","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":4016,"name":"string","nodeType":"ElementaryTypeName","src":"1775:6:43","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":4033,"nodeType":"Block","src":"2036:57:43","statements":[{"expression":{"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4025,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4015,"src":"2046:5:43","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4026,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"2054:5:43","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2046:13:43","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4028,"nodeType":"ExpressionStatement","src":"2046:13:43"},{"expression":{"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4029,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"2069:7:43","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4030,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"2079:7:43","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2069:17:43","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4032,"nodeType":"ExpressionStatement","src":"2069:17:43"}]},"documentation":{"id":4018,"nodeType":"StructuredDocumentation","src":"1804:171:43","text":" @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."},"id":4034,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4020,"mutability":"mutable","name":"name_","nameLocation":"2006:5:43","nodeType":"VariableDeclaration","scope":4034,"src":"1992:19:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4019,"name":"string","nodeType":"ElementaryTypeName","src":"1992:6:43","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4022,"mutability":"mutable","name":"symbol_","nameLocation":"2027:7:43","nodeType":"VariableDeclaration","scope":4034,"src":"2013:21:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4021,"name":"string","nodeType":"ElementaryTypeName","src":"2013:6:43","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1991:44:43"},"returnParameters":{"id":4024,"nodeType":"ParameterList","parameters":[],"src":"2036:0:43"},"scope":4576,"src":"1980:113:43","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4666],"body":{"id":4043,"nodeType":"Block","src":"2227:29:43","statements":[{"expression":{"id":4041,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4015,"src":"2244:5:43","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4040,"id":4042,"nodeType":"Return","src":"2237:12:43"}]},"documentation":{"id":4035,"nodeType":"StructuredDocumentation","src":"2099:54:43","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":4044,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2167:4:43","nodeType":"FunctionDefinition","overrides":{"id":4037,"nodeType":"OverrideSpecifier","overrides":[],"src":"2194:8:43"},"parameters":{"id":4036,"nodeType":"ParameterList","parameters":[],"src":"2171:2:43"},"returnParameters":{"id":4040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4044,"src":"2212:13:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4038,"name":"string","nodeType":"ElementaryTypeName","src":"2212:6:43","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2211:15:43"},"scope":4576,"src":"2158:98:43","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4672],"body":{"id":4053,"nodeType":"Block","src":"2440:31:43","statements":[{"expression":{"id":4051,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"2457:7:43","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4050,"id":4052,"nodeType":"Return","src":"2450:14:43"}]},"documentation":{"id":4045,"nodeType":"StructuredDocumentation","src":"2262:102:43","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":4054,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2378:6:43","nodeType":"FunctionDefinition","overrides":{"id":4047,"nodeType":"OverrideSpecifier","overrides":[],"src":"2407:8:43"},"parameters":{"id":4046,"nodeType":"ParameterList","parameters":[],"src":"2384:2:43"},"returnParameters":{"id":4050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4054,"src":"2425:13:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4048,"name":"string","nodeType":"ElementaryTypeName","src":"2425:6:43","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2424:15:43"},"scope":4576,"src":"2369:102:43","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4678],"body":{"id":4063,"nodeType":"Block","src":"3169:26:43","statements":[{"expression":{"hexValue":"3138","id":4061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3186:2:43","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":4060,"id":4062,"nodeType":"Return","src":"3179:9:43"}]},"documentation":{"id":4055,"nodeType":"StructuredDocumentation","src":"2477:622:43","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":4064,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3113:8:43","nodeType":"FunctionDefinition","overrides":{"id":4057,"nodeType":"OverrideSpecifier","overrides":[],"src":"3144:8:43"},"parameters":{"id":4056,"nodeType":"ParameterList","parameters":[],"src":"3121:2:43"},"returnParameters":{"id":4060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4064,"src":"3162:5:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4058,"name":"uint8","nodeType":"ElementaryTypeName","src":"3162:5:43","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3161:7:43"},"scope":4576,"src":"3104:91:43","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4603],"body":{"id":4073,"nodeType":"Block","src":"3325:36:43","statements":[{"expression":{"id":4071,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"3342:12:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4070,"id":4072,"nodeType":"Return","src":"3335:19:43"}]},"documentation":{"id":4065,"nodeType":"StructuredDocumentation","src":"3201:49:43","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":4074,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3264:11:43","nodeType":"FunctionDefinition","overrides":{"id":4067,"nodeType":"OverrideSpecifier","overrides":[],"src":"3298:8:43"},"parameters":{"id":4066,"nodeType":"ParameterList","parameters":[],"src":"3275:2:43"},"returnParameters":{"id":4070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4069,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4074,"src":"3316:7:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4068,"name":"uint256","nodeType":"ElementaryTypeName","src":"3316:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3315:9:43"},"scope":4576,"src":"3255:106:43","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4611],"body":{"id":4087,"nodeType":"Block","src":"3502:42:43","statements":[{"expression":{"baseExpression":{"id":4083,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"3519:9:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4085,"indexExpression":{"id":4084,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"3529:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3519:18:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4082,"id":4086,"nodeType":"Return","src":"3512:25:43"}]},"documentation":{"id":4075,"nodeType":"StructuredDocumentation","src":"3367:47:43","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":4088,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3428:9:43","nodeType":"FunctionDefinition","overrides":{"id":4079,"nodeType":"OverrideSpecifier","overrides":[],"src":"3475:8:43"},"parameters":{"id":4078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4077,"mutability":"mutable","name":"account","nameLocation":"3446:7:43","nodeType":"VariableDeclaration","scope":4088,"src":"3438:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4076,"name":"address","nodeType":"ElementaryTypeName","src":"3438:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:17:43"},"returnParameters":{"id":4082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4088,"src":"3493:7:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4080,"name":"uint256","nodeType":"ElementaryTypeName","src":"3493:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3492:9:43"},"scope":4576,"src":"3419:125:43","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4621],"body":{"id":4112,"nodeType":"Block","src":"3825:104:43","statements":[{"assignments":[4100],"declarations":[{"constant":false,"id":4100,"mutability":"mutable","name":"owner","nameLocation":"3843:5:43","nodeType":"VariableDeclaration","scope":4112,"src":"3835:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4099,"name":"address","nodeType":"ElementaryTypeName","src":"3835:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4103,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4101,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"3851:10:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3851:12:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3835:28:43"},{"expression":{"arguments":[{"id":4105,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4100,"src":"3883:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4106,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4091,"src":"3890:2:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4107,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4093,"src":"3894:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4104,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"3873:9:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3873:28:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4109,"nodeType":"ExpressionStatement","src":"3873:28:43"},{"expression":{"hexValue":"74727565","id":4110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3918:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4098,"id":4111,"nodeType":"Return","src":"3911:11:43"}]},"documentation":{"id":4089,"nodeType":"StructuredDocumentation","src":"3550:185:43","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":4113,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3749:8:43","nodeType":"FunctionDefinition","overrides":{"id":4095,"nodeType":"OverrideSpecifier","overrides":[],"src":"3801:8:43"},"parameters":{"id":4094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4091,"mutability":"mutable","name":"to","nameLocation":"3766:2:43","nodeType":"VariableDeclaration","scope":4113,"src":"3758:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4090,"name":"address","nodeType":"ElementaryTypeName","src":"3758:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4093,"mutability":"mutable","name":"amount","nameLocation":"3778:6:43","nodeType":"VariableDeclaration","scope":4113,"src":"3770:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4092,"name":"uint256","nodeType":"ElementaryTypeName","src":"3770:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3757:28:43"},"returnParameters":{"id":4098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4097,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4113,"src":"3819:4:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4096,"name":"bool","nodeType":"ElementaryTypeName","src":"3819:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3818:6:43"},"scope":4576,"src":"3740:189:43","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[4631],"body":{"id":4130,"nodeType":"Block","src":"4085:51:43","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":4124,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"4102:11:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4126,"indexExpression":{"id":4125,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"4114:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4102:18:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4128,"indexExpression":{"id":4127,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"4121:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4102:27:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4123,"id":4129,"nodeType":"Return","src":"4095:34:43"}]},"documentation":{"id":4114,"nodeType":"StructuredDocumentation","src":"3935:47:43","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":4131,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3996:9:43","nodeType":"FunctionDefinition","overrides":{"id":4120,"nodeType":"OverrideSpecifier","overrides":[],"src":"4058:8:43"},"parameters":{"id":4119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4116,"mutability":"mutable","name":"owner","nameLocation":"4014:5:43","nodeType":"VariableDeclaration","scope":4131,"src":"4006:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4115,"name":"address","nodeType":"ElementaryTypeName","src":"4006:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4118,"mutability":"mutable","name":"spender","nameLocation":"4029:7:43","nodeType":"VariableDeclaration","scope":4131,"src":"4021:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4117,"name":"address","nodeType":"ElementaryTypeName","src":"4021:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4005:32:43"},"returnParameters":{"id":4123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4131,"src":"4076:7:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4121,"name":"uint256","nodeType":"ElementaryTypeName","src":"4076:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4075:9:43"},"scope":4576,"src":"3987:149:43","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[4641],"body":{"id":4155,"nodeType":"Block","src":"4533:108:43","statements":[{"assignments":[4143],"declarations":[{"constant":false,"id":4143,"mutability":"mutable","name":"owner","nameLocation":"4551:5:43","nodeType":"VariableDeclaration","scope":4155,"src":"4543:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4142,"name":"address","nodeType":"ElementaryTypeName","src":"4543:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4146,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4144,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"4559:10:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4559:12:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4543:28:43"},{"expression":{"arguments":[{"id":4148,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"4590:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4149,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"4597:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4150,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"4606:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4147,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"4581:8:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4581:32:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4152,"nodeType":"ExpressionStatement","src":"4581:32:43"},{"expression":{"hexValue":"74727565","id":4153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4630:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4141,"id":4154,"nodeType":"Return","src":"4623:11:43"}]},"documentation":{"id":4132,"nodeType":"StructuredDocumentation","src":"4142:297:43","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":4156,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4453:7:43","nodeType":"FunctionDefinition","overrides":{"id":4138,"nodeType":"OverrideSpecifier","overrides":[],"src":"4509:8:43"},"parameters":{"id":4137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4134,"mutability":"mutable","name":"spender","nameLocation":"4469:7:43","nodeType":"VariableDeclaration","scope":4156,"src":"4461:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4133,"name":"address","nodeType":"ElementaryTypeName","src":"4461:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4136,"mutability":"mutable","name":"amount","nameLocation":"4486:6:43","nodeType":"VariableDeclaration","scope":4156,"src":"4478:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4135,"name":"uint256","nodeType":"ElementaryTypeName","src":"4478:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4460:33:43"},"returnParameters":{"id":4141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4140,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4156,"src":"4527:4:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4139,"name":"bool","nodeType":"ElementaryTypeName","src":"4527:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4526:6:43"},"scope":4576,"src":"4444:197:43","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[4653],"body":{"id":4188,"nodeType":"Block","src":"5306:153:43","statements":[{"assignments":[4170],"declarations":[{"constant":false,"id":4170,"mutability":"mutable","name":"spender","nameLocation":"5324:7:43","nodeType":"VariableDeclaration","scope":4188,"src":"5316:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4169,"name":"address","nodeType":"ElementaryTypeName","src":"5316:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4173,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4171,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"5334:10:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5334:12:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5316:30:43"},{"expression":{"arguments":[{"id":4175,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"5372:4:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4176,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4170,"src":"5378:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4177,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4163,"src":"5387:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4174,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4553,"src":"5356:15:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5356:38:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4179,"nodeType":"ExpressionStatement","src":"5356:38:43"},{"expression":{"arguments":[{"id":4181,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"5414:4:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4182,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"5420:2:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4183,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4163,"src":"5424:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4180,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"5404:9:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5404:27:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4185,"nodeType":"ExpressionStatement","src":"5404:27:43"},{"expression":{"hexValue":"74727565","id":4186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5448:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4168,"id":4187,"nodeType":"Return","src":"5441:11:43"}]},"documentation":{"id":4157,"nodeType":"StructuredDocumentation","src":"4647:551:43","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":4189,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5212:12:43","nodeType":"FunctionDefinition","overrides":{"id":4165,"nodeType":"OverrideSpecifier","overrides":[],"src":"5282:8:43"},"parameters":{"id":4164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4159,"mutability":"mutable","name":"from","nameLocation":"5233:4:43","nodeType":"VariableDeclaration","scope":4189,"src":"5225:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4158,"name":"address","nodeType":"ElementaryTypeName","src":"5225:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4161,"mutability":"mutable","name":"to","nameLocation":"5247:2:43","nodeType":"VariableDeclaration","scope":4189,"src":"5239:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4160,"name":"address","nodeType":"ElementaryTypeName","src":"5239:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4163,"mutability":"mutable","name":"amount","nameLocation":"5259:6:43","nodeType":"VariableDeclaration","scope":4189,"src":"5251:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4162,"name":"uint256","nodeType":"ElementaryTypeName","src":"5251:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5224:42:43"},"returnParameters":{"id":4168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4189,"src":"5300:4:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4166,"name":"bool","nodeType":"ElementaryTypeName","src":"5300:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5299:6:43"},"scope":4576,"src":"5203:256:43","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":4217,"nodeType":"Block","src":"5948:140:43","statements":[{"assignments":[4200],"declarations":[{"constant":false,"id":4200,"mutability":"mutable","name":"owner","nameLocation":"5966:5:43","nodeType":"VariableDeclaration","scope":4217,"src":"5958:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4199,"name":"address","nodeType":"ElementaryTypeName","src":"5958:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4203,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4201,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"5974:10:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5974:12:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5958:28:43"},{"expression":{"arguments":[{"id":4205,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"6005:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4206,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"6012:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4208,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4200,"src":"6031:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4209,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"6038:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4207,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"6021:9:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":4210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6021:25:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4211,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"6049:10:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6021:38:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4204,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"5996:8:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5996:64:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4214,"nodeType":"ExpressionStatement","src":"5996:64:43"},{"expression":{"hexValue":"74727565","id":4215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6077:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4198,"id":4216,"nodeType":"Return","src":"6070:11:43"}]},"documentation":{"id":4190,"nodeType":"StructuredDocumentation","src":"5465:384:43","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":4218,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5863:17:43","nodeType":"FunctionDefinition","parameters":{"id":4195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4192,"mutability":"mutable","name":"spender","nameLocation":"5889:7:43","nodeType":"VariableDeclaration","scope":4218,"src":"5881:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4191,"name":"address","nodeType":"ElementaryTypeName","src":"5881:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4194,"mutability":"mutable","name":"addedValue","nameLocation":"5906:10:43","nodeType":"VariableDeclaration","scope":4218,"src":"5898:18:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4193,"name":"uint256","nodeType":"ElementaryTypeName","src":"5898:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5880:37:43"},"returnParameters":{"id":4198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4218,"src":"5942:4:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4196,"name":"bool","nodeType":"ElementaryTypeName","src":"5942:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5941:6:43"},"scope":4576,"src":"5854:234:43","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":4258,"nodeType":"Block","src":"6674:328:43","statements":[{"assignments":[4229],"declarations":[{"constant":false,"id":4229,"mutability":"mutable","name":"owner","nameLocation":"6692:5:43","nodeType":"VariableDeclaration","scope":4258,"src":"6684:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4228,"name":"address","nodeType":"ElementaryTypeName","src":"6684:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4232,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4230,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"6700:10:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6700:12:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6684:28:43"},{"assignments":[4234],"declarations":[{"constant":false,"id":4234,"mutability":"mutable","name":"currentAllowance","nameLocation":"6730:16:43","nodeType":"VariableDeclaration","scope":4258,"src":"6722:24:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4233,"name":"uint256","nodeType":"ElementaryTypeName","src":"6722:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4239,"initialValue":{"arguments":[{"id":4236,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"6759:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4237,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4221,"src":"6766:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4235,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"6749:9:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6749:25:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6722:52:43"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4241,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4234,"src":"6792:16:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4242,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"6812:15:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6792:35:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":4244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6829:39:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":4240,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6784:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6784:85:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4246,"nodeType":"ExpressionStatement","src":"6784:85:43"},{"id":4255,"nodeType":"UncheckedBlock","src":"6879:95:43","statements":[{"expression":{"arguments":[{"id":4248,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"6912:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4249,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4221,"src":"6919:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4250,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4234,"src":"6928:16:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4251,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"6947:15:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6928:34:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4247,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"6903:8:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6903:60:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4254,"nodeType":"ExpressionStatement","src":"6903:60:43"}]},{"expression":{"hexValue":"74727565","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6991:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4227,"id":4257,"nodeType":"Return","src":"6984:11:43"}]},"documentation":{"id":4219,"nodeType":"StructuredDocumentation","src":"6094:476:43","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":4259,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6584:17:43","nodeType":"FunctionDefinition","parameters":{"id":4224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4221,"mutability":"mutable","name":"spender","nameLocation":"6610:7:43","nodeType":"VariableDeclaration","scope":4259,"src":"6602:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4220,"name":"address","nodeType":"ElementaryTypeName","src":"6602:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4223,"mutability":"mutable","name":"subtractedValue","nameLocation":"6627:15:43","nodeType":"VariableDeclaration","scope":4259,"src":"6619:23:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4222,"name":"uint256","nodeType":"ElementaryTypeName","src":"6619:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6601:42:43"},"returnParameters":{"id":4227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4259,"src":"6668:4:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4225,"name":"bool","nodeType":"ElementaryTypeName","src":"6668:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6667:6:43"},"scope":4576,"src":"6575:427:43","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":4335,"nodeType":"Block","src":"7534:710:43","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4270,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"7552:4:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7568:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7560:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4271,"name":"address","nodeType":"ElementaryTypeName","src":"7560:7:43","typeDescriptions":{}}},"id":4274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7560:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7552:18:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":4276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7572:39:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":4269,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7544:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7544:68:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4278,"nodeType":"ExpressionStatement","src":"7544:68:43"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4280,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"7630:2:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7644:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7636:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4281,"name":"address","nodeType":"ElementaryTypeName","src":"7636:7:43","typeDescriptions":{}}},"id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7636:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7630:16:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":4286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7648:37:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":4279,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7622:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7622:64:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4288,"nodeType":"ExpressionStatement","src":"7622:64:43"},{"expression":{"arguments":[{"id":4290,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"7718:4:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4291,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"7724:2:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4292,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"7728:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4289,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"7697:20:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7697:38:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4294,"nodeType":"ExpressionStatement","src":"7697:38:43"},{"assignments":[4296],"declarations":[{"constant":false,"id":4296,"mutability":"mutable","name":"fromBalance","nameLocation":"7754:11:43","nodeType":"VariableDeclaration","scope":4335,"src":"7746:19:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4295,"name":"uint256","nodeType":"ElementaryTypeName","src":"7746:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4300,"initialValue":{"baseExpression":{"id":4297,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"7768:9:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4299,"indexExpression":{"id":4298,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"7778:4:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7768:15:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7746:37:43"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4302,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"7801:11:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4303,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"7816:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:21:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":4305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7824:40:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":4301,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7793:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7793:72:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4307,"nodeType":"ExpressionStatement","src":"7793:72:43"},{"id":4322,"nodeType":"UncheckedBlock","src":"7875:273:43","statements":[{"expression":{"id":4314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4308,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"7899:9:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4310,"indexExpression":{"id":4309,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"7909:4:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7899:15:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4311,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4296,"src":"7917:11:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4312,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"7931:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7917:20:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:38:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4315,"nodeType":"ExpressionStatement","src":"7899:38:43"},{"expression":{"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4316,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"8114:9:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4318,"indexExpression":{"id":4317,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"8124:2:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8114:13:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4319,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"8131:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8114:23:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4321,"nodeType":"ExpressionStatement","src":"8114:23:43"}]},{"eventCall":{"arguments":[{"id":4324,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"8172:4:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4325,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"8178:2:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4326,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"8182:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4323,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"8163:8:43","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8163:26:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4328,"nodeType":"EmitStatement","src":"8158:31:43"},{"expression":{"arguments":[{"id":4330,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"8220:4:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4331,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"8226:2:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4332,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"8230:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4329,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4575,"src":"8200:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8200:37:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4334,"nodeType":"ExpressionStatement","src":"8200:37:43"}]},"documentation":{"id":4260,"nodeType":"StructuredDocumentation","src":"7008:443:43","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":4336,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7465:9:43","nodeType":"FunctionDefinition","parameters":{"id":4267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4262,"mutability":"mutable","name":"from","nameLocation":"7483:4:43","nodeType":"VariableDeclaration","scope":4336,"src":"7475:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4261,"name":"address","nodeType":"ElementaryTypeName","src":"7475:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4264,"mutability":"mutable","name":"to","nameLocation":"7497:2:43","nodeType":"VariableDeclaration","scope":4336,"src":"7489:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4263,"name":"address","nodeType":"ElementaryTypeName","src":"7489:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4266,"mutability":"mutable","name":"amount","nameLocation":"7509:6:43","nodeType":"VariableDeclaration","scope":4336,"src":"7501:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4265,"name":"uint256","nodeType":"ElementaryTypeName","src":"7501:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7474:42:43"},"returnParameters":{"id":4268,"nodeType":"ParameterList","parameters":[],"src":"7534:0:43"},"scope":4576,"src":"7456:788:43","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4392,"nodeType":"Block","src":"8585:470:43","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4345,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"8603:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8622:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8614:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4346,"name":"address","nodeType":"ElementaryTypeName","src":"8614:7:43","typeDescriptions":{}}},"id":4349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8614:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8603:21:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":4351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8626:33:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":4344,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8595:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8595:65:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4353,"nodeType":"ExpressionStatement","src":"8595:65:43"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":4357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8700:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8692:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4355,"name":"address","nodeType":"ElementaryTypeName","src":"8692:7:43","typeDescriptions":{}}},"id":4358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8692:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4359,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"8704:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4360,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"8713:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4354,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"8671:20:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8671:49:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4362,"nodeType":"ExpressionStatement","src":"8671:49:43"},{"expression":{"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4363,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"8731:12:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4364,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"8747:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8731:22:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4366,"nodeType":"ExpressionStatement","src":"8731:22:43"},{"id":4373,"nodeType":"UncheckedBlock","src":"8763:175:43","statements":[{"expression":{"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4367,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"8899:9:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4369,"indexExpression":{"id":4368,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"8909:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8899:18:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4370,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"8921:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8899:28:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4372,"nodeType":"ExpressionStatement","src":"8899:28:43"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":4377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8961:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4375,"name":"address","nodeType":"ElementaryTypeName","src":"8961:7:43","typeDescriptions":{}}},"id":4378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8961:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4379,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"8973:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4380,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"8982:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4374,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"8952:8:43","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8952:37:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4382,"nodeType":"EmitStatement","src":"8947:42:43"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":4386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9028:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9020:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4384,"name":"address","nodeType":"ElementaryTypeName","src":"9020:7:43","typeDescriptions":{}}},"id":4387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9020:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4388,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"9032:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4389,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"9041:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4383,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4575,"src":"9000:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9000:48:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4391,"nodeType":"ExpressionStatement","src":"9000:48:43"}]},"documentation":{"id":4337,"nodeType":"StructuredDocumentation","src":"8250:265:43","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":4393,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8529:5:43","nodeType":"FunctionDefinition","parameters":{"id":4342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4339,"mutability":"mutable","name":"account","nameLocation":"8543:7:43","nodeType":"VariableDeclaration","scope":4393,"src":"8535:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4338,"name":"address","nodeType":"ElementaryTypeName","src":"8535:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4341,"mutability":"mutable","name":"amount","nameLocation":"8560:6:43","nodeType":"VariableDeclaration","scope":4393,"src":"8552:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4340,"name":"uint256","nodeType":"ElementaryTypeName","src":"8552:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8534:33:43"},"returnParameters":{"id":4343,"nodeType":"ParameterList","parameters":[],"src":"8585:0:43"},"scope":4576,"src":"8520:535:43","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4464,"nodeType":"Block","src":"9440:594:43","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4402,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"9458:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9477:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9469:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4403,"name":"address","nodeType":"ElementaryTypeName","src":"9469:7:43","typeDescriptions":{}}},"id":4406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9469:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9458:21:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":4408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9481:35:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":4401,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9450:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9450:67:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4410,"nodeType":"ExpressionStatement","src":"9450:67:43"},{"expression":{"arguments":[{"id":4412,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"9549:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9566:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9558:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4413,"name":"address","nodeType":"ElementaryTypeName","src":"9558:7:43","typeDescriptions":{}}},"id":4416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9558:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4417,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"9570:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4411,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4564,"src":"9528:20:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9528:49:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4419,"nodeType":"ExpressionStatement","src":"9528:49:43"},{"assignments":[4421],"declarations":[{"constant":false,"id":4421,"mutability":"mutable","name":"accountBalance","nameLocation":"9596:14:43","nodeType":"VariableDeclaration","scope":4464,"src":"9588:22:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4420,"name":"uint256","nodeType":"ElementaryTypeName","src":"9588:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4425,"initialValue":{"baseExpression":{"id":4422,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"9613:9:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4424,"indexExpression":{"id":4423,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"9623:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9613:18:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9588:43:43"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4427,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"9649:14:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4428,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"9667:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9649:24:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":4430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9675:36:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":4426,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9641:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9641:71:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4432,"nodeType":"ExpressionStatement","src":"9641:71:43"},{"id":4445,"nodeType":"UncheckedBlock","src":"9722:194:43","statements":[{"expression":{"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4433,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"9746:9:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4435,"indexExpression":{"id":4434,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"9756:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9746:18:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4436,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"9767:14:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4437,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"9784:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9767:23:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9746:44:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4440,"nodeType":"ExpressionStatement","src":"9746:44:43"},{"expression":{"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4441,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"9883:12:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4442,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"9899:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9883:22:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4444,"nodeType":"ExpressionStatement","src":"9883:22:43"}]},{"eventCall":{"arguments":[{"id":4447,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"9940:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9957:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9949:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4448,"name":"address","nodeType":"ElementaryTypeName","src":"9949:7:43","typeDescriptions":{}}},"id":4451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9949:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4452,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"9961:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4446,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"9931:8:43","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9931:37:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4454,"nodeType":"EmitStatement","src":"9926:42:43"},{"expression":{"arguments":[{"id":4456,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"9999:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10016:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10008:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4457,"name":"address","nodeType":"ElementaryTypeName","src":"10008:7:43","typeDescriptions":{}}},"id":4460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10008:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4461,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10020:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4455,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4575,"src":"9979:19:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9979:48:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4463,"nodeType":"ExpressionStatement","src":"9979:48:43"}]},"documentation":{"id":4394,"nodeType":"StructuredDocumentation","src":"9061:309:43","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":4465,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9384:5:43","nodeType":"FunctionDefinition","parameters":{"id":4399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4396,"mutability":"mutable","name":"account","nameLocation":"9398:7:43","nodeType":"VariableDeclaration","scope":4465,"src":"9390:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4395,"name":"address","nodeType":"ElementaryTypeName","src":"9390:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4398,"mutability":"mutable","name":"amount","nameLocation":"9415:6:43","nodeType":"VariableDeclaration","scope":4465,"src":"9407:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4397,"name":"uint256","nodeType":"ElementaryTypeName","src":"9407:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9389:33:43"},"returnParameters":{"id":4400,"nodeType":"ParameterList","parameters":[],"src":"9440:0:43"},"scope":4576,"src":"9375:659:43","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4509,"nodeType":"Block","src":"10540:257:43","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4476,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"10558:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10575:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10567:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4477,"name":"address","nodeType":"ElementaryTypeName","src":"10567:7:43","typeDescriptions":{}}},"id":4480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10567:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10558:19:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":4482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10579:38:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":4475,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10550:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10550:68:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4484,"nodeType":"ExpressionStatement","src":"10550:68:43"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4486,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4470,"src":"10636:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10655:1:43","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10647:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4487,"name":"address","nodeType":"ElementaryTypeName","src":"10647:7:43","typeDescriptions":{}}},"id":4490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10647:10:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10636:21:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":4492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10659:36:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":4485,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10628:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10628:68:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4494,"nodeType":"ExpressionStatement","src":"10628:68:43"},{"expression":{"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4495,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"10707:11:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4498,"indexExpression":{"id":4496,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"10719:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10707:18:43","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4499,"indexExpression":{"id":4497,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4470,"src":"10726:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10707:27:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4500,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"10737:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10707:36:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4502,"nodeType":"ExpressionStatement","src":"10707:36:43"},{"eventCall":{"arguments":[{"id":4504,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"10767:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4505,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4470,"src":"10774:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4506,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"10783:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4503,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"10758:8:43","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10758:32:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4508,"nodeType":"EmitStatement","src":"10753:37:43"}]},"documentation":{"id":4466,"nodeType":"StructuredDocumentation","src":"10040:412:43","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":4510,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10466:8:43","nodeType":"FunctionDefinition","parameters":{"id":4473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4468,"mutability":"mutable","name":"owner","nameLocation":"10483:5:43","nodeType":"VariableDeclaration","scope":4510,"src":"10475:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4467,"name":"address","nodeType":"ElementaryTypeName","src":"10475:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4470,"mutability":"mutable","name":"spender","nameLocation":"10498:7:43","nodeType":"VariableDeclaration","scope":4510,"src":"10490:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4469,"name":"address","nodeType":"ElementaryTypeName","src":"10490:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4472,"mutability":"mutable","name":"amount","nameLocation":"10515:6:43","nodeType":"VariableDeclaration","scope":4510,"src":"10507:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4471,"name":"uint256","nodeType":"ElementaryTypeName","src":"10507:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10474:48:43"},"returnParameters":{"id":4474,"nodeType":"ParameterList","parameters":[],"src":"10540:0:43"},"scope":4576,"src":"10457:340:43","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4552,"nodeType":"Block","src":"11168:321:43","statements":[{"assignments":[4521],"declarations":[{"constant":false,"id":4521,"mutability":"mutable","name":"currentAllowance","nameLocation":"11186:16:43","nodeType":"VariableDeclaration","scope":4552,"src":"11178:24:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4520,"name":"uint256","nodeType":"ElementaryTypeName","src":"11178:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4526,"initialValue":{"arguments":[{"id":4523,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4513,"src":"11215:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4524,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"11222:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4522,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"11205:9:43","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11205:25:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11178:52:43"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4527,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"11244:16:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":4530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11269:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4529,"name":"uint256","nodeType":"ElementaryTypeName","src":"11269:7:43","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":4528,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11264:4:43","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11264:13:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":4532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11278:3:43","memberName":"max","nodeType":"MemberAccess","src":"11264:17:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11244:37:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4551,"nodeType":"IfStatement","src":"11240:243:43","trueBody":{"id":4550,"nodeType":"Block","src":"11283:200:43","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4535,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"11305:16:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4536,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"11325:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11305:26:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":4538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11333:31:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":4534,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11297:7:43","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11297:68:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4540,"nodeType":"ExpressionStatement","src":"11297:68:43"},{"id":4549,"nodeType":"UncheckedBlock","src":"11379:94:43","statements":[{"expression":{"arguments":[{"id":4542,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4513,"src":"11416:5:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4543,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4515,"src":"11423:7:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4544,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"11432:16:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4545,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"11451:6:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11432:25:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4541,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"11407:8:43","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11407:51:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4548,"nodeType":"ExpressionStatement","src":"11407:51:43"}]}]}}]},"documentation":{"id":4511,"nodeType":"StructuredDocumentation","src":"10803:270:43","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":4553,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11087:15:43","nodeType":"FunctionDefinition","parameters":{"id":4518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4513,"mutability":"mutable","name":"owner","nameLocation":"11111:5:43","nodeType":"VariableDeclaration","scope":4553,"src":"11103:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4512,"name":"address","nodeType":"ElementaryTypeName","src":"11103:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4515,"mutability":"mutable","name":"spender","nameLocation":"11126:7:43","nodeType":"VariableDeclaration","scope":4553,"src":"11118:15:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4514,"name":"address","nodeType":"ElementaryTypeName","src":"11118:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4517,"mutability":"mutable","name":"amount","nameLocation":"11143:6:43","nodeType":"VariableDeclaration","scope":4553,"src":"11135:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4516,"name":"uint256","nodeType":"ElementaryTypeName","src":"11135:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11102:48:43"},"returnParameters":{"id":4519,"nodeType":"ParameterList","parameters":[],"src":"11168:0:43"},"scope":4576,"src":"11078:411:43","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4563,"nodeType":"Block","src":"12162:2:43","statements":[]},"documentation":{"id":4554,"nodeType":"StructuredDocumentation","src":"11495:573:43","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":4564,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12082:20:43","nodeType":"FunctionDefinition","parameters":{"id":4561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4556,"mutability":"mutable","name":"from","nameLocation":"12111:4:43","nodeType":"VariableDeclaration","scope":4564,"src":"12103:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4555,"name":"address","nodeType":"ElementaryTypeName","src":"12103:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4558,"mutability":"mutable","name":"to","nameLocation":"12125:2:43","nodeType":"VariableDeclaration","scope":4564,"src":"12117:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4557,"name":"address","nodeType":"ElementaryTypeName","src":"12117:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4560,"mutability":"mutable","name":"amount","nameLocation":"12137:6:43","nodeType":"VariableDeclaration","scope":4564,"src":"12129:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4559,"name":"uint256","nodeType":"ElementaryTypeName","src":"12129:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12102:42:43"},"returnParameters":{"id":4562,"nodeType":"ParameterList","parameters":[],"src":"12162:0:43"},"scope":4576,"src":"12073:91:43","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4574,"nodeType":"Block","src":"12840:2:43","statements":[]},"documentation":{"id":4565,"nodeType":"StructuredDocumentation","src":"12170:577:43","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":4575,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12761:19:43","nodeType":"FunctionDefinition","parameters":{"id":4572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4567,"mutability":"mutable","name":"from","nameLocation":"12789:4:43","nodeType":"VariableDeclaration","scope":4575,"src":"12781:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4566,"name":"address","nodeType":"ElementaryTypeName","src":"12781:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4569,"mutability":"mutable","name":"to","nameLocation":"12803:2:43","nodeType":"VariableDeclaration","scope":4575,"src":"12795:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4568,"name":"address","nodeType":"ElementaryTypeName","src":"12795:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4571,"mutability":"mutable","name":"amount","nameLocation":"12815:6:43","nodeType":"VariableDeclaration","scope":4575,"src":"12807:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4570,"name":"uint256","nodeType":"ElementaryTypeName","src":"12807:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12780:42:43"},"returnParameters":{"id":4573,"nodeType":"ParameterList","parameters":[],"src":"12840:0:43"},"scope":4576,"src":"12752:90:43","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":4577,"src":"1532:11312:43","usedErrors":[]}],"src":"105:12740:43"},"id":43},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[4654]},"id":4655,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4578,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:44"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":4579,"nodeType":"StructuredDocumentation","src":"131:70:44","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":4654,"linearizedBaseContracts":[4654],"name":"IERC20","nameLocation":"212:6:44","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":4580,"nodeType":"StructuredDocumentation","src":"225:158:44","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":4588,"name":"Transfer","nameLocation":"394:8:44","nodeType":"EventDefinition","parameters":{"id":4587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4582,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:44","nodeType":"VariableDeclaration","scope":4588,"src":"403:20:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4581,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4584,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:44","nodeType":"VariableDeclaration","scope":4588,"src":"425:18:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4583,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4586,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:44","nodeType":"VariableDeclaration","scope":4588,"src":"445:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4585,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:44"},"src":"388:72:44"},{"anonymous":false,"documentation":{"id":4589,"nodeType":"StructuredDocumentation","src":"466:148:44","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":4597,"name":"Approval","nameLocation":"625:8:44","nodeType":"EventDefinition","parameters":{"id":4596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4591,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:44","nodeType":"VariableDeclaration","scope":4597,"src":"634:21:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4590,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4593,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:44","nodeType":"VariableDeclaration","scope":4597,"src":"657:23:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4592,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4595,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:44","nodeType":"VariableDeclaration","scope":4597,"src":"682:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4594,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:44"},"src":"619:78:44"},{"documentation":{"id":4598,"nodeType":"StructuredDocumentation","src":"703:66:44","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":4603,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:44","nodeType":"FunctionDefinition","parameters":{"id":4599,"nodeType":"ParameterList","parameters":[],"src":"794:2:44"},"returnParameters":{"id":4602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4603,"src":"820:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4600,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:44"},"scope":4654,"src":"774:55:44","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4604,"nodeType":"StructuredDocumentation","src":"835:72:44","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":4611,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:44","nodeType":"FunctionDefinition","parameters":{"id":4607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4606,"mutability":"mutable","name":"account","nameLocation":"939:7:44","nodeType":"VariableDeclaration","scope":4611,"src":"931:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4605,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:44"},"returnParameters":{"id":4610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4611,"src":"971:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4608,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:44"},"scope":4654,"src":"912:68:44","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4612,"nodeType":"StructuredDocumentation","src":"986:202:44","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":4621,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:44","nodeType":"FunctionDefinition","parameters":{"id":4617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4614,"mutability":"mutable","name":"to","nameLocation":"1219:2:44","nodeType":"VariableDeclaration","scope":4621,"src":"1211:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4613,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4616,"mutability":"mutable","name":"amount","nameLocation":"1231:6:44","nodeType":"VariableDeclaration","scope":4621,"src":"1223:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4615,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:44"},"returnParameters":{"id":4620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4621,"src":"1257:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4618,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:44"},"scope":4654,"src":"1193:70:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4622,"nodeType":"StructuredDocumentation","src":"1269:264:44","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":4631,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:44","nodeType":"FunctionDefinition","parameters":{"id":4627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4624,"mutability":"mutable","name":"owner","nameLocation":"1565:5:44","nodeType":"VariableDeclaration","scope":4631,"src":"1557:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4623,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4626,"mutability":"mutable","name":"spender","nameLocation":"1580:7:44","nodeType":"VariableDeclaration","scope":4631,"src":"1572:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4625,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:44"},"returnParameters":{"id":4630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4631,"src":"1612:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:44"},"scope":4654,"src":"1538:83:44","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4632,"nodeType":"StructuredDocumentation","src":"1627:642:44","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":4641,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:44","nodeType":"FunctionDefinition","parameters":{"id":4637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4634,"mutability":"mutable","name":"spender","nameLocation":"2299:7:44","nodeType":"VariableDeclaration","scope":4641,"src":"2291:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4633,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4636,"mutability":"mutable","name":"amount","nameLocation":"2316:6:44","nodeType":"VariableDeclaration","scope":4641,"src":"2308:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4635,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:44"},"returnParameters":{"id":4640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4641,"src":"2342:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4638,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:44"},"scope":4654,"src":"2274:74:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4642,"nodeType":"StructuredDocumentation","src":"2354:287:44","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":4653,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:44","nodeType":"FunctionDefinition","parameters":{"id":4649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4644,"mutability":"mutable","name":"from","nameLocation":"2676:4:44","nodeType":"VariableDeclaration","scope":4653,"src":"2668:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4643,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4646,"mutability":"mutable","name":"to","nameLocation":"2690:2:44","nodeType":"VariableDeclaration","scope":4653,"src":"2682:10:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4645,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4648,"mutability":"mutable","name":"amount","nameLocation":"2702:6:44","nodeType":"VariableDeclaration","scope":4653,"src":"2694:14:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4647,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:44"},"returnParameters":{"id":4652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4653,"src":"2728:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4650,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:44"},"scope":4654,"src":"2646:88:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4655,"src":"202:2534:44","usedErrors":[]}],"src":"106:2631:44"},"id":44},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[4654],"IERC20Metadata":[4679]},"id":4680,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4656,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:45"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":4657,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4680,"sourceUnit":4655,"src":"135:23:45","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4659,"name":"IERC20","nameLocations":["305:6:45"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"305:6:45"},"id":4660,"nodeType":"InheritanceSpecifier","src":"305:6:45"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":4658,"nodeType":"StructuredDocumentation","src":"160:116:45","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":4679,"linearizedBaseContracts":[4679,4654],"name":"IERC20Metadata","nameLocation":"287:14:45","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4661,"nodeType":"StructuredDocumentation","src":"318:54:45","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":4666,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:45","nodeType":"FunctionDefinition","parameters":{"id":4662,"nodeType":"ParameterList","parameters":[],"src":"390:2:45"},"returnParameters":{"id":4665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4666,"src":"416:13:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4663,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:45","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:45"},"scope":4679,"src":"377:54:45","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4667,"nodeType":"StructuredDocumentation","src":"437:56:45","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":4672,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:45","nodeType":"FunctionDefinition","parameters":{"id":4668,"nodeType":"ParameterList","parameters":[],"src":"513:2:45"},"returnParameters":{"id":4671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4672,"src":"539:13:45","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4669,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:45","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:45"},"scope":4679,"src":"498:56:45","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4673,"nodeType":"StructuredDocumentation","src":"560:65:45","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":4678,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:45","nodeType":"FunctionDefinition","parameters":{"id":4674,"nodeType":"ParameterList","parameters":[],"src":"647:2:45"},"returnParameters":{"id":4677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4678,"src":"673:5:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4675,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:45","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:45"},"scope":4679,"src":"630:50:45","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4680,"src":"277:405:45","usedErrors":[]}],"src":"110:573:45"},"id":45},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[4715]},"id":4716,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4681,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:46"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":4682,"nodeType":"StructuredDocumentation","src":"148:1963:46","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":4715,"linearizedBaseContracts":[4715],"name":"IERC20Permit","nameLocation":"2122:12:46","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4683,"nodeType":"StructuredDocumentation","src":"2141:850:46","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":4700,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3005:6:46","nodeType":"FunctionDefinition","parameters":{"id":4698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4685,"mutability":"mutable","name":"owner","nameLocation":"3029:5:46","nodeType":"VariableDeclaration","scope":4700,"src":"3021:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4684,"name":"address","nodeType":"ElementaryTypeName","src":"3021:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4687,"mutability":"mutable","name":"spender","nameLocation":"3052:7:46","nodeType":"VariableDeclaration","scope":4700,"src":"3044:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4686,"name":"address","nodeType":"ElementaryTypeName","src":"3044:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4689,"mutability":"mutable","name":"value","nameLocation":"3077:5:46","nodeType":"VariableDeclaration","scope":4700,"src":"3069:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4688,"name":"uint256","nodeType":"ElementaryTypeName","src":"3069:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4691,"mutability":"mutable","name":"deadline","nameLocation":"3100:8:46","nodeType":"VariableDeclaration","scope":4700,"src":"3092:16:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4690,"name":"uint256","nodeType":"ElementaryTypeName","src":"3092:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4693,"mutability":"mutable","name":"v","nameLocation":"3124:1:46","nodeType":"VariableDeclaration","scope":4700,"src":"3118:7:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4692,"name":"uint8","nodeType":"ElementaryTypeName","src":"3118:5:46","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4695,"mutability":"mutable","name":"r","nameLocation":"3143:1:46","nodeType":"VariableDeclaration","scope":4700,"src":"3135:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3135:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4697,"mutability":"mutable","name":"s","nameLocation":"3162:1:46","nodeType":"VariableDeclaration","scope":4700,"src":"3154:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4696,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3154:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3011:158:46"},"returnParameters":{"id":4699,"nodeType":"ParameterList","parameters":[],"src":"3178:0:46"},"scope":4715,"src":"2996:183:46","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4701,"nodeType":"StructuredDocumentation","src":"3185:294:46","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":4708,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3493:6:46","nodeType":"FunctionDefinition","parameters":{"id":4704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4703,"mutability":"mutable","name":"owner","nameLocation":"3508:5:46","nodeType":"VariableDeclaration","scope":4708,"src":"3500:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4702,"name":"address","nodeType":"ElementaryTypeName","src":"3500:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3499:15:46"},"returnParameters":{"id":4707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4708,"src":"3538:7:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4705,"name":"uint256","nodeType":"ElementaryTypeName","src":"3538:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3537:9:46"},"scope":4715,"src":"3484:63:46","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4709,"nodeType":"StructuredDocumentation","src":"3553:128:46","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":4714,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3748:16:46","nodeType":"FunctionDefinition","parameters":{"id":4710,"nodeType":"ParameterList","parameters":[],"src":"3764:2:46"},"returnParameters":{"id":4713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4714,"src":"3790:7:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4711,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3790:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3789:9:46"},"scope":4715,"src":"3739:60:46","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4716,"src":"2112:1689:46","usedErrors":[]}],"src":"123:3679:46"},"id":46},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[5421],"IERC20":[4654],"IERC20Permit":[4715],"SafeERC20":[5091]},"id":5092,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4717,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:47"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":4718,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5092,"sourceUnit":4655,"src":"140:23:47","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":4719,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5092,"sourceUnit":4716,"src":"164:40:47","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":4720,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5092,"sourceUnit":5422,"src":"205:36:47","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":4721,"nodeType":"StructuredDocumentation","src":"243:457:47","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":5091,"linearizedBaseContracts":[5091],"name":"SafeERC20","nameLocation":"709:9:47","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4724,"libraryName":{"id":4722,"name":"Address","nameLocations":["731:7:47"],"nodeType":"IdentifierPath","referencedDeclaration":5421,"src":"731:7:47"},"nodeType":"UsingForDirective","src":"725:26:47","typeName":{"id":4723,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":4747,"nodeType":"Block","src":"1013:103:47","statements":[{"expression":{"arguments":[{"id":4736,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4728,"src":"1043:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4739,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4728,"src":"1073:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:47","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":4621,"src":"1073:14:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:47","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4742,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4730,"src":"1098:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4732,"src":"1102:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4737,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:47","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4735,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"1023:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4746,"nodeType":"ExpressionStatement","src":"1023:86:47"}]},"documentation":{"id":4725,"nodeType":"StructuredDocumentation","src":"757:179:47","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":4748,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:47","nodeType":"FunctionDefinition","parameters":{"id":4733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4728,"mutability":"mutable","name":"token","nameLocation":"970:5:47","nodeType":"VariableDeclaration","scope":4748,"src":"963:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},"typeName":{"id":4727,"nodeType":"UserDefinedTypeName","pathNode":{"id":4726,"name":"IERC20","nameLocations":["963:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"963:6:47"},"referencedDeclaration":4654,"src":"963:6:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4730,"mutability":"mutable","name":"to","nameLocation":"985:2:47","nodeType":"VariableDeclaration","scope":4748,"src":"977:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4729,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4732,"mutability":"mutable","name":"value","nameLocation":"997:5:47","nodeType":"VariableDeclaration","scope":4748,"src":"989:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4731,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:47"},"returnParameters":{"id":4734,"nodeType":"ParameterList","parameters":[],"src":"1013:0:47"},"scope":5091,"src":"941:175:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4774,"nodeType":"Block","src":"1445:113:47","statements":[{"expression":{"arguments":[{"id":4762,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"1475:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4765,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"1505:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:47","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"1505:18:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:47","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4768,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"1534:4:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4769,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"1540:2:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"1544:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4763,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:47","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4761,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"1455:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4773,"nodeType":"ExpressionStatement","src":"1455:96:47"}]},"documentation":{"id":4749,"nodeType":"StructuredDocumentation","src":"1122:228:47","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":4775,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:47","nodeType":"FunctionDefinition","parameters":{"id":4759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4752,"mutability":"mutable","name":"token","nameLocation":"1388:5:47","nodeType":"VariableDeclaration","scope":4775,"src":"1381:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},"typeName":{"id":4751,"nodeType":"UserDefinedTypeName","pathNode":{"id":4750,"name":"IERC20","nameLocations":["1381:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"1381:6:47"},"referencedDeclaration":4654,"src":"1381:6:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4754,"mutability":"mutable","name":"from","nameLocation":"1403:4:47","nodeType":"VariableDeclaration","scope":4775,"src":"1395:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4753,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4756,"mutability":"mutable","name":"to","nameLocation":"1417:2:47","nodeType":"VariableDeclaration","scope":4775,"src":"1409:10:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4755,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4758,"mutability":"mutable","name":"value","nameLocation":"1429:5:47","nodeType":"VariableDeclaration","scope":4775,"src":"1421:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4757,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:47"},"returnParameters":{"id":4760,"nodeType":"ParameterList","parameters":[],"src":"1445:0:47"},"scope":5091,"src":"1355:203:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4818,"nodeType":"Block","src":"1894:497:47","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"2143:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4790,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4795,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:47","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$5091","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$5091","typeString":"library SafeERC20"}],"id":4794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4793,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:47","typeDescriptions":{}}},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4797,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4781,"src":"2190:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4791,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4779,"src":"2159:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:47","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"2159:15:47","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4801,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":4803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":4786,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4805,"nodeType":"ExpressionStatement","src":"2121:163:47"},{"expression":{"arguments":[{"id":4807,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4779,"src":"2314:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4810,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4779,"src":"2344:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:47","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":4641,"src":"2344:13:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:47","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4813,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4781,"src":"2368:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"2377:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4808,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:47","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4806,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"2294:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4817,"nodeType":"ExpressionStatement","src":"2294:90:47"}]},"documentation":{"id":4776,"nodeType":"StructuredDocumentation","src":"1564:249:47","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":4819,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:47","nodeType":"FunctionDefinition","parameters":{"id":4784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4779,"mutability":"mutable","name":"token","nameLocation":"1846:5:47","nodeType":"VariableDeclaration","scope":4819,"src":"1839:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},"typeName":{"id":4778,"nodeType":"UserDefinedTypeName","pathNode":{"id":4777,"name":"IERC20","nameLocations":["1839:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"1839:6:47"},"referencedDeclaration":4654,"src":"1839:6:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4781,"mutability":"mutable","name":"spender","nameLocation":"1861:7:47","nodeType":"VariableDeclaration","scope":4819,"src":"1853:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4780,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4783,"mutability":"mutable","name":"value","nameLocation":"1878:5:47","nodeType":"VariableDeclaration","scope":4819,"src":"1870:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4782,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:47"},"returnParameters":{"id":4785,"nodeType":"ParameterList","parameters":[],"src":"1894:0:47"},"scope":5091,"src":"1818:573:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4855,"nodeType":"Block","src":"2668:194:47","statements":[{"assignments":[4831],"declarations":[{"constant":false,"id":4831,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:47","nodeType":"VariableDeclaration","scope":4855,"src":"2678:20:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4830,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4840,"initialValue":{"arguments":[{"arguments":[{"id":4836,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:47","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$5091","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$5091","typeString":"library SafeERC20"}],"id":4835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4834,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:47","typeDescriptions":{}}},"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4838,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"2732:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4832,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"2701:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:47","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"2701:15:47","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:47"},{"expression":{"arguments":[{"id":4842,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"2770:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4845,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"2800:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:47","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":4641,"src":"2800:13:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:47","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4848,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"2824:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4849,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"2833:12:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4850,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4827,"src":"2848:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4843,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:47","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4841,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"2750:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4854,"nodeType":"ExpressionStatement","src":"2750:105:47"}]},"documentation":{"id":4820,"nodeType":"StructuredDocumentation","src":"2397:180:47","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":4856,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:47","nodeType":"FunctionDefinition","parameters":{"id":4828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4823,"mutability":"mutable","name":"token","nameLocation":"2620:5:47","nodeType":"VariableDeclaration","scope":4856,"src":"2613:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},"typeName":{"id":4822,"nodeType":"UserDefinedTypeName","pathNode":{"id":4821,"name":"IERC20","nameLocations":["2613:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"2613:6:47"},"referencedDeclaration":4654,"src":"2613:6:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4825,"mutability":"mutable","name":"spender","nameLocation":"2635:7:47","nodeType":"VariableDeclaration","scope":4856,"src":"2627:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4824,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4827,"mutability":"mutable","name":"value","nameLocation":"2652:5:47","nodeType":"VariableDeclaration","scope":4856,"src":"2644:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4826,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:47"},"returnParameters":{"id":4829,"nodeType":"ParameterList","parameters":[],"src":"2668:0:47"},"scope":5091,"src":"2582:280:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4900,"nodeType":"Block","src":"3139:321:47","statements":[{"id":4899,"nodeType":"UncheckedBlock","src":"3149:305:47","statements":[{"assignments":[4868],"declarations":[{"constant":false,"id":4868,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:47","nodeType":"VariableDeclaration","scope":4899,"src":"3173:20:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4867,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4877,"initialValue":{"arguments":[{"arguments":[{"id":4873,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:47","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$5091","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$5091","typeString":"library SafeERC20"}],"id":4872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4871,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:47","typeDescriptions":{}}},"id":4874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4875,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"3227:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4869,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4860,"src":"3196:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:47","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"3196:15:47","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4879,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"3257:12:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4880,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"3273:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":4882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":4878,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4884,"nodeType":"ExpressionStatement","src":"3249:75:47"},{"expression":{"arguments":[{"id":4886,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4860,"src":"3358:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4889,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4860,"src":"3388:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:47","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":4641,"src":"3388:13:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:47","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4892,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"3412:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4893,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4868,"src":"3421:12:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4864,"src":"3436:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4887,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:47","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4885,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"3338:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4898,"nodeType":"ExpressionStatement","src":"3338:105:47"}]}]},"documentation":{"id":4857,"nodeType":"StructuredDocumentation","src":"2868:180:47","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":4901,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:47","nodeType":"FunctionDefinition","parameters":{"id":4865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4860,"mutability":"mutable","name":"token","nameLocation":"3091:5:47","nodeType":"VariableDeclaration","scope":4901,"src":"3084:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},"typeName":{"id":4859,"nodeType":"UserDefinedTypeName","pathNode":{"id":4858,"name":"IERC20","nameLocations":["3084:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"3084:6:47"},"referencedDeclaration":4654,"src":"3084:6:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4862,"mutability":"mutable","name":"spender","nameLocation":"3106:7:47","nodeType":"VariableDeclaration","scope":4901,"src":"3098:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4861,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4864,"mutability":"mutable","name":"value","nameLocation":"3123:5:47","nodeType":"VariableDeclaration","scope":4901,"src":"3115:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4863,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:47"},"returnParameters":{"id":4866,"nodeType":"ParameterList","parameters":[],"src":"3139:0:47"},"scope":5091,"src":"3053:407:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4947,"nodeType":"Block","src":"3856:333:47","statements":[{"assignments":[4913],"declarations":[{"constant":false,"id":4913,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:47","nodeType":"VariableDeclaration","scope":4947,"src":"3866:25:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4912,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4922,"initialValue":{"arguments":[{"expression":{"expression":{"id":4916,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"3917:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:47","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":4641,"src":"3917:13:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:47","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4919,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4907,"src":"3941:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4920,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"3950:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4914,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:47","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:47"},{"condition":{"id":4927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:47","subExpression":{"arguments":[{"id":4924,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"3996:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},{"id":4925,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4913,"src":"4003:12:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4923,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5090,"src":"3972:23:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":4926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4946,"nodeType":"IfStatement","src":"3967:216:47","trueBody":{"id":4945,"nodeType":"Block","src":"4018:165:47","statements":[{"expression":{"arguments":[{"id":4929,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"4052:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4932,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"4082:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:47","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":4641,"src":"4082:13:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:47","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:47","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4935,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4907,"src":"4106:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":4930,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:47","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:47","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4928,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"4032:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4939,"nodeType":"ExpressionStatement","src":"4032:86:47"},{"expression":{"arguments":[{"id":4941,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"4152:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},{"id":4942,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4913,"src":"4159:12:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4940,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5042,"src":"4132:19:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4944,"nodeType":"ExpressionStatement","src":"4132:40:47"}]}}]},"documentation":{"id":4902,"nodeType":"StructuredDocumentation","src":"3466:308:47","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":4948,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:47","nodeType":"FunctionDefinition","parameters":{"id":4910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4905,"mutability":"mutable","name":"token","nameLocation":"3808:5:47","nodeType":"VariableDeclaration","scope":4948,"src":"3801:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},"typeName":{"id":4904,"nodeType":"UserDefinedTypeName","pathNode":{"id":4903,"name":"IERC20","nameLocations":["3801:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"3801:6:47"},"referencedDeclaration":4654,"src":"3801:6:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4907,"mutability":"mutable","name":"spender","nameLocation":"3823:7:47","nodeType":"VariableDeclaration","scope":4948,"src":"3815:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4906,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4909,"mutability":"mutable","name":"value","nameLocation":"3840:5:47","nodeType":"VariableDeclaration","scope":4948,"src":"3832:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4908,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:47"},"returnParameters":{"id":4911,"nodeType":"ParameterList","parameters":[],"src":"3856:0:47"},"scope":5091,"src":"3779:410:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5004,"nodeType":"Block","src":"4556:257:47","statements":[{"assignments":[4970],"declarations":[{"constant":false,"id":4970,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:47","nodeType":"VariableDeclaration","scope":5004,"src":"4566:19:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4969,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4975,"initialValue":{"arguments":[{"id":4973,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"4601:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4971,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"4588:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4715","typeString":"contract IERC20Permit"}},"id":4972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:47","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":4708,"src":"4588:12:47","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:47"},{"expression":{"arguments":[{"id":4979,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"4630:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4980,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4956,"src":"4637:7:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"4646:5:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4982,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"4653:8:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4983,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4962,"src":"4663:1:47","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4984,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"4666:1:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4985,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"4669:1:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4976,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"4617:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4715","typeString":"contract IERC20Permit"}},"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:47","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":4700,"src":"4617:12:47","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4987,"nodeType":"ExpressionStatement","src":"4617:54:47"},{"assignments":[4989],"declarations":[{"constant":false,"id":4989,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:47","nodeType":"VariableDeclaration","scope":5004,"src":"4681:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4988,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4994,"initialValue":{"arguments":[{"id":4992,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"4715:5:47","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4990,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"4702:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4715","typeString":"contract IERC20Permit"}},"id":4991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:47","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":4708,"src":"4702:12:47","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4996,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4989,"src":"4739:10:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4997,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"4753:11:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:47","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":5001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":4995,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5003,"nodeType":"ExpressionStatement","src":"4731:75:47"}]},"documentation":{"id":4949,"nodeType":"StructuredDocumentation","src":"4195:141:47","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":5005,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:47","nodeType":"FunctionDefinition","parameters":{"id":4967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4952,"mutability":"mutable","name":"token","nameLocation":"4383:5:47","nodeType":"VariableDeclaration","scope":5005,"src":"4370:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4715","typeString":"contract IERC20Permit"},"typeName":{"id":4951,"nodeType":"UserDefinedTypeName","pathNode":{"id":4950,"name":"IERC20Permit","nameLocations":["4370:12:47"],"nodeType":"IdentifierPath","referencedDeclaration":4715,"src":"4370:12:47"},"referencedDeclaration":4715,"src":"4370:12:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$4715","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":4954,"mutability":"mutable","name":"owner","nameLocation":"4406:5:47","nodeType":"VariableDeclaration","scope":5005,"src":"4398:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4953,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4956,"mutability":"mutable","name":"spender","nameLocation":"4429:7:47","nodeType":"VariableDeclaration","scope":5005,"src":"4421:15:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4955,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4958,"mutability":"mutable","name":"value","nameLocation":"4454:5:47","nodeType":"VariableDeclaration","scope":5005,"src":"4446:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4957,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4960,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:47","nodeType":"VariableDeclaration","scope":5005,"src":"4469:16:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4959,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4962,"mutability":"mutable","name":"v","nameLocation":"4501:1:47","nodeType":"VariableDeclaration","scope":5005,"src":"4495:7:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4961,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:47","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4964,"mutability":"mutable","name":"r","nameLocation":"4520:1:47","nodeType":"VariableDeclaration","scope":5005,"src":"4512:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4966,"mutability":"mutable","name":"s","nameLocation":"4539:1:47","nodeType":"VariableDeclaration","scope":5005,"src":"4531:9:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4965,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:47","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:47"},"returnParameters":{"id":4968,"nodeType":"ParameterList","parameters":[],"src":"4556:0:47"},"scope":5091,"src":"4341:472:47","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5041,"nodeType":"Block","src":"5266:572:47","statements":[{"assignments":[5015],"declarations":[{"constant":false,"id":5015,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:47","nodeType":"VariableDeclaration","scope":5041,"src":"5615:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5014,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5024,"initialValue":{"arguments":[{"id":5021,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5011,"src":"5669:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":5022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":5018,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5009,"src":"5649:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}],"id":5017,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5016,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:47","typeDescriptions":{}}},"id":5019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:47","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":5181,"src":"5641:27:47","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":5023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:47"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5026,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5015,"src":"5728:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:47","memberName":"length","nodeType":"MemberAccess","src":"5728:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5032,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5015,"src":"5765:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":5034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:47","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":5033,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:47","typeDescriptions":{}}}],"id":5035,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:47","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":5030,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:47","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:47","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":5038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:47","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":5025,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:47","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5040,"nodeType":"ExpressionStatement","src":"5720:111:47"}]},"documentation":{"id":5006,"nodeType":"StructuredDocumentation","src":"4819:372:47","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":5042,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:47","nodeType":"FunctionDefinition","parameters":{"id":5012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5009,"mutability":"mutable","name":"token","nameLocation":"5232:5:47","nodeType":"VariableDeclaration","scope":5042,"src":"5225:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},"typeName":{"id":5008,"nodeType":"UserDefinedTypeName","pathNode":{"id":5007,"name":"IERC20","nameLocations":["5225:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"5225:6:47"},"referencedDeclaration":4654,"src":"5225:6:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":5011,"mutability":"mutable","name":"data","nameLocation":"5252:4:47","nodeType":"VariableDeclaration","scope":5042,"src":"5239:17:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5010,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:47"},"returnParameters":{"id":5013,"nodeType":"ParameterList","parameters":[],"src":"5266:0:47"},"scope":5091,"src":"5196:642:47","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":5089,"nodeType":"Block","src":"6428:505:47","statements":[{"assignments":[5054,5056],"declarations":[{"constant":false,"id":5054,"mutability":"mutable","name":"success","nameLocation":"6729:7:47","nodeType":"VariableDeclaration","scope":5089,"src":"6724:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5053,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5056,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:47","nodeType":"VariableDeclaration","scope":5089,"src":"6738:23:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5055,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5064,"initialValue":{"arguments":[{"id":5062,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"6785:4:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":5059,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5046,"src":"6773:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}],"id":5058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5057,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:47","typeDescriptions":{}}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:47","memberName":"call","nodeType":"MemberAccess","src":"6765:19:47","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:47"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5065,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"6819:7:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5066,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"6831:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:47","memberName":"length","nodeType":"MemberAccess","src":"6831:17:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:47","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5072,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"6868:10:47","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":5074,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:47","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":5073,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:47","typeDescriptions":{}}}],"id":5075,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:47","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":5070,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:47","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:47","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:47","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":5076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5078,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":5084,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5046,"src":"6919:5:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}],"id":5083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5082,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:47","typeDescriptions":{}}},"id":5085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5080,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"6892:7:47","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$5421_$","typeString":"type(library Address)"}},"id":5081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:47","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":5109,"src":"6892:18:47","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:47","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5052,"id":5088,"nodeType":"Return","src":"6800:126:47"}]},"documentation":{"id":5043,"nodeType":"StructuredDocumentation","src":"5844:490:47","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":5090,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:47","nodeType":"FunctionDefinition","parameters":{"id":5049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5046,"mutability":"mutable","name":"token","nameLocation":"6379:5:47","nodeType":"VariableDeclaration","scope":5090,"src":"6372:12:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"},"typeName":{"id":5045,"nodeType":"UserDefinedTypeName","pathNode":{"id":5044,"name":"IERC20","nameLocations":["6372:6:47"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"6372:6:47"},"referencedDeclaration":4654,"src":"6372:6:47","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":5048,"mutability":"mutable","name":"data","nameLocation":"6399:4:47","nodeType":"VariableDeclaration","scope":5090,"src":"6386:17:47","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5047,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:47","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:47"},"returnParameters":{"id":5052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5051,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5090,"src":"6422:4:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5050,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:47"},"scope":5091,"src":"6339:594:47","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":5092,"src":"701:6234:47","usedErrors":[]}],"src":"115:6821:47"},"id":47},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[5421]},"id":5422,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5093,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:48"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":5094,"nodeType":"StructuredDocumentation","src":"126:67:48","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":5421,"linearizedBaseContracts":[5421],"name":"Address","nameLocation":"202:7:48","nodeType":"ContractDefinition","nodes":[{"body":{"id":5108,"nodeType":"Block","src":"1478:254:48","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":5102,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5097,"src":"1702:7:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:48","memberName":"code","nodeType":"MemberAccess","src":"1702:12:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:48","memberName":"length","nodeType":"MemberAccess","src":"1702:19:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:48","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5101,"id":5107,"nodeType":"Return","src":"1695:30:48"}]},"documentation":{"id":5095,"nodeType":"StructuredDocumentation","src":"216:1191:48","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":5109,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:48","nodeType":"FunctionDefinition","parameters":{"id":5098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5097,"mutability":"mutable","name":"account","nameLocation":"1440:7:48","nodeType":"VariableDeclaration","scope":5109,"src":"1432:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5096,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:48"},"returnParameters":{"id":5101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5100,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5109,"src":"1472:4:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5099,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:48"},"scope":5421,"src":"1412:320:48","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5142,"nodeType":"Block","src":"2718:241:48","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":5120,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:48","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$5421","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$5421","typeString":"library Address"}],"id":5119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:48","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5118,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:48","typeDescriptions":{}}},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:48","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5123,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5114,"src":"2761:6:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":5125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":5117,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:48","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5127,"nodeType":"ExpressionStatement","src":"2728:73:48"},{"assignments":[5129,null],"declarations":[{"constant":false,"id":5129,"mutability":"mutable","name":"success","nameLocation":"2818:7:48","nodeType":"VariableDeclaration","scope":5142,"src":"2813:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5128,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":5136,"initialValue":{"arguments":[{"hexValue":"","id":5134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":5130,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"2831:9:48","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:48","memberName":"call","nodeType":"MemberAccess","src":"2831:14:48","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5132,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5114,"src":"2853:6:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:48","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:48"},{"expression":{"arguments":[{"id":5138,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5129,"src":"2882:7:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":5139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":5137,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:48","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5141,"nodeType":"ExpressionStatement","src":"2874:78:48"}]},"documentation":{"id":5110,"nodeType":"StructuredDocumentation","src":"1738:904:48","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":5143,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:48","nodeType":"FunctionDefinition","parameters":{"id":5115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5112,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:48","nodeType":"VariableDeclaration","scope":5143,"src":"2666:25:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5111,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:48","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":5114,"mutability":"mutable","name":"amount","nameLocation":"2701:6:48","nodeType":"VariableDeclaration","scope":5143,"src":"2693:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5113,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:48"},"returnParameters":{"id":5116,"nodeType":"ParameterList","parameters":[],"src":"2718:0:48"},"scope":5421,"src":"2647:312:48","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5160,"nodeType":"Block","src":"3790:96:48","statements":[{"expression":{"arguments":[{"id":5154,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5146,"src":"3829:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5155,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5148,"src":"3837:4:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":5156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:48","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":5157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":5153,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[5201,5245],"referencedDeclaration":5245,"src":"3807:21:48","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":5158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5152,"id":5159,"nodeType":"Return","src":"3800:79:48"}]},"documentation":{"id":5144,"nodeType":"StructuredDocumentation","src":"2965:731:48","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":5161,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:48","nodeType":"FunctionDefinition","parameters":{"id":5149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5146,"mutability":"mutable","name":"target","nameLocation":"3731:6:48","nodeType":"VariableDeclaration","scope":5161,"src":"3723:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5145,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5148,"mutability":"mutable","name":"data","nameLocation":"3752:4:48","nodeType":"VariableDeclaration","scope":5161,"src":"3739:17:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5147,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:48"},"returnParameters":{"id":5152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5161,"src":"3776:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5150,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:48"},"scope":5421,"src":"3701:185:48","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5180,"nodeType":"Block","src":"4255:76:48","statements":[{"expression":{"arguments":[{"id":5174,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5164,"src":"4294:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5175,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5166,"src":"4302:4:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":5176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:48","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5177,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"4311:12:48","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5173,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[5201,5245],"referencedDeclaration":5245,"src":"4272:21:48","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":5178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5172,"id":5179,"nodeType":"Return","src":"4265:59:48"}]},"documentation":{"id":5162,"nodeType":"StructuredDocumentation","src":"3892:211:48","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":5181,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:48","nodeType":"FunctionDefinition","parameters":{"id":5169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5164,"mutability":"mutable","name":"target","nameLocation":"4147:6:48","nodeType":"VariableDeclaration","scope":5181,"src":"4139:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5163,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5166,"mutability":"mutable","name":"data","nameLocation":"4176:4:48","nodeType":"VariableDeclaration","scope":5181,"src":"4163:17:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5165,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5168,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:48","nodeType":"VariableDeclaration","scope":5181,"src":"4190:26:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5167,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:48","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:48"},"returnParameters":{"id":5172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5181,"src":"4241:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5170,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:48"},"scope":5421,"src":"4108:223:48","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5200,"nodeType":"Block","src":"4806:111:48","statements":[{"expression":{"arguments":[{"id":5194,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5184,"src":"4845:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5195,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5186,"src":"4853:4:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"4859:5:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":5197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":5193,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[5201,5245],"referencedDeclaration":5245,"src":"4823:21:48","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5192,"id":5199,"nodeType":"Return","src":"4816:94:48"}]},"documentation":{"id":5182,"nodeType":"StructuredDocumentation","src":"4337:351:48","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":5201,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:48","nodeType":"FunctionDefinition","parameters":{"id":5189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5184,"mutability":"mutable","name":"target","nameLocation":"4732:6:48","nodeType":"VariableDeclaration","scope":5201,"src":"4724:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5183,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5186,"mutability":"mutable","name":"data","nameLocation":"4753:4:48","nodeType":"VariableDeclaration","scope":5201,"src":"4740:17:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5185,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5188,"mutability":"mutable","name":"value","nameLocation":"4767:5:48","nodeType":"VariableDeclaration","scope":5201,"src":"4759:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5187,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:48"},"returnParameters":{"id":5192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5201,"src":"4792:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5190,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:48"},"scope":5421,"src":"4693:224:48","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5244,"nodeType":"Block","src":"5344:267:48","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":5218,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:48","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$5421","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$5421","typeString":"library Address"}],"id":5217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:48","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5216,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:48","typeDescriptions":{}}},"id":5219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:48","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5221,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"5387:5:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":5223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":5215,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:48","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5225,"nodeType":"ExpressionStatement","src":"5354:81:48"},{"assignments":[5227,5229],"declarations":[{"constant":false,"id":5227,"mutability":"mutable","name":"success","nameLocation":"5451:7:48","nodeType":"VariableDeclaration","scope":5244,"src":"5446:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5226,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5229,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:48","nodeType":"VariableDeclaration","scope":5244,"src":"5460:23:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5228,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5236,"initialValue":{"arguments":[{"id":5234,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5206,"src":"5513:4:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5230,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5204,"src":"5487:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:48","memberName":"call","nodeType":"MemberAccess","src":"5487:11:48","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5232,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"5506:5:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:48","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:48"},{"expression":{"arguments":[{"id":5238,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5204,"src":"5562:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5239,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5227,"src":"5570:7:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5240,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5229,"src":"5579:10:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5241,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5210,"src":"5591:12:48","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5237,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5376,"src":"5535:26:48","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":5242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5214,"id":5243,"nodeType":"Return","src":"5528:76:48"}]},"documentation":{"id":5202,"nodeType":"StructuredDocumentation","src":"4923:237:48","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":5245,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:48","nodeType":"FunctionDefinition","parameters":{"id":5211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5204,"mutability":"mutable","name":"target","nameLocation":"5213:6:48","nodeType":"VariableDeclaration","scope":5245,"src":"5205:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5203,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5206,"mutability":"mutable","name":"data","nameLocation":"5242:4:48","nodeType":"VariableDeclaration","scope":5245,"src":"5229:17:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5205,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5208,"mutability":"mutable","name":"value","nameLocation":"5264:5:48","nodeType":"VariableDeclaration","scope":5245,"src":"5256:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5207,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5210,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:48","nodeType":"VariableDeclaration","scope":5245,"src":"5279:26:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5209,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:48","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:48"},"returnParameters":{"id":5214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5245,"src":"5330:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5212,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:48"},"scope":5421,"src":"5165:446:48","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5261,"nodeType":"Block","src":"5888:97:48","statements":[{"expression":{"arguments":[{"id":5256,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5248,"src":"5924:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5257,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"5932:4:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":5258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":5255,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[5262,5291],"referencedDeclaration":5291,"src":"5905:18:48","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":5259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5254,"id":5260,"nodeType":"Return","src":"5898:80:48"}]},"documentation":{"id":5246,"nodeType":"StructuredDocumentation","src":"5617:166:48","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":5262,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:48","nodeType":"FunctionDefinition","parameters":{"id":5251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5248,"mutability":"mutable","name":"target","nameLocation":"5824:6:48","nodeType":"VariableDeclaration","scope":5262,"src":"5816:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5247,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5250,"mutability":"mutable","name":"data","nameLocation":"5845:4:48","nodeType":"VariableDeclaration","scope":5262,"src":"5832:17:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5249,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:48"},"returnParameters":{"id":5254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5253,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5262,"src":"5874:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5252,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:48"},"scope":5421,"src":"5788:197:48","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5290,"nodeType":"Block","src":"6327:168:48","statements":[{"assignments":[5275,5277],"declarations":[{"constant":false,"id":5275,"mutability":"mutable","name":"success","nameLocation":"6343:7:48","nodeType":"VariableDeclaration","scope":5290,"src":"6338:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5274,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5277,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:48","nodeType":"VariableDeclaration","scope":5290,"src":"6352:23:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5276,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5282,"initialValue":{"arguments":[{"id":5280,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5267,"src":"6397:4:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5278,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"6379:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:48","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:48","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":5281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:48"},{"expression":{"arguments":[{"id":5284,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"6446:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5285,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5275,"src":"6454:7:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5286,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5277,"src":"6463:10:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5287,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"6475:12:48","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5283,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5376,"src":"6419:26:48","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":5288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5273,"id":5289,"nodeType":"Return","src":"6412:76:48"}]},"documentation":{"id":5263,"nodeType":"StructuredDocumentation","src":"5991:173:48","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":5291,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:48","nodeType":"FunctionDefinition","parameters":{"id":5270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5265,"mutability":"mutable","name":"target","nameLocation":"6214:6:48","nodeType":"VariableDeclaration","scope":5291,"src":"6206:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5264,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5267,"mutability":"mutable","name":"data","nameLocation":"6243:4:48","nodeType":"VariableDeclaration","scope":5291,"src":"6230:17:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5266,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5269,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:48","nodeType":"VariableDeclaration","scope":5291,"src":"6257:26:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5268,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:48","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:48"},"returnParameters":{"id":5273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5291,"src":"6313:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5271,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:48"},"scope":5421,"src":"6169:326:48","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5307,"nodeType":"Block","src":"6771:101:48","statements":[{"expression":{"arguments":[{"id":5302,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5294,"src":"6809:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5303,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"6817:4:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":5304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":5301,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[5308,5337],"referencedDeclaration":5337,"src":"6788:20:48","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":5305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5300,"id":5306,"nodeType":"Return","src":"6781:84:48"}]},"documentation":{"id":5292,"nodeType":"StructuredDocumentation","src":"6501:168:48","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":5308,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:48","nodeType":"FunctionDefinition","parameters":{"id":5297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5294,"mutability":"mutable","name":"target","nameLocation":"6712:6:48","nodeType":"VariableDeclaration","scope":5308,"src":"6704:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5293,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5296,"mutability":"mutable","name":"data","nameLocation":"6733:4:48","nodeType":"VariableDeclaration","scope":5308,"src":"6720:17:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5295,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:48"},"returnParameters":{"id":5300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5308,"src":"6757:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5298,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:48"},"scope":5421,"src":"6674:198:48","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5336,"nodeType":"Block","src":"7213:170:48","statements":[{"assignments":[5321,5323],"declarations":[{"constant":false,"id":5321,"mutability":"mutable","name":"success","nameLocation":"7229:7:48","nodeType":"VariableDeclaration","scope":5336,"src":"7224:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5320,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5323,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:48","nodeType":"VariableDeclaration","scope":5336,"src":"7238:23:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5322,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5328,"initialValue":{"arguments":[{"id":5326,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"7285:4:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5324,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5311,"src":"7265:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:48","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:48","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":5327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:48"},{"expression":{"arguments":[{"id":5330,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5311,"src":"7334:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5331,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5321,"src":"7342:7:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":5332,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"7351:10:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5333,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"7363:12:48","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5329,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5376,"src":"7307:26:48","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":5334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5319,"id":5335,"nodeType":"Return","src":"7300:76:48"}]},"documentation":{"id":5309,"nodeType":"StructuredDocumentation","src":"6878:175:48","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":5337,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:48","nodeType":"FunctionDefinition","parameters":{"id":5316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5311,"mutability":"mutable","name":"target","nameLocation":"7105:6:48","nodeType":"VariableDeclaration","scope":5337,"src":"7097:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5310,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5313,"mutability":"mutable","name":"data","nameLocation":"7134:4:48","nodeType":"VariableDeclaration","scope":5337,"src":"7121:17:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5312,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5315,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:48","nodeType":"VariableDeclaration","scope":5337,"src":"7148:26:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5314,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:48","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:48"},"returnParameters":{"id":5319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5337,"src":"7199:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5317,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:48"},"scope":5421,"src":"7058:325:48","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5375,"nodeType":"Block","src":"7865:434:48","statements":[{"condition":{"id":5351,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"7879:7:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5373,"nodeType":"Block","src":"8235:58:48","statements":[{"expression":{"arguments":[{"id":5369,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5344,"src":"8257:10:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5370,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"8269:12:48","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5368,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5420,"src":"8249:7:48","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":5371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5372,"nodeType":"ExpressionStatement","src":"8249:33:48"}]},"id":5374,"nodeType":"IfStatement","src":"7875:418:48","trueBody":{"id":5367,"nodeType":"Block","src":"7888:341:48","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5352,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5344,"src":"7906:10:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:48","memberName":"length","nodeType":"MemberAccess","src":"7906:17:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:48","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5364,"nodeType":"IfStatement","src":"7902:286:48","trueBody":{"id":5363,"nodeType":"Block","src":"7930:258:48","statements":[{"expression":{"arguments":[{"arguments":[{"id":5358,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"8132:6:48","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5357,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5109,"src":"8121:10:48","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":5360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:48","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":5356,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:48","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5362,"nodeType":"ExpressionStatement","src":"8113:60:48"}]}},{"expression":{"id":5365,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5344,"src":"8208:10:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5350,"id":5366,"nodeType":"Return","src":"8201:17:48"}]}}]},"documentation":{"id":5338,"nodeType":"StructuredDocumentation","src":"7389:277:48","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":5376,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:48","nodeType":"FunctionDefinition","parameters":{"id":5347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5340,"mutability":"mutable","name":"target","nameLocation":"7724:6:48","nodeType":"VariableDeclaration","scope":5376,"src":"7716:14:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5339,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5342,"mutability":"mutable","name":"success","nameLocation":"7745:7:48","nodeType":"VariableDeclaration","scope":5376,"src":"7740:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5341,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5344,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:48","nodeType":"VariableDeclaration","scope":5376,"src":"7762:23:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5343,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5346,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:48","nodeType":"VariableDeclaration","scope":5376,"src":"7795:26:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5345,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:48","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:48"},"returnParameters":{"id":5350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5349,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5376,"src":"7851:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5348,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:48"},"scope":5421,"src":"7671:628:48","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5399,"nodeType":"Block","src":"8680:135:48","statements":[{"condition":{"id":5388,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"8694:7:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5397,"nodeType":"Block","src":"8751:58:48","statements":[{"expression":{"arguments":[{"id":5393,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5381,"src":"8773:10:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5394,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5383,"src":"8785:12:48","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5392,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5420,"src":"8765:7:48","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5396,"nodeType":"ExpressionStatement","src":"8765:33:48"}]},"id":5398,"nodeType":"IfStatement","src":"8690:119:48","trueBody":{"id":5391,"nodeType":"Block","src":"8703:42:48","statements":[{"expression":{"id":5389,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5381,"src":"8724:10:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5387,"id":5390,"nodeType":"Return","src":"8717:17:48"}]}}]},"documentation":{"id":5377,"nodeType":"StructuredDocumentation","src":"8305:210:48","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":5400,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:48","nodeType":"FunctionDefinition","parameters":{"id":5384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5379,"mutability":"mutable","name":"success","nameLocation":"8560:7:48","nodeType":"VariableDeclaration","scope":5400,"src":"8555:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5378,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5381,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:48","nodeType":"VariableDeclaration","scope":5400,"src":"8577:23:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5380,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5383,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:48","nodeType":"VariableDeclaration","scope":5400,"src":"8610:26:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5382,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:48","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:48"},"returnParameters":{"id":5387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5400,"src":"8666:12:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5385,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:48"},"scope":5421,"src":"8520:295:48","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5419,"nodeType":"Block","src":"8904:457:48","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5407,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5402,"src":"8980:10:48","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:48","memberName":"length","nodeType":"MemberAccess","src":"8980:17:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:48","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5417,"nodeType":"Block","src":"9310:45:48","statements":[{"expression":{"arguments":[{"id":5414,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5404,"src":"9331:12:48","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5413,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:48","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:48","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5416,"nodeType":"ExpressionStatement","src":"9324:20:48"}]},"id":5418,"nodeType":"IfStatement","src":"8976:379:48","trueBody":{"id":5412,"nodeType":"Block","src":"9003:301:48","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:48","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:48","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:48"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:48"},"nodeType":"YulFunctionCall","src":"9202:17:48"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:48","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:48","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:48"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:48"},"nodeType":"YulFunctionCall","src":"9243:19:48"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:48"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:48"},"nodeType":"YulFunctionCall","src":"9236:44:48"},"nodeType":"YulExpressionStatement","src":"9236:44:48"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":5402,"isOffset":false,"isSlot":false,"src":"9208:10:48","valueSize":1},{"declaration":5402,"isOffset":false,"isSlot":false,"src":"9251:10:48","valueSize":1}],"id":5411,"nodeType":"InlineAssembly","src":"9152:142:48"}]}}]},"id":5420,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:48","nodeType":"FunctionDefinition","parameters":{"id":5405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5402,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:48","nodeType":"VariableDeclaration","scope":5420,"src":"8838:23:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5401,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5404,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:48","nodeType":"VariableDeclaration","scope":5420,"src":"8863:26:48","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5403,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:48","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:48"},"returnParameters":{"id":5406,"nodeType":"ParameterList","parameters":[],"src":"8904:0:48"},"scope":5421,"src":"8821:540:48","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":5422,"src":"194:9169:48","usedErrors":[]}],"src":"101:9263:48"},"id":48},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[5451]},"id":5452,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5423,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:49"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":5424,"nodeType":"StructuredDocumentation","src":"126:496:49","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":5451,"linearizedBaseContracts":[5451],"name":"Context","nameLocation":"641:7:49","nodeType":"ContractDefinition","nodes":[{"body":{"id":5432,"nodeType":"Block","src":"717:34:49","statements":[{"expression":{"expression":{"id":5429,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"734:3:49","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:49","memberName":"sender","nodeType":"MemberAccess","src":"734:10:49","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5428,"id":5431,"nodeType":"Return","src":"727:17:49"}]},"id":5433,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:49","nodeType":"FunctionDefinition","parameters":{"id":5425,"nodeType":"ParameterList","parameters":[],"src":"674:2:49"},"returnParameters":{"id":5428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5427,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5433,"src":"708:7:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5426,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:49","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:49"},"scope":5451,"src":"655:96:49","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":5441,"nodeType":"Block","src":"824:32:49","statements":[{"expression":{"expression":{"id":5438,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:49","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:49","memberName":"data","nodeType":"MemberAccess","src":"841:8:49","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":5437,"id":5440,"nodeType":"Return","src":"834:15:49"}]},"id":5442,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:49","nodeType":"FunctionDefinition","parameters":{"id":5434,"nodeType":"ParameterList","parameters":[],"src":"774:2:49"},"returnParameters":{"id":5437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5442,"src":"808:14:49","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5435,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:49"},"scope":5451,"src":"757:99:49","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":5449,"nodeType":"Block","src":"934:25:49","statements":[{"expression":{"hexValue":"30","id":5447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:49","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5446,"id":5448,"nodeType":"Return","src":"944:8:49"}]},"id":5450,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:49","nodeType":"FunctionDefinition","parameters":{"id":5443,"nodeType":"ParameterList","parameters":[],"src":"891:2:49"},"returnParameters":{"id":5446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5450,"src":"925:7:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5444,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:49","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:49"},"scope":5451,"src":"862:97:49","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":5452,"src":"623:338:49","usedErrors":[]}],"src":"101:861:49"},"id":49},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","exportedSymbols":{"ERC165Checker":[5645],"IERC165":[5657]},"id":5646,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5453,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"121:23:50"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":5454,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5646,"sourceUnit":5658,"src":"146:23:50","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC165Checker","contractDependencies":[],"contractKind":"library","documentation":{"id":5455,"nodeType":"StructuredDocumentation","src":"171:277:50","text":" @dev Library used to query support of an interface declared via {IERC165}.\n Note that these functions return the actual result of the query: they do not\n `revert` if an interface is not supported. It is up to the caller to decide\n what to do in these cases."},"fullyImplemented":true,"id":5645,"linearizedBaseContracts":[5645],"name":"ERC165Checker","nameLocation":"457:13:50","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":5458,"mutability":"constant","name":"_INTERFACE_ID_INVALID","nameLocation":"575:21:50","nodeType":"VariableDeclaration","scope":5645,"src":"551:58:50","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5456,"name":"bytes4","nodeType":"ElementaryTypeName","src":"551:6:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":5457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"599:10:50","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"private"},{"body":{"id":5480,"nodeType":"Block","src":"774:357:50","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5467,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"1008:7:50","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":5469,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5657,"src":"1022:7:50","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$5657_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$5657_$","typeString":"type(contract IERC165)"}],"id":5468,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1017:4:50","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1017:13:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$5657","typeString":"type(contract IERC165)"}},"id":5471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1031:11:50","memberName":"interfaceId","nodeType":"MemberAccess","src":"1017:25:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":5466,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"975:32:50","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":5472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"975:68:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1059:65:50","subExpression":{"arguments":[{"id":5474,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5461,"src":"1093:7:50","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5475,"name":"_INTERFACE_ID_INVALID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"1102:21:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":5473,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"1060:32:50","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":5476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1060:64:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"975:149:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5465,"id":5479,"nodeType":"Return","src":"956:168:50"}]},"documentation":{"id":5459,"nodeType":"StructuredDocumentation","src":"616:83:50","text":" @dev Returns true if `account` supports the {IERC165} interface."},"id":5481,"implemented":true,"kind":"function","modifiers":[],"name":"supportsERC165","nameLocation":"713:14:50","nodeType":"FunctionDefinition","parameters":{"id":5462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5461,"mutability":"mutable","name":"account","nameLocation":"736:7:50","nodeType":"VariableDeclaration","scope":5481,"src":"728:15:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5460,"name":"address","nodeType":"ElementaryTypeName","src":"728:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"727:17:50"},"returnParameters":{"id":5465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5481,"src":"768:4:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5463,"name":"bool","nodeType":"ElementaryTypeName","src":"768:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"767:6:50"},"scope":5645,"src":"704:427:50","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5500,"nodeType":"Block","src":"1442:189:50","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5492,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"1558:7:50","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5491,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"1543:14:50","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1543:23:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"id":5495,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"1603:7:50","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5496,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5486,"src":"1612:11:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":5494,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"1570:32:50","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1570:54:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1543:81:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5490,"id":5499,"nodeType":"Return","src":"1536:88:50"}]},"documentation":{"id":5482,"nodeType":"StructuredDocumentation","src":"1137:207:50","text":" @dev Returns true if `account` supports the interface defined by\n `interfaceId`. Support for {IERC165} itself is queried automatically.\n See {IERC165-supportsInterface}."},"id":5501,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1358:17:50","nodeType":"FunctionDefinition","parameters":{"id":5487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5484,"mutability":"mutable","name":"account","nameLocation":"1384:7:50","nodeType":"VariableDeclaration","scope":5501,"src":"1376:15:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5483,"name":"address","nodeType":"ElementaryTypeName","src":"1376:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5486,"mutability":"mutable","name":"interfaceId","nameLocation":"1400:11:50","nodeType":"VariableDeclaration","scope":5501,"src":"1393:18:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5485,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1393:6:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1375:37:50"},"returnParameters":{"id":5490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5501,"src":"1436:4:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5488,"name":"bool","nodeType":"ElementaryTypeName","src":"1436:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1435:6:50"},"scope":5645,"src":"1349:282:50","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5556,"nodeType":"Block","src":"2155:560:50","statements":[{"assignments":[5517],"declarations":[{"constant":false,"id":5517,"mutability":"mutable","name":"interfaceIdsSupported","nameLocation":"2278:21:50","nodeType":"VariableDeclaration","scope":5556,"src":"2264:35:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":5515,"name":"bool","nodeType":"ElementaryTypeName","src":"2264:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5516,"nodeType":"ArrayTypeName","src":"2264:6:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"id":5524,"initialValue":{"arguments":[{"expression":{"id":5521,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5507,"src":"2313:12:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":5522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:6:50","memberName":"length","nodeType":"MemberAccess","src":"2313:19:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2302:10:50","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bool[] memory)"},"typeName":{"baseType":{"id":5518,"name":"bool","nodeType":"ElementaryTypeName","src":"2306:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5519,"nodeType":"ArrayTypeName","src":"2306:6:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}}},"id":5523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2302:31:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2264:69:50"},{"condition":{"arguments":[{"id":5526,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5504,"src":"2405:7:50","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5525,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"2390:14:50","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2390:23:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5553,"nodeType":"IfStatement","src":"2386:284:50","trueBody":{"id":5552,"nodeType":"Block","src":"2415:255:50","statements":[{"body":{"id":5550,"nodeType":"Block","src":"2542:118:50","statements":[{"expression":{"id":5548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5539,"name":"interfaceIdsSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5517,"src":"2560:21:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":5541,"indexExpression":{"id":5540,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"2582:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2560:24:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5543,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5504,"src":"2620:7:50","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":5544,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5507,"src":"2629:12:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":5546,"indexExpression":{"id":5545,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"2642:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2629:15:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":5542,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"2587:32:50","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":5547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2587:58:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2560:85:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5549,"nodeType":"ExpressionStatement","src":"2560:85:50"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"2512:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5533,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5507,"src":"2516:12:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":5534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2529:6:50","memberName":"length","nodeType":"MemberAccess","src":"2516:19:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:23:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5551,"initializationExpression":{"assignments":[5529],"declarations":[{"constant":false,"id":5529,"mutability":"mutable","name":"i","nameLocation":"2505:1:50","nodeType":"VariableDeclaration","scope":5551,"src":"2497:9:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5528,"name":"uint256","nodeType":"ElementaryTypeName","src":"2497:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5531,"initialValue":{"hexValue":"30","id":5530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2509:1:50","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2497:13:50"},"loopExpression":{"expression":{"id":5537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2537:3:50","subExpression":{"id":5536,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5529,"src":"2537:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5538,"nodeType":"ExpressionStatement","src":"2537:3:50"},"nodeType":"ForStatement","src":"2492:168:50"}]}},{"expression":{"id":5554,"name":"interfaceIdsSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5517,"src":"2687:21:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"functionReturnParameters":5512,"id":5555,"nodeType":"Return","src":"2680:28:50"}]},"documentation":{"id":5502,"nodeType":"StructuredDocumentation","src":"1637:374:50","text":" @dev Returns a boolean array where each value corresponds to the\n interfaces passed in and whether they're supported or not. This allows\n you to batch check interfaces for a contract where your expectation\n is that some interfaces may not be supported.\n See {IERC165-supportsInterface}.\n _Available since v3.4._"},"id":5557,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInterfaces","nameLocation":"2025:22:50","nodeType":"FunctionDefinition","parameters":{"id":5508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5504,"mutability":"mutable","name":"account","nameLocation":"2065:7:50","nodeType":"VariableDeclaration","scope":5557,"src":"2057:15:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5503,"name":"address","nodeType":"ElementaryTypeName","src":"2057:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5507,"mutability":"mutable","name":"interfaceIds","nameLocation":"2098:12:50","nodeType":"VariableDeclaration","scope":5557,"src":"2082:28:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":5505,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2082:6:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":5506,"nodeType":"ArrayTypeName","src":"2082:8:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"2047:69:50"},"returnParameters":{"id":5512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5557,"src":"2140:13:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":5509,"name":"bool","nodeType":"ElementaryTypeName","src":"2140:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5510,"nodeType":"ArrayTypeName","src":"2140:6:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"2139:15:50"},"scope":5645,"src":"2016:699:50","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5602,"nodeType":"Block","src":"3157:436:50","statements":[{"condition":{"id":5571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3213:24:50","subExpression":{"arguments":[{"id":5569,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5560,"src":"3229:7:50","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5568,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"3214:14:50","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3214:23:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5575,"nodeType":"IfStatement","src":"3209:67:50","trueBody":{"id":5574,"nodeType":"Block","src":"3239:37:50","statements":[{"expression":{"hexValue":"66616c7365","id":5572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3260:5:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5567,"id":5573,"nodeType":"Return","src":"3253:12:50"}]}},{"body":{"id":5598,"nodeType":"Block","src":"3395:134:50","statements":[{"condition":{"id":5593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3413:59:50","subExpression":{"arguments":[{"id":5588,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5560,"src":"3447:7:50","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":5589,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5563,"src":"3456:12:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":5591,"indexExpression":{"id":5590,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"3469:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3456:15:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":5587,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"3414:32:50","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":5592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3414:58:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5597,"nodeType":"IfStatement","src":"3409:110:50","trueBody":{"id":5596,"nodeType":"Block","src":"3474:45:50","statements":[{"expression":{"hexValue":"66616c7365","id":5594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3499:5:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5567,"id":5595,"nodeType":"Return","src":"3492:12:50"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5580,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"3365:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5581,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5563,"src":"3369:12:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":5582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3382:6:50","memberName":"length","nodeType":"MemberAccess","src":"3369:19:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3365:23:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5599,"initializationExpression":{"assignments":[5577],"declarations":[{"constant":false,"id":5577,"mutability":"mutable","name":"i","nameLocation":"3358:1:50","nodeType":"VariableDeclaration","scope":5599,"src":"3350:9:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5576,"name":"uint256","nodeType":"ElementaryTypeName","src":"3350:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5579,"initialValue":{"hexValue":"30","id":5578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3362:1:50","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3350:13:50"},"loopExpression":{"expression":{"id":5585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3390:3:50","subExpression":{"id":5584,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"3390:1:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5586,"nodeType":"ExpressionStatement","src":"3390:3:50"},"nodeType":"ForStatement","src":"3345:184:50"},{"expression":{"hexValue":"74727565","id":5600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3582:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5567,"id":5601,"nodeType":"Return","src":"3575:11:50"}]},"documentation":{"id":5558,"nodeType":"StructuredDocumentation","src":"2721:324:50","text":" @dev Returns true if `account` supports all the interfaces defined in\n `interfaceIds`. Support for {IERC165} itself is queried automatically.\n Batch-querying can lead to gas savings by skipping repeated checks for\n {IERC165} support.\n See {IERC165-supportsInterface}."},"id":5603,"implemented":true,"kind":"function","modifiers":[],"name":"supportsAllInterfaces","nameLocation":"3059:21:50","nodeType":"FunctionDefinition","parameters":{"id":5564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5560,"mutability":"mutable","name":"account","nameLocation":"3089:7:50","nodeType":"VariableDeclaration","scope":5603,"src":"3081:15:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5559,"name":"address","nodeType":"ElementaryTypeName","src":"3081:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5563,"mutability":"mutable","name":"interfaceIds","nameLocation":"3114:12:50","nodeType":"VariableDeclaration","scope":5603,"src":"3098:28:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":5561,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3098:6:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":5562,"nodeType":"ArrayTypeName","src":"3098:8:50","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"3080:47:50"},"returnParameters":{"id":5567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5603,"src":"3151:4:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5565,"name":"bool","nodeType":"ElementaryTypeName","src":"3151:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3150:6:50"},"scope":5645,"src":"3050:543:50","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5643,"nodeType":"Block","src":"4529:539:50","statements":[{"assignments":[5614],"declarations":[{"constant":false,"id":5614,"mutability":"mutable","name":"encodedParams","nameLocation":"4576:13:50","nodeType":"VariableDeclaration","scope":5643,"src":"4563:26:50","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5613,"name":"bytes","nodeType":"ElementaryTypeName","src":"4563:5:50","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5622,"initialValue":{"arguments":[{"expression":{"expression":{"id":5617,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5657,"src":"4615:7:50","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$5657_$","typeString":"type(contract IERC165)"}},"id":5618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4623:17:50","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":5656,"src":"4615:25:50","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes4_$returns$_t_bool_$","typeString":"function IERC165.supportsInterface(bytes4) view returns (bool)"}},"id":5619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4641:8:50","memberName":"selector","nodeType":"MemberAccess","src":"4615:34:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":5620,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"4651:11:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":5615,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4592:3:50","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4596:18:50","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4592:22:50","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":5621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4592:71:50","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4563:100:50"},{"assignments":[5624],"declarations":[{"constant":false,"id":5624,"mutability":"mutable","name":"success","nameLocation":"4710:7:50","nodeType":"VariableDeclaration","scope":5643,"src":"4705:12:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5623,"name":"bool","nodeType":"ElementaryTypeName","src":"4705:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5625,"nodeType":"VariableDeclarationStatement","src":"4705:12:50"},{"assignments":[5627],"declarations":[{"constant":false,"id":5627,"mutability":"mutable","name":"returnSize","nameLocation":"4735:10:50","nodeType":"VariableDeclaration","scope":5643,"src":"4727:18:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5626,"name":"uint256","nodeType":"ElementaryTypeName","src":"4727:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5628,"nodeType":"VariableDeclarationStatement","src":"4727:18:50"},{"assignments":[5630],"declarations":[{"constant":false,"id":5630,"mutability":"mutable","name":"returnValue","nameLocation":"4763:11:50","nodeType":"VariableDeclaration","scope":5643,"src":"4755:19:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5629,"name":"uint256","nodeType":"ElementaryTypeName","src":"4755:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5631,"nodeType":"VariableDeclarationStatement","src":"4755:19:50"},{"AST":{"nodeType":"YulBlock","src":"4793:203:50","statements":[{"nodeType":"YulAssignment","src":"4807:97:50","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4829:5:50","type":"","value":"30000"},{"name":"account","nodeType":"YulIdentifier","src":"4836:7:50"},{"arguments":[{"name":"encodedParams","nodeType":"YulIdentifier","src":"4849:13:50"},{"kind":"number","nodeType":"YulLiteral","src":"4864:4:50","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4845:3:50"},"nodeType":"YulFunctionCall","src":"4845:24:50"},{"arguments":[{"name":"encodedParams","nodeType":"YulIdentifier","src":"4877:13:50"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4871:5:50"},"nodeType":"YulFunctionCall","src":"4871:20:50"},{"kind":"number","nodeType":"YulLiteral","src":"4893:4:50","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"4899:4:50","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"4818:10:50"},"nodeType":"YulFunctionCall","src":"4818:86:50"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"4807:7:50"}]},{"nodeType":"YulAssignment","src":"4917:30:50","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"4931:14:50"},"nodeType":"YulFunctionCall","src":"4931:16:50"},"variableNames":[{"name":"returnSize","nodeType":"YulIdentifier","src":"4917:10:50"}]},{"nodeType":"YulAssignment","src":"4960:26:50","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4981:4:50","type":"","value":"0x00"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4975:5:50"},"nodeType":"YulFunctionCall","src":"4975:11:50"},"variableNames":[{"name":"returnValue","nodeType":"YulIdentifier","src":"4960:11:50"}]}]},"evmVersion":"london","externalReferences":[{"declaration":5606,"isOffset":false,"isSlot":false,"src":"4836:7:50","valueSize":1},{"declaration":5614,"isOffset":false,"isSlot":false,"src":"4849:13:50","valueSize":1},{"declaration":5614,"isOffset":false,"isSlot":false,"src":"4877:13:50","valueSize":1},{"declaration":5627,"isOffset":false,"isSlot":false,"src":"4917:10:50","valueSize":1},{"declaration":5630,"isOffset":false,"isSlot":false,"src":"4960:11:50","valueSize":1},{"declaration":5624,"isOffset":false,"isSlot":false,"src":"4807:7:50","valueSize":1}],"id":5632,"nodeType":"InlineAssembly","src":"4784:212:50"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5633,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5624,"src":"5013:7:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5634,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5627,"src":"5024:10:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783230","id":5635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5038:4:50","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"5024:18:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5013:29:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5638,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5630,"src":"5046:11:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5060:1:50","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5046:15:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5013:48:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5612,"id":5642,"nodeType":"Return","src":"5006:55:50"}]},"documentation":{"id":5604,"nodeType":"StructuredDocumentation","src":"3599:817:50","text":" @notice Query if a contract implements an interface, does not check ERC165 support\n @param account The address of the contract to query for support of an interface\n @param interfaceId The interface identifier, as specified in ERC-165\n @return true if the contract at account indicates support of the interface with\n identifier interfaceId, false otherwise\n @dev Assumes that account contains a contract that supports ERC165, otherwise\n the behavior of this method is undefined. This precondition can be checked\n with {supportsERC165}.\n Some precompiled contracts will falsely indicate support for a given interface, so caution\n should be exercised when using this function.\n Interface identification is specified in ERC-165."},"id":5644,"implemented":true,"kind":"function","modifiers":[],"name":"supportsERC165InterfaceUnchecked","nameLocation":"4430:32:50","nodeType":"FunctionDefinition","parameters":{"id":5609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5606,"mutability":"mutable","name":"account","nameLocation":"4471:7:50","nodeType":"VariableDeclaration","scope":5644,"src":"4463:15:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5605,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5608,"mutability":"mutable","name":"interfaceId","nameLocation":"4487:11:50","nodeType":"VariableDeclaration","scope":5644,"src":"4480:18:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5607,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4480:6:50","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4462:37:50"},"returnParameters":{"id":5612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5644,"src":"4523:4:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5610,"name":"bool","nodeType":"ElementaryTypeName","src":"4523:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4522:6:50"},"scope":5645,"src":"4421:647:50","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5646,"src":"449:4621:50","usedErrors":[]}],"src":"121:4950:50"},"id":50},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[5657]},"id":5658,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5647,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:51"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":5648,"nodeType":"StructuredDocumentation","src":"125:279:51","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":5657,"linearizedBaseContracts":[5657],"name":"IERC165","nameLocation":"415:7:51","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5649,"nodeType":"StructuredDocumentation","src":"429:340:51","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":5656,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:51","nodeType":"FunctionDefinition","parameters":{"id":5652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5651,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:51","nodeType":"VariableDeclaration","scope":5656,"src":"801:18:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5650,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:51","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:51"},"returnParameters":{"id":5655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5656,"src":"844:4:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5653,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:51","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:51"},"scope":5657,"src":"774:76:51","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5658,"src":"405:447:51","usedErrors":[]}],"src":"100:753:51"},"id":51},"contracts/FirelinkBridge.sol":{"ast":{"absolutePath":"contracts/FirelinkBridge.sol","exportedSymbols":{"Address":[5421],"AddressUpgradeable":[3837],"ContextUpgradeable":[3879],"ERC165Checker":[5645],"ERC1967UpgradeUpgradeable":[3192],"EVMTransaction":[1501],"FirelinkBridge":[6567],"FirelinkMintableERC20":[6795],"FlareContractsRegistryLibrary":[2025],"IBeaconUpgradeable":[3202],"IERC1822ProxiableUpgradeable":[2868],"IERC1967Upgradeable":[2858],"IERC20":[4654],"IEVMTransactionVerification":[1549],"IFirelinkMintableERC20":[6827],"IFlareRelayer":[6864],"ILegacyMintableERC20":[6850],"Initializable":[3371],"OwnableUpgradeable":[2837],"SafeERC20":[5091],"StorageSlotUpgradeable":[3989],"UUPSUpgradeable":[3507]},"id":6568,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5659,"literals":["solidity","^","0.8",".15"],"nodeType":"PragmaDirective","src":"81:24:52"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":5660,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":2838,"src":"186:75:52","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":5661,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":3372,"src":"262:75:52","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":5662,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":3508,"src":"338:77:52","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":5664,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":4655,"src":"416:72:52","symbolAliases":[{"foreign":{"id":5663,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"425:6:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","id":5666,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":5646,"src":"489:94:52","symbolAliases":[{"foreign":{"id":5665,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"498:13:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":5668,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":5422,"src":"584:68:52","symbolAliases":[{"foreign":{"id":5667,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"593:7:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":5670,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":5092,"src":"653:84:52","symbolAliases":[{"foreign":{"id":5669,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5091,"src":"662:9:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/IFlareRelayer.sol","file":"./IFlareRelayer.sol","id":5672,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":6865,"src":"738:52:52","symbolAliases":[{"foreign":{"id":5671,"name":"IFlareRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6864,"src":"747:13:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/FirelinkMintableERC20.sol","file":"./FirelinkMintableERC20.sol","id":5674,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":6796,"src":"791:68:52","symbolAliases":[{"foreign":{"id":5673,"name":"FirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6795,"src":"800:21:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/IFirelinkMintableERC20.sol","file":"./IFirelinkMintableERC20.sol","id":5677,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":6851,"src":"860:92:52","symbolAliases":[{"foreign":{"id":5675,"name":"IFirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6827,"src":"869:22:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5676,"name":"ILegacyMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"893:20:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol","file":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol","id":5679,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":1550,"src":"953:150:52","symbolAliases":[{"foreign":{"id":5678,"name":"IEVMTransactionVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"962:27:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol","file":"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol","id":5681,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":1502,"src":"1104:124:52","symbolAliases":[{"foreign":{"id":5680,"name":"EVMTransaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"1113:14:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol","file":"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol","id":5683,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6568,"sourceUnit":2026,"src":"1229:138:52","symbolAliases":[{"foreign":{"id":5682,"name":"FlareContractsRegistryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"1238:29:52","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5684,"name":"Initializable","nameLocations":["1396:13:52"],"nodeType":"IdentifierPath","referencedDeclaration":3371,"src":"1396:13:52"},"id":5685,"nodeType":"InheritanceSpecifier","src":"1396:13:52"},{"baseName":{"id":5686,"name":"OwnableUpgradeable","nameLocations":["1411:18:52"],"nodeType":"IdentifierPath","referencedDeclaration":2837,"src":"1411:18:52"},"id":5687,"nodeType":"InheritanceSpecifier","src":"1411:18:52"},{"baseName":{"id":5688,"name":"UUPSUpgradeable","nameLocations":["1431:15:52"],"nodeType":"IdentifierPath","referencedDeclaration":3507,"src":"1431:15:52"},"id":5689,"nodeType":"InheritanceSpecifier","src":"1431:15:52"}],"canonicalName":"FirelinkBridge","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6567,"linearizedBaseContracts":[6567,3507,3192,2858,2868,2837,3879,3371],"name":"FirelinkBridge","nameLocation":"1378:14:52","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5693,"libraryName":{"id":5690,"name":"SafeERC20","nameLocations":["1459:9:52"],"nodeType":"IdentifierPath","referencedDeclaration":5091,"src":"1459:9:52"},"nodeType":"UsingForDirective","src":"1453:27:52","typeName":{"id":5692,"nodeType":"UserDefinedTypeName","pathNode":{"id":5691,"name":"IERC20","nameLocations":["1473:6:52"],"nodeType":"IdentifierPath","referencedDeclaration":4654,"src":"1473:6:52"},"referencedDeclaration":4654,"src":"1473:6:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}}},{"constant":true,"id":5696,"mutability":"constant","name":"RECEIVE_DEFAULT_GAS_LIMIT","nameLocation":"1511:25:52","nodeType":"VariableDeclaration","scope":6567,"src":"1486:60:52","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5694,"name":"uint32","nodeType":"ElementaryTypeName","src":"1486:6:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3230305f303030","id":5695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1539:7:52","typeDescriptions":{"typeIdentifier":"t_rational_200000_by_1","typeString":"int_const 200000"},"value":"200_000"},"visibility":"internal"},{"constant":false,"functionSelector":"927ede2d","id":5699,"mutability":"mutable","name":"MESSENGER","nameLocation":"1575:9:52","nodeType":"VariableDeclaration","scope":6567,"src":"1553:31:52","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareRelayer_$6864","typeString":"contract IFlareRelayer"},"typeName":{"id":5698,"nodeType":"UserDefinedTypeName","pathNode":{"id":5697,"name":"IFlareRelayer","nameLocations":["1553:13:52"],"nodeType":"IdentifierPath","referencedDeclaration":6864,"src":"1553:13:52"},"referencedDeclaration":6864,"src":"1553:13:52","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareRelayer_$6864","typeString":"contract IFlareRelayer"}},"visibility":"public"},{"constant":false,"functionSelector":"7f46ddb2","id":5702,"mutability":"mutable","name":"OTHER_BRIDGE","nameLocation":"1613:12:52","nodeType":"VariableDeclaration","scope":6567,"src":"1590:35:52","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_FirelinkBridge_$6567","typeString":"contract FirelinkBridge"},"typeName":{"id":5701,"nodeType":"UserDefinedTypeName","pathNode":{"id":5700,"name":"FirelinkBridge","nameLocations":["1590:14:52"],"nodeType":"IdentifierPath","referencedDeclaration":6567,"src":"1590:14:52"},"referencedDeclaration":6567,"src":"1590:14:52","typeDescriptions":{"typeIdentifier":"t_contract$_FirelinkBridge_$6567","typeString":"contract FirelinkBridge"}},"visibility":"public"},{"constant":false,"functionSelector":"9ace38c2","id":5706,"mutability":"mutable","name":"transactions","nameLocation":"1656:12:52","nodeType":"VariableDeclaration","scope":6567,"src":"1631:37:52","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo[]"},"typeName":{"baseType":{"id":5704,"nodeType":"UserDefinedTypeName","pathNode":{"id":5703,"name":"TransactionInfo","nameLocations":["1631:15:52"],"nodeType":"IdentifierPath","referencedDeclaration":6377,"src":"1631:15:52"},"referencedDeclaration":6377,"src":"1631:15:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_storage_ptr","typeString":"struct FirelinkBridge.TransactionInfo"}},"id":5705,"nodeType":"ArrayTypeName","src":"1631:17:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.TransactionInfo[]"}},"visibility":"public"},{"constant":false,"id":5708,"mutability":"mutable","name":"spacer_0_2_20","nameLocation":"1691:13:52","nodeType":"VariableDeclaration","scope":6567,"src":"1675:29:52","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5707,"name":"address","nodeType":"ElementaryTypeName","src":"1675:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":5710,"mutability":"mutable","name":"spacer_1_0_20","nameLocation":"1726:13:52","nodeType":"VariableDeclaration","scope":6567,"src":"1710:29:52","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5709,"name":"address","nodeType":"ElementaryTypeName","src":"1710:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"functionSelector":"8f601f66","id":5716,"mutability":"mutable","name":"deposits","nameLocation":"1800:8:52","nodeType":"VariableDeclaration","scope":6567,"src":"1745:63:52","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":5715,"keyType":{"id":5711,"name":"address","nodeType":"ElementaryTypeName","src":"1753:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1745:47:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":5714,"keyType":{"id":5712,"name":"address","nodeType":"ElementaryTypeName","src":"1772:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1764:27:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":5713,"name":"uint256","nodeType":"ElementaryTypeName","src":"1783:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"id":5720,"mutability":"mutable","name":"__gap","nameLocation":"1835:5:52","nodeType":"VariableDeclaration","scope":6567,"src":"1815:25:52","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage","typeString":"uint256[47]"},"typeName":{"baseType":{"id":5717,"name":"uint256","nodeType":"ElementaryTypeName","src":"1815:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5719,"length":{"hexValue":"3437","id":5718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1823:2:52","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"nodeType":"ArrayTypeName","src":"1815:11:52","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$47_storage_ptr","typeString":"uint256[47]"}},"visibility":"private"},{"constant":false,"id":5723,"mutability":"mutable","name":"ethContract","nameLocation":"1870:11:52","nodeType":"VariableDeclaration","scope":6567,"src":"1847:34:52","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFirelinkMintableERC20_$6827","typeString":"contract IFirelinkMintableERC20"},"typeName":{"id":5722,"nodeType":"UserDefinedTypeName","pathNode":{"id":5721,"name":"IFirelinkMintableERC20","nameLocations":["1847:22:52"],"nodeType":"IdentifierPath","referencedDeclaration":6827,"src":"1847:22:52"},"referencedDeclaration":6827,"src":"1847:22:52","typeDescriptions":{"typeIdentifier":"t_contract$_IFirelinkMintableERC20_$6827","typeString":"contract IFirelinkMintableERC20"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af5","id":5733,"name":"ETHBridgeInitiated","nameLocation":"1903:18:52","nodeType":"EventDefinition","parameters":{"id":5732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5725,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1938:4:52","nodeType":"VariableDeclaration","scope":5733,"src":"1922:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5724,"name":"address","nodeType":"ElementaryTypeName","src":"1922:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5727,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1960:2:52","nodeType":"VariableDeclaration","scope":5733,"src":"1944:18:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5726,"name":"address","nodeType":"ElementaryTypeName","src":"1944:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5729,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1972:6:52","nodeType":"VariableDeclaration","scope":5733,"src":"1964:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5728,"name":"uint256","nodeType":"ElementaryTypeName","src":"1964:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5731,"indexed":false,"mutability":"mutable","name":"extraData","nameLocation":"1986:9:52","nodeType":"VariableDeclaration","scope":5733,"src":"1980:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5730,"name":"bytes","nodeType":"ElementaryTypeName","src":"1980:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1921:75:52"},"src":"1897:100:52"},{"anonymous":false,"eventSelector":"31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d","id":5743,"name":"ETHBridgeFinalized","nameLocation":"2008:18:52","nodeType":"EventDefinition","parameters":{"id":5742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5735,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2043:4:52","nodeType":"VariableDeclaration","scope":5743,"src":"2027:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5734,"name":"address","nodeType":"ElementaryTypeName","src":"2027:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5737,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"2065:2:52","nodeType":"VariableDeclaration","scope":5743,"src":"2049:18:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5736,"name":"address","nodeType":"ElementaryTypeName","src":"2049:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5739,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2077:6:52","nodeType":"VariableDeclaration","scope":5743,"src":"2069:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5738,"name":"uint256","nodeType":"ElementaryTypeName","src":"2069:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5741,"indexed":false,"mutability":"mutable","name":"extraData","nameLocation":"2091:9:52","nodeType":"VariableDeclaration","scope":5743,"src":"2085:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5740,"name":"bytes","nodeType":"ElementaryTypeName","src":"2085:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2026:75:52"},"src":"2002:100:52"},{"anonymous":false,"eventSelector":"7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf","id":5757,"name":"ERC20BridgeInitiated","nameLocation":"2113:20:52","nodeType":"EventDefinition","parameters":{"id":5756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5745,"indexed":true,"mutability":"mutable","name":"localToken","nameLocation":"2150:10:52","nodeType":"VariableDeclaration","scope":5757,"src":"2134:26:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5744,"name":"address","nodeType":"ElementaryTypeName","src":"2134:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5747,"indexed":true,"mutability":"mutable","name":"remoteToken","nameLocation":"2178:11:52","nodeType":"VariableDeclaration","scope":5757,"src":"2162:27:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5746,"name":"address","nodeType":"ElementaryTypeName","src":"2162:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5749,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2207:4:52","nodeType":"VariableDeclaration","scope":5757,"src":"2191:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5748,"name":"address","nodeType":"ElementaryTypeName","src":"2191:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5751,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"2221:2:52","nodeType":"VariableDeclaration","scope":5757,"src":"2213:10:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5750,"name":"address","nodeType":"ElementaryTypeName","src":"2213:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5753,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2233:6:52","nodeType":"VariableDeclaration","scope":5757,"src":"2225:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5752,"name":"uint256","nodeType":"ElementaryTypeName","src":"2225:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5755,"indexed":false,"mutability":"mutable","name":"extraData","nameLocation":"2247:9:52","nodeType":"VariableDeclaration","scope":5757,"src":"2241:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5754,"name":"bytes","nodeType":"ElementaryTypeName","src":"2241:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2133:124:52"},"src":"2107:151:52"},{"anonymous":false,"eventSelector":"d59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd","id":5771,"name":"ERC20BridgeFinalized","nameLocation":"2269:20:52","nodeType":"EventDefinition","parameters":{"id":5770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5759,"indexed":true,"mutability":"mutable","name":"localToken","nameLocation":"2306:10:52","nodeType":"VariableDeclaration","scope":5771,"src":"2290:26:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5758,"name":"address","nodeType":"ElementaryTypeName","src":"2290:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5761,"indexed":true,"mutability":"mutable","name":"remoteToken","nameLocation":"2334:11:52","nodeType":"VariableDeclaration","scope":5771,"src":"2318:27:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5760,"name":"address","nodeType":"ElementaryTypeName","src":"2318:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5763,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2363:4:52","nodeType":"VariableDeclaration","scope":5771,"src":"2347:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5762,"name":"address","nodeType":"ElementaryTypeName","src":"2347:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5765,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"2377:2:52","nodeType":"VariableDeclaration","scope":5771,"src":"2369:10:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5764,"name":"address","nodeType":"ElementaryTypeName","src":"2369:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5767,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2389:6:52","nodeType":"VariableDeclaration","scope":5771,"src":"2381:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5766,"name":"uint256","nodeType":"ElementaryTypeName","src":"2381:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5769,"indexed":false,"mutability":"mutable","name":"extraData","nameLocation":"2403:9:52","nodeType":"VariableDeclaration","scope":5771,"src":"2397:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5768,"name":"bytes","nodeType":"ElementaryTypeName","src":"2397:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2289:124:52"},"src":"2263:151:52"},{"body":{"id":5778,"nodeType":"Block","src":"2497:39:52","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5775,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"2507:20:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2507:22:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5777,"nodeType":"ExpressionStatement","src":"2507:22:52"}]},"documentation":{"id":5772,"nodeType":"StructuredDocumentation","src":"2430:48:52","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":5779,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5773,"nodeType":"ParameterList","parameters":[],"src":"2494:2:52"},"returnParameters":{"id":5774,"nodeType":"ParameterList","parameters":[],"src":"2497:0:52"},"scope":6567,"src":"2483:53:52","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5814,"nodeType":"Block","src":"2661:244:52","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5790,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"2701:14:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:16:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5792,"nodeType":"ExpressionStatement","src":"2701:16:52"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5793,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"2727:22:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2727:24:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5795,"nodeType":"ExpressionStatement","src":"2727:24:52"},{"expression":{"id":5800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5796,"name":"MESSENGER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"2761:9:52","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareRelayer_$6864","typeString":"contract IFlareRelayer"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5798,"name":"_messenger","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5783,"src":"2787:10:52","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5797,"name":"IFlareRelayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6864,"src":"2773:13:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFlareRelayer_$6864_$","typeString":"type(contract IFlareRelayer)"}},"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2773:25:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFlareRelayer_$6864","typeString":"contract IFlareRelayer"}},"src":"2761:37:52","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareRelayer_$6864","typeString":"contract IFlareRelayer"}},"id":5801,"nodeType":"ExpressionStatement","src":"2761:37:52"},{"expression":{"id":5806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5802,"name":"OTHER_BRIDGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5702,"src":"2808:12:52","typeDescriptions":{"typeIdentifier":"t_contract$_FirelinkBridge_$6567","typeString":"contract FirelinkBridge"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5804,"name":"_otherBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5785,"src":"2838:12:52","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5803,"name":"FirelinkBridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6567,"src":"2823:14:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FirelinkBridge_$6567_$","typeString":"type(contract FirelinkBridge)"}},"id":5805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:28:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_FirelinkBridge_$6567","typeString":"contract FirelinkBridge"}},"src":"2808:43:52","typeDescriptions":{"typeIdentifier":"t_contract$_FirelinkBridge_$6567","typeString":"contract FirelinkBridge"}},"id":5807,"nodeType":"ExpressionStatement","src":"2808:43:52"},{"expression":{"arguments":[{"id":5811,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5781,"src":"2885:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5808,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2861:5:52","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_FirelinkBridge_$6567_$","typeString":"type(contract super FirelinkBridge)"}},"id":5810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2867:17:52","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":2811,"src":"2861:23:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2861:37:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5813,"nodeType":"ExpressionStatement","src":"2861:37:52"}]},"functionSelector":"c0c53b8b","id":5815,"implemented":true,"kind":"function","modifiers":[{"id":5788,"kind":"modifierInvocation","modifierName":{"id":5787,"name":"initializer","nameLocations":["2642:11:52"],"nodeType":"IdentifierPath","referencedDeclaration":3273,"src":"2642:11:52"},"nodeType":"ModifierInvocation","src":"2642:11:52"}],"name":"initialize","nameLocation":"2551:10:52","nodeType":"FunctionDefinition","parameters":{"id":5786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5781,"mutability":"mutable","name":"initialOwner","nameLocation":"2570:12:52","nodeType":"VariableDeclaration","scope":5815,"src":"2562:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5780,"name":"address","nodeType":"ElementaryTypeName","src":"2562:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5783,"mutability":"mutable","name":"_messenger","nameLocation":"2600:10:52","nodeType":"VariableDeclaration","scope":5815,"src":"2584:26:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5782,"name":"address","nodeType":"ElementaryTypeName","src":"2584:15:52","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":5785,"mutability":"mutable","name":"_otherBridge","nameLocation":"2628:12:52","nodeType":"VariableDeclaration","scope":5815,"src":"2612:28:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":5784,"name":"address","nodeType":"ElementaryTypeName","src":"2612:15:52","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"2561:80:52"},"returnParameters":{"id":5789,"nodeType":"ParameterList","parameters":[],"src":"2661:0:52"},"scope":6567,"src":"2542:363:52","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5828,"nodeType":"Block","src":"3087:127:52","statements":[{"expression":{"arguments":[{"id":5823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3105:31:52","subExpression":{"arguments":[{"expression":{"id":5820,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3125:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3129:6:52","memberName":"sender","nodeType":"MemberAccess","src":"3125:10:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5818,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"3106:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$5421_$","typeString":"type(library Address)"}},"id":5819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3114:10:52","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":5109,"src":"3106:18:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3106:30:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"466972656c696e6b4272696467653a2066756e6374696f6e2063616e206f6e6c792062652063616c6c65642066726f6d20616e20454f41","id":5824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3138:57:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_00756b297826b8cba254a562e21a4424420bfcb8713d3201329ae99da74c4e66","typeString":"literal_string \"FirelinkBridge: function can only be called from an EOA\""},"value":"FirelinkBridge: function can only be called from an EOA"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00756b297826b8cba254a562e21a4424420bfcb8713d3201329ae99da74c4e66","typeString":"literal_string \"FirelinkBridge: function can only be called from an EOA\""}],"id":5817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3097:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3097:99:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5826,"nodeType":"ExpressionStatement","src":"3097:99:52"},{"id":5827,"nodeType":"PlaceholderStatement","src":"3206:1:52"}]},"id":5829,"name":"onlyEOA","nameLocation":"3077:7:52","nodeType":"ModifierDefinition","parameters":{"id":5816,"nodeType":"ParameterList","parameters":[],"src":"3084:2:52"},"src":"3068:146:52","virtual":false,"visibility":"internal"},{"baseFunctions":[3501],"body":{"id":5837,"nodeType":"Block","src":"3330:2:52","statements":[]},"id":5838,"implemented":true,"kind":"function","modifiers":[{"id":5834,"kind":"modifierInvocation","modifierName":{"id":5833,"name":"onlyOwner","nameLocations":["3299:9:52"],"nodeType":"IdentifierPath","referencedDeclaration":2751,"src":"3299:9:52"},"nodeType":"ModifierInvocation","src":"3299:9:52"}],"name":"_authorizeUpgrade","nameLocation":"3229:17:52","nodeType":"FunctionDefinition","overrides":{"id":5835,"nodeType":"OverrideSpecifier","overrides":[],"src":"3317:8:52"},"parameters":{"id":5832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5831,"mutability":"mutable","name":"newImplementation","nameLocation":"3255:17:52","nodeType":"VariableDeclaration","scope":5838,"src":"3247:25:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5830,"name":"address","nodeType":"ElementaryTypeName","src":"3247:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3246:27:52"},"returnParameters":{"id":5836,"nodeType":"ParameterList","parameters":[],"src":"3330:0:52"},"scope":6567,"src":"3220:112:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5841,"nodeType":"Block","src":"3365:8:52","statements":[]},"id":5842,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5839,"nodeType":"ParameterList","parameters":[],"src":"3345:2:52"},"returnParameters":{"id":5840,"nodeType":"ParameterList","parameters":[],"src":"3365:0:52"},"scope":6567,"src":"3338:35:52","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5855,"nodeType":"Block","src":"3454:66:52","statements":[{"expression":{"id":5853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5849,"name":"ethContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"3464:11:52","typeDescriptions":{"typeIdentifier":"t_contract$_IFirelinkMintableERC20_$6827","typeString":"contract IFirelinkMintableERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5851,"name":"_ethAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5844,"src":"3501:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5850,"name":"IFirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6827,"src":"3478:22:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFirelinkMintableERC20_$6827_$","typeString":"type(contract IFirelinkMintableERC20)"}},"id":5852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3478:35:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFirelinkMintableERC20_$6827","typeString":"contract IFirelinkMintableERC20"}},"src":"3464:49:52","typeDescriptions":{"typeIdentifier":"t_contract$_IFirelinkMintableERC20_$6827","typeString":"contract IFirelinkMintableERC20"}},"id":5854,"nodeType":"ExpressionStatement","src":"3464:49:52"}]},"functionSelector":"ecc6da0c","id":5856,"implemented":true,"kind":"function","modifiers":[{"id":5847,"kind":"modifierInvocation","modifierName":{"id":5846,"name":"onlyOwner","nameLocations":["3444:9:52"],"nodeType":"IdentifierPath","referencedDeclaration":2751,"src":"3444:9:52"},"nodeType":"ModifierInvocation","src":"3444:9:52"}],"name":"setEthERC20ContractAddress","nameLocation":"3389:26:52","nodeType":"FunctionDefinition","parameters":{"id":5845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5844,"mutability":"mutable","name":"_ethAddress","nameLocation":"3424:11:52","nodeType":"VariableDeclaration","scope":5856,"src":"3416:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5843,"name":"address","nodeType":"ElementaryTypeName","src":"3416:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3415:21:52"},"returnParameters":{"id":5848,"nodeType":"ParameterList","parameters":[],"src":"3454:0:52"},"scope":6567,"src":"3380:140:52","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5876,"nodeType":"Block","src":"3613:96:52","statements":[{"expression":{"arguments":[{"expression":{"id":5866,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3642:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3646:6:52","memberName":"sender","nodeType":"MemberAccess","src":"3642:10:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5868,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3654:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3658:6:52","memberName":"sender","nodeType":"MemberAccess","src":"3654:10:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5870,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3666:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3670:5:52","memberName":"value","nodeType":"MemberAccess","src":"3666:9:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5872,"name":"_minGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"3677:12:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5873,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5860,"src":"3691:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":5865,"name":"_initiateBridgeETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"3623:18:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint32,bytes memory)"}},"id":5874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:79:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5875,"nodeType":"ExpressionStatement","src":"3623:79:52"}]},"functionSelector":"09fc8843","id":5877,"implemented":true,"kind":"function","modifiers":[{"id":5863,"kind":"modifierInvocation","modifierName":{"id":5862,"name":"onlyEOA","nameLocations":["3605:7:52"],"nodeType":"IdentifierPath","referencedDeclaration":5829,"src":"3605:7:52"},"nodeType":"ModifierInvocation","src":"3605:7:52"}],"name":"bridgeETH","nameLocation":"3532:9:52","nodeType":"FunctionDefinition","parameters":{"id":5861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5858,"mutability":"mutable","name":"_minGasLimit","nameLocation":"3549:12:52","nodeType":"VariableDeclaration","scope":5877,"src":"3542:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5857,"name":"uint32","nodeType":"ElementaryTypeName","src":"3542:6:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5860,"mutability":"mutable","name":"_extraData","nameLocation":"3578:10:52","nodeType":"VariableDeclaration","scope":5877,"src":"3563:25:52","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5859,"name":"bytes","nodeType":"ElementaryTypeName","src":"3563:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3541:48:52"},"returnParameters":{"id":5864,"nodeType":"ParameterList","parameters":[],"src":"3613:0:52"},"scope":6567,"src":"3523:186:52","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":5896,"nodeType":"Block","src":"3812:89:52","statements":[{"expression":{"arguments":[{"expression":{"id":5887,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3841:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3845:6:52","memberName":"sender","nodeType":"MemberAccess","src":"3841:10:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5889,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5879,"src":"3853:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5890,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3858:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3862:5:52","memberName":"value","nodeType":"MemberAccess","src":"3858:9:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5892,"name":"_minGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5881,"src":"3869:12:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5893,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5883,"src":"3883:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":5886,"name":"_initiateBridgeETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"3822:18:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint32,bytes memory)"}},"id":5894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:72:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5895,"nodeType":"ExpressionStatement","src":"3822:72:52"}]},"functionSelector":"e11013dd","id":5897,"implemented":true,"kind":"function","modifiers":[],"name":"bridgeETHTo","nameLocation":"3724:11:52","nodeType":"FunctionDefinition","parameters":{"id":5884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5879,"mutability":"mutable","name":"_to","nameLocation":"3744:3:52","nodeType":"VariableDeclaration","scope":5897,"src":"3736:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5878,"name":"address","nodeType":"ElementaryTypeName","src":"3736:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5881,"mutability":"mutable","name":"_minGasLimit","nameLocation":"3756:12:52","nodeType":"VariableDeclaration","scope":5897,"src":"3749:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5880,"name":"uint32","nodeType":"ElementaryTypeName","src":"3749:6:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5883,"mutability":"mutable","name":"_extraData","nameLocation":"3785:10:52","nodeType":"VariableDeclaration","scope":5897,"src":"3770:25:52","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5882,"name":"bytes","nodeType":"ElementaryTypeName","src":"3770:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3735:61:52"},"returnParameters":{"id":5885,"nodeType":"ParameterList","parameters":[],"src":"3812:0:52"},"scope":6567,"src":"3715:186:52","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":5924,"nodeType":"Block","src":"4133:123:52","statements":[{"expression":{"arguments":[{"id":5913,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5899,"src":"4164:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5914,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5901,"src":"4177:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5915,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4191:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4195:6:52","memberName":"sender","nodeType":"MemberAccess","src":"4191:10:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5917,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4203:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4207:6:52","memberName":"sender","nodeType":"MemberAccess","src":"4203:10:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5919,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5903,"src":"4215:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5920,"name":"_minGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5905,"src":"4224:12:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5921,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5907,"src":"4238:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":5912,"name":"_initiateBridgeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6187,"src":"4143:20:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,address,uint256,uint32,bytes memory)"}},"id":5922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4143:106:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5923,"nodeType":"ExpressionStatement","src":"4143:106:52"}]},"functionSelector":"87087623","id":5925,"implemented":true,"kind":"function","modifiers":[{"id":5910,"kind":"modifierInvocation","modifierName":{"id":5909,"name":"onlyEOA","nameLocations":["4121:7:52"],"nodeType":"IdentifierPath","referencedDeclaration":5829,"src":"4121:7:52"},"nodeType":"ModifierInvocation","src":"4121:7:52"}],"name":"bridgeERC20","nameLocation":"3916:11:52","nodeType":"FunctionDefinition","parameters":{"id":5908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5899,"mutability":"mutable","name":"_localToken","nameLocation":"3945:11:52","nodeType":"VariableDeclaration","scope":5925,"src":"3937:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5898,"name":"address","nodeType":"ElementaryTypeName","src":"3937:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5901,"mutability":"mutable","name":"_remoteToken","nameLocation":"3974:12:52","nodeType":"VariableDeclaration","scope":5925,"src":"3966:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5900,"name":"address","nodeType":"ElementaryTypeName","src":"3966:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5903,"mutability":"mutable","name":"_amount","nameLocation":"4004:7:52","nodeType":"VariableDeclaration","scope":5925,"src":"3996:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5902,"name":"uint256","nodeType":"ElementaryTypeName","src":"3996:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5905,"mutability":"mutable","name":"_minGasLimit","nameLocation":"4028:12:52","nodeType":"VariableDeclaration","scope":5925,"src":"4021:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5904,"name":"uint32","nodeType":"ElementaryTypeName","src":"4021:6:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5907,"mutability":"mutable","name":"_extraData","nameLocation":"4065:10:52","nodeType":"VariableDeclaration","scope":5925,"src":"4050:25:52","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5906,"name":"bytes","nodeType":"ElementaryTypeName","src":"4050:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3927:154:52"},"returnParameters":{"id":5911,"nodeType":"ParameterList","parameters":[],"src":"4133:0:52"},"scope":6567,"src":"3907:349:52","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":5951,"nodeType":"Block","src":"4495:116:52","statements":[{"expression":{"arguments":[{"id":5941,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5927,"src":"4526:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5942,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5929,"src":"4539:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5943,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4553:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4557:6:52","memberName":"sender","nodeType":"MemberAccess","src":"4553:10:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5945,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5931,"src":"4565:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5946,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5933,"src":"4570:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5947,"name":"_minGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5935,"src":"4579:12:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5948,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5937,"src":"4593:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":5940,"name":"_initiateBridgeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6187,"src":"4505:20:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,address,uint256,uint32,bytes memory)"}},"id":5949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4505:99:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5950,"nodeType":"ExpressionStatement","src":"4505:99:52"}]},"functionSelector":"540abf73","id":5952,"implemented":true,"kind":"function","modifiers":[],"name":"bridgeERC20To","nameLocation":"4271:13:52","nodeType":"FunctionDefinition","parameters":{"id":5938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5927,"mutability":"mutable","name":"_localToken","nameLocation":"4302:11:52","nodeType":"VariableDeclaration","scope":5952,"src":"4294:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5926,"name":"address","nodeType":"ElementaryTypeName","src":"4294:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5929,"mutability":"mutable","name":"_remoteToken","nameLocation":"4331:12:52","nodeType":"VariableDeclaration","scope":5952,"src":"4323:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5928,"name":"address","nodeType":"ElementaryTypeName","src":"4323:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5931,"mutability":"mutable","name":"_to","nameLocation":"4361:3:52","nodeType":"VariableDeclaration","scope":5952,"src":"4353:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5930,"name":"address","nodeType":"ElementaryTypeName","src":"4353:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5933,"mutability":"mutable","name":"_amount","nameLocation":"4382:7:52","nodeType":"VariableDeclaration","scope":5952,"src":"4374:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5932,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5935,"mutability":"mutable","name":"_minGasLimit","nameLocation":"4406:12:52","nodeType":"VariableDeclaration","scope":5952,"src":"4399:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5934,"name":"uint32","nodeType":"ElementaryTypeName","src":"4399:6:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5937,"mutability":"mutable","name":"_extraData","nameLocation":"4443:10:52","nodeType":"VariableDeclaration","scope":5952,"src":"4428:25:52","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5936,"name":"bytes","nodeType":"ElementaryTypeName","src":"4428:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4284:175:52"},"returnParameters":{"id":5939,"nodeType":"ParameterList","parameters":[],"src":"4495:0:52"},"scope":6567,"src":"4262:349:52","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":6013,"nodeType":"Block","src":"4816:532:52","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5964,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4899:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4903:5:52","memberName":"value","nodeType":"MemberAccess","src":"4899:9:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5966,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"4912:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4899:20:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"466972656c696e6b4272696467653a20616d6f756e742073656e7420646f6573206e6f74206d6174636820616d6f756e74207265717569726564","id":5968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4921:60:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_d28214aec378f26db4f85dee84beb3d1799d6b8fc4174c39b7cea5257a9672ec","typeString":"literal_string \"FirelinkBridge: amount sent does not match amount required\""},"value":"FirelinkBridge: amount sent does not match amount required"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d28214aec378f26db4f85dee84beb3d1799d6b8fc4174c39b7cea5257a9672ec","typeString":"literal_string \"FirelinkBridge: amount sent does not match amount required\""}],"id":5963,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4891:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4891:91:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5970,"nodeType":"ExpressionStatement","src":"4891:91:52"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5972,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"5000:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":5975,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5015:4:52","typeDescriptions":{"typeIdentifier":"t_contract$_FirelinkBridge_$6567","typeString":"contract FirelinkBridge"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_FirelinkBridge_$6567","typeString":"contract FirelinkBridge"}],"id":5974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5007:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5973,"name":"address","nodeType":"ElementaryTypeName","src":"5007:7:52","typeDescriptions":{}}},"id":5976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5007:13:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5000:20:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"466972656c696e6b4272696467653a2063616e6e6f742073656e6420746f2073656c66","id":5978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5022:37:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_6598455c4b1f54d2608dded68df3c04c8734131437863171378d0e2ce056ff5d","typeString":"literal_string \"FirelinkBridge: cannot send to self\""},"value":"FirelinkBridge: cannot send to self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6598455c4b1f54d2608dded68df3c04c8734131437863171378d0e2ce056ff5d","typeString":"literal_string \"FirelinkBridge: cannot send to self\""}],"id":5971,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4992:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4992:68:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5980,"nodeType":"ExpressionStatement","src":"4992:68:52"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5982,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"5078:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":5985,"name":"MESSENGER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"5093:9:52","typeDescriptions":{"typeIdentifier":"t_contract$_IFlareRelayer_$6864","typeString":"contract IFlareRelayer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IFlareRelayer_$6864","typeString":"contract IFlareRelayer"}],"id":5984,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5085:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5983,"name":"address","nodeType":"ElementaryTypeName","src":"5085:7:52","typeDescriptions":{}}},"id":5986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5085:18:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5078:25:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"466972656c696e6b4272696467653a2063616e6e6f742073656e6420746f206d657373656e676572","id":5988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5105:42:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_67e7734841fff53af73c365ab266e1bcd832b0c9bfec381055ff3d4ae56893d7","typeString":"literal_string \"FirelinkBridge: cannot send to messenger\""},"value":"FirelinkBridge: cannot send to messenger"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67e7734841fff53af73c365ab266e1bcd832b0c9bfec381055ff3d4ae56893d7","typeString":"literal_string \"FirelinkBridge: cannot send to messenger\""}],"id":5981,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5070:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5070:78:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5990,"nodeType":"ExpressionStatement","src":"5070:78:52"},{"expression":{"arguments":[{"id":5992,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5954,"src":"5182:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5993,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"5189:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5994,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"5194:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5995,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5960,"src":"5203:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":5991,"name":"_emitETHBridgeFinalized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6288,"src":"5158:23:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":5996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5158:56:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5997,"nodeType":"ExpressionStatement","src":"5158:56:52"},{"assignments":[5999],"declarations":[{"constant":false,"id":5999,"mutability":"mutable","name":"success","nameLocation":"5230:7:52","nodeType":"VariableDeclaration","scope":6013,"src":"5225:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5998,"name":"bool","nodeType":"ElementaryTypeName","src":"5225:4:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6007,"initialValue":{"arguments":[{"id":6001,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"5245:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":6002,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"5250:7:52","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":6003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5250:9:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6004,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"5261:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":6005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5270:5:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":6000,"name":"call","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6358,"src":"5240:4:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,uint256,bytes memory) returns (bool)"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5240:36:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5225:51:52"},{"expression":{"arguments":[{"id":6009,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5999,"src":"5294:7:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"466972656c696e6b4272696467653a20455448207472616e73666572206661696c6564","id":6010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5303:37:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_180c0d82056f849ae419e83e66379b3585ecb2a7efbe299f92b66392353ae9ba","typeString":"literal_string \"FirelinkBridge: ETH transfer failed\""},"value":"FirelinkBridge: ETH transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_180c0d82056f849ae419e83e66379b3585ecb2a7efbe299f92b66392353ae9ba","typeString":"literal_string \"FirelinkBridge: ETH transfer failed\""}],"id":6008,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5286:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5286:55:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6012,"nodeType":"ExpressionStatement","src":"5286:55:52"}]},"functionSelector":"1635f5fd","id":6014,"implemented":true,"kind":"function","modifiers":[],"name":"finalizeBridgeETH","nameLocation":"4626:17:52","nodeType":"FunctionDefinition","parameters":{"id":5961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5954,"mutability":"mutable","name":"_from","nameLocation":"4661:5:52","nodeType":"VariableDeclaration","scope":6014,"src":"4653:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5953,"name":"address","nodeType":"ElementaryTypeName","src":"4653:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5956,"mutability":"mutable","name":"_to","nameLocation":"4684:3:52","nodeType":"VariableDeclaration","scope":6014,"src":"4676:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5955,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5958,"mutability":"mutable","name":"_amount","nameLocation":"4705:7:52","nodeType":"VariableDeclaration","scope":6014,"src":"4697:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5957,"name":"uint256","nodeType":"ElementaryTypeName","src":"4697:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5960,"mutability":"mutable","name":"_extraData","nameLocation":"4737:10:52","nodeType":"VariableDeclaration","scope":6014,"src":"4722:25:52","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5959,"name":"bytes","nodeType":"ElementaryTypeName","src":"4722:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4643:110:52"},"returnParameters":{"id":5962,"nodeType":"ParameterList","parameters":[],"src":"4816:0:52"},"scope":6567,"src":"4617:731:52","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":6082,"nodeType":"Block","src":"5598:666:52","statements":[{"condition":{"arguments":[{"id":6030,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"5702:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6029,"name":"_isFirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6213,"src":"5677:24:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5677:37:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6071,"nodeType":"Block","src":"5994:168:52","statements":[{"expression":{"id":6061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6049,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"6008:8:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":6052,"indexExpression":{"id":6050,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"6017:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6008:21:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6053,"indexExpression":{"id":6051,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6018,"src":"6030:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6008:35:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":6054,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"6046:8:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":6056,"indexExpression":{"id":6055,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"6055:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6046:21:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6058,"indexExpression":{"id":6057,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6018,"src":"6068:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6046:35:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6059,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6024,"src":"6084:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6046:45:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6008:83:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6062,"nodeType":"ExpressionStatement","src":"6008:83:52"},{"expression":{"arguments":[{"id":6067,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6022,"src":"6138:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6068,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6024,"src":"6143:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6064,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"6112:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6063,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"6105:6:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$4654_$","typeString":"type(contract IERC20)"}},"id":6065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6105:19:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":6066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6125:12:52","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":4748,"src":"6105:32:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$4654_$","typeString":"function (contract IERC20,address,uint256)"}},"id":6069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6105:46:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6070,"nodeType":"ExpressionStatement","src":"6105:46:52"}]},"id":6072,"nodeType":"IfStatement","src":"5673:489:52","trueBody":{"id":6048,"nodeType":"Block","src":"5716:272:52","statements":[{"expression":{"arguments":[{"arguments":[{"id":6034,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"5775:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6035,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6018,"src":"5788:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6033,"name":"_isCorrectTokenPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6250,"src":"5755:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":6036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5755:46:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"466972656c696e6b4272696467653a2077726f6e672072656d6f746520746f6b656e20666f7220466972656c696e6b204d696e7461626c65204552433230206c6f63616c20746f6b656e","id":6037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5819:76:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_c3a712430aceecf753fcffd8e0ebaafa0372dece9093c61454ef087e8f1c5738","typeString":"literal_string \"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token\""},"value":"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c3a712430aceecf753fcffd8e0ebaafa0372dece9093c61454ef087e8f1c5738","typeString":"literal_string \"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token\""}],"id":6032,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5730:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5730:179:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6039,"nodeType":"ExpressionStatement","src":"5730:179:52"},{"expression":{"arguments":[{"id":6044,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6022,"src":"5964:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6045,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6024,"src":"5969:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6041,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"5946:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6040,"name":"FirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6795,"src":"5924:21:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FirelinkMintableERC20_$6795_$","typeString":"type(contract FirelinkMintableERC20)"}},"id":6042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5924:34:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_FirelinkMintableERC20_$6795","typeString":"contract FirelinkMintableERC20"}},"id":6043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5959:4:52","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":6682,"src":"5924:39:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":6046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5924:53:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6047,"nodeType":"ExpressionStatement","src":"5924:53:52"}]}},{"expression":{"arguments":[{"id":6074,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"6198:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6075,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6018,"src":"6211:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6076,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6020,"src":"6225:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6077,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6022,"src":"6232:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6078,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6024,"src":"6237:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6079,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6026,"src":"6246:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":6073,"name":"_emitERC20BridgeFinalized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6338,"src":"6172:25:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,address,uint256,bytes memory)"}},"id":6080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6172:85:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6081,"nodeType":"ExpressionStatement","src":"6172:85:52"}]},"functionSelector":"0166a07a","id":6083,"implemented":true,"kind":"function","modifiers":[],"name":"finalizeBridgeERC20","nameLocation":"5363:19:52","nodeType":"FunctionDefinition","parameters":{"id":6027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6016,"mutability":"mutable","name":"_localToken","nameLocation":"5400:11:52","nodeType":"VariableDeclaration","scope":6083,"src":"5392:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6015,"name":"address","nodeType":"ElementaryTypeName","src":"5392:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6018,"mutability":"mutable","name":"_remoteToken","nameLocation":"5429:12:52","nodeType":"VariableDeclaration","scope":6083,"src":"5421:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6017,"name":"address","nodeType":"ElementaryTypeName","src":"5421:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6020,"mutability":"mutable","name":"_from","nameLocation":"5459:5:52","nodeType":"VariableDeclaration","scope":6083,"src":"5451:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6019,"name":"address","nodeType":"ElementaryTypeName","src":"5451:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6022,"mutability":"mutable","name":"_to","nameLocation":"5482:3:52","nodeType":"VariableDeclaration","scope":6083,"src":"5474:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6021,"name":"address","nodeType":"ElementaryTypeName","src":"5474:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6024,"mutability":"mutable","name":"_amount","nameLocation":"5503:7:52","nodeType":"VariableDeclaration","scope":6083,"src":"5495:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6023,"name":"uint256","nodeType":"ElementaryTypeName","src":"5495:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6026,"mutability":"mutable","name":"_extraData","nameLocation":"5535:10:52","nodeType":"VariableDeclaration","scope":6083,"src":"5520:25:52","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6025,"name":"bytes","nodeType":"ElementaryTypeName","src":"5520:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5382:169:52"},"returnParameters":{"id":6028,"nodeType":"ParameterList","parameters":[],"src":"5598:0:52"},"scope":6567,"src":"5354:910:52","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6111,"nodeType":"Block","src":"6456:179:52","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6097,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6474:3:52","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6478:5:52","memberName":"value","nodeType":"MemberAccess","src":"6474:9:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6099,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"6487:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6474:20:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"466972656c696e6b4272696467653a206272696467696e6720455448206d75737420696e636c7564652073756666696369656e74204554482076616c7565","id":6101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6496:64:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_37f605a33f6df33fa666a6ababa7ce30fb071eb9b9171c0ca3db1862332a71e7","typeString":"literal_string \"FirelinkBridge: bridging ETH must include sufficient ETH value\""},"value":"FirelinkBridge: bridging ETH must include sufficient ETH value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_37f605a33f6df33fa666a6ababa7ce30fb071eb9b9171c0ca3db1862332a71e7","typeString":"literal_string \"FirelinkBridge: bridging ETH must include sufficient ETH value\""}],"id":6096,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6466:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6466:95:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6103,"nodeType":"ExpressionStatement","src":"6466:95:52"},{"expression":{"arguments":[{"id":6105,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6085,"src":"6596:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6106,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"6603:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6107,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"6608:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6108,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6093,"src":"6617:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6104,"name":"_emitETHBridgeInitiated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6269,"src":"6572:23:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":6109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:56:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6110,"nodeType":"ExpressionStatement","src":"6572:56:52"}]},"id":6112,"implemented":true,"kind":"function","modifiers":[],"name":"_initiateBridgeETH","nameLocation":"6279:18:52","nodeType":"FunctionDefinition","parameters":{"id":6094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6085,"mutability":"mutable","name":"_from","nameLocation":"6315:5:52","nodeType":"VariableDeclaration","scope":6112,"src":"6307:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6084,"name":"address","nodeType":"ElementaryTypeName","src":"6307:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6087,"mutability":"mutable","name":"_to","nameLocation":"6338:3:52","nodeType":"VariableDeclaration","scope":6112,"src":"6330:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6086,"name":"address","nodeType":"ElementaryTypeName","src":"6330:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6089,"mutability":"mutable","name":"_amount","nameLocation":"6359:7:52","nodeType":"VariableDeclaration","scope":6112,"src":"6351:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6088,"name":"uint256","nodeType":"ElementaryTypeName","src":"6351:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6091,"mutability":"mutable","name":"_minGasLimit","nameLocation":"6383:12:52","nodeType":"VariableDeclaration","scope":6112,"src":"6376:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6090,"name":"uint32","nodeType":"ElementaryTypeName","src":"6376:6:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6093,"mutability":"mutable","name":"_extraData","nameLocation":"6418:10:52","nodeType":"VariableDeclaration","scope":6112,"src":"6405:23:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6092,"name":"bytes","nodeType":"ElementaryTypeName","src":"6405:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6297:137:52"},"returnParameters":{"id":6095,"nodeType":"ParameterList","parameters":[],"src":"6456:0:52"},"scope":6567,"src":"6270:365:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6186,"nodeType":"Block","src":"6888:1023:52","statements":[{"condition":{"arguments":[{"id":6130,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"6927:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6129,"name":"_isFirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6213,"src":"6902:24:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6902:37:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6175,"nodeType":"Block","src":"7221:189:52","statements":[{"expression":{"arguments":[{"id":6153,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6118,"src":"7272:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6156,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7287:4:52","typeDescriptions":{"typeIdentifier":"t_contract$_FirelinkBridge_$6567","typeString":"contract FirelinkBridge"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_FirelinkBridge_$6567","typeString":"contract FirelinkBridge"}],"id":6155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7279:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6154,"name":"address","nodeType":"ElementaryTypeName","src":"7279:7:52","typeDescriptions":{}}},"id":6157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7279:13:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6158,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6122,"src":"7294:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6150,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"7242:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6149,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"7235:6:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$4654_$","typeString":"type(contract IERC20)"}},"id":6151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7235:19:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$4654","typeString":"contract IERC20"}},"id":6152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7255:16:52","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":4775,"src":"7235:36:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$4654_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$4654_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":6159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7235:67:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6160,"nodeType":"ExpressionStatement","src":"7235:67:52"},{"expression":{"id":6173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6161,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"7316:8:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":6164,"indexExpression":{"id":6162,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"7325:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7316:21:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6165,"indexExpression":{"id":6163,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6116,"src":"7338:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7316:35:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":6166,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"7354:8:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":6168,"indexExpression":{"id":6167,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"7363:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7354:21:52","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6170,"indexExpression":{"id":6169,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6116,"src":"7376:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7354:35:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6171,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6122,"src":"7392:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7354:45:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7316:83:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6174,"nodeType":"ExpressionStatement","src":"7316:83:52"}]},"id":6176,"nodeType":"IfStatement","src":"6898:512:52","trueBody":{"id":6148,"nodeType":"Block","src":"6941:274:52","statements":[{"expression":{"arguments":[{"arguments":[{"id":6134,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"7000:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6135,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6116,"src":"7013:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6133,"name":"_isCorrectTokenPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6250,"src":"6980:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":6136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6980:46:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"466972656c696e6b4272696467653a2077726f6e672072656d6f746520746f6b656e20666f7220466972656c696e6b204d696e7461626c65204552433230206c6f63616c20746f6b656e","id":6137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7044:76:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_c3a712430aceecf753fcffd8e0ebaafa0372dece9093c61454ef087e8f1c5738","typeString":"literal_string \"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token\""},"value":"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c3a712430aceecf753fcffd8e0ebaafa0372dece9093c61454ef087e8f1c5738","typeString":"literal_string \"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token\""}],"id":6132,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6955:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6955:179:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6139,"nodeType":"ExpressionStatement","src":"6955:179:52"},{"expression":{"arguments":[{"id":6144,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6118,"src":"7189:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6145,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6122,"src":"7196:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6141,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"7171:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6140,"name":"FirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6795,"src":"7149:21:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FirelinkMintableERC20_$6795_$","typeString":"type(contract FirelinkMintableERC20)"}},"id":6142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7149:34:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_FirelinkMintableERC20_$6795","typeString":"contract FirelinkMintableERC20"}},"id":6143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7184:4:52","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":6706,"src":"7149:39:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":6146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7149:55:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6147,"nodeType":"ExpressionStatement","src":"7149:55:52"}]}},{"expression":{"arguments":[{"id":6178,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6114,"src":"7446:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6179,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6116,"src":"7459:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6180,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6118,"src":"7473:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6181,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6120,"src":"7480:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6182,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6122,"src":"7485:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6183,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6126,"src":"7494:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6177,"name":"_emitERC20BridgeInitiated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6313,"src":"7420:25:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,address,uint256,bytes memory)"}},"id":6184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7420:85:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6185,"nodeType":"ExpressionStatement","src":"7420:85:52"}]},"id":6187,"implemented":true,"kind":"function","modifiers":[],"name":"_initiateBridgeERC20","nameLocation":"6650:20:52","nodeType":"FunctionDefinition","parameters":{"id":6127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6114,"mutability":"mutable","name":"_localToken","nameLocation":"6688:11:52","nodeType":"VariableDeclaration","scope":6187,"src":"6680:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6113,"name":"address","nodeType":"ElementaryTypeName","src":"6680:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6116,"mutability":"mutable","name":"_remoteToken","nameLocation":"6717:12:52","nodeType":"VariableDeclaration","scope":6187,"src":"6709:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6115,"name":"address","nodeType":"ElementaryTypeName","src":"6709:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6118,"mutability":"mutable","name":"_from","nameLocation":"6747:5:52","nodeType":"VariableDeclaration","scope":6187,"src":"6739:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6117,"name":"address","nodeType":"ElementaryTypeName","src":"6739:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6120,"mutability":"mutable","name":"_to","nameLocation":"6770:3:52","nodeType":"VariableDeclaration","scope":6187,"src":"6762:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6119,"name":"address","nodeType":"ElementaryTypeName","src":"6762:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6122,"mutability":"mutable","name":"_amount","nameLocation":"6791:7:52","nodeType":"VariableDeclaration","scope":6187,"src":"6783:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6121,"name":"uint256","nodeType":"ElementaryTypeName","src":"6783:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6124,"mutability":"mutable","name":"_minGasLimit","nameLocation":"6815:12:52","nodeType":"VariableDeclaration","scope":6187,"src":"6808:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6123,"name":"uint32","nodeType":"ElementaryTypeName","src":"6808:6:52","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6126,"mutability":"mutable","name":"_extraData","nameLocation":"6850:10:52","nodeType":"VariableDeclaration","scope":6187,"src":"6837:23:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6125,"name":"bytes","nodeType":"ElementaryTypeName","src":"6837:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6670:196:52"},"returnParameters":{"id":6128,"nodeType":"ParameterList","parameters":[],"src":"6888:0:52"},"scope":6567,"src":"6641:1270:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6212,"nodeType":"Block","src":"7996:200:52","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6196,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"8045:6:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":6198,"name":"ILegacyMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"8058:20:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILegacyMintableERC20_$6850_$","typeString":"type(contract ILegacyMintableERC20)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ILegacyMintableERC20_$6850_$","typeString":"type(contract ILegacyMintableERC20)"}],"id":6197,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8053:4:52","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8053:26:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ILegacyMintableERC20_$6850","typeString":"type(contract ILegacyMintableERC20)"}},"id":6200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8080:11:52","memberName":"interfaceId","nodeType":"MemberAccess","src":"8053:38:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":6194,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"8013:13:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC165Checker_$5645_$","typeString":"type(library ERC165Checker)"}},"id":6195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8027:17:52","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":5501,"src":"8013:31:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":6201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8013:79:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":6204,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"8140:6:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":6206,"name":"IFirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6827,"src":"8153:22:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFirelinkMintableERC20_$6827_$","typeString":"type(contract IFirelinkMintableERC20)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IFirelinkMintableERC20_$6827_$","typeString":"type(contract IFirelinkMintableERC20)"}],"id":6205,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8148:4:52","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8148:28:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IFirelinkMintableERC20_$6827","typeString":"type(contract IFirelinkMintableERC20)"}},"id":6208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8177:11:52","memberName":"interfaceId","nodeType":"MemberAccess","src":"8148:40:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":6202,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"8108:13:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC165Checker_$5645_$","typeString":"type(library ERC165Checker)"}},"id":6203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8122:17:52","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":5501,"src":"8108:31:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":6209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8108:81:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8013:176:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6193,"id":6211,"nodeType":"Return","src":"8006:183:52"}]},"id":6213,"implemented":true,"kind":"function","modifiers":[],"name":"_isFirelinkMintableERC20","nameLocation":"7926:24:52","nodeType":"FunctionDefinition","parameters":{"id":6190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6189,"mutability":"mutable","name":"_token","nameLocation":"7959:6:52","nodeType":"VariableDeclaration","scope":6213,"src":"7951:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6188,"name":"address","nodeType":"ElementaryTypeName","src":"7951:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7950:16:52"},"returnParameters":{"id":6193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6213,"src":"7990:4:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6191,"name":"bool","nodeType":"ElementaryTypeName","src":"7990:4:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7989:6:52"},"scope":6567,"src":"7917:279:52","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6249,"nodeType":"Block","src":"8305:307:52","statements":[{"condition":{"arguments":[{"id":6224,"name":"_mintableToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6215,"src":"8351:14:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":6226,"name":"ILegacyMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"8372:20:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILegacyMintableERC20_$6850_$","typeString":"type(contract ILegacyMintableERC20)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ILegacyMintableERC20_$6850_$","typeString":"type(contract ILegacyMintableERC20)"}],"id":6225,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8367:4:52","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8367:26:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ILegacyMintableERC20_$6850","typeString":"type(contract ILegacyMintableERC20)"}},"id":6228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8394:11:52","memberName":"interfaceId","nodeType":"MemberAccess","src":"8367:38:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":6222,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"8319:13:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC165Checker_$5645_$","typeString":"type(library ERC165Checker)"}},"id":6223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8333:17:52","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":5501,"src":"8319:31:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":6229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8319:87:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6247,"nodeType":"Block","src":"8507:99:52","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6239,"name":"_otherToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"8528:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":6241,"name":"_mintableToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6215,"src":"8566:14:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6240,"name":"IFirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6827,"src":"8543:22:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFirelinkMintableERC20_$6827_$","typeString":"type(contract IFirelinkMintableERC20)"}},"id":6242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8543:38:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFirelinkMintableERC20_$6827","typeString":"contract IFirelinkMintableERC20"}},"id":6243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8582:11:52","memberName":"remoteToken","nodeType":"MemberAccess","referencedDeclaration":6807,"src":"8543:50:52","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8543:52:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8528:67:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6221,"id":6246,"nodeType":"Return","src":"8521:74:52"}]},"id":6248,"nodeType":"IfStatement","src":"8315:291:52","trueBody":{"id":6238,"nodeType":"Block","src":"8408:93:52","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6230,"name":"_otherToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"8429:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":6232,"name":"_mintableToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6215,"src":"8465:14:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6231,"name":"ILegacyMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"8444:20:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILegacyMintableERC20_$6850_$","typeString":"type(contract ILegacyMintableERC20)"}},"id":6233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8444:36:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ILegacyMintableERC20_$6850","typeString":"contract ILegacyMintableERC20"}},"id":6234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8481:7:52","memberName":"l1Token","nodeType":"MemberAccess","referencedDeclaration":6835,"src":"8444:44:52","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8444:46:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8429:61:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6221,"id":6237,"nodeType":"Return","src":"8422:68:52"}]}}]},"id":6250,"implemented":true,"kind":"function","modifiers":[],"name":"_isCorrectTokenPair","nameLocation":"8211:19:52","nodeType":"FunctionDefinition","parameters":{"id":6218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6215,"mutability":"mutable","name":"_mintableToken","nameLocation":"8239:14:52","nodeType":"VariableDeclaration","scope":6250,"src":"8231:22:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6214,"name":"address","nodeType":"ElementaryTypeName","src":"8231:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6217,"mutability":"mutable","name":"_otherToken","nameLocation":"8263:11:52","nodeType":"VariableDeclaration","scope":6250,"src":"8255:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6216,"name":"address","nodeType":"ElementaryTypeName","src":"8255:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8230:45:52"},"returnParameters":{"id":6221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6250,"src":"8299:4:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6219,"name":"bool","nodeType":"ElementaryTypeName","src":"8299:4:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8298:6:52"},"scope":6567,"src":"8202:410:52","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6268,"nodeType":"Block","src":"8796:73:52","statements":[{"eventCall":{"arguments":[{"id":6262,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6252,"src":"8830:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6263,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6254,"src":"8837:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6264,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6256,"src":"8842:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6265,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6258,"src":"8851:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6261,"name":"ETHBridgeInitiated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"8811:18:52","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":6266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8811:51:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6267,"nodeType":"EmitStatement","src":"8806:56:52"}]},"id":6269,"implemented":true,"kind":"function","modifiers":[],"name":"_emitETHBridgeInitiated","nameLocation":"8627:23:52","nodeType":"FunctionDefinition","parameters":{"id":6259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6252,"mutability":"mutable","name":"_from","nameLocation":"8668:5:52","nodeType":"VariableDeclaration","scope":6269,"src":"8660:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6251,"name":"address","nodeType":"ElementaryTypeName","src":"8660:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6254,"mutability":"mutable","name":"_to","nameLocation":"8691:3:52","nodeType":"VariableDeclaration","scope":6269,"src":"8683:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6253,"name":"address","nodeType":"ElementaryTypeName","src":"8683:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6256,"mutability":"mutable","name":"_amount","nameLocation":"8712:7:52","nodeType":"VariableDeclaration","scope":6269,"src":"8704:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6255,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6258,"mutability":"mutable","name":"_extraData","nameLocation":"8742:10:52","nodeType":"VariableDeclaration","scope":6269,"src":"8729:23:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6257,"name":"bytes","nodeType":"ElementaryTypeName","src":"8729:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8650:108:52"},"returnParameters":{"id":6260,"nodeType":"ParameterList","parameters":[],"src":"8796:0:52"},"scope":6567,"src":"8618:251:52","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":6287,"nodeType":"Block","src":"9053:73:52","statements":[{"eventCall":{"arguments":[{"id":6281,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"9087:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6282,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6273,"src":"9094:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6283,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6275,"src":"9099:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6284,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6277,"src":"9108:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6280,"name":"ETHBridgeFinalized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5743,"src":"9068:18:52","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":6285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9068:51:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6286,"nodeType":"EmitStatement","src":"9063:56:52"}]},"id":6288,"implemented":true,"kind":"function","modifiers":[],"name":"_emitETHBridgeFinalized","nameLocation":"8884:23:52","nodeType":"FunctionDefinition","parameters":{"id":6278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6271,"mutability":"mutable","name":"_from","nameLocation":"8925:5:52","nodeType":"VariableDeclaration","scope":6288,"src":"8917:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6270,"name":"address","nodeType":"ElementaryTypeName","src":"8917:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6273,"mutability":"mutable","name":"_to","nameLocation":"8948:3:52","nodeType":"VariableDeclaration","scope":6288,"src":"8940:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6272,"name":"address","nodeType":"ElementaryTypeName","src":"8940:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6275,"mutability":"mutable","name":"_amount","nameLocation":"8969:7:52","nodeType":"VariableDeclaration","scope":6288,"src":"8961:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6274,"name":"uint256","nodeType":"ElementaryTypeName","src":"8961:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6277,"mutability":"mutable","name":"_extraData","nameLocation":"8999:10:52","nodeType":"VariableDeclaration","scope":6288,"src":"8986:23:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6276,"name":"bytes","nodeType":"ElementaryTypeName","src":"8986:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8907:108:52"},"returnParameters":{"id":6279,"nodeType":"ParameterList","parameters":[],"src":"9053:0:52"},"scope":6567,"src":"8875:251:52","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":6312,"nodeType":"Block","src":"9371:102:52","statements":[{"eventCall":{"arguments":[{"id":6304,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6290,"src":"9407:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6305,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6292,"src":"9420:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6306,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6294,"src":"9434:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6307,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6296,"src":"9441:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6308,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6298,"src":"9446:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6309,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6300,"src":"9455:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6303,"name":"ERC20BridgeInitiated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5757,"src":"9386:20:52","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,address,uint256,bytes memory)"}},"id":6310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9386:80:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6311,"nodeType":"EmitStatement","src":"9381:85:52"}]},"id":6313,"implemented":true,"kind":"function","modifiers":[],"name":"_emitERC20BridgeInitiated","nameLocation":"9141:25:52","nodeType":"FunctionDefinition","parameters":{"id":6301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6290,"mutability":"mutable","name":"_localToken","nameLocation":"9184:11:52","nodeType":"VariableDeclaration","scope":6313,"src":"9176:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6289,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6292,"mutability":"mutable","name":"_remoteToken","nameLocation":"9213:12:52","nodeType":"VariableDeclaration","scope":6313,"src":"9205:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6291,"name":"address","nodeType":"ElementaryTypeName","src":"9205:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6294,"mutability":"mutable","name":"_from","nameLocation":"9243:5:52","nodeType":"VariableDeclaration","scope":6313,"src":"9235:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6293,"name":"address","nodeType":"ElementaryTypeName","src":"9235:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6296,"mutability":"mutable","name":"_to","nameLocation":"9266:3:52","nodeType":"VariableDeclaration","scope":6313,"src":"9258:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6295,"name":"address","nodeType":"ElementaryTypeName","src":"9258:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6298,"mutability":"mutable","name":"_amount","nameLocation":"9287:7:52","nodeType":"VariableDeclaration","scope":6313,"src":"9279:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6297,"name":"uint256","nodeType":"ElementaryTypeName","src":"9279:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6300,"mutability":"mutable","name":"_extraData","nameLocation":"9317:10:52","nodeType":"VariableDeclaration","scope":6313,"src":"9304:23:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6299,"name":"bytes","nodeType":"ElementaryTypeName","src":"9304:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9166:167:52"},"returnParameters":{"id":6302,"nodeType":"ParameterList","parameters":[],"src":"9371:0:52"},"scope":6567,"src":"9132:341:52","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":6337,"nodeType":"Block","src":"9718:102:52","statements":[{"eventCall":{"arguments":[{"id":6329,"name":"_localToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"9754:11:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6330,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6317,"src":"9767:12:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6331,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6319,"src":"9781:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6332,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6321,"src":"9788:3:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6333,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6323,"src":"9793:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6334,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6325,"src":"9802:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6328,"name":"ERC20BridgeFinalized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5771,"src":"9733:20:52","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,address,uint256,bytes memory)"}},"id":6335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9733:80:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6336,"nodeType":"EmitStatement","src":"9728:85:52"}]},"id":6338,"implemented":true,"kind":"function","modifiers":[],"name":"_emitERC20BridgeFinalized","nameLocation":"9488:25:52","nodeType":"FunctionDefinition","parameters":{"id":6326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6315,"mutability":"mutable","name":"_localToken","nameLocation":"9531:11:52","nodeType":"VariableDeclaration","scope":6338,"src":"9523:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6314,"name":"address","nodeType":"ElementaryTypeName","src":"9523:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6317,"mutability":"mutable","name":"_remoteToken","nameLocation":"9560:12:52","nodeType":"VariableDeclaration","scope":6338,"src":"9552:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6316,"name":"address","nodeType":"ElementaryTypeName","src":"9552:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6319,"mutability":"mutable","name":"_from","nameLocation":"9590:5:52","nodeType":"VariableDeclaration","scope":6338,"src":"9582:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6318,"name":"address","nodeType":"ElementaryTypeName","src":"9582:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6321,"mutability":"mutable","name":"_to","nameLocation":"9613:3:52","nodeType":"VariableDeclaration","scope":6338,"src":"9605:11:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6320,"name":"address","nodeType":"ElementaryTypeName","src":"9605:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6323,"mutability":"mutable","name":"_amount","nameLocation":"9634:7:52","nodeType":"VariableDeclaration","scope":6338,"src":"9626:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6322,"name":"uint256","nodeType":"ElementaryTypeName","src":"9626:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6325,"mutability":"mutable","name":"_extraData","nameLocation":"9664:10:52","nodeType":"VariableDeclaration","scope":6338,"src":"9651:23:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6324,"name":"bytes","nodeType":"ElementaryTypeName","src":"9651:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9513:167:52"},"returnParameters":{"id":6327,"nodeType":"ParameterList","parameters":[],"src":"9718:0:52"},"scope":6567,"src":"9479:341:52","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":6357,"nodeType":"Block","src":"9935:427:52","statements":[{"assignments":[6352],"declarations":[{"constant":false,"id":6352,"mutability":"mutable","name":"_success","nameLocation":"9950:8:52","nodeType":"VariableDeclaration","scope":6357,"src":"9945:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6351,"name":"bool","nodeType":"ElementaryTypeName","src":"9945:4:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6353,"nodeType":"VariableDeclarationStatement","src":"9945:13:52"},{"AST":{"nodeType":"YulBlock","src":"9977:354:52","statements":[{"nodeType":"YulAssignment","src":"9991:330:52","value":{"arguments":[{"name":"_gas","nodeType":"YulIdentifier","src":"10045:4:52"},{"name":"_target","nodeType":"YulIdentifier","src":"10078:7:52"},{"name":"_value","nodeType":"YulIdentifier","src":"10120:6:52"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"10167:9:52"},{"kind":"number","nodeType":"YulLiteral","src":"10178:2:52","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10163:3:52"},"nodeType":"YulFunctionCall","src":"10163:18:52"},{"arguments":[{"name":"_calldata","nodeType":"YulIdentifier","src":"10218:9:52"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10212:5:52"},"nodeType":"YulFunctionCall","src":"10212:16:52"},{"kind":"number","nodeType":"YulLiteral","src":"10259:1:52","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10292:1:52","type":"","value":"0"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"10019:4:52"},"nodeType":"YulFunctionCall","src":"10019:302:52"},"variableNames":[{"name":"_success","nodeType":"YulIdentifier","src":"9991:8:52"}]}]},"evmVersion":"london","externalReferences":[{"declaration":6346,"isOffset":false,"isSlot":false,"src":"10167:9:52","valueSize":1},{"declaration":6346,"isOffset":false,"isSlot":false,"src":"10218:9:52","valueSize":1},{"declaration":6342,"isOffset":false,"isSlot":false,"src":"10045:4:52","valueSize":1},{"declaration":6352,"isOffset":false,"isSlot":false,"src":"9991:8:52","valueSize":1},{"declaration":6340,"isOffset":false,"isSlot":false,"src":"10078:7:52","valueSize":1},{"declaration":6344,"isOffset":false,"isSlot":false,"src":"10120:6:52","valueSize":1}],"id":6354,"nodeType":"InlineAssembly","src":"9968:363:52"},{"expression":{"id":6355,"name":"_success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6352,"src":"10347:8:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6350,"id":6356,"nodeType":"Return","src":"10340:15:52"}]},"id":6358,"implemented":true,"kind":"function","modifiers":[],"name":"call","nameLocation":"9835:4:52","nodeType":"FunctionDefinition","parameters":{"id":6347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6340,"mutability":"mutable","name":"_target","nameLocation":"9848:7:52","nodeType":"VariableDeclaration","scope":6358,"src":"9840:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6339,"name":"address","nodeType":"ElementaryTypeName","src":"9840:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6342,"mutability":"mutable","name":"_gas","nameLocation":"9865:4:52","nodeType":"VariableDeclaration","scope":6358,"src":"9857:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6341,"name":"uint256","nodeType":"ElementaryTypeName","src":"9857:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6344,"mutability":"mutable","name":"_value","nameLocation":"9879:6:52","nodeType":"VariableDeclaration","scope":6358,"src":"9871:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6343,"name":"uint256","nodeType":"ElementaryTypeName","src":"9871:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6346,"mutability":"mutable","name":"_calldata","nameLocation":"9900:9:52","nodeType":"VariableDeclaration","scope":6358,"src":"9887:22:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6345,"name":"bytes","nodeType":"ElementaryTypeName","src":"9887:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9839:71:52"},"returnParameters":{"id":6350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6349,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6358,"src":"9929:4:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6348,"name":"bool","nodeType":"ElementaryTypeName","src":"9929:4:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9928:6:52"},"scope":6567,"src":"9826:536:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"FirelinkBridge.EventInfo","id":6367,"members":[{"constant":false,"id":6360,"mutability":"mutable","name":"sender","nameLocation":"10403:6:52","nodeType":"VariableDeclaration","scope":6367,"src":"10395:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6359,"name":"address","nodeType":"ElementaryTypeName","src":"10395:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6362,"mutability":"mutable","name":"receiver","nameLocation":"10427:8:52","nodeType":"VariableDeclaration","scope":6367,"src":"10419:16:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6361,"name":"address","nodeType":"ElementaryTypeName","src":"10419:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6364,"mutability":"mutable","name":"value","nameLocation":"10453:5:52","nodeType":"VariableDeclaration","scope":6367,"src":"10445:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6363,"name":"uint256","nodeType":"ElementaryTypeName","src":"10445:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6366,"mutability":"mutable","name":"data","nameLocation":"10474:4:52","nodeType":"VariableDeclaration","scope":6367,"src":"10468:10:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":6365,"name":"bytes","nodeType":"ElementaryTypeName","src":"10468:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"EventInfo","nameLocation":"10375:9:52","nodeType":"StructDefinition","scope":6567,"src":"10368:117:52","visibility":"public"},{"canonicalName":"FirelinkBridge.TransactionInfo","id":6377,"members":[{"constant":false,"id":6370,"mutability":"mutable","name":"originalTransaction","nameLocation":"10545:19:52","nodeType":"VariableDeclaration","scope":6377,"src":"10524:40:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_storage_ptr","typeString":"struct EVMTransaction.Proof"},"typeName":{"id":6369,"nodeType":"UserDefinedTypeName","pathNode":{"id":6368,"name":"EVMTransaction.Proof","nameLocations":["10524:14:52","10539:5:52"],"nodeType":"IdentifierPath","referencedDeclaration":1455,"src":"10524:20:52"},"referencedDeclaration":1455,"src":"10524:20:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_storage_ptr","typeString":"struct EVMTransaction.Proof"}},"visibility":"internal"},{"constant":false,"id":6372,"mutability":"mutable","name":"eventNumber","nameLocation":"10582:11:52","nodeType":"VariableDeclaration","scope":6377,"src":"10574:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6371,"name":"uint256","nodeType":"ElementaryTypeName","src":"10574:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6376,"mutability":"mutable","name":"eventInfo","nameLocation":"10615:9:52","nodeType":"VariableDeclaration","scope":6377,"src":"10603:21:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.EventInfo[]"},"typeName":{"baseType":{"id":6374,"nodeType":"UserDefinedTypeName","pathNode":{"id":6373,"name":"EventInfo","nameLocations":["10603:9:52"],"nodeType":"IdentifierPath","referencedDeclaration":6367,"src":"10603:9:52"},"referencedDeclaration":6367,"src":"10603:9:52","typeDescriptions":{"typeIdentifier":"t_struct$_EventInfo_$6367_storage_ptr","typeString":"struct FirelinkBridge.EventInfo"}},"id":6375,"nodeType":"ArrayTypeName","src":"10603:11:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.EventInfo[]"}},"visibility":"internal"}],"name":"TransactionInfo","nameLocation":"10498:15:52","nodeType":"StructDefinition","scope":6567,"src":"10491:140:52","visibility":"public"},{"body":{"id":6392,"nodeType":"Block","src":"10757:163:52","statements":[{"expression":{"arguments":[{"id":6389,"name":"transaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6380,"src":"10901:11:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof calldata"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6385,"name":"FlareContractsRegistryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"10774:29:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FlareContractsRegistryLibrary_$2025_$","typeString":"type(library FlareContractsRegistryLibrary)"}},"id":6386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10821:39:52","memberName":"auxiliaryGetIEVMTransactionVerification","nodeType":"MemberAccess","referencedDeclaration":1969,"src":"10774:86:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IEVMTransactionVerification_$1549_$","typeString":"function () view returns (contract IEVMTransactionVerification)"}},"id":6387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10774:88:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEVMTransactionVerification_$1549","typeString":"contract IEVMTransactionVerification"}},"id":6388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10880:20:52","memberName":"verifyEVMTransaction","nodeType":"MemberAccess","referencedDeclaration":1548,"src":"10774:126:52","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_struct$_Proof_$1455_memory_ptr_$returns$_t_bool_$","typeString":"function (struct EVMTransaction.Proof memory) view external returns (bool)"}},"id":6390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10774:139:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6384,"id":6391,"nodeType":"Return","src":"10767:146:52"}]},"functionSelector":"09f5dc91","id":6393,"implemented":true,"kind":"function","modifiers":[],"name":"isEVMTransactionProofValid","nameLocation":"10646:26:52","nodeType":"FunctionDefinition","parameters":{"id":6381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6380,"mutability":"mutable","name":"transaction","nameLocation":"10712:11:52","nodeType":"VariableDeclaration","scope":6393,"src":"10682:41:52","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof"},"typeName":{"id":6379,"nodeType":"UserDefinedTypeName","pathNode":{"id":6378,"name":"EVMTransaction.Proof","nameLocations":["10682:14:52","10697:5:52"],"nodeType":"IdentifierPath","referencedDeclaration":1455,"src":"10682:20:52"},"referencedDeclaration":1455,"src":"10682:20:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_storage_ptr","typeString":"struct EVMTransaction.Proof"}},"visibility":"internal"}],"src":"10672:57:52"},"returnParameters":{"id":6384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6393,"src":"10751:4:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6382,"name":"bool","nodeType":"ElementaryTypeName","src":"10751:4:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10750:6:52"},"scope":6567,"src":"10637:283:52","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6512,"nodeType":"Block","src":"11016:960:52","statements":[{"expression":{"arguments":[{"arguments":[{"id":6401,"name":"_transaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"11061:12:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof calldata"}],"id":6400,"name":"isEVMTransactionProofValid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6393,"src":"11034:26:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Proof_$1455_calldata_ptr_$returns$_t_bool_$","typeString":"function (struct EVMTransaction.Proof calldata) view returns (bool)"}},"id":6402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11034:40:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207472616e73616374696f6e2070726f6f66","id":6403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11076:27:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_b419ebb6c1cc359373f2cb402c72f5c67616e67296d9d7fcc59407e95ff17400","typeString":"literal_string \"Invalid transaction proof\""},"value":"Invalid transaction proof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b419ebb6c1cc359373f2cb402c72f5c67616e67296d9d7fcc59407e95ff17400","typeString":"literal_string \"Invalid transaction proof\""}],"id":6399,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11026:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11026:78:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6405,"nodeType":"ExpressionStatement","src":"11026:78:52"},{"assignments":[6407],"declarations":[{"constant":false,"id":6407,"mutability":"mutable","name":"transactionIndex","nameLocation":"11123:16:52","nodeType":"VariableDeclaration","scope":6512,"src":"11115:24:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6406,"name":"uint256","nodeType":"ElementaryTypeName","src":"11115:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6410,"initialValue":{"expression":{"id":6408,"name":"transactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"11142:12:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref[] storage ref"}},"id":6409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11155:6:52","memberName":"length","nodeType":"MemberAccess","src":"11142:19:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11115:46:52"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6411,"name":"transactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"11171:12:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref[] storage ref"}},"id":6413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11184:4:52","memberName":"push","nodeType":"MemberAccess","src":"11171:17:52","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage_ptr_$returns$_t_struct$_TransactionInfo_$6377_storage_$bound_to$_t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage_ptr_$","typeString":"function (struct FirelinkBridge.TransactionInfo storage ref[] storage pointer) returns (struct FirelinkBridge.TransactionInfo storage ref)"}},"id":6414,"isConstant":false,"isLValue":true,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11171:19:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref"}},"id":6415,"nodeType":"ExpressionStatement","src":"11171:19:52"},{"expression":{"id":6421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6416,"name":"transactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"11200:12:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref[] storage ref"}},"id":6418,"indexExpression":{"id":6417,"name":"transactionIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6407,"src":"11213:16:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11200:30:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref"}},"id":6419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11231:19:52","memberName":"originalTransaction","nodeType":"MemberAccess","referencedDeclaration":6370,"src":"11200:50:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_storage","typeString":"struct EVMTransaction.Proof storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6420,"name":"_transaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"11253:12:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof calldata"}},"src":"11200:65:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_storage","typeString":"struct EVMTransaction.Proof storage ref"}},"id":6422,"nodeType":"ExpressionStatement","src":"11200:65:52"},{"expression":{"id":6432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6423,"name":"transactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"11275:12:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref[] storage ref"}},"id":6425,"indexExpression":{"id":6424,"name":"transactionIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6407,"src":"11288:16:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11275:30:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref"}},"id":6426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11306:11:52","memberName":"eventNumber","nodeType":"MemberAccess","referencedDeclaration":6372,"src":"11275:42:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"expression":{"expression":{"id":6427,"name":"_transaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"11320:12:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof calldata"}},"id":6428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11333:4:52","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":1454,"src":"11320:17:52","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1448_calldata_ptr","typeString":"struct EVMTransaction.Response calldata"}},"id":6429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11338:12:52","memberName":"responseBody","nodeType":"MemberAccess","referencedDeclaration":1447,"src":"11320:30:52","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1488_calldata_ptr","typeString":"struct EVMTransaction.ResponseBody calldata"}},"id":6430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11351:6:52","memberName":"events","nodeType":"MemberAccess","referencedDeclaration":1487,"src":"11320:37:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Event_$1500_calldata_ptr_$dyn_calldata_ptr","typeString":"struct EVMTransaction.Event calldata[] calldata"}},"id":6431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11358:6:52","memberName":"length","nodeType":"MemberAccess","src":"11320:44:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11275:89:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6433,"nodeType":"ExpressionStatement","src":"11275:89:52"},{"assignments":[6438],"declarations":[{"constant":false,"id":6438,"mutability":"mutable","name":"eventInfo","nameLocation":"11394:9:52","nodeType":"VariableDeclaration","scope":6512,"src":"11374:29:52","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.EventInfo[]"},"typeName":{"baseType":{"id":6436,"nodeType":"UserDefinedTypeName","pathNode":{"id":6435,"name":"EventInfo","nameLocations":["11374:9:52"],"nodeType":"IdentifierPath","referencedDeclaration":6367,"src":"11374:9:52"},"referencedDeclaration":6367,"src":"11374:9:52","typeDescriptions":{"typeIdentifier":"t_struct$_EventInfo_$6367_storage_ptr","typeString":"struct FirelinkBridge.EventInfo"}},"id":6437,"nodeType":"ArrayTypeName","src":"11374:11:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.EventInfo[]"}},"visibility":"internal"}],"id":6443,"initialValue":{"expression":{"baseExpression":{"id":6439,"name":"transactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"11406:12:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref[] storage ref"}},"id":6441,"indexExpression":{"id":6440,"name":"transactionIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6407,"src":"11419:16:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11406:30:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref"}},"id":6442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11437:9:52","memberName":"eventInfo","nodeType":"MemberAccess","referencedDeclaration":6376,"src":"11406:40:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage","typeString":"struct FirelinkBridge.EventInfo storage ref[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11374:72:52"},{"body":{"id":6497,"nodeType":"Block","src":"11530:370:52","statements":[{"assignments":[6459,6461,6463,6465],"declarations":[{"constant":false,"id":6459,"mutability":"mutable","name":"sender","nameLocation":"11553:6:52","nodeType":"VariableDeclaration","scope":6497,"src":"11545:14:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6458,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6461,"mutability":"mutable","name":"receiver","nameLocation":"11569:8:52","nodeType":"VariableDeclaration","scope":6497,"src":"11561:16:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6460,"name":"address","nodeType":"ElementaryTypeName","src":"11561:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6463,"mutability":"mutable","name":"value","nameLocation":"11587:5:52","nodeType":"VariableDeclaration","scope":6497,"src":"11579:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6462,"name":"uint256","nodeType":"ElementaryTypeName","src":"11579:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6465,"mutability":"mutable","name":"data","nameLocation":"11607:4:52","nodeType":"VariableDeclaration","scope":6497,"src":"11594:17:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6464,"name":"bytes","nodeType":"ElementaryTypeName","src":"11594:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6485,"initialValue":{"arguments":[{"expression":{"baseExpression":{"expression":{"expression":{"expression":{"id":6468,"name":"_transaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"11626:12:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof calldata"}},"id":6469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11639:4:52","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":1454,"src":"11626:17:52","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1448_calldata_ptr","typeString":"struct EVMTransaction.Response calldata"}},"id":6470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11644:12:52","memberName":"responseBody","nodeType":"MemberAccess","referencedDeclaration":1447,"src":"11626:30:52","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1488_calldata_ptr","typeString":"struct EVMTransaction.ResponseBody calldata"}},"id":6471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11657:6:52","memberName":"events","nodeType":"MemberAccess","referencedDeclaration":1487,"src":"11626:37:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Event_$1500_calldata_ptr_$dyn_calldata_ptr","typeString":"struct EVMTransaction.Event calldata[] calldata"}},"id":6473,"indexExpression":{"id":6472,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6445,"src":"11664:1:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11626:40:52","typeDescriptions":{"typeIdentifier":"t_struct$_Event_$1500_calldata_ptr","typeString":"struct EVMTransaction.Event calldata"}},"id":6474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11667:4:52","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":1497,"src":"11626:45:52","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":6476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11674:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6475,"name":"address","nodeType":"ElementaryTypeName","src":"11674:7:52","typeDescriptions":{}}},{"id":6478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11683:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6477,"name":"address","nodeType":"ElementaryTypeName","src":"11683:7:52","typeDescriptions":{}}},{"id":6480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11692:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6479,"name":"uint256","nodeType":"ElementaryTypeName","src":"11692:7:52","typeDescriptions":{}}},{"id":6482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11701:5:52","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6481,"name":"bytes","nodeType":"ElementaryTypeName","src":"11701:5:52","typeDescriptions":{}}}],"id":6483,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"11673:34:52","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(bytes storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(bytes storage pointer))"}],"expression":{"id":6466,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11615:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11619:6:52","memberName":"decode","nodeType":"MemberAccess","src":"11615:10:52","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11615:93:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(address payable,address payable,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"11544:164:52"},{"expression":{"arguments":[{"arguments":[{"id":6490,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6459,"src":"11773:6:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6491,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6461,"src":"11807:8:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6463,"src":"11840:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6493,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6465,"src":"11869:4:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6489,"name":"EventInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"11737:9:52","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_EventInfo_$6367_storage_ptr_$","typeString":"type(struct FirelinkBridge.EventInfo storage pointer)"}},"id":6494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["11765:6:52","11797:8:52","11833:5:52","11863:4:52"],"names":["sender","receiver","value","data"],"nodeType":"FunctionCall","src":"11737:151:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_EventInfo_$6367_memory_ptr","typeString":"struct FirelinkBridge.EventInfo memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_EventInfo_$6367_memory_ptr","typeString":"struct FirelinkBridge.EventInfo memory"}],"expression":{"id":6486,"name":"eventInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6438,"src":"11722:9:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.EventInfo storage ref[] storage pointer"}},"id":6488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11732:4:52","memberName":"push","nodeType":"MemberAccess","src":"11722:14:52","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage_ptr_$_t_struct$_EventInfo_$6367_storage_$returns$__$bound_to$_t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage_ptr_$","typeString":"function (struct FirelinkBridge.EventInfo storage ref[] storage pointer,struct FirelinkBridge.EventInfo storage ref)"}},"id":6495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11722:167:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6496,"nodeType":"ExpressionStatement","src":"11722:167:52"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6448,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6445,"src":"11475:1:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"expression":{"expression":{"id":6449,"name":"_transaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"11479:12:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof calldata"}},"id":6450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11492:4:52","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":1454,"src":"11479:17:52","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$1448_calldata_ptr","typeString":"struct EVMTransaction.Response calldata"}},"id":6451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11497:12:52","memberName":"responseBody","nodeType":"MemberAccess","referencedDeclaration":1447,"src":"11479:30:52","typeDescriptions":{"typeIdentifier":"t_struct$_ResponseBody_$1488_calldata_ptr","typeString":"struct EVMTransaction.ResponseBody calldata"}},"id":6452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11510:6:52","memberName":"events","nodeType":"MemberAccess","referencedDeclaration":1487,"src":"11479:37:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Event_$1500_calldata_ptr_$dyn_calldata_ptr","typeString":"struct EVMTransaction.Event calldata[] calldata"}},"id":6453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11517:6:52","memberName":"length","nodeType":"MemberAccess","src":"11479:44:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11475:48:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6498,"initializationExpression":{"assignments":[6445],"declarations":[{"constant":false,"id":6445,"mutability":"mutable","name":"i","nameLocation":"11468:1:52","nodeType":"VariableDeclaration","scope":6498,"src":"11460:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6444,"name":"uint256","nodeType":"ElementaryTypeName","src":"11460:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6447,"initialValue":{"hexValue":"30","id":6446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11472:1:52","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11460:13:52"},"loopExpression":{"expression":{"id":6456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"11525:3:52","subExpression":{"id":6455,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6445,"src":"11525:1:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6457,"nodeType":"ExpressionStatement","src":"11525:3:52"},"nodeType":"ForStatement","src":"11456:444:52"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":6502,"name":"eventInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6438,"src":"11927:9:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.EventInfo storage ref[] storage pointer"}},"id":6504,"indexExpression":{"hexValue":"30","id":6503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11937:1:52","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11927:12:52","typeDescriptions":{"typeIdentifier":"t_struct$_EventInfo_$6367_storage","typeString":"struct FirelinkBridge.EventInfo storage ref"}},"id":6505,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11940:8:52","memberName":"receiver","nodeType":"MemberAccess","referencedDeclaration":6362,"src":"11927:21:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":6506,"name":"eventInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6438,"src":"11950:9:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EventInfo_$6367_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.EventInfo storage ref[] storage pointer"}},"id":6508,"indexExpression":{"hexValue":"30","id":6507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11960:1:52","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11950:12:52","typeDescriptions":{"typeIdentifier":"t_struct$_EventInfo_$6367_storage","typeString":"struct FirelinkBridge.EventInfo storage ref"}},"id":6509,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11963:5:52","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":6364,"src":"11950:18:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6499,"name":"ethContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"11910:11:52","typeDescriptions":{"typeIdentifier":"t_contract$_IFirelinkMintableERC20_$6827","typeString":"contract IFirelinkMintableERC20"}},"id":6501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11922:4:52","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":6819,"src":"11910:16:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":6510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11910:59:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6511,"nodeType":"ExpressionStatement","src":"11910:59:52"}]},"functionSelector":"7eccb307","id":6513,"implemented":true,"kind":"function","modifiers":[],"name":"FinalizeBridgeAndReleaseEth","nameLocation":"10935:27:52","nodeType":"FunctionDefinition","parameters":{"id":6397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6396,"mutability":"mutable","name":"_transaction","nameLocation":"10993:12:52","nodeType":"VariableDeclaration","scope":6513,"src":"10963:42:52","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_calldata_ptr","typeString":"struct EVMTransaction.Proof"},"typeName":{"id":6395,"nodeType":"UserDefinedTypeName","pathNode":{"id":6394,"name":"EVMTransaction.Proof","nameLocations":["10963:14:52","10978:5:52"],"nodeType":"IdentifierPath","referencedDeclaration":1455,"src":"10963:20:52"},"referencedDeclaration":1455,"src":"10963:20:52","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1455_storage_ptr","typeString":"struct EVMTransaction.Proof"}},"visibility":"internal"}],"src":"10962:44:52"},"returnParameters":{"id":6398,"nodeType":"ParameterList","parameters":[],"src":"11016:0:52"},"scope":6567,"src":"10926:1050:52","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6521,"nodeType":"Block","src":"12045:43:52","statements":[{"expression":{"expression":{"id":6518,"name":"transactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"12062:12:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref[] storage ref"}},"id":6519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12075:6:52","memberName":"length","nodeType":"MemberAccess","src":"12062:19:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6517,"id":6520,"nodeType":"Return","src":"12055:26:52"}]},"functionSelector":"2e7700f0","id":6522,"implemented":true,"kind":"function","modifiers":[],"name":"getTransactionCount","nameLocation":"11991:19:52","nodeType":"FunctionDefinition","parameters":{"id":6514,"nodeType":"ParameterList","parameters":[],"src":"12010:2:52"},"returnParameters":{"id":6517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6522,"src":"12036:7:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6515,"name":"uint256","nodeType":"ElementaryTypeName","src":"12036:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12035:9:52"},"scope":6567,"src":"11982:106:52","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":6565,"nodeType":"Block","src":"12173:226:52","statements":[{"assignments":[6533],"declarations":[{"constant":false,"id":6533,"mutability":"mutable","name":"result","nameLocation":"12208:6:52","nodeType":"VariableDeclaration","scope":6565,"src":"12183:31:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_memory_ptr_$dyn_memory_ptr","typeString":"struct FirelinkBridge.TransactionInfo[]"},"typeName":{"baseType":{"id":6531,"nodeType":"UserDefinedTypeName","pathNode":{"id":6530,"name":"TransactionInfo","nameLocations":["12183:15:52"],"nodeType":"IdentifierPath","referencedDeclaration":6377,"src":"12183:15:52"},"referencedDeclaration":6377,"src":"12183:15:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_storage_ptr","typeString":"struct FirelinkBridge.TransactionInfo"}},"id":6532,"nodeType":"ArrayTypeName","src":"12183:17:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.TransactionInfo[]"}},"visibility":"internal"}],"id":6541,"initialValue":{"arguments":[{"expression":{"id":6538,"name":"transactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"12239:12:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref[] storage ref"}},"id":6539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12252:6:52","memberName":"length","nodeType":"MemberAccess","src":"12239:19:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"12217:21:52","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_TransactionInfo_$6377_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct FirelinkBridge.TransactionInfo memory[] memory)"},"typeName":{"baseType":{"id":6535,"nodeType":"UserDefinedTypeName","pathNode":{"id":6534,"name":"TransactionInfo","nameLocations":["12221:15:52"],"nodeType":"IdentifierPath","referencedDeclaration":6377,"src":"12221:15:52"},"referencedDeclaration":6377,"src":"12221:15:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_storage_ptr","typeString":"struct FirelinkBridge.TransactionInfo"}},"id":6536,"nodeType":"ArrayTypeName","src":"12221:17:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.TransactionInfo[]"}}},"id":6540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12217:42:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_memory_ptr_$dyn_memory_ptr","typeString":"struct FirelinkBridge.TransactionInfo memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12183:76:52"},{"body":{"id":6561,"nodeType":"Block","src":"12318:52:52","statements":[{"expression":{"id":6559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6553,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6533,"src":"12332:6:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_memory_ptr_$dyn_memory_ptr","typeString":"struct FirelinkBridge.TransactionInfo memory[] memory"}},"id":6555,"indexExpression":{"id":6554,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6543,"src":"12339:1:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12332:9:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_memory_ptr","typeString":"struct FirelinkBridge.TransactionInfo memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":6556,"name":"transactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"12344:12:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref[] storage ref"}},"id":6558,"indexExpression":{"id":6557,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6543,"src":"12357:1:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12344:15:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref"}},"src":"12332:27:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_memory_ptr","typeString":"struct FirelinkBridge.TransactionInfo memory"}},"id":6560,"nodeType":"ExpressionStatement","src":"12332:27:52"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6546,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6543,"src":"12288:1:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6547,"name":"transactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"12292:12:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage","typeString":"struct FirelinkBridge.TransactionInfo storage ref[] storage ref"}},"id":6548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12305:6:52","memberName":"length","nodeType":"MemberAccess","src":"12292:19:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12288:23:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6562,"initializationExpression":{"assignments":[6543],"declarations":[{"constant":false,"id":6543,"mutability":"mutable","name":"i","nameLocation":"12281:1:52","nodeType":"VariableDeclaration","scope":6562,"src":"12273:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6542,"name":"uint256","nodeType":"ElementaryTypeName","src":"12273:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6545,"initialValue":{"hexValue":"30","id":6544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:52","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12273:13:52"},"loopExpression":{"expression":{"id":6551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12313:3:52","subExpression":{"id":6550,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6543,"src":"12313:1:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6552,"nodeType":"ExpressionStatement","src":"12313:3:52"},"nodeType":"ForStatement","src":"12269:101:52"},{"expression":{"id":6563,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6533,"src":"12386:6:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_memory_ptr_$dyn_memory_ptr","typeString":"struct FirelinkBridge.TransactionInfo memory[] memory"}},"functionReturnParameters":6528,"id":6564,"nodeType":"Return","src":"12379:13:52"}]},"functionSelector":"27506f53","id":6566,"implemented":true,"kind":"function","modifiers":[],"name":"getAllTransactions","nameLocation":"12103:18:52","nodeType":"FunctionDefinition","parameters":{"id":6523,"nodeType":"ParameterList","parameters":[],"src":"12121:2:52"},"returnParameters":{"id":6528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6566,"src":"12147:24:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_memory_ptr_$dyn_memory_ptr","typeString":"struct FirelinkBridge.TransactionInfo[]"},"typeName":{"baseType":{"id":6525,"nodeType":"UserDefinedTypeName","pathNode":{"id":6524,"name":"TransactionInfo","nameLocations":["12147:15:52"],"nodeType":"IdentifierPath","referencedDeclaration":6377,"src":"12147:15:52"},"referencedDeclaration":6377,"src":"12147:15:52","typeDescriptions":{"typeIdentifier":"t_struct$_TransactionInfo_$6377_storage_ptr","typeString":"struct FirelinkBridge.TransactionInfo"}},"id":6526,"nodeType":"ArrayTypeName","src":"12147:17:52","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TransactionInfo_$6377_storage_$dyn_storage_ptr","typeString":"struct FirelinkBridge.TransactionInfo[]"}},"visibility":"internal"}],"src":"12146:26:52"},"scope":6567,"src":"12094:305:52","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6568,"src":"1369:11033:52","usedErrors":[]}],"src":"81:12321:52"},"id":52},"contracts/FirelinkMintableERC20.sol":{"ast":{"absolutePath":"contracts/FirelinkMintableERC20.sol","exportedSymbols":{"ERC20":[4576],"FirelinkMintableERC20":[6795],"IERC165":[5657],"IFirelinkMintableERC20":[6827],"ILegacyMintableERC20":[6850],"ISemver":[6874]},"id":6796,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6569,"literals":["solidity","^","0.8",".15"],"nodeType":"PragmaDirective","src":"32:24:53"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":6571,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6796,"sourceUnit":4577,"src":"58:70:53","symbolAliases":[{"foreign":{"id":6570,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"67:5:53","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":6573,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6796,"sourceUnit":5658,"src":"129:82:53","symbolAliases":[{"foreign":{"id":6572,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5657,"src":"138:7:53","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/IFirelinkMintableERC20.sol","file":"./IFirelinkMintableERC20.sol","id":6576,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6796,"sourceUnit":6851,"src":"212:92:53","symbolAliases":[{"foreign":{"id":6574,"name":"ILegacyMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"221:20:53","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":6575,"name":"IFirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6827,"src":"243:22:53","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/ISemver.sol","file":"./ISemver.sol","id":6578,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6796,"sourceUnit":6875,"src":"305:40:53","symbolAliases":[{"foreign":{"id":6577,"name":"ISemver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6874,"src":"314:7:53","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6580,"name":"IFirelinkMintableERC20","nameLocations":["844:22:53"],"nodeType":"IdentifierPath","referencedDeclaration":6827,"src":"844:22:53"},"id":6581,"nodeType":"InheritanceSpecifier","src":"844:22:53"},{"baseName":{"id":6582,"name":"ILegacyMintableERC20","nameLocations":["868:20:53"],"nodeType":"IdentifierPath","referencedDeclaration":6850,"src":"868:20:53"},"id":6583,"nodeType":"InheritanceSpecifier","src":"868:20:53"},{"baseName":{"id":6584,"name":"ERC20","nameLocations":["890:5:53"],"nodeType":"IdentifierPath","referencedDeclaration":4576,"src":"890:5:53"},"id":6585,"nodeType":"InheritanceSpecifier","src":"890:5:53"},{"baseName":{"id":6586,"name":"ISemver","nameLocations":["897:7:53"],"nodeType":"IdentifierPath","referencedDeclaration":6874,"src":"897:7:53"},"id":6587,"nodeType":"InheritanceSpecifier","src":"897:7:53"}],"canonicalName":"FirelinkMintableERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":6579,"nodeType":"StructuredDocumentation","src":"347:463:53","text":"@title FirelinkMintableERC20\n @notice FirelinkMintableERC20 is a standard extension of the base ERC20 token contract designed\n         to allow the StandardBridge contracts to mint and burn tokens. This makes it possible to\n         use an FirelinkMintableRC20 as the L2 representation of an L1 token, or vice-versa.\n         Designed to be backwards compatible with the older StandardL2ERC20 token which was only\n         meant for use on L2."},"fullyImplemented":true,"id":6795,"linearizedBaseContracts":[6795,6874,4576,4679,4654,5451,6850,6827,5657],"name":"FirelinkMintableERC20","nameLocation":"819:21:53","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":6588,"nodeType":"StructuredDocumentation","src":"911:83:53","text":"@notice Address of the corresponding version of this token on the remote chain."},"functionSelector":"033964be","id":6590,"mutability":"immutable","name":"REMOTE_TOKEN","nameLocation":"1024:12:53","nodeType":"VariableDeclaration","scope":6795,"src":"999:37:53","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6589,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":6591,"nodeType":"StructuredDocumentation","src":"1043:58:53","text":"@notice Address of the StandardBridge on this network."},"functionSelector":"ee9a31a2","id":6593,"mutability":"immutable","name":"BRIDGE","nameLocation":"1131:6:53","nodeType":"VariableDeclaration","scope":6795,"src":"1106:31:53","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6592,"name":"address","nodeType":"ElementaryTypeName","src":"1106:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":6594,"nodeType":"StructuredDocumentation","src":"1144:33:53","text":"@notice Decimals of the token"},"id":6596,"mutability":"immutable","name":"DECIMALS","nameLocation":"1206:8:53","nodeType":"VariableDeclaration","scope":6795,"src":"1182:32:53","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6595,"name":"uint8","nodeType":"ElementaryTypeName","src":"1182:5:53","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":6597,"nodeType":"StructuredDocumentation","src":"1221:185:53","text":"@notice Emitted whenever tokens are minted for an account.\n @param account Address of the account tokens are being minted for.\n @param amount  Amount of tokens minted."},"eventSelector":"0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885","id":6603,"name":"Mint","nameLocation":"1417:4:53","nodeType":"EventDefinition","parameters":{"id":6602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6599,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1438:7:53","nodeType":"VariableDeclaration","scope":6603,"src":"1422:23:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6598,"name":"address","nodeType":"ElementaryTypeName","src":"1422:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6601,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1455:6:53","nodeType":"VariableDeclaration","scope":6603,"src":"1447:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6600,"name":"uint256","nodeType":"ElementaryTypeName","src":"1447:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1421:41:53"},"src":"1411:52:53"},{"anonymous":false,"documentation":{"id":6604,"nodeType":"StructuredDocumentation","src":"1469:187:53","text":"@notice Emitted whenever tokens are burned from an account.\n @param account Address of the account tokens are being burned from.\n @param amount  Amount of tokens burned."},"eventSelector":"cc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5","id":6610,"name":"Burn","nameLocation":"1667:4:53","nodeType":"EventDefinition","parameters":{"id":6609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6606,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1688:7:53","nodeType":"VariableDeclaration","scope":6610,"src":"1672:23:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6605,"name":"address","nodeType":"ElementaryTypeName","src":"1672:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6608,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1705:6:53","nodeType":"VariableDeclaration","scope":6610,"src":"1697:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6607,"name":"uint256","nodeType":"ElementaryTypeName","src":"1697:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1671:41:53"},"src":"1661:52:53"},{"body":{"id":6622,"nodeType":"Block","src":"1804:113:53","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6614,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1822:3:53","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1826:6:53","memberName":"sender","nodeType":"MemberAccess","src":"1822:10:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6616,"name":"BRIDGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6593,"src":"1836:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1822:20:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"466972656c696e6b4d696e7461626c6545524332303a206f6e6c79206272696467652063616e206d696e7420616e64206275726e","id":6618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1844:54:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_387174a84dbfcc3e6c8b802adb9910c2f82c10479424522c999007d4a7e9eaeb","typeString":"literal_string \"FirelinkMintableERC20: only bridge can mint and burn\""},"value":"FirelinkMintableERC20: only bridge can mint and burn"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_387174a84dbfcc3e6c8b802adb9910c2f82c10479424522c999007d4a7e9eaeb","typeString":"literal_string \"FirelinkMintableERC20: only bridge can mint and burn\""}],"id":6613,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1814:7:53","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1814:85:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6620,"nodeType":"ExpressionStatement","src":"1814:85:53"},{"id":6621,"nodeType":"PlaceholderStatement","src":"1909:1:53"}]},"documentation":{"id":6611,"nodeType":"StructuredDocumentation","src":"1719:58:53","text":"@notice A modifier that only allows the bridge to call"},"id":6623,"name":"onlyBridge","nameLocation":"1791:10:53","nodeType":"ModifierDefinition","parameters":{"id":6612,"nodeType":"ParameterList","parameters":[],"src":"1801:2:53"},"src":"1782:135:53","virtual":false,"visibility":"internal"},{"baseFunctions":[6873],"constant":true,"documentation":{"id":6624,"nodeType":"StructuredDocumentation","src":"1923:58:53","text":"@notice Semantic version.\n @custom:semver 1.3.0"},"functionSelector":"54fd4d50","id":6627,"mutability":"constant","name":"version","nameLocation":"2009:7:53","nodeType":"VariableDeclaration","scope":6795,"src":"1986:40:53","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6625,"name":"string","nodeType":"ElementaryTypeName","src":"1986:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"312e332e30","id":6626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2019:7:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a08c3e203132c561752255a4d52ffae85bb9c5d33cb3291520dea1b84356389","typeString":"literal_string \"1.3.0\""},"value":"1.3.0"},"visibility":"public"},{"body":{"id":6657,"nodeType":"Block","src":"2437:100:53","statements":[{"expression":{"id":6647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6645,"name":"REMOTE_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6590,"src":"2447:12:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6646,"name":"_remoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6632,"src":"2462:12:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2447:27:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6648,"nodeType":"ExpressionStatement","src":"2447:27:53"},{"expression":{"id":6651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6649,"name":"BRIDGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6593,"src":"2484:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6650,"name":"_bridge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6630,"src":"2493:7:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2484:16:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6652,"nodeType":"ExpressionStatement","src":"2484:16:53"},{"expression":{"id":6655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6653,"name":"DECIMALS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6596,"src":"2510:8:53","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6654,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6638,"src":"2521:9:53","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2510:20:53","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":6656,"nodeType":"ExpressionStatement","src":"2510:20:53"}]},"documentation":{"id":6628,"nodeType":"StructuredDocumentation","src":"2033:207:53","text":"@param _bridge      Address of the L2 standard bridge.\n @param _remoteToken Address of the corresponding L1 token.\n @param _name        ERC20 name.\n @param _symbol      ERC20 symbol."},"id":6658,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":6641,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6634,"src":"2417:5:53","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":6642,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6636,"src":"2424:7:53","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":6643,"kind":"baseConstructorSpecifier","modifierName":{"id":6640,"name":"ERC20","nameLocations":["2411:5:53"],"nodeType":"IdentifierPath","referencedDeclaration":4576,"src":"2411:5:53"},"nodeType":"ModifierInvocation","src":"2411:21:53"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6630,"mutability":"mutable","name":"_bridge","nameLocation":"2274:7:53","nodeType":"VariableDeclaration","scope":6658,"src":"2266:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6629,"name":"address","nodeType":"ElementaryTypeName","src":"2266:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6632,"mutability":"mutable","name":"_remoteToken","nameLocation":"2299:12:53","nodeType":"VariableDeclaration","scope":6658,"src":"2291:20:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6631,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6634,"mutability":"mutable","name":"_name","nameLocation":"2335:5:53","nodeType":"VariableDeclaration","scope":6658,"src":"2321:19:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6633,"name":"string","nodeType":"ElementaryTypeName","src":"2321:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6636,"mutability":"mutable","name":"_symbol","nameLocation":"2364:7:53","nodeType":"VariableDeclaration","scope":6658,"src":"2350:21:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6635,"name":"string","nodeType":"ElementaryTypeName","src":"2350:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6638,"mutability":"mutable","name":"_decimals","nameLocation":"2387:9:53","nodeType":"VariableDeclaration","scope":6658,"src":"2381:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6637,"name":"uint8","nodeType":"ElementaryTypeName","src":"2381:5:53","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2256:146:53"},"returnParameters":{"id":6644,"nodeType":"ParameterList","parameters":[],"src":"2437:0:53"},"scope":6795,"src":"2245:292:53","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[6819,6842],"body":{"id":6681,"nodeType":"Block","src":"2901:69:53","statements":[{"expression":{"arguments":[{"id":6672,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6661,"src":"2917:3:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6673,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6663,"src":"2922:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6671,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4393,"src":"2911:5:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2911:19:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6675,"nodeType":"ExpressionStatement","src":"2911:19:53"},{"eventCall":{"arguments":[{"id":6677,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6661,"src":"2950:3:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6678,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6663,"src":"2955:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6676,"name":"Mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6603,"src":"2945:4:53","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2945:18:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6680,"nodeType":"EmitStatement","src":"2940:23:53"}]},"documentation":{"id":6659,"nodeType":"StructuredDocumentation","src":"2543:168:53","text":"@notice Allows the StandardBridge on this network to mint tokens.\n @param _to     Address to mint tokens to.\n @param _amount Amount of tokens to mint."},"functionSelector":"40c10f19","id":6682,"implemented":true,"kind":"function","modifiers":[{"id":6669,"kind":"modifierInvocation","modifierName":{"id":6668,"name":"onlyBridge","nameLocations":["2886:10:53"],"nodeType":"IdentifierPath","referencedDeclaration":6623,"src":"2886:10:53"},"nodeType":"ModifierInvocation","src":"2886:10:53"}],"name":"mint","nameLocation":"2725:4:53","nodeType":"FunctionDefinition","overrides":{"id":6667,"nodeType":"OverrideSpecifier","overrides":[{"id":6665,"name":"IFirelinkMintableERC20","nameLocations":["2832:22:53"],"nodeType":"IdentifierPath","referencedDeclaration":6827,"src":"2832:22:53"},{"id":6666,"name":"ILegacyMintableERC20","nameLocations":["2856:20:53"],"nodeType":"IdentifierPath","referencedDeclaration":6850,"src":"2856:20:53"}],"src":"2823:54:53"},"parameters":{"id":6664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6661,"mutability":"mutable","name":"_to","nameLocation":"2747:3:53","nodeType":"VariableDeclaration","scope":6682,"src":"2739:11:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6660,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6663,"mutability":"mutable","name":"_amount","nameLocation":"2768:7:53","nodeType":"VariableDeclaration","scope":6682,"src":"2760:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6662,"name":"uint256","nodeType":"ElementaryTypeName","src":"2760:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2729:52:53"},"returnParameters":{"id":6670,"nodeType":"ParameterList","parameters":[],"src":"2901:0:53"},"scope":6795,"src":"2716:254:53","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[6826,6849],"body":{"id":6705,"nodeType":"Block","src":"3338:73:53","statements":[{"expression":{"arguments":[{"id":6696,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6685,"src":"3354:5:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6697,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6687,"src":"3361:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6695,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4465,"src":"3348:5:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3348:21:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6699,"nodeType":"ExpressionStatement","src":"3348:21:53"},{"eventCall":{"arguments":[{"id":6701,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6685,"src":"3389:5:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6702,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6687,"src":"3396:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6700,"name":"Burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6610,"src":"3384:4:53","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:20:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6704,"nodeType":"EmitStatement","src":"3379:25:53"}]},"documentation":{"id":6683,"nodeType":"StructuredDocumentation","src":"2976:170:53","text":"@notice Allows the StandardBridge on this network to burn tokens.\n @param _from   Address to burn tokens from.\n @param _amount Amount of tokens to burn."},"functionSelector":"9dc29fac","id":6706,"implemented":true,"kind":"function","modifiers":[{"id":6693,"kind":"modifierInvocation","modifierName":{"id":6692,"name":"onlyBridge","nameLocations":["3323:10:53"],"nodeType":"IdentifierPath","referencedDeclaration":6623,"src":"3323:10:53"},"nodeType":"ModifierInvocation","src":"3323:10:53"}],"name":"burn","nameLocation":"3160:4:53","nodeType":"FunctionDefinition","overrides":{"id":6691,"nodeType":"OverrideSpecifier","overrides":[{"id":6689,"name":"IFirelinkMintableERC20","nameLocations":["3269:22:53"],"nodeType":"IdentifierPath","referencedDeclaration":6827,"src":"3269:22:53"},{"id":6690,"name":"ILegacyMintableERC20","nameLocations":["3293:20:53"],"nodeType":"IdentifierPath","referencedDeclaration":6850,"src":"3293:20:53"}],"src":"3260:54:53"},"parameters":{"id":6688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6685,"mutability":"mutable","name":"_from","nameLocation":"3182:5:53","nodeType":"VariableDeclaration","scope":6706,"src":"3174:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6684,"name":"address","nodeType":"ElementaryTypeName","src":"3174:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6687,"mutability":"mutable","name":"_amount","nameLocation":"3205:7:53","nodeType":"VariableDeclaration","scope":6706,"src":"3197:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6686,"name":"uint256","nodeType":"ElementaryTypeName","src":"3197:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:54:53"},"returnParameters":{"id":6694,"nodeType":"ParameterList","parameters":[],"src":"3338:0:53"},"scope":6795,"src":"3151:260:53","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[5656],"body":{"id":6747,"nodeType":"Block","src":"3678:434:53","statements":[{"assignments":[6715],"declarations":[{"constant":false,"id":6715,"mutability":"mutable","name":"iface1","nameLocation":"3695:6:53","nodeType":"VariableDeclaration","scope":6747,"src":"3688:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":6714,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3688:6:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":6720,"initialValue":{"expression":{"arguments":[{"id":6717,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5657,"src":"3709:7:53","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$5657_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$5657_$","typeString":"type(contract IERC165)"}],"id":6716,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3704:4:53","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3704:13:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$5657","typeString":"type(contract IERC165)"}},"id":6719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3718:11:53","memberName":"interfaceId","nodeType":"MemberAccess","src":"3704:25:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"3688:41:53"},{"assignments":[6722],"declarations":[{"constant":false,"id":6722,"mutability":"mutable","name":"iface2","nameLocation":"3812:6:53","nodeType":"VariableDeclaration","scope":6747,"src":"3805:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":6721,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3805:6:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":6727,"initialValue":{"expression":{"arguments":[{"id":6724,"name":"ILegacyMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"3826:20:53","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILegacyMintableERC20_$6850_$","typeString":"type(contract ILegacyMintableERC20)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ILegacyMintableERC20_$6850_$","typeString":"type(contract ILegacyMintableERC20)"}],"id":6723,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3821:4:53","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3821:26:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ILegacyMintableERC20_$6850","typeString":"type(contract ILegacyMintableERC20)"}},"id":6726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3848:11:53","memberName":"interfaceId","nodeType":"MemberAccess","src":"3821:38:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"3805:54:53"},{"assignments":[6729],"declarations":[{"constant":false,"id":6729,"mutability":"mutable","name":"iface3","nameLocation":"3965:6:53","nodeType":"VariableDeclaration","scope":6747,"src":"3958:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":6728,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3958:6:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":6734,"initialValue":{"expression":{"arguments":[{"id":6731,"name":"IFirelinkMintableERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6827,"src":"3979:22:53","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFirelinkMintableERC20_$6827_$","typeString":"type(contract IFirelinkMintableERC20)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IFirelinkMintableERC20_$6827_$","typeString":"type(contract IFirelinkMintableERC20)"}],"id":6730,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3974:4:53","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3974:28:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IFirelinkMintableERC20_$6827","typeString":"type(contract IFirelinkMintableERC20)"}},"id":6733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4003:11:53","memberName":"interfaceId","nodeType":"MemberAccess","src":"3974:40:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"3958:56:53"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":6737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6735,"name":"_interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6709,"src":"4031:12:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6736,"name":"iface1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6715,"src":"4047:6:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"4031:22:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":6740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6738,"name":"_interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6709,"src":"4057:12:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6739,"name":"iface2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6722,"src":"4073:6:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"4057:22:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4031:48:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":6744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6742,"name":"_interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6709,"src":"4083:12:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6743,"name":"iface3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6729,"src":"4099:6:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"4083:22:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4031:74:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6713,"id":6746,"nodeType":"Return","src":"4024:81:53"}]},"documentation":{"id":6707,"nodeType":"StructuredDocumentation","src":"3417:171:53","text":"@notice ERC165 interface check function.\n @param _interfaceId Interface ID to check.\n @return Whether or not the interface is supported by this contract."},"functionSelector":"01ffc9a7","id":6748,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3602:17:53","nodeType":"FunctionDefinition","parameters":{"id":6710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6709,"mutability":"mutable","name":"_interfaceId","nameLocation":"3627:12:53","nodeType":"VariableDeclaration","scope":6748,"src":"3620:19:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":6708,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3620:6:53","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3619:21:53"},"returnParameters":{"id":6713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6748,"src":"3672:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6711,"name":"bool","nodeType":"ElementaryTypeName","src":"3672:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3671:6:53"},"scope":6795,"src":"3593:519:53","stateMutability":"pure","virtual":true,"visibility":"external"},{"baseFunctions":[6835],"body":{"id":6756,"nodeType":"Block","src":"4274:36:53","statements":[{"expression":{"id":6754,"name":"REMOTE_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6590,"src":"4291:12:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6753,"id":6755,"nodeType":"Return","src":"4284:19:53"}]},"documentation":{"id":6749,"nodeType":"StructuredDocumentation","src":"4118:102:53","text":"@custom:legacy\n @notice Legacy getter for the remote token. Use REMOTE_TOKEN going forward."},"functionSelector":"c01e1bd6","id":6757,"implemented":true,"kind":"function","modifiers":[],"name":"l1Token","nameLocation":"4234:7:53","nodeType":"FunctionDefinition","parameters":{"id":6750,"nodeType":"ParameterList","parameters":[],"src":"4241:2:53"},"returnParameters":{"id":6753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6757,"src":"4265:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6751,"name":"address","nodeType":"ElementaryTypeName","src":"4265:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4264:9:53"},"scope":6795,"src":"4225:85:53","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6765,"nodeType":"Block","src":"4461:30:53","statements":[{"expression":{"id":6763,"name":"BRIDGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6593,"src":"4478:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6762,"id":6764,"nodeType":"Return","src":"4471:13:53"}]},"documentation":{"id":6758,"nodeType":"StructuredDocumentation","src":"4316:90:53","text":"@custom:legacy\n @notice Legacy getter for the bridge. Use BRIDGE going forward."},"functionSelector":"ae1f6aaf","id":6766,"implemented":true,"kind":"function","modifiers":[],"name":"l2Bridge","nameLocation":"4420:8:53","nodeType":"FunctionDefinition","parameters":{"id":6759,"nodeType":"ParameterList","parameters":[],"src":"4428:2:53"},"returnParameters":{"id":6762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6766,"src":"4452:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6760,"name":"address","nodeType":"ElementaryTypeName","src":"4452:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4451:9:53"},"scope":6795,"src":"4411:80:53","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[6807],"body":{"id":6774,"nodeType":"Block","src":"4621:36:53","statements":[{"expression":{"id":6772,"name":"REMOTE_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6590,"src":"4638:12:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6771,"id":6773,"nodeType":"Return","src":"4631:19:53"}]},"documentation":{"id":6767,"nodeType":"StructuredDocumentation","src":"4497:66:53","text":"@custom:legacy\n @notice Legacy getter for REMOTE_TOKEN."},"functionSelector":"d6c0b2c4","id":6775,"implemented":true,"kind":"function","modifiers":[],"name":"remoteToken","nameLocation":"4577:11:53","nodeType":"FunctionDefinition","parameters":{"id":6768,"nodeType":"ParameterList","parameters":[],"src":"4588:2:53"},"returnParameters":{"id":6771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6775,"src":"4612:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6769,"name":"address","nodeType":"ElementaryTypeName","src":"4612:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4611:9:53"},"scope":6795,"src":"4568:89:53","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[6812],"body":{"id":6783,"nodeType":"Block","src":"4776:30:53","statements":[{"expression":{"id":6781,"name":"BRIDGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6593,"src":"4793:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6780,"id":6782,"nodeType":"Return","src":"4786:13:53"}]},"documentation":{"id":6776,"nodeType":"StructuredDocumentation","src":"4663:60:53","text":"@custom:legacy\n @notice Legacy getter for BRIDGE."},"functionSelector":"e78cea92","id":6784,"implemented":true,"kind":"function","modifiers":[],"name":"bridge","nameLocation":"4737:6:53","nodeType":"FunctionDefinition","parameters":{"id":6777,"nodeType":"ParameterList","parameters":[],"src":"4743:2:53"},"returnParameters":{"id":6780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6784,"src":"4767:7:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6778,"name":"address","nodeType":"ElementaryTypeName","src":"4767:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4766:9:53"},"scope":6795,"src":"4728:78:53","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[4064],"body":{"id":6793,"nodeType":"Block","src":"5286:32:53","statements":[{"expression":{"id":6791,"name":"DECIMALS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6596,"src":"5303:8:53","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":6790,"id":6792,"nodeType":"Return","src":"5296:15:53"}]},"documentation":{"id":6785,"nodeType":"StructuredDocumentation","src":"4812:412:53","text":"@dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":6794,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"5238:8:53","nodeType":"FunctionDefinition","overrides":{"id":6787,"nodeType":"OverrideSpecifier","overrides":[],"src":"5261:8:53"},"parameters":{"id":6786,"nodeType":"ParameterList","parameters":[],"src":"5246:2:53"},"returnParameters":{"id":6790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6794,"src":"5279:5:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6788,"name":"uint8","nodeType":"ElementaryTypeName","src":"5279:5:53","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5278:7:53"},"scope":6795,"src":"5229:89:53","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":6796,"src":"810:4510:53","usedErrors":[]}],"src":"32:5288:53"},"id":53},"contracts/IFirelinkMintableERC20.sol":{"ast":{"absolutePath":"contracts/IFirelinkMintableERC20.sol","exportedSymbols":{"IERC165":[5657],"IFirelinkMintableERC20":[6827],"ILegacyMintableERC20":[6850]},"id":6851,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6797,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:54"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":6799,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6851,"sourceUnit":5658,"src":"57:82:54","symbolAliases":[{"foreign":{"id":6798,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5657,"src":"66:7:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6801,"name":"IERC165","nameLocations":["427:7:54"],"nodeType":"IdentifierPath","referencedDeclaration":5657,"src":"427:7:54"},"id":6802,"nodeType":"InheritanceSpecifier","src":"427:7:54"}],"canonicalName":"IFirelinkMintableERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":6800,"nodeType":"StructuredDocumentation","src":"141:250:54","text":"@title IFirelinkMintableERC20\n @notice This interface is available on the FirelinkMintableERC20 contract.\n         We declare it as a separate interface so that it can be used in\n         custom implementations of FirelinkMintableERC20."},"fullyImplemented":false,"id":6827,"linearizedBaseContracts":[6827,5657],"name":"IFirelinkMintableERC20","nameLocation":"401:22:54","nodeType":"ContractDefinition","nodes":[{"functionSelector":"d6c0b2c4","id":6807,"implemented":false,"kind":"function","modifiers":[],"name":"remoteToken","nameLocation":"450:11:54","nodeType":"FunctionDefinition","parameters":{"id":6803,"nodeType":"ParameterList","parameters":[],"src":"461:2:54"},"returnParameters":{"id":6806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6807,"src":"487:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6804,"name":"address","nodeType":"ElementaryTypeName","src":"487:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"486:9:54"},"scope":6827,"src":"441:55:54","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e78cea92","id":6812,"implemented":false,"kind":"function","modifiers":[],"name":"bridge","nameLocation":"511:6:54","nodeType":"FunctionDefinition","parameters":{"id":6808,"nodeType":"ParameterList","parameters":[],"src":"517:2:54"},"returnParameters":{"id":6811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6810,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6812,"src":"538:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6809,"name":"address","nodeType":"ElementaryTypeName","src":"538:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"537:9:54"},"scope":6827,"src":"502:45:54","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"40c10f19","id":6819,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"562:4:54","nodeType":"FunctionDefinition","parameters":{"id":6817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6814,"mutability":"mutable","name":"_to","nameLocation":"575:3:54","nodeType":"VariableDeclaration","scope":6819,"src":"567:11:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6813,"name":"address","nodeType":"ElementaryTypeName","src":"567:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6816,"mutability":"mutable","name":"_amount","nameLocation":"588:7:54","nodeType":"VariableDeclaration","scope":6819,"src":"580:15:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6815,"name":"uint256","nodeType":"ElementaryTypeName","src":"580:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"566:30:54"},"returnParameters":{"id":6818,"nodeType":"ParameterList","parameters":[],"src":"605:0:54"},"scope":6827,"src":"553:53:54","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"9dc29fac","id":6826,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"621:4:54","nodeType":"FunctionDefinition","parameters":{"id":6824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6821,"mutability":"mutable","name":"_from","nameLocation":"634:5:54","nodeType":"VariableDeclaration","scope":6826,"src":"626:13:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6820,"name":"address","nodeType":"ElementaryTypeName","src":"626:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6823,"mutability":"mutable","name":"_amount","nameLocation":"649:7:54","nodeType":"VariableDeclaration","scope":6826,"src":"641:15:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6822,"name":"uint256","nodeType":"ElementaryTypeName","src":"641:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"625:32:54"},"returnParameters":{"id":6825,"nodeType":"ParameterList","parameters":[],"src":"666:0:54"},"scope":6827,"src":"612:55:54","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6851,"src":"391:278:54","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":6829,"name":"IERC165","nameLocations":["949:7:54"],"nodeType":"IdentifierPath","referencedDeclaration":5657,"src":"949:7:54"},"id":6830,"nodeType":"InheritanceSpecifier","src":"949:7:54"}],"canonicalName":"ILegacyMintableERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":6828,"nodeType":"StructuredDocumentation","src":"671:244:54","text":"@custom:legacy\n @title ILegacyMintableERC20\n @notice This interface was available on the legacy L2StandardERC20 contract.\n         It remains available on the FirelinkMintableERC20 contract for\n         backwards compatibility."},"fullyImplemented":false,"id":6850,"linearizedBaseContracts":[6850,5657],"name":"ILegacyMintableERC20","nameLocation":"925:20:54","nodeType":"ContractDefinition","nodes":[{"functionSelector":"c01e1bd6","id":6835,"implemented":false,"kind":"function","modifiers":[],"name":"l1Token","nameLocation":"972:7:54","nodeType":"FunctionDefinition","parameters":{"id":6831,"nodeType":"ParameterList","parameters":[],"src":"979:2:54"},"returnParameters":{"id":6834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6835,"src":"1005:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6832,"name":"address","nodeType":"ElementaryTypeName","src":"1005:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1004:9:54"},"scope":6850,"src":"963:51:54","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"40c10f19","id":6842,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1029:4:54","nodeType":"FunctionDefinition","parameters":{"id":6840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6837,"mutability":"mutable","name":"_to","nameLocation":"1042:3:54","nodeType":"VariableDeclaration","scope":6842,"src":"1034:11:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6836,"name":"address","nodeType":"ElementaryTypeName","src":"1034:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6839,"mutability":"mutable","name":"_amount","nameLocation":"1055:7:54","nodeType":"VariableDeclaration","scope":6842,"src":"1047:15:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6838,"name":"uint256","nodeType":"ElementaryTypeName","src":"1047:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1033:30:54"},"returnParameters":{"id":6841,"nodeType":"ParameterList","parameters":[],"src":"1072:0:54"},"scope":6850,"src":"1020:53:54","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"9dc29fac","id":6849,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"1088:4:54","nodeType":"FunctionDefinition","parameters":{"id":6847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6844,"mutability":"mutable","name":"_from","nameLocation":"1101:5:54","nodeType":"VariableDeclaration","scope":6849,"src":"1093:13:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6843,"name":"address","nodeType":"ElementaryTypeName","src":"1093:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6846,"mutability":"mutable","name":"_amount","nameLocation":"1116:7:54","nodeType":"VariableDeclaration","scope":6849,"src":"1108:15:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6845,"name":"uint256","nodeType":"ElementaryTypeName","src":"1108:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:32:54"},"returnParameters":{"id":6848,"nodeType":"ParameterList","parameters":[],"src":"1133:0:54"},"scope":6850,"src":"1079:55:54","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6851,"src":"915:221:54","usedErrors":[]}],"src":"32:1104:54"},"id":54},"contracts/IFlareRelayer.sol":{"ast":{"absolutePath":"contracts/IFlareRelayer.sol","exportedSymbols":{"IFlareRelayer":[6864]},"id":6865,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6852,"literals":["solidity","^","0.8",".15"],"nodeType":"PragmaDirective","src":"33:24:55"},{"abstract":false,"baseContracts":[],"canonicalName":"IFlareRelayer","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":6864,"linearizedBaseContracts":[6864],"name":"IFlareRelayer","nameLocation":"69:13:55","nodeType":"ContractDefinition","nodes":[{"functionSelector":"e897e8de","id":6863,"implemented":false,"kind":"function","modifiers":[],"name":"requestRelay","nameLocation":"98:12:55","nodeType":"FunctionDefinition","parameters":{"id":6861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6854,"mutability":"mutable","name":"_relayTarget","nameLocation":"119:12:55","nodeType":"VariableDeclaration","scope":6863,"src":"111:20:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6853,"name":"address","nodeType":"ElementaryTypeName","src":"111:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6856,"mutability":"mutable","name":"_additionalCalldata","nameLocation":"146:19:55","nodeType":"VariableDeclaration","scope":6863,"src":"133:32:55","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6855,"name":"bytes","nodeType":"ElementaryTypeName","src":"133:5:55","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6858,"mutability":"mutable","name":"_sourceToken","nameLocation":"175:12:55","nodeType":"VariableDeclaration","scope":6863,"src":"167:20:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6857,"name":"address","nodeType":"ElementaryTypeName","src":"167:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6860,"mutability":"mutable","name":"_amount","nameLocation":"197:7:55","nodeType":"VariableDeclaration","scope":6863,"src":"189:15:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6859,"name":"uint256","nodeType":"ElementaryTypeName","src":"189:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"110:95:55"},"returnParameters":{"id":6862,"nodeType":"ParameterList","parameters":[],"src":"214:0:55"},"scope":6864,"src":"89:126:55","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6865,"src":"59:158:55","usedErrors":[]}],"src":"33:184:55"},"id":55},"contracts/ISemver.sol":{"ast":{"absolutePath":"contracts/ISemver.sol","exportedSymbols":{"ISemver":[6874]},"id":6875,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6866,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:56"},{"abstract":false,"baseContracts":[],"canonicalName":"ISemver","contractDependencies":[],"contractKind":"interface","documentation":{"id":6867,"nodeType":"StructuredDocumentation","src":"57:141:56","text":"@title ISemver\n @notice ISemver is a simple contract for ensuring that contracts are\n         versioned using semantic versioning."},"fullyImplemented":false,"id":6874,"linearizedBaseContracts":[6874],"name":"ISemver","nameLocation":"208:7:56","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6868,"nodeType":"StructuredDocumentation","src":"222:232:56","text":"@notice Getter for the semantic version of the contract. This is not\n         meant to be used onchain but instead meant to be used by offchain\n         tooling.\n @return Semver contract version as a string."},"functionSelector":"54fd4d50","id":6873,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"468:7:56","nodeType":"FunctionDefinition","parameters":{"id":6869,"nodeType":"ParameterList","parameters":[],"src":"475:2:56"},"returnParameters":{"id":6872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6873,"src":"501:13:56","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6870,"name":"string","nodeType":"ElementaryTypeName","src":"501:6:56","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"500:15:56"},"scope":6874,"src":"459:57:56","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6875,"src":"198:320:56","usedErrors":[]}],"src":"32:486:56"},"id":56}},"contracts":{"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol":{"IIFtso":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"natTurnout","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lowNatTurnoutThresholdBIPS","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"LowTurnout","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"PriceEpochInitializedOnFtso","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"bool","name":"rewardedFtso","type":"bool"},{"indexed":false,"internalType":"uint256","name":"lowIQRRewardPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"highIQRRewardPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lowElasticBandRewardPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"highElasticBandRewardPrice","type":"uint256"},{"indexed":false,"internalType":"enum IFtso.PriceFinalizationType","name":"finalizationType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"PriceFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"submitter","type":"address"},{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"hash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"PriceHashSubmitted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"voter","type":"address"},{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"random","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"votePowerNat","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"votePowerAsset","type":"uint256"}],"name":"PriceRevealed","type":"event"},{"inputs":[{"internalType":"uint256","name":"_firstEpochStartTs","type":"uint256"},{"internalType":"uint256","name":"_submitPeriodSeconds","type":"uint256"},{"internalType":"uint256","name":"_revealPeriodSeconds","type":"uint256"}],"name":"activateFtso","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"active","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxVotePowerNatThresholdFraction","type":"uint256"},{"internalType":"uint256","name":"_maxVotePowerAssetThresholdFraction","type":"uint256"},{"internalType":"uint256","name":"_lowAssetUSDThreshold","type":"uint256"},{"internalType":"uint256","name":"_highAssetUSDThreshold","type":"uint256"},{"internalType":"uint256","name":"_highAssetTurnoutThresholdBIPS","type":"uint256"},{"internalType":"uint256","name":"_lowNatTurnoutThresholdBIPS","type":"uint256"},{"internalType":"uint256","name":"_elasticBandRewardBIPS","type":"uint256"},{"internalType":"uint256","name":"_elasticBandWidthPPM","type":"uint256"},{"internalType":"address[]","name":"_trustedAddresses","type":"address[]"}],"name":"configureEpochs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"deactivateFtso","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"epochsConfiguration","outputs":[{"internalType":"uint256","name":"_maxVotePowerNatThresholdFraction","type":"uint256"},{"internalType":"uint256","name":"_maxVotePowerAssetThresholdFraction","type":"uint256"},{"internalType":"uint256","name":"_lowAssetUSDThreshold","type":"uint256"},{"internalType":"uint256","name":"_highAssetUSDThreshold","type":"uint256"},{"internalType":"uint256","name":"_highAssetTurnoutThresholdBIPS","type":"uint256"},{"internalType":"uint256","name":"_lowNatTurnoutThresholdBIPS","type":"uint256"},{"internalType":"uint256","name":"_elasticBandRewardBIPS","type":"uint256"},{"internalType":"uint256","name":"_elasticBandWidthPPM","type":"uint256"},{"internalType":"address[]","name":"_trustedAddresses","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"}],"name":"fallbackFinalizePriceEpoch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"bool","name":"_returnRewardData","type":"bool"}],"name":"finalizePriceEpoch","outputs":[{"internalType":"address[]","name":"_eligibleAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_natWeights","type":"uint256[]"},{"internalType":"uint256","name":"_totalNatWeight","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"}],"name":"forceFinalizePriceEpoch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"ftsoManager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAsset","outputs":[{"internalType":"contract IIVPToken","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAssetFtsos","outputs":[{"internalType":"contract IIFtso[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentEpochId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPrice","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceDetails","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_priceTimestamp","type":"uint256"},{"internalType":"enum IFtso.PriceFinalizationType","name":"_priceFinalizationType","type":"uint8"},{"internalType":"uint256","name":"_lastPriceEpochFinalizationTimestamp","type":"uint256"},{"internalType":"enum IFtso.PriceFinalizationType","name":"_lastPriceEpochFinalizationType","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceFromTrustedProviders","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceWithDecimals","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"uint256","name":"_assetPriceUsdDecimals","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceWithDecimalsFromTrustedProviders","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"uint256","name":"_assetPriceUsdDecimals","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentRandom","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"name":"getEpochId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"}],"name":"getEpochPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"address","name":"_voter","type":"address"}],"name":"getEpochPriceForVoter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPriceEpochConfiguration","outputs":[{"internalType":"uint256","name":"_firstEpochStartTs","type":"uint256"},{"internalType":"uint256","name":"_submitPeriodSeconds","type":"uint256"},{"internalType":"uint256","name":"_revealPeriodSeconds","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPriceEpochData","outputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"uint256","name":"_epochSubmitEndTime","type":"uint256"},{"internalType":"uint256","name":"_epochRevealEndTime","type":"uint256"},{"internalType":"uint256","name":"_votePowerBlock","type":"uint256"},{"internalType":"bool","name":"_fallbackMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"}],"name":"getRandom","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVoteWeightingParameters","outputs":[{"internalType":"contract IIVPToken[]","name":"_assets","type":"address[]"},{"internalType":"uint256[]","name":"_assetMultipliers","type":"uint256[]"},{"internalType":"uint256","name":"_totalVotePowerNat","type":"uint256"},{"internalType":"uint256","name":"_totalVotePowerAsset","type":"uint256"},{"internalType":"uint256","name":"_assetWeightRatio","type":"uint256"},{"internalType":"uint256","name":"_votePowerBlock","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_circulatingSupplyNat","type":"uint256"},{"internalType":"bool","name":"_fallbackMode","type":"bool"}],"name":"initializeCurrentEpochStateForReveal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"},{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_random","type":"uint256"},{"internalType":"uint256","name":"_wNatVP","type":"uint256"}],"name":"revealPriceSubmitter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IIVPToken","name":"_asset","type":"address"}],"name":"setAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IIFtso[]","name":"_assetFtsos","type":"address[]"}],"name":"setAssetFtsos","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"setVotePowerBlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"submitPriceHashSubmitter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_initialPriceUSD","type":"uint256"},{"internalType":"uint256","name":"_initialPriceTimestamp","type":"uint256"}],"name":"updateInitialPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"wNat","outputs":[{"internalType":"contract IIVPToken","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"},{"internalType":"uint256","name":"_epochId","type":"uint256"}],"name":"wNatVotePowerCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"epochsConfiguration()":{"returns":{"_elasticBandRewardBIPS":"          Hybrid reward band, where _elasticBandRewardBIPS goes to the  elastic band (prices within _elasticBandWidthPPM of the median)  and 10000 - elasticBandRewardBIPS to the IQR ","_elasticBandWidthPPM":"            Prices within _elasticBandWidthPPM of median are rewarded","_highAssetTurnoutThresholdBIPS":"  Threshold for high asset turnout","_highAssetUSDThreshold":"          Threshold for high asset vote power","_lowAssetUSDThreshold":"           Threshold for low asset vote power","_lowNatTurnoutThresholdBIPS":"     Threshold for low nat turnout","_maxVotePowerAssetThresholdFraction":"     High threshold for asset vote power per voter","_maxVotePowerNatThresholdFraction":"       High threshold for native token vote power per voter","_trustedAddresses":"               Trusted addresses - use their prices if low nat turnout is not achieved"}},"getAsset()":{"details":"Asset is null in case of multi-asset FTSO"},"getAssetFtsos()":{"details":"AssetFtsos is not null only in case of multi-asset FTSO"},"getCurrentPrice()":{"returns":{"_price":"              Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_timestamp":"          Time when price was updated for the last time"}},"getCurrentPriceDetails()":{"returns":{"_lastPriceEpochFinalizationTimestamp":"    Time when last price epoch was finalized","_lastPriceEpochFinalizationType":"         Finalization type of last finalized price epoch","_price":"                                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_priceFinalizationType":"                  Finalization type when price was updated for the last time","_priceTimestamp":"                         Time when price was updated for the last time"}},"getCurrentPriceFromTrustedProviders()":{"returns":{"_price":"              Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_timestamp":"          Time when price was updated for the last time"}},"getCurrentPriceWithDecimals()":{"returns":{"_assetPriceUsdDecimals":"  Number of decimals used for USD price","_price":"                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_timestamp":"              Time when price was updated for the last time"}},"getCurrentPriceWithDecimalsFromTrustedProviders()":{"returns":{"_assetPriceUsdDecimals":"  Number of decimals used for USD price","_price":"                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_timestamp":"              Time when price was updated for the last time"}},"getEpochId(uint256)":{"params":{"_timestamp":"Timestamp as seconds from unix epoch"}},"getEpochPrice(uint256)":{"params":{"_epochId":"Id of the epoch"},"returns":{"_0":"Price in USD multiplied by ASSET_PRICE_USD_DECIMALS"}},"getEpochPriceForVoter(uint256,address)":{"params":{"_epochId":"Id of the epoch","_voter":"Address of the voter"},"returns":{"_0":"Price in USD multiplied by ASSET_PRICE_USD_DECIMALS"}},"getPriceEpochConfiguration()":{"returns":{"_firstEpochStartTs":"          First epoch start timestamp","_revealPeriodSeconds":"        Reveal period in seconds","_submitPeriodSeconds":"        Submit period in seconds"}},"getPriceEpochData()":{"details":"half-closed intervals - end time not included","returns":{"_epochId":"                Current epoch id","_epochRevealEndTime":"     End time of the current epoch price reveal as seconds from unix epoch","_epochSubmitEndTime":"     End time of the current epoch price submission as seconds from unix epoch","_fallbackMode":"           Current epoch in fallback mode - only votes from trusted addresses will be used","_votePowerBlock":"         Vote power block for the current epoch"}},"getRandom(uint256)":{"params":{"_epochId":"Id of the epoch"}},"getVoteWeightingParameters()":{"returns":{"_assetMultipliers":"       weight of each asset in (multiasset) ftso, mutiplied by TERA","_assetWeightRatio":"       ratio of combined asset vp vs. native token vp (in BIPS)","_assets":"                 the list of Assets that are accounted in vote","_totalVotePowerAsset":"    total combined asset vote power at block","_totalVotePowerNat":"      total native token vote power at block","_votePowerBlock":"         vote powewr block for given epoch"}},"revealPriceSubmitter(address,uint256,uint256,uint256,uint256)":{"params":{"_epochId":"Id of the epoch in which the price hash was submitted","_price":"Submitted price in USD","_random":"Submitted random number","_voter":"Voter address"}},"submitPriceHashSubmitter(address,uint256,bytes32)":{"params":{"_epochId":"Target epoch id to which hashes are submitted","_hash":"Hashed price and random number","_sender":"Sender address"}},"wNatVotePowerCached(address,uint256)":{"params":{"_epochId":"Id of the epoch in which the price hash was submitted","_voter":"Voter address"},"returns":{"_0":"wNat vote power"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"activateFtso(uint256,uint256,uint256)":"2f0a6f3c","active()":"02fb0c5e","configureEpochs(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[])":"5a3c9d8e","deactivateFtso()":"555989da","epochsConfiguration()":"e3749e0c","fallbackFinalizePriceEpoch(uint256)":"4afd5102","finalizePriceEpoch(uint256,bool)":"40462a2d","forceFinalizePriceEpoch(uint256)":"974d7a6b","ftsoManager()":"11a7aaaa","getAsset()":"5c222bad","getAssetFtsos()":"18931c35","getCurrentEpochId()":"a29a839f","getCurrentPrice()":"eb91d37e","getCurrentPriceDetails()":"040d73b8","getCurrentPriceFromTrustedProviders()":"af52df08","getCurrentPriceWithDecimals()":"65f5cd86","getCurrentPriceWithDecimalsFromTrustedProviders()":"3cacb3ae","getCurrentRandom()":"d89601fd","getEpochId(uint256)":"5303548b","getEpochPrice(uint256)":"7d1d6f12","getEpochPriceForVoter(uint256,address)":"c5d8b9e7","getPriceEpochConfiguration()":"144e1591","getPriceEpochData()":"e3b3a3b3","getRandom(uint256)":"cd4b6914","getVoteWeightingParameters()":"8357d08c","initializeCurrentEpochStateForReveal(uint256,bool)":"f670ebe3","revealPriceSubmitter(address,uint256,uint256,uint256,uint256)":"55f7b69b","setAsset(address)":"d0d552dd","setAssetFtsos(address[])":"131fdee2","setVotePowerBlock(uint256)":"e536f396","submitPriceHashSubmitter(address,uint256,bytes32)":"27bd2ad5","symbol()":"95d89b41","updateInitialPrice(uint256,uint256)":"306ba253","wNat()":"9edbf007","wNatVotePowerCached(address,uint256)":"f72cab28"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"natTurnout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowNatTurnoutThresholdBIPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LowTurnout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceEpochInitializedOnFtso\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rewardedFtso\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowIQRRewardPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highIQRRewardPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowElasticBandRewardPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highElasticBandRewardPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IFtso.PriceFinalizationType\",\"name\":\"finalizationType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceHashSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePowerNat\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePowerAsset\",\"type\":\"uint256\"}],\"name\":\"PriceRevealed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstEpochStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submitPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"activateFtso\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxVotePowerNatThresholdFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxVotePowerAssetThresholdFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowAssetUSDThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highAssetUSDThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highAssetTurnoutThresholdBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowNatTurnoutThresholdBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_elasticBandRewardBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_elasticBandWidthPPM\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_trustedAddresses\",\"type\":\"address[]\"}],\"name\":\"configureEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateFtso\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochsConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxVotePowerNatThresholdFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxVotePowerAssetThresholdFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowAssetUSDThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highAssetUSDThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highAssetTurnoutThresholdBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowNatTurnoutThresholdBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_elasticBandRewardBIPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_elasticBandWidthPPM\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_trustedAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"fallbackFinalizePriceEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_returnRewardData\",\"type\":\"bool\"}],\"name\":\"finalizePriceEpoch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_eligibleAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_natWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalNatWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"forceFinalizePriceEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ftsoManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"contract IIVPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetFtsos\",\"outputs\":[{\"internalType\":\"contract IIFtso[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IFtso.PriceFinalizationType\",\"name\":\"_priceFinalizationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_lastPriceEpochFinalizationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IFtso.PriceFinalizationType\",\"name\":\"_lastPriceEpochFinalizationType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceFromTrustedProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceWithDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetPriceUsdDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceWithDecimalsFromTrustedProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetPriceUsdDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getEpochPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getEpochPriceForVoter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceEpochConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstEpochStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submitPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealPeriodSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceEpochData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochSubmitEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochRevealEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votePowerBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fallbackMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteWeightingParameters\",\"outputs\":[{\"internalType\":\"contract IIVPToken[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_assetMultipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalVotePowerNat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalVotePowerAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetWeightRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votePowerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_circulatingSupplyNat\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fallbackMode\",\"type\":\"bool\"}],\"name\":\"initializeCurrentEpochStateForReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_random\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wNatVP\",\"type\":\"uint256\"}],\"name\":\"revealPriceSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIVPToken\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"setAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIFtso[]\",\"name\":\"_assetFtsos\",\"type\":\"address[]\"}],\"name\":\"setAssetFtsos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"setVotePowerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"submitPriceHashSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPriceTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateInitialPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNat\",\"outputs\":[{\"internalType\":\"contract IIVPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"wNatVotePowerCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"epochsConfiguration()\":{\"returns\":{\"_elasticBandRewardBIPS\":\"          Hybrid reward band, where _elasticBandRewardBIPS goes to the  elastic band (prices within _elasticBandWidthPPM of the median)  and 10000 - elasticBandRewardBIPS to the IQR \",\"_elasticBandWidthPPM\":\"            Prices within _elasticBandWidthPPM of median are rewarded\",\"_highAssetTurnoutThresholdBIPS\":\"  Threshold for high asset turnout\",\"_highAssetUSDThreshold\":\"          Threshold for high asset vote power\",\"_lowAssetUSDThreshold\":\"           Threshold for low asset vote power\",\"_lowNatTurnoutThresholdBIPS\":\"     Threshold for low nat turnout\",\"_maxVotePowerAssetThresholdFraction\":\"     High threshold for asset vote power per voter\",\"_maxVotePowerNatThresholdFraction\":\"       High threshold for native token vote power per voter\",\"_trustedAddresses\":\"               Trusted addresses - use their prices if low nat turnout is not achieved\"}},\"getAsset()\":{\"details\":\"Asset is null in case of multi-asset FTSO\"},\"getAssetFtsos()\":{\"details\":\"AssetFtsos is not null only in case of multi-asset FTSO\"},\"getCurrentPrice()\":{\"returns\":{\"_price\":\"              Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_timestamp\":\"          Time when price was updated for the last time\"}},\"getCurrentPriceDetails()\":{\"returns\":{\"_lastPriceEpochFinalizationTimestamp\":\"    Time when last price epoch was finalized\",\"_lastPriceEpochFinalizationType\":\"         Finalization type of last finalized price epoch\",\"_price\":\"                                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_priceFinalizationType\":\"                  Finalization type when price was updated for the last time\",\"_priceTimestamp\":\"                         Time when price was updated for the last time\"}},\"getCurrentPriceFromTrustedProviders()\":{\"returns\":{\"_price\":\"              Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_timestamp\":\"          Time when price was updated for the last time\"}},\"getCurrentPriceWithDecimals()\":{\"returns\":{\"_assetPriceUsdDecimals\":\"  Number of decimals used for USD price\",\"_price\":\"                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_timestamp\":\"              Time when price was updated for the last time\"}},\"getCurrentPriceWithDecimalsFromTrustedProviders()\":{\"returns\":{\"_assetPriceUsdDecimals\":\"  Number of decimals used for USD price\",\"_price\":\"                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_timestamp\":\"              Time when price was updated for the last time\"}},\"getEpochId(uint256)\":{\"params\":{\"_timestamp\":\"Timestamp as seconds from unix epoch\"}},\"getEpochPrice(uint256)\":{\"params\":{\"_epochId\":\"Id of the epoch\"},\"returns\":{\"_0\":\"Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\"}},\"getEpochPriceForVoter(uint256,address)\":{\"params\":{\"_epochId\":\"Id of the epoch\",\"_voter\":\"Address of the voter\"},\"returns\":{\"_0\":\"Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\"}},\"getPriceEpochConfiguration()\":{\"returns\":{\"_firstEpochStartTs\":\"          First epoch start timestamp\",\"_revealPeriodSeconds\":\"        Reveal period in seconds\",\"_submitPeriodSeconds\":\"        Submit period in seconds\"}},\"getPriceEpochData()\":{\"details\":\"half-closed intervals - end time not included\",\"returns\":{\"_epochId\":\"                Current epoch id\",\"_epochRevealEndTime\":\"     End time of the current epoch price reveal as seconds from unix epoch\",\"_epochSubmitEndTime\":\"     End time of the current epoch price submission as seconds from unix epoch\",\"_fallbackMode\":\"           Current epoch in fallback mode - only votes from trusted addresses will be used\",\"_votePowerBlock\":\"         Vote power block for the current epoch\"}},\"getRandom(uint256)\":{\"params\":{\"_epochId\":\"Id of the epoch\"}},\"getVoteWeightingParameters()\":{\"returns\":{\"_assetMultipliers\":\"       weight of each asset in (multiasset) ftso, mutiplied by TERA\",\"_assetWeightRatio\":\"       ratio of combined asset vp vs. native token vp (in BIPS)\",\"_assets\":\"                 the list of Assets that are accounted in vote\",\"_totalVotePowerAsset\":\"    total combined asset vote power at block\",\"_totalVotePowerNat\":\"      total native token vote power at block\",\"_votePowerBlock\":\"         vote powewr block for given epoch\"}},\"revealPriceSubmitter(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_epochId\":\"Id of the epoch in which the price hash was submitted\",\"_price\":\"Submitted price in USD\",\"_random\":\"Submitted random number\",\"_voter\":\"Voter address\"}},\"submitPriceHashSubmitter(address,uint256,bytes32)\":{\"params\":{\"_epochId\":\"Target epoch id to which hashes are submitted\",\"_hash\":\"Hashed price and random number\",\"_sender\":\"Sender address\"}},\"wNatVotePowerCached(address,uint256)\":{\"params\":{\"_epochId\":\"Id of the epoch in which the price hash was submitted\",\"_voter\":\"Voter address\"},\"returns\":{\"_0\":\"wNat vote power\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"active()\":{\"notice\":\"Returns if FTSO is active\"},\"epochsConfiguration()\":{\"notice\":\"Returns current configuration of epoch state\"},\"finalizePriceEpoch(uint256,bool)\":{\"notice\":\"function finalizePriceReveal called by reward manager only on correct timing. if price reveal period for epoch x ended. finalize. iterate list of price submissions find weighted median find adjucant 50% of price submissions. Allocate reward for any price submission which is same as a \\\"winning\\\" submission\"},\"ftsoManager()\":{\"notice\":\"Returns ftso manager address\"},\"getAsset()\":{\"notice\":\"Returns the FTSO asset\"},\"getAssetFtsos()\":{\"notice\":\"Returns the Asset FTSOs\"},\"getCurrentEpochId()\":{\"notice\":\"Returns current epoch id\"},\"getCurrentPrice()\":{\"notice\":\"Returns current asset price\"},\"getCurrentPriceDetails()\":{\"notice\":\"Returns current asset price details\"},\"getCurrentPriceFromTrustedProviders()\":{\"notice\":\"Returns current asset price calculated from trusted providers\"},\"getCurrentPriceWithDecimals()\":{\"notice\":\"Returns current asset price and number of decimals\"},\"getCurrentPriceWithDecimalsFromTrustedProviders()\":{\"notice\":\"Returns current asset price calculated from trusted providers and number of decimals\"},\"getCurrentRandom()\":{\"notice\":\"Returns current random number\"},\"getEpochId(uint256)\":{\"notice\":\"Returns id of the epoch which was opened for price submission at the specified timestamp\"},\"getEpochPrice(uint256)\":{\"notice\":\"Returns asset price consented in specific epoch\"},\"getEpochPriceForVoter(uint256,address)\":{\"notice\":\"Returns asset price submitted by voter in specific epoch\"},\"getPriceEpochConfiguration()\":{\"notice\":\"Returns current epoch data\"},\"getPriceEpochData()\":{\"notice\":\"Returns current epoch data\"},\"getRandom(uint256)\":{\"notice\":\"Returns random number of the specified epoch\"},\"getVoteWeightingParameters()\":{\"notice\":\"Returns parameters necessary for approximately replicating vote weighting.\"},\"revealPriceSubmitter(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Reveals submitted price during epoch reveal period - only price submitterThe hash of _price and _random must be equal to the submitted hashEmits PriceRevealed event\"},\"submitPriceHashSubmitter(address,uint256,bytes32)\":{\"notice\":\"Submits price hash for current epoch - only price submitterEmits PriceHashSubmitted event. \"},\"symbol()\":{\"notice\":\"Returns the FTSO symbol\"},\"wNatVotePowerCached(address,uint256)\":{\"notice\":\"Get (and cache) wNat vote power for specified voter and given epoch id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol\":\"IIFtso\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../../userInterfaces/IFtso.sol\\\";\\nimport \\\"../../../util-contracts/token/token/interface/IIVPToken.sol\\\";\\n\\n\\ninterface IIFtso is IFtso, IFtsoGenesis {\\n\\n    /// function finalizePriceReveal\\n    /// called by reward manager only on correct timing.\\n    /// if price reveal period for epoch x ended. finalize.\\n    /// iterate list of price submissions\\n    /// find weighted median\\n    /// find adjucant 50% of price submissions.\\n    /// Allocate reward for any price submission which is same as a \\\"winning\\\" submission\\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\\n        returns(\\n            address[] memory _eligibleAddresses,\\n            uint256[] memory _natWeights,\\n            uint256 _totalNatWeight\\n        );\\n\\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    // activateFtso will be called by ftso manager once ftso is added \\n    // before this is done, FTSO can't run\\n    function activateFtso(\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    ) external;\\n\\n    function deactivateFtso() external;\\n\\n    // update initial price and timestamp - only if not active\\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\\n\\n    function configureEpochs(\\n        uint256 _maxVotePowerNatThresholdFraction,\\n        uint256 _maxVotePowerAssetThresholdFraction,\\n        uint256 _lowAssetUSDThreshold,\\n        uint256 _highAssetUSDThreshold,\\n        uint256 _highAssetTurnoutThresholdBIPS,\\n        uint256 _lowNatTurnoutThresholdBIPS,\\n        uint256 _elasticBandRewardBIPS,\\n        uint256 _elasticBandWidthPPM,\\n        address[] memory _trustedAddresses\\n    ) external;\\n\\n    function setAsset(IIVPToken _asset) external;\\n\\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\\n\\n    // current vote power block will update per reward epoch. \\n    // the FTSO doesn't have notion of reward epochs.\\n    // reward manager only can set this data. \\n    function setVotePowerBlock(uint256 _blockNumber) external;\\n\\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\\n  \\n    /**\\n     * @notice Returns ftso manager address\\n     */\\n    function ftsoManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the FTSO asset\\n     * @dev Asset is null in case of multi-asset FTSO\\n     */\\n    function getAsset() external view returns (IIVPToken);\\n\\n    /**\\n     * @notice Returns the Asset FTSOs\\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\\n     */\\n    function getAssetFtsos() external view returns (IIFtso[] memory);\\n\\n    /**\\n     * @notice Returns current configuration of epoch state\\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \\n        elastic band (prices within _elasticBandWidthPPM of the median) \\n        and 10000 - elasticBandRewardBIPS to the IQR \\n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\\n     */\\n    function epochsConfiguration() external view \\n        returns (\\n            uint256 _maxVotePowerNatThresholdFraction,\\n            uint256 _maxVotePowerAssetThresholdFraction,\\n            uint256 _lowAssetUSDThreshold,\\n            uint256 _highAssetUSDThreshold,\\n            uint256 _highAssetTurnoutThresholdBIPS,\\n            uint256 _lowNatTurnoutThresholdBIPS,\\n            uint256 _elasticBandRewardBIPS,\\n            uint256 _elasticBandWidthPPM,\\n            address[] memory _trustedAddresses\\n        );\\n\\n    /**\\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\\n     * @return _assets                  the list of Assets that are accounted in vote\\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\\n     * @return _totalVotePowerNat       total native token vote power at block\\n     * @return _totalVotePowerAsset     total combined asset vote power at block\\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\\n     * @return _votePowerBlock          vote powewr block for given epoch\\n     */\\n    function getVoteWeightingParameters() external view \\n        returns (\\n            IIVPToken[] memory _assets,\\n            uint256[] memory _assetMultipliers,\\n            uint256 _totalVotePowerNat,\\n            uint256 _totalVotePowerAsset,\\n            uint256 _assetWeightRatio,\\n            uint256 _votePowerBlock\\n        );\\n\\n    function wNat() external view returns (IIVPToken);\\n}\\n\",\"keccak256\":\"0xd245b3c083496b3539224dc707381db5a5e8a49a5012d370b34514caefa3415d\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n    \\n    /**\\n     * @notice Submits price hash for current epoch - only price submitter\\n     * @param _sender               Sender address\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _hash                 Hashed price and random number\\n     * @notice Emits PriceHashSubmitted event. \\n     */\\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @param _random               Submitted random number\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _random,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffadc43743fb1d76d63438725462cd018e0fb31463802f0c235c0b6409dc97a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    // events\\n    event PriceHashSubmitted(\\n        address indexed submitter, uint256 indexed epochId, bytes32 hash, uint256 timestamp\\n    );\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 random, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1d5ba4d911d3191721469f2f975e64c0d3eed6a54801a7ad8710d830973f03b9\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d338d76bee3c13abb65b25ed5c7394e24dab8b03d34ac4f9fc36588a2d679f4\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Event triggered when an delegator's balance changes.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateVotesChanged(\\n    address indexed delegate, \\n    uint256 previousBalance, \\n    uint256 newBalance\\n    );\\n\\n    /**\\n     * Event triggered when an account delegates to another account.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateChanged(\\n    address indexed delegator, \\n    address indexed fromDelegate, \\n    address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * @notice Get the token that this governance vote power contract belongs to.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xb8947f604f760c89f116bcfbb601f8d00c7be2e7a455f265e07b6f2eac5e5ff0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x065330415186515d281beed2f006e41202d8f16159ceb4d4597c4dd7773b6924\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x037c127ad7ac96c904170b6ad3b1e04adc2ac138fb1a84dde5fb7fe0591bc0d1\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"active()":{"notice":"Returns if FTSO is active"},"epochsConfiguration()":{"notice":"Returns current configuration of epoch state"},"finalizePriceEpoch(uint256,bool)":{"notice":"function finalizePriceReveal called by reward manager only on correct timing. if price reveal period for epoch x ended. finalize. iterate list of price submissions find weighted median find adjucant 50% of price submissions. Allocate reward for any price submission which is same as a \"winning\" submission"},"ftsoManager()":{"notice":"Returns ftso manager address"},"getAsset()":{"notice":"Returns the FTSO asset"},"getAssetFtsos()":{"notice":"Returns the Asset FTSOs"},"getCurrentEpochId()":{"notice":"Returns current epoch id"},"getCurrentPrice()":{"notice":"Returns current asset price"},"getCurrentPriceDetails()":{"notice":"Returns current asset price details"},"getCurrentPriceFromTrustedProviders()":{"notice":"Returns current asset price calculated from trusted providers"},"getCurrentPriceWithDecimals()":{"notice":"Returns current asset price and number of decimals"},"getCurrentPriceWithDecimalsFromTrustedProviders()":{"notice":"Returns current asset price calculated from trusted providers and number of decimals"},"getCurrentRandom()":{"notice":"Returns current random number"},"getEpochId(uint256)":{"notice":"Returns id of the epoch which was opened for price submission at the specified timestamp"},"getEpochPrice(uint256)":{"notice":"Returns asset price consented in specific epoch"},"getEpochPriceForVoter(uint256,address)":{"notice":"Returns asset price submitted by voter in specific epoch"},"getPriceEpochConfiguration()":{"notice":"Returns current epoch data"},"getPriceEpochData()":{"notice":"Returns current epoch data"},"getRandom(uint256)":{"notice":"Returns random number of the specified epoch"},"getVoteWeightingParameters()":{"notice":"Returns parameters necessary for approximately replicating vote weighting."},"revealPriceSubmitter(address,uint256,uint256,uint256,uint256)":{"notice":"Reveals submitted price during epoch reveal period - only price submitterThe hash of _price and _random must be equal to the submitted hashEmits PriceRevealed event"},"submitPriceHashSubmitter(address,uint256,bytes32)":{"notice":"Submits price hash for current epoch - only price submitterEmits PriceHashSubmitted event. "},"symbol()":{"notice":"Returns the FTSO symbol"},"wNatVotePowerCached(address,uint256)":{"notice":"Get (and cache) wNat vote power for specified voter and given epoch id"}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol":{"IFtsoGenesis":{"abi":[{"inputs":[{"internalType":"address","name":"_voter","type":"address"},{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_random","type":"uint256"},{"internalType":"uint256","name":"_wNatVP","type":"uint256"}],"name":"revealPriceSubmitter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"submitPriceHashSubmitter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"},{"internalType":"uint256","name":"_epochId","type":"uint256"}],"name":"wNatVotePowerCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"revealPriceSubmitter(address,uint256,uint256,uint256,uint256)":{"params":{"_epochId":"Id of the epoch in which the price hash was submitted","_price":"Submitted price in USD","_random":"Submitted random number","_voter":"Voter address"}},"submitPriceHashSubmitter(address,uint256,bytes32)":{"params":{"_epochId":"Target epoch id to which hashes are submitted","_hash":"Hashed price and random number","_sender":"Sender address"}},"wNatVotePowerCached(address,uint256)":{"params":{"_epochId":"Id of the epoch in which the price hash was submitted","_voter":"Voter address"},"returns":{"_0":"wNat vote power"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"revealPriceSubmitter(address,uint256,uint256,uint256,uint256)":"55f7b69b","submitPriceHashSubmitter(address,uint256,bytes32)":"27bd2ad5","wNatVotePowerCached(address,uint256)":"f72cab28"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_random\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wNatVP\",\"type\":\"uint256\"}],\"name\":\"revealPriceSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"submitPriceHashSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"wNatVotePowerCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"revealPriceSubmitter(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_epochId\":\"Id of the epoch in which the price hash was submitted\",\"_price\":\"Submitted price in USD\",\"_random\":\"Submitted random number\",\"_voter\":\"Voter address\"}},\"submitPriceHashSubmitter(address,uint256,bytes32)\":{\"params\":{\"_epochId\":\"Target epoch id to which hashes are submitted\",\"_hash\":\"Hashed price and random number\",\"_sender\":\"Sender address\"}},\"wNatVotePowerCached(address,uint256)\":{\"params\":{\"_epochId\":\"Id of the epoch in which the price hash was submitted\",\"_voter\":\"Voter address\"},\"returns\":{\"_0\":\"wNat vote power\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"revealPriceSubmitter(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Reveals submitted price during epoch reveal period - only price submitterThe hash of _price and _random must be equal to the submitted hashEmits PriceRevealed event\"},\"submitPriceHashSubmitter(address,uint256,bytes32)\":{\"notice\":\"Submits price hash for current epoch - only price submitterEmits PriceHashSubmitted event. \"},\"wNatVotePowerCached(address,uint256)\":{\"notice\":\"Get (and cache) wNat vote power for specified voter and given epoch id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":\"IFtsoGenesis\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n    \\n    /**\\n     * @notice Submits price hash for current epoch - only price submitter\\n     * @param _sender               Sender address\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _hash                 Hashed price and random number\\n     * @notice Emits PriceHashSubmitted event. \\n     */\\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @param _random               Submitted random number\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _random,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffadc43743fb1d76d63438725462cd018e0fb31463802f0c235c0b6409dc97a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"revealPriceSubmitter(address,uint256,uint256,uint256,uint256)":{"notice":"Reveals submitted price during epoch reveal period - only price submitterThe hash of _price and _random must be equal to the submitted hashEmits PriceRevealed event"},"submitPriceHashSubmitter(address,uint256,bytes32)":{"notice":"Submits price hash for current epoch - only price submitterEmits PriceHashSubmitted event. "},"wNatVotePowerCached(address,uint256)":{"notice":"Get (and cache) wNat vote power for specified voter and given epoch id"}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol":{"IFtsoManagerGenesis":{"abi":[{"inputs":[],"name":"getCurrentPriceEpochId","outputs":[{"internalType":"uint256","name":"_priceEpochId","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getCurrentPriceEpochId()":"08a7f402"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getCurrentPriceEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceEpochId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol\":\"IFtsoManagerGenesis\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoManagerGenesis {\\n\\n    function getCurrentPriceEpochId() external view returns (uint256 _priceEpochId);\\n\\n}\\n\",\"keccak256\":\"0xe3282e14304e70a34f6c7a6ee563267635a6cc6eff09f2459a43946ae3a113ab\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol":{"IFtsoRegistryGenesis":{"abi":[{"inputs":[{"internalType":"uint256[]","name":"_indices","type":"uint256[]"}],"name":"getFtsos","outputs":[{"internalType":"contract IFtsoGenesis[]","name":"_ftsos","type":"address[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getFtsos(uint256[])":"9cb47538"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getFtsos\",\"outputs\":[{\"internalType\":\"contract IFtsoGenesis[]\",\"name\":\"_ftsos\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":\"IFtsoRegistryGenesis\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n    \\n    /**\\n     * @notice Submits price hash for current epoch - only price submitter\\n     * @param _sender               Sender address\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _hash                 Hashed price and random number\\n     * @notice Emits PriceHashSubmitted event. \\n     */\\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @param _random               Submitted random number\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _random,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffadc43743fb1d76d63438725462cd018e0fb31463802f0c235c0b6409dc97a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./IFtsoGenesis.sol\\\";\\n\\n\\ninterface IFtsoRegistryGenesis {\\n\\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x4765fdcb22dcc64c015d02c019f0ddce8d8b36111160fd4160a3d94ea4f370a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol":{"IFtso":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"natTurnout","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lowNatTurnoutThresholdBIPS","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"LowTurnout","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"PriceEpochInitializedOnFtso","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"bool","name":"rewardedFtso","type":"bool"},{"indexed":false,"internalType":"uint256","name":"lowIQRRewardPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"highIQRRewardPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lowElasticBandRewardPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"highElasticBandRewardPrice","type":"uint256"},{"indexed":false,"internalType":"enum IFtso.PriceFinalizationType","name":"finalizationType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"PriceFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"submitter","type":"address"},{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"hash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"PriceHashSubmitted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"voter","type":"address"},{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"random","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"votePowerNat","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"votePowerAsset","type":"uint256"}],"name":"PriceRevealed","type":"event"},{"inputs":[],"name":"active","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentEpochId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPrice","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceDetails","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_priceTimestamp","type":"uint256"},{"internalType":"enum IFtso.PriceFinalizationType","name":"_priceFinalizationType","type":"uint8"},{"internalType":"uint256","name":"_lastPriceEpochFinalizationTimestamp","type":"uint256"},{"internalType":"enum IFtso.PriceFinalizationType","name":"_lastPriceEpochFinalizationType","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceFromTrustedProviders","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceWithDecimals","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"uint256","name":"_assetPriceUsdDecimals","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceWithDecimalsFromTrustedProviders","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"uint256","name":"_assetPriceUsdDecimals","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentRandom","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"name":"getEpochId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"}],"name":"getEpochPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"address","name":"_voter","type":"address"}],"name":"getEpochPriceForVoter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPriceEpochConfiguration","outputs":[{"internalType":"uint256","name":"_firstEpochStartTs","type":"uint256"},{"internalType":"uint256","name":"_submitPeriodSeconds","type":"uint256"},{"internalType":"uint256","name":"_revealPeriodSeconds","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPriceEpochData","outputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"uint256","name":"_epochSubmitEndTime","type":"uint256"},{"internalType":"uint256","name":"_epochRevealEndTime","type":"uint256"},{"internalType":"uint256","name":"_votePowerBlock","type":"uint256"},{"internalType":"bool","name":"_fallbackMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"}],"name":"getRandom","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getCurrentPrice()":{"returns":{"_price":"              Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_timestamp":"          Time when price was updated for the last time"}},"getCurrentPriceDetails()":{"returns":{"_lastPriceEpochFinalizationTimestamp":"    Time when last price epoch was finalized","_lastPriceEpochFinalizationType":"         Finalization type of last finalized price epoch","_price":"                                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_priceFinalizationType":"                  Finalization type when price was updated for the last time","_priceTimestamp":"                         Time when price was updated for the last time"}},"getCurrentPriceFromTrustedProviders()":{"returns":{"_price":"              Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_timestamp":"          Time when price was updated for the last time"}},"getCurrentPriceWithDecimals()":{"returns":{"_assetPriceUsdDecimals":"  Number of decimals used for USD price","_price":"                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_timestamp":"              Time when price was updated for the last time"}},"getCurrentPriceWithDecimalsFromTrustedProviders()":{"returns":{"_assetPriceUsdDecimals":"  Number of decimals used for USD price","_price":"                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS","_timestamp":"              Time when price was updated for the last time"}},"getEpochId(uint256)":{"params":{"_timestamp":"Timestamp as seconds from unix epoch"}},"getEpochPrice(uint256)":{"params":{"_epochId":"Id of the epoch"},"returns":{"_0":"Price in USD multiplied by ASSET_PRICE_USD_DECIMALS"}},"getEpochPriceForVoter(uint256,address)":{"params":{"_epochId":"Id of the epoch","_voter":"Address of the voter"},"returns":{"_0":"Price in USD multiplied by ASSET_PRICE_USD_DECIMALS"}},"getPriceEpochConfiguration()":{"returns":{"_firstEpochStartTs":"          First epoch start timestamp","_revealPeriodSeconds":"        Reveal period in seconds","_submitPeriodSeconds":"        Submit period in seconds"}},"getPriceEpochData()":{"details":"half-closed intervals - end time not included","returns":{"_epochId":"                Current epoch id","_epochRevealEndTime":"     End time of the current epoch price reveal as seconds from unix epoch","_epochSubmitEndTime":"     End time of the current epoch price submission as seconds from unix epoch","_fallbackMode":"           Current epoch in fallback mode - only votes from trusted addresses will be used","_votePowerBlock":"         Vote power block for the current epoch"}},"getRandom(uint256)":{"params":{"_epochId":"Id of the epoch"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"active()":"02fb0c5e","getCurrentEpochId()":"a29a839f","getCurrentPrice()":"eb91d37e","getCurrentPriceDetails()":"040d73b8","getCurrentPriceFromTrustedProviders()":"af52df08","getCurrentPriceWithDecimals()":"65f5cd86","getCurrentPriceWithDecimalsFromTrustedProviders()":"3cacb3ae","getCurrentRandom()":"d89601fd","getEpochId(uint256)":"5303548b","getEpochPrice(uint256)":"7d1d6f12","getEpochPriceForVoter(uint256,address)":"c5d8b9e7","getPriceEpochConfiguration()":"144e1591","getPriceEpochData()":"e3b3a3b3","getRandom(uint256)":"cd4b6914","symbol()":"95d89b41"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"natTurnout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowNatTurnoutThresholdBIPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LowTurnout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceEpochInitializedOnFtso\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rewardedFtso\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowIQRRewardPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highIQRRewardPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowElasticBandRewardPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highElasticBandRewardPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IFtso.PriceFinalizationType\",\"name\":\"finalizationType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceHashSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePowerNat\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePowerAsset\",\"type\":\"uint256\"}],\"name\":\"PriceRevealed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IFtso.PriceFinalizationType\",\"name\":\"_priceFinalizationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_lastPriceEpochFinalizationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IFtso.PriceFinalizationType\",\"name\":\"_lastPriceEpochFinalizationType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceFromTrustedProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceWithDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetPriceUsdDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceWithDecimalsFromTrustedProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetPriceUsdDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getEpochPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getEpochPriceForVoter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceEpochConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstEpochStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submitPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealPeriodSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceEpochData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochSubmitEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochRevealEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votePowerBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fallbackMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getCurrentPrice()\":{\"returns\":{\"_price\":\"              Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_timestamp\":\"          Time when price was updated for the last time\"}},\"getCurrentPriceDetails()\":{\"returns\":{\"_lastPriceEpochFinalizationTimestamp\":\"    Time when last price epoch was finalized\",\"_lastPriceEpochFinalizationType\":\"         Finalization type of last finalized price epoch\",\"_price\":\"                                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_priceFinalizationType\":\"                  Finalization type when price was updated for the last time\",\"_priceTimestamp\":\"                         Time when price was updated for the last time\"}},\"getCurrentPriceFromTrustedProviders()\":{\"returns\":{\"_price\":\"              Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_timestamp\":\"          Time when price was updated for the last time\"}},\"getCurrentPriceWithDecimals()\":{\"returns\":{\"_assetPriceUsdDecimals\":\"  Number of decimals used for USD price\",\"_price\":\"                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_timestamp\":\"              Time when price was updated for the last time\"}},\"getCurrentPriceWithDecimalsFromTrustedProviders()\":{\"returns\":{\"_assetPriceUsdDecimals\":\"  Number of decimals used for USD price\",\"_price\":\"                  Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\",\"_timestamp\":\"              Time when price was updated for the last time\"}},\"getEpochId(uint256)\":{\"params\":{\"_timestamp\":\"Timestamp as seconds from unix epoch\"}},\"getEpochPrice(uint256)\":{\"params\":{\"_epochId\":\"Id of the epoch\"},\"returns\":{\"_0\":\"Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\"}},\"getEpochPriceForVoter(uint256,address)\":{\"params\":{\"_epochId\":\"Id of the epoch\",\"_voter\":\"Address of the voter\"},\"returns\":{\"_0\":\"Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\"}},\"getPriceEpochConfiguration()\":{\"returns\":{\"_firstEpochStartTs\":\"          First epoch start timestamp\",\"_revealPeriodSeconds\":\"        Reveal period in seconds\",\"_submitPeriodSeconds\":\"        Submit period in seconds\"}},\"getPriceEpochData()\":{\"details\":\"half-closed intervals - end time not included\",\"returns\":{\"_epochId\":\"                Current epoch id\",\"_epochRevealEndTime\":\"     End time of the current epoch price reveal as seconds from unix epoch\",\"_epochSubmitEndTime\":\"     End time of the current epoch price submission as seconds from unix epoch\",\"_fallbackMode\":\"           Current epoch in fallback mode - only votes from trusted addresses will be used\",\"_votePowerBlock\":\"         Vote power block for the current epoch\"}},\"getRandom(uint256)\":{\"params\":{\"_epochId\":\"Id of the epoch\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"active()\":{\"notice\":\"Returns if FTSO is active\"},\"getCurrentEpochId()\":{\"notice\":\"Returns current epoch id\"},\"getCurrentPrice()\":{\"notice\":\"Returns current asset price\"},\"getCurrentPriceDetails()\":{\"notice\":\"Returns current asset price details\"},\"getCurrentPriceFromTrustedProviders()\":{\"notice\":\"Returns current asset price calculated from trusted providers\"},\"getCurrentPriceWithDecimals()\":{\"notice\":\"Returns current asset price and number of decimals\"},\"getCurrentPriceWithDecimalsFromTrustedProviders()\":{\"notice\":\"Returns current asset price calculated from trusted providers and number of decimals\"},\"getCurrentRandom()\":{\"notice\":\"Returns current random number\"},\"getEpochId(uint256)\":{\"notice\":\"Returns id of the epoch which was opened for price submission at the specified timestamp\"},\"getEpochPrice(uint256)\":{\"notice\":\"Returns asset price consented in specific epoch\"},\"getEpochPriceForVoter(uint256,address)\":{\"notice\":\"Returns asset price submitted by voter in specific epoch\"},\"getPriceEpochConfiguration()\":{\"notice\":\"Returns current epoch data\"},\"getPriceEpochData()\":{\"notice\":\"Returns current epoch data\"},\"getRandom(uint256)\":{\"notice\":\"Returns random number of the specified epoch\"},\"symbol()\":{\"notice\":\"Returns the FTSO symbol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol\":\"IFtso\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    // events\\n    event PriceHashSubmitted(\\n        address indexed submitter, uint256 indexed epochId, bytes32 hash, uint256 timestamp\\n    );\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 random, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1d5ba4d911d3191721469f2f975e64c0d3eed6a54801a7ad8710d830973f03b9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"active()":{"notice":"Returns if FTSO is active"},"getCurrentEpochId()":{"notice":"Returns current epoch id"},"getCurrentPrice()":{"notice":"Returns current asset price"},"getCurrentPriceDetails()":{"notice":"Returns current asset price details"},"getCurrentPriceFromTrustedProviders()":{"notice":"Returns current asset price calculated from trusted providers"},"getCurrentPriceWithDecimals()":{"notice":"Returns current asset price and number of decimals"},"getCurrentPriceWithDecimalsFromTrustedProviders()":{"notice":"Returns current asset price calculated from trusted providers and number of decimals"},"getCurrentRandom()":{"notice":"Returns current random number"},"getEpochId(uint256)":{"notice":"Returns id of the epoch which was opened for price submission at the specified timestamp"},"getEpochPrice(uint256)":{"notice":"Returns asset price consented in specific epoch"},"getEpochPriceForVoter(uint256,address)":{"notice":"Returns asset price submitted by voter in specific epoch"},"getPriceEpochConfiguration()":{"notice":"Returns current epoch data"},"getPriceEpochData()":{"notice":"Returns current epoch data"},"getRandom(uint256)":{"notice":"Returns random number of the specified epoch"},"symbol()":{"notice":"Returns the FTSO symbol"}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol":{"IFtsoManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epochId","type":"uint256"}],"name":"AccruingUnearnedRewardsFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"ftso","type":"address"},{"indexed":false,"internalType":"uint256","name":"epochId","type":"uint256"}],"name":"DistributingRewardsFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"fallbackMode","type":"bool"}],"name":"FallbackMode","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IIFtso","name":"ftso","type":"address"},{"indexed":false,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"enum IFtso.PriceFinalizationType","name":"failingType","type":"uint8"}],"name":"FinalizingPriceEpochFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IIFtso","name":"ftso","type":"address"},{"indexed":false,"internalType":"bool","name":"add","type":"bool"}],"name":"FtsoAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IIFtso","name":"ftso","type":"address"},{"indexed":false,"internalType":"bool","name":"fallbackMode","type":"bool"}],"name":"FtsoFallbackMode","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract IIFtso","name":"ftso","type":"address"},{"indexed":false,"internalType":"uint256","name":"epochId","type":"uint256"}],"name":"InitializingCurrentEpochStateForRevealFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"chosenFtso","type":"address"},{"indexed":false,"internalType":"uint256","name":"rewardEpochId","type":"uint256"}],"name":"PriceEpochFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"votepowerBlock","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"startBlock","type":"uint256"}],"name":"RewardEpochFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"useGoodRandom","type":"bool"},{"indexed":false,"internalType":"uint256","name":"maxWaitForGoodRandomSeconds","type":"uint256"}],"name":"UseGoodRandomSet","type":"event"},{"inputs":[],"name":"active","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceEpochData","outputs":[{"internalType":"uint256","name":"_priceEpochId","type":"uint256"},{"internalType":"uint256","name":"_priceEpochStartTimestamp","type":"uint256"},{"internalType":"uint256","name":"_priceEpochEndTimestamp","type":"uint256"},{"internalType":"uint256","name":"_priceEpochRevealEndTimestamp","type":"uint256"},{"internalType":"uint256","name":"_currentTimestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentPriceEpochId","outputs":[{"internalType":"uint256","name":"_priceEpochId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentRewardEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFallbackMode","outputs":[{"internalType":"bool","name":"_fallbackMode","type":"bool"},{"internalType":"contract IIFtso[]","name":"_ftsos","type":"address[]"},{"internalType":"bool[]","name":"_ftsoInFallbackMode","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFtsos","outputs":[{"internalType":"contract IIFtso[]","name":"_ftsos","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPriceEpochConfiguration","outputs":[{"internalType":"uint256","name":"_firstPriceEpochStartTs","type":"uint256"},{"internalType":"uint256","name":"_priceEpochDurationSeconds","type":"uint256"},{"internalType":"uint256","name":"_revealEpochDurationSeconds","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRewardEpochConfiguration","outputs":[{"internalType":"uint256","name":"_firstRewardEpochStartTs","type":"uint256"},{"internalType":"uint256","name":"_rewardEpochDurationSeconds","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRewardEpochToExpireNext","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"}],"name":"getRewardEpochVotePowerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"active()":"02fb0c5e","getCurrentPriceEpochData()":"93a79025","getCurrentPriceEpochId()":"08a7f402","getCurrentRewardEpoch()":"e7c830d4","getFallbackMode()":"4b48dd5e","getFtsos()":"ce69f833","getPriceEpochConfiguration()":"144e1591","getRewardEpochConfiguration()":"1cb513f7","getRewardEpochToExpireNext()":"3e7ff857","getRewardEpochVotePowerBlock(uint256)":"f2edab5a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"AccruingUnearnedRewardsFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ftso\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"DistributingRewardsFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fallbackMode\",\"type\":\"bool\"}],\"name\":\"FallbackMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IIFtso\",\"name\":\"ftso\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IFtso.PriceFinalizationType\",\"name\":\"failingType\",\"type\":\"uint8\"}],\"name\":\"FinalizingPriceEpochFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IIFtso\",\"name\":\"ftso\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"FtsoAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IIFtso\",\"name\":\"ftso\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fallbackMode\",\"type\":\"bool\"}],\"name\":\"FtsoFallbackMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IIFtso\",\"name\":\"ftso\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"InitializingCurrentEpochStateForRevealFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"chosenFtso\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardEpochId\",\"type\":\"uint256\"}],\"name\":\"PriceEpochFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votepowerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"name\":\"RewardEpochFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useGoodRandom\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWaitForGoodRandomSeconds\",\"type\":\"uint256\"}],\"name\":\"UseGoodRandomSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceEpochData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEpochStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEpochEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEpochRevealEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceEpochId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRewardEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_fallbackMode\",\"type\":\"bool\"},{\"internalType\":\"contract IIFtso[]\",\"name\":\"_ftsos\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_ftsoInFallbackMode\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFtsos\",\"outputs\":[{\"internalType\":\"contract IIFtso[]\",\"name\":\"_ftsos\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceEpochConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstPriceEpochStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEpochDurationSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealEpochDurationSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardEpochConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstRewardEpochStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardEpochDurationSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardEpochToExpireNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"}],\"name\":\"getRewardEpochVotePowerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol\":\"IFtsoManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../../userInterfaces/IFtso.sol\\\";\\nimport \\\"../../../util-contracts/token/token/interface/IIVPToken.sol\\\";\\n\\n\\ninterface IIFtso is IFtso, IFtsoGenesis {\\n\\n    /// function finalizePriceReveal\\n    /// called by reward manager only on correct timing.\\n    /// if price reveal period for epoch x ended. finalize.\\n    /// iterate list of price submissions\\n    /// find weighted median\\n    /// find adjucant 50% of price submissions.\\n    /// Allocate reward for any price submission which is same as a \\\"winning\\\" submission\\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\\n        returns(\\n            address[] memory _eligibleAddresses,\\n            uint256[] memory _natWeights,\\n            uint256 _totalNatWeight\\n        );\\n\\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    // activateFtso will be called by ftso manager once ftso is added \\n    // before this is done, FTSO can't run\\n    function activateFtso(\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    ) external;\\n\\n    function deactivateFtso() external;\\n\\n    // update initial price and timestamp - only if not active\\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\\n\\n    function configureEpochs(\\n        uint256 _maxVotePowerNatThresholdFraction,\\n        uint256 _maxVotePowerAssetThresholdFraction,\\n        uint256 _lowAssetUSDThreshold,\\n        uint256 _highAssetUSDThreshold,\\n        uint256 _highAssetTurnoutThresholdBIPS,\\n        uint256 _lowNatTurnoutThresholdBIPS,\\n        uint256 _elasticBandRewardBIPS,\\n        uint256 _elasticBandWidthPPM,\\n        address[] memory _trustedAddresses\\n    ) external;\\n\\n    function setAsset(IIVPToken _asset) external;\\n\\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\\n\\n    // current vote power block will update per reward epoch. \\n    // the FTSO doesn't have notion of reward epochs.\\n    // reward manager only can set this data. \\n    function setVotePowerBlock(uint256 _blockNumber) external;\\n\\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\\n  \\n    /**\\n     * @notice Returns ftso manager address\\n     */\\n    function ftsoManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the FTSO asset\\n     * @dev Asset is null in case of multi-asset FTSO\\n     */\\n    function getAsset() external view returns (IIVPToken);\\n\\n    /**\\n     * @notice Returns the Asset FTSOs\\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\\n     */\\n    function getAssetFtsos() external view returns (IIFtso[] memory);\\n\\n    /**\\n     * @notice Returns current configuration of epoch state\\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \\n        elastic band (prices within _elasticBandWidthPPM of the median) \\n        and 10000 - elasticBandRewardBIPS to the IQR \\n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\\n     */\\n    function epochsConfiguration() external view \\n        returns (\\n            uint256 _maxVotePowerNatThresholdFraction,\\n            uint256 _maxVotePowerAssetThresholdFraction,\\n            uint256 _lowAssetUSDThreshold,\\n            uint256 _highAssetUSDThreshold,\\n            uint256 _highAssetTurnoutThresholdBIPS,\\n            uint256 _lowNatTurnoutThresholdBIPS,\\n            uint256 _elasticBandRewardBIPS,\\n            uint256 _elasticBandWidthPPM,\\n            address[] memory _trustedAddresses\\n        );\\n\\n    /**\\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\\n     * @return _assets                  the list of Assets that are accounted in vote\\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\\n     * @return _totalVotePowerNat       total native token vote power at block\\n     * @return _totalVotePowerAsset     total combined asset vote power at block\\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\\n     * @return _votePowerBlock          vote powewr block for given epoch\\n     */\\n    function getVoteWeightingParameters() external view \\n        returns (\\n            IIVPToken[] memory _assets,\\n            uint256[] memory _assetMultipliers,\\n            uint256 _totalVotePowerNat,\\n            uint256 _totalVotePowerAsset,\\n            uint256 _assetWeightRatio,\\n            uint256 _votePowerBlock\\n        );\\n\\n    function wNat() external view returns (IIVPToken);\\n}\\n\",\"keccak256\":\"0xd245b3c083496b3539224dc707381db5a5e8a49a5012d370b34514caefa3415d\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n    \\n    /**\\n     * @notice Submits price hash for current epoch - only price submitter\\n     * @param _sender               Sender address\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _hash                 Hashed price and random number\\n     * @notice Emits PriceHashSubmitted event. \\n     */\\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @param _random               Submitted random number\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _random,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffadc43743fb1d76d63438725462cd018e0fb31463802f0c235c0b6409dc97a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoManagerGenesis {\\n\\n    function getCurrentPriceEpochId() external view returns (uint256 _priceEpochId);\\n\\n}\\n\",\"keccak256\":\"0xe3282e14304e70a34f6c7a6ee563267635a6cc6eff09f2459a43946ae3a113ab\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    // events\\n    event PriceHashSubmitted(\\n        address indexed submitter, uint256 indexed epochId, bytes32 hash, uint256 timestamp\\n    );\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 random, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1d5ba4d911d3191721469f2f975e64c0d3eed6a54801a7ad8710d830973f03b9\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoManagerGenesis.sol\\\";\\n\\ninterface IFtsoManager is IFtsoManagerGenesis {\\n\\n    event FtsoAdded(IIFtso ftso, bool add);\\n    event FallbackMode(bool fallbackMode);\\n    event FtsoFallbackMode(IIFtso ftso, bool fallbackMode);\\n    event RewardEpochFinalized(uint256 votepowerBlock, uint256 startBlock);\\n    event PriceEpochFinalized(address chosenFtso, uint256 rewardEpochId);\\n    event InitializingCurrentEpochStateForRevealFailed(IIFtso ftso, uint256 epochId);\\n    event FinalizingPriceEpochFailed(IIFtso ftso, uint256 epochId, IFtso.PriceFinalizationType failingType);\\n    event DistributingRewardsFailed(address ftso, uint256 epochId);\\n    event AccruingUnearnedRewardsFailed(uint256 epochId);\\n    event UseGoodRandomSet(bool useGoodRandom, uint256 maxWaitForGoodRandomSeconds);\\n\\n    function active() external view returns (bool);\\n\\n    function getCurrentRewardEpoch() external view returns (uint256);\\n\\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\\n\\n    function getRewardEpochToExpireNext() external view returns (uint256);\\n    \\n    function getCurrentPriceEpochData() external view \\n        returns (\\n            uint256 _priceEpochId,\\n            uint256 _priceEpochStartTimestamp,\\n            uint256 _priceEpochEndTimestamp,\\n            uint256 _priceEpochRevealEndTimestamp,\\n            uint256 _currentTimestamp\\n        );\\n\\n    function getFtsos() external view returns (IIFtso[] memory _ftsos);\\n\\n    function getPriceEpochConfiguration() external view \\n        returns (\\n            uint256 _firstPriceEpochStartTs,\\n            uint256 _priceEpochDurationSeconds,\\n            uint256 _revealEpochDurationSeconds\\n        );\\n\\n    function getRewardEpochConfiguration() external view \\n        returns (\\n            uint256 _firstRewardEpochStartTs,\\n            uint256 _rewardEpochDurationSeconds\\n        );\\n\\n    function getFallbackMode() external view \\n        returns (\\n            bool _fallbackMode,\\n            IIFtso[] memory _ftsos,\\n            bool[] memory _ftsoInFallbackMode\\n        );\\n}\\n\",\"keccak256\":\"0x878d2d19d239d8a91515a304ed2d461f31ae8aeaedef6a7bc92509e6fc4258d0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d338d76bee3c13abb65b25ed5c7394e24dab8b03d34ac4f9fc36588a2d679f4\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Event triggered when an delegator's balance changes.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateVotesChanged(\\n    address indexed delegate, \\n    uint256 previousBalance, \\n    uint256 newBalance\\n    );\\n\\n    /**\\n     * Event triggered when an account delegates to another account.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateChanged(\\n    address indexed delegator, \\n    address indexed fromDelegate, \\n    address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * @notice Get the token that this governance vote power contract belongs to.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xb8947f604f760c89f116bcfbb601f8d00c7be2e7a455f265e07b6f2eac5e5ff0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x065330415186515d281beed2f006e41202d8f16159ceb4d4597c4dd7773b6924\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x037c127ad7ac96c904170b6ad3b1e04adc2ac138fb1a84dde5fb7fe0591bc0d1\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol":{"IFtsoRegistry":{"abi":[{"inputs":[],"name":"getAllCurrentPrices","outputs":[{"components":[{"internalType":"uint256","name":"ftsoIndex","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"decimals","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"internalType":"struct IFtsoRegistry.PriceInfo[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_symbol","type":"string"}],"name":"getCurrentPrice","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ftsoIndex","type":"uint256"}],"name":"getCurrentPrice","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_assetIndex","type":"uint256"}],"name":"getCurrentPriceWithDecimals","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"uint256","name":"_assetPriceUsdDecimals","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_symbol","type":"string"}],"name":"getCurrentPriceWithDecimals","outputs":[{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"uint256","name":"_assetPriceUsdDecimals","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_indices","type":"uint256[]"}],"name":"getCurrentPricesByIndices","outputs":[{"components":[{"internalType":"uint256","name":"ftsoIndex","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"decimals","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"internalType":"struct IFtsoRegistry.PriceInfo[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string[]","name":"_symbols","type":"string[]"}],"name":"getCurrentPricesBySymbols","outputs":[{"components":[{"internalType":"uint256","name":"ftsoIndex","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"decimals","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"internalType":"struct IFtsoRegistry.PriceInfo[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ftsoIndex","type":"uint256"}],"name":"getFtso","outputs":[{"internalType":"contract IIFtso","name":"_activeFtsoAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_symbol","type":"string"}],"name":"getFtsoBySymbol","outputs":[{"internalType":"contract IIFtso","name":"_activeFtsoAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_symbol","type":"string"}],"name":"getFtsoIndex","outputs":[{"internalType":"uint256","name":"_assetIndex","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ftsoIndex","type":"uint256"}],"name":"getFtsoSymbol","outputs":[{"internalType":"string","name":"_symbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_indices","type":"uint256[]"}],"name":"getFtsos","outputs":[{"internalType":"contract IFtsoGenesis[]","name":"_ftsos","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSupportedFtsos","outputs":[{"internalType":"contract IIFtso[]","name":"_ftsos","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSupportedIndices","outputs":[{"internalType":"uint256[]","name":"_supportedIndices","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSupportedIndicesAndFtsos","outputs":[{"internalType":"uint256[]","name":"_supportedIndices","type":"uint256[]"},{"internalType":"contract IIFtso[]","name":"_ftsos","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSupportedIndicesAndSymbols","outputs":[{"internalType":"uint256[]","name":"_supportedIndices","type":"uint256[]"},{"internalType":"string[]","name":"_supportedSymbols","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSupportedIndicesSymbolsAndFtsos","outputs":[{"internalType":"uint256[]","name":"_supportedIndices","type":"uint256[]"},{"internalType":"string[]","name":"_supportedSymbols","type":"string[]"},{"internalType":"contract IIFtso[]","name":"_ftsos","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSupportedSymbols","outputs":[{"internalType":"string[]","name":"_supportedSymbols","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSupportedSymbolsAndFtsos","outputs":[{"internalType":"string[]","name":"_supportedSymbols","type":"string[]"},{"internalType":"contract IIFtso[]","name":"_ftsos","type":"address[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getAllCurrentPrices()":"58f9296f","getCurrentPrice(string)":"42a0f243","getCurrentPrice(uint256)":"c55d0f56","getCurrentPriceWithDecimals(string)":"a69afdc6","getCurrentPriceWithDecimals(uint256)":"257cbd3a","getCurrentPricesByIndices(uint256[])":"6ba31fa1","getCurrentPricesBySymbols(string[])":"79d5ea4b","getFtso(uint256)":"d75f6d81","getFtsoBySymbol(string)":"97da6af4","getFtsoIndex(string)":"e848da30","getFtsoSymbol(uint256)":"136d3f64","getFtsos(uint256[])":"9cb47538","getSupportedFtsos()":"a40060ba","getSupportedIndices()":"798aac5b","getSupportedIndicesAndFtsos()":"06a2ba29","getSupportedIndicesAndSymbols()":"e68f283b","getSupportedIndicesSymbolsAndFtsos()":"7687542c","getSupportedSymbols()":"ce1c0e4d","getSupportedSymbolsAndFtsos()":"0cf48497"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getAllCurrentPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ftsoIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IFtsoRegistry.PriceInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ftsoIndex\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"getCurrentPriceWithDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetPriceUsdDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getCurrentPriceWithDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetPriceUsdDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getCurrentPricesByIndices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ftsoIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IFtsoRegistry.PriceInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"}],\"name\":\"getCurrentPricesBySymbols\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ftsoIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IFtsoRegistry.PriceInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ftsoIndex\",\"type\":\"uint256\"}],\"name\":\"getFtso\",\"outputs\":[{\"internalType\":\"contract IIFtso\",\"name\":\"_activeFtsoAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getFtsoBySymbol\",\"outputs\":[{\"internalType\":\"contract IIFtso\",\"name\":\"_activeFtsoAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getFtsoIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ftsoIndex\",\"type\":\"uint256\"}],\"name\":\"getFtsoSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getFtsos\",\"outputs\":[{\"internalType\":\"contract IFtsoGenesis[]\",\"name\":\"_ftsos\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedFtsos\",\"outputs\":[{\"internalType\":\"contract IIFtso[]\",\"name\":\"_ftsos\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedIndices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_supportedIndices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedIndicesAndFtsos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_supportedIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IIFtso[]\",\"name\":\"_ftsos\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedIndicesAndSymbols\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_supportedIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_supportedSymbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedIndicesSymbolsAndFtsos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_supportedIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_supportedSymbols\",\"type\":\"string[]\"},{\"internalType\":\"contract IIFtso[]\",\"name\":\"_ftsos\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_supportedSymbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedSymbolsAndFtsos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_supportedSymbols\",\"type\":\"string[]\"},{\"internalType\":\"contract IIFtso[]\",\"name\":\"_ftsos\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol\":\"IFtsoRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../../userInterfaces/IFtso.sol\\\";\\nimport \\\"../../../util-contracts/token/token/interface/IIVPToken.sol\\\";\\n\\n\\ninterface IIFtso is IFtso, IFtsoGenesis {\\n\\n    /// function finalizePriceReveal\\n    /// called by reward manager only on correct timing.\\n    /// if price reveal period for epoch x ended. finalize.\\n    /// iterate list of price submissions\\n    /// find weighted median\\n    /// find adjucant 50% of price submissions.\\n    /// Allocate reward for any price submission which is same as a \\\"winning\\\" submission\\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\\n        returns(\\n            address[] memory _eligibleAddresses,\\n            uint256[] memory _natWeights,\\n            uint256 _totalNatWeight\\n        );\\n\\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    // activateFtso will be called by ftso manager once ftso is added \\n    // before this is done, FTSO can't run\\n    function activateFtso(\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    ) external;\\n\\n    function deactivateFtso() external;\\n\\n    // update initial price and timestamp - only if not active\\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\\n\\n    function configureEpochs(\\n        uint256 _maxVotePowerNatThresholdFraction,\\n        uint256 _maxVotePowerAssetThresholdFraction,\\n        uint256 _lowAssetUSDThreshold,\\n        uint256 _highAssetUSDThreshold,\\n        uint256 _highAssetTurnoutThresholdBIPS,\\n        uint256 _lowNatTurnoutThresholdBIPS,\\n        uint256 _elasticBandRewardBIPS,\\n        uint256 _elasticBandWidthPPM,\\n        address[] memory _trustedAddresses\\n    ) external;\\n\\n    function setAsset(IIVPToken _asset) external;\\n\\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\\n\\n    // current vote power block will update per reward epoch. \\n    // the FTSO doesn't have notion of reward epochs.\\n    // reward manager only can set this data. \\n    function setVotePowerBlock(uint256 _blockNumber) external;\\n\\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\\n  \\n    /**\\n     * @notice Returns ftso manager address\\n     */\\n    function ftsoManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the FTSO asset\\n     * @dev Asset is null in case of multi-asset FTSO\\n     */\\n    function getAsset() external view returns (IIVPToken);\\n\\n    /**\\n     * @notice Returns the Asset FTSOs\\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\\n     */\\n    function getAssetFtsos() external view returns (IIFtso[] memory);\\n\\n    /**\\n     * @notice Returns current configuration of epoch state\\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \\n        elastic band (prices within _elasticBandWidthPPM of the median) \\n        and 10000 - elasticBandRewardBIPS to the IQR \\n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\\n     */\\n    function epochsConfiguration() external view \\n        returns (\\n            uint256 _maxVotePowerNatThresholdFraction,\\n            uint256 _maxVotePowerAssetThresholdFraction,\\n            uint256 _lowAssetUSDThreshold,\\n            uint256 _highAssetUSDThreshold,\\n            uint256 _highAssetTurnoutThresholdBIPS,\\n            uint256 _lowNatTurnoutThresholdBIPS,\\n            uint256 _elasticBandRewardBIPS,\\n            uint256 _elasticBandWidthPPM,\\n            address[] memory _trustedAddresses\\n        );\\n\\n    /**\\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\\n     * @return _assets                  the list of Assets that are accounted in vote\\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\\n     * @return _totalVotePowerNat       total native token vote power at block\\n     * @return _totalVotePowerAsset     total combined asset vote power at block\\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\\n     * @return _votePowerBlock          vote powewr block for given epoch\\n     */\\n    function getVoteWeightingParameters() external view \\n        returns (\\n            IIVPToken[] memory _assets,\\n            uint256[] memory _assetMultipliers,\\n            uint256 _totalVotePowerNat,\\n            uint256 _totalVotePowerAsset,\\n            uint256 _assetWeightRatio,\\n            uint256 _votePowerBlock\\n        );\\n\\n    function wNat() external view returns (IIVPToken);\\n}\\n\",\"keccak256\":\"0xd245b3c083496b3539224dc707381db5a5e8a49a5012d370b34514caefa3415d\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n    \\n    /**\\n     * @notice Submits price hash for current epoch - only price submitter\\n     * @param _sender               Sender address\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _hash                 Hashed price and random number\\n     * @notice Emits PriceHashSubmitted event. \\n     */\\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @param _random               Submitted random number\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _random,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffadc43743fb1d76d63438725462cd018e0fb31463802f0c235c0b6409dc97a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./IFtsoGenesis.sol\\\";\\n\\n\\ninterface IFtsoRegistryGenesis {\\n\\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x4765fdcb22dcc64c015d02c019f0ddce8d8b36111160fd4160a3d94ea4f370a3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    // events\\n    event PriceHashSubmitted(\\n        address indexed submitter, uint256 indexed epochId, bytes32 hash, uint256 timestamp\\n    );\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 random, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1d5ba4d911d3191721469f2f975e64c0d3eed6a54801a7ad8710d830973f03b9\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\\n\\n    struct PriceInfo {\\n        uint256 ftsoIndex;\\n        uint256 price;\\n        uint256 decimals;\\n        uint256 timestamp;\\n    }\\n\\n    function getFtso(uint256 _ftsoIndex) external view returns(IIFtso _activeFtsoAddress);\\n    function getFtsoBySymbol(string memory _symbol) external view returns(IIFtso _activeFtsoAddress);\\n    function getSupportedIndices() external view returns(uint256[] memory _supportedIndices);\\n    function getSupportedSymbols() external view returns(string[] memory _supportedSymbols);\\n    function getSupportedFtsos() external view returns(IIFtso[] memory _ftsos);\\n    function getFtsoIndex(string memory _symbol) external view returns (uint256 _assetIndex);\\n    function getFtsoSymbol(uint256 _ftsoIndex) external view returns (string memory _symbol);\\n    function getCurrentPrice(uint256 _ftsoIndex) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPrice(string memory _symbol) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPriceWithDecimals(uint256 _assetIndex) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n    function getCurrentPriceWithDecimals(string memory _symbol) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n\\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\\n    function getCurrentPricesByIndices(uint256[] memory _indices) external view returns (PriceInfo[] memory);\\n    function getCurrentPricesBySymbols(string[] memory _symbols) external view returns (PriceInfo[] memory);\\n\\n    function getSupportedIndicesAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\\n\\n    function getSupportedSymbolsAndFtsos() external view \\n        returns(string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n\\n    function getSupportedIndicesAndSymbols() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols);\\n\\n    function getSupportedIndicesSymbolsAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x2b818c0cd8f2f1be88da36edd966d2b358c6954e50e0aa653a9d65ef2e9712d7\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d338d76bee3c13abb65b25ed5c7394e24dab8b03d34ac4f9fc36588a2d679f4\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Event triggered when an delegator's balance changes.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateVotesChanged(\\n    address indexed delegate, \\n    uint256 previousBalance, \\n    uint256 newBalance\\n    );\\n\\n    /**\\n     * Event triggered when an account delegates to another account.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateChanged(\\n    address indexed delegator, \\n    address indexed fromDelegate, \\n    address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * @notice Get the token that this governance vote power contract belongs to.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xb8947f604f760c89f116bcfbb601f8d00c7be2e7a455f265e07b6f2eac5e5ff0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x065330415186515d281beed2f006e41202d8f16159ceb4d4597c4dd7773b6924\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x037c127ad7ac96c904170b6ad3b1e04adc2ac138fb1a84dde5fb7fe0591bc0d1\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol":{"IFtsoRewardManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"dataProvider","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"validFromEpoch","type":"uint256"}],"name":"FeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"ftsoRewardManager","type":"address"}],"name":"FtsoRewardManagerActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"ftsoRewardManager","type":"address"}],"name":"FtsoRewardManagerDeactivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"dataProvider","type":"address"},{"indexed":true,"internalType":"address","name":"whoClaimed","type":"address"},{"indexed":true,"internalType":"address","name":"sentTo","type":"address"},{"indexed":false,"internalType":"uint256","name":"rewardEpoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rewardEpochId","type":"uint256"}],"name":"RewardClaimsEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rewardEpochId","type":"uint256"}],"name":"RewardClaimsExpired","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"ftso","type":"address"},{"indexed":false,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"address[]","name":"addresses","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"rewards","type":"uint256[]"}],"name":"RewardsDistributed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"UnearnedRewardsAccrued","type":"event"},{"inputs":[],"name":"active","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_rewardOwners","type":"address[]"},{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"}],"name":"autoClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_rewardOwner","type":"address"},{"internalType":"address payable","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"},{"internalType":"bool","name":"_wrap","type":"bool"}],"name":"claim","outputs":[{"internalType":"uint256","name":"_rewardAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_rewardOwner","type":"address"},{"internalType":"address payable","name":"_recipient","type":"address"},{"internalType":"uint256[]","name":"_rewardEpochs","type":"uint256[]"},{"internalType":"address[]","name":"_dataProviders","type":"address[]"},{"internalType":"bool","name":"_wrap","type":"bool"}],"name":"claimFromDataProviders","outputs":[{"internalType":"uint256","name":"_rewardAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_recipient","type":"address"},{"internalType":"uint256[]","name":"_rewardEpochs","type":"uint256[]"}],"name":"claimReward","outputs":[{"internalType":"uint256","name":"_rewardAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_recipient","type":"address"},{"internalType":"uint256[]","name":"_rewardEpochs","type":"uint256[]"},{"internalType":"address[]","name":"_dataProviders","type":"address[]"}],"name":"claimRewardFromDataProviders","outputs":[{"internalType":"uint256","name":"_rewardAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"},{"internalType":"address","name":"_dataProvider","type":"address"},{"internalType":"address","name":"_claimer","type":"address"}],"name":"getClaimedReward","outputs":[{"internalType":"bool","name":"_claimed","type":"bool"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentRewardEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dataProvider","type":"address"}],"name":"getDataProviderCurrentFeePercentage","outputs":[{"internalType":"uint256","name":"_feePercentageBIPS","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dataProvider","type":"address"},{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"}],"name":"getDataProviderFeePercentage","outputs":[{"internalType":"uint256","name":"_feePercentageBIPS","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"},{"internalType":"address","name":"_dataProvider","type":"address"}],"name":"getDataProviderPerformanceInfo","outputs":[{"internalType":"uint256","name":"_rewardAmount","type":"uint256"},{"internalType":"uint256","name":"_votePowerIgnoringRevocation","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dataProvider","type":"address"}],"name":"getDataProviderScheduledFeePercentageChanges","outputs":[{"internalType":"uint256[]","name":"_feePercentageBIPS","type":"uint256[]"},{"internalType":"uint256[]","name":"_validFromEpoch","type":"uint256[]"},{"internalType":"bool[]","name":"_fixed","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"}],"name":"getEpochReward","outputs":[{"internalType":"uint256","name":"_totalReward","type":"uint256"},{"internalType":"uint256","name":"_claimedReward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEpochsWithClaimableRewards","outputs":[{"internalType":"uint256","name":"_startEpochId","type":"uint256"},{"internalType":"uint256","name":"_endEpochId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_beneficiary","type":"address"}],"name":"getEpochsWithUnclaimedRewards","outputs":[{"internalType":"uint256[]","name":"_epochIds","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInitialRewardEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRewardEpochToExpireNext","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"}],"name":"getRewardEpochVotePowerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_beneficiary","type":"address"},{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"}],"name":"getStateOfRewards","outputs":[{"internalType":"address[]","name":"_dataProviders","type":"address[]"},{"internalType":"uint256[]","name":"_rewardAmounts","type":"uint256[]"},{"internalType":"bool[]","name":"_claimed","type":"bool[]"},{"internalType":"bool","name":"_claimable","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_beneficiary","type":"address"},{"internalType":"uint256","name":"_rewardEpoch","type":"uint256"},{"internalType":"address[]","name":"_dataProviders","type":"address[]"}],"name":"getStateOfRewardsFromDataProviders","outputs":[{"internalType":"uint256[]","name":"_rewardAmounts","type":"uint256[]"},{"internalType":"bool[]","name":"_claimed","type":"bool[]"},{"internalType":"bool","name":"_claimable","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_rewardOwner","type":"address"}],"name":"nextClaimableRewardEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_feePercentageBIPS","type":"uint256"}],"name":"setDataProviderFeePercentage","outputs":[{"internalType":"uint256","name":"_validFromEpoch","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"autoClaim(address[],uint256)":{"params":{"_rewardEpoch":"last reward epoch to claim for","_rewardOwners":"list of reward owners to claim for"}},"claim(address,address,uint256,bool)":{"details":"Reverts if `msg.sender` is delegating by amount","params":{"_recipient":"address to transfer funds to","_rewardEpoch":"last reward epoch to claim for","_rewardOwner":"address of the reward owner","_wrap":"should reward be wrapped immediately"},"returns":{"_rewardAmount":"       amount of total claimed rewards"}},"claimFromDataProviders(address,address,uint256[],address[],bool)":{"details":"Function can only be used for explicit delegations.","params":{"_dataProviders":"array of addresses representing data providers to claim the reward from","_recipient":"address to transfer funds to","_rewardEpochs":"array of reward epoch numbers to claim for","_rewardOwner":"address of the reward owner","_wrap":"should reward be wrapped immediately"},"returns":{"_rewardAmount":"       amount of total claimed rewards"}},"claimReward(address,uint256[])":{"details":"Reverts if `msg.sender` is delegating by amountClaims for all unclaimed reward epochs to the 'max(_rewardEpochs)'.Retained for backward compatibility.This function is deprecated - use `claim` instead.","params":{"_recipient":"address to transfer funds to","_rewardEpochs":"array of reward epoch numbers to claim for"},"returns":{"_rewardAmount":"       amount of total claimed rewards"}},"claimRewardFromDataProviders(address,uint256[],address[])":{"details":"Function can only be used for explicit delegations.This function is deprecated - use `claimFromDataProviders` instead.","params":{"_dataProviders":"array of addresses representing data providers to claim the reward from","_recipient":"address to transfer funds to","_rewardEpochs":"array of reward epoch numbers to claim for"},"returns":{"_rewardAmount":"       amount of total claimed rewards"}},"getClaimedReward(uint256,address,address)":{"params":{"_claimer":"address representing the claimer","_dataProvider":"address representing the data provider","_rewardEpoch":"reward epoch number"},"returns":{"_amount":"             number representing the claimed amount","_claimed":"            boolean indicating if reward has been claimed"}},"getDataProviderCurrentFeePercentage(address)":{"params":{"_dataProvider":"address representing data provider"}},"getDataProviderFeePercentage(address,uint256)":{"params":{"_dataProvider":"address representing data provider","_rewardEpoch":"reward epoch number"}},"getDataProviderPerformanceInfo(uint256,address)":{"params":{"_dataProvider":"address representing the data provider","_rewardEpoch":"reward epoch number"},"returns":{"_rewardAmount":"                   number representing the amount of rewards","_votePowerIgnoringRevocation":"    number representing the vote power ignoring revocations"}},"getDataProviderScheduledFeePercentageChanges(address)":{"params":{"_dataProvider":"address representing data provider"},"returns":{"_feePercentageBIPS":"  positional array of fee percentages in BIPS","_fixed":"              positional array of boolean values indicating if settings are subjected to change","_validFromEpoch":"     positional array of block numbers the fee settings are effective from"}},"getEpochReward(uint256)":{"params":{"_rewardEpoch":"reward epoch number"},"returns":{"_claimedReward":"      number representing the amount of total epoch reward that has been claimed","_totalReward":"        number representing the total epoch reward"}},"getEpochsWithClaimableRewards()":{"params":{"_endEpochId":"the newest epoch id that allows reward claiming","_startEpochId":"the oldest epoch id that allows reward claiming"}},"getEpochsWithUnclaimedRewards(address)":{"details":"Reverts when queried with `_beneficiary` delegating by amount","params":{"_beneficiary":"address of reward beneficiary"},"returns":{"_epochIds":"           array of epoch ids"}},"getRewardEpochToExpireNext()":{"returns":{"_0":"Reward epoch id that will expire next"}},"getRewardEpochVotePowerBlock(uint256)":{"params":{"_rewardEpoch":"reward epoch number"}},"getStateOfRewards(address,uint256)":{"details":"Reverts when queried with `_beneficiary` delegating by amount","params":{"_beneficiary":"address of reward beneficiary","_rewardEpoch":"reward epoch number"},"returns":{"_claimable":"          boolean value indicating if rewards are claimable","_claimed":"            positional array of boolean values indicating if reward is claimed","_dataProviders":"      positional array of addresses representing data providers","_rewardAmounts":"      positional array of reward amounts"}},"getStateOfRewardsFromDataProviders(address,uint256,address[])":{"params":{"_beneficiary":"address of reward beneficiary","_dataProviders":"positional array of addresses representing data providers","_rewardEpoch":"reward epoch number"},"returns":{"_claimable":"          boolean value indicating if rewards are claimable","_claimed":"            positional array of boolean values indicating if reward is claimed","_rewardAmounts":"      positional array of reward amounts"}},"nextClaimableRewardEpoch(address)":{"params":{"_rewardOwner":"address of the reward owner"}},"setDataProviderFeePercentage(uint256)":{"params":{"_feePercentageBIPS":"number representing fee percentage in BIPS"},"returns":{"_validFromEpoch":"     reward epoch number when the setting becomes effective."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"active()":"02fb0c5e","autoClaim(address[],uint256)":"8dc305fa","claim(address,address,uint256,bool)":"b2c12192","claimFromDataProviders(address,address,uint256[],address[],bool)":"21bb25af","claimReward(address,uint256[])":"b2af870a","claimRewardFromDataProviders(address,uint256[],address[])":"d20bb542","getClaimedReward(uint256,address,address)":"85b4c538","getCurrentRewardEpoch()":"e7c830d4","getDataProviderCurrentFeePercentage(address)":"cfbcd25f","getDataProviderFeePercentage(address,uint256)":"961c00ed","getDataProviderPerformanceInfo(uint256,address)":"eb82dd7f","getDataProviderScheduledFeePercentageChanges(address)":"33b7971e","getEpochReward(uint256)":"d418634a","getEpochsWithClaimableRewards()":"0441218e","getEpochsWithUnclaimedRewards(address)":"b4a2043d","getInitialRewardEpoch()":"3123b7d8","getRewardEpochToExpireNext()":"3e7ff857","getRewardEpochVotePowerBlock(uint256)":"f2edab5a","getStateOfRewards(address,uint256)":"a4472c10","getStateOfRewardsFromDataProviders(address,uint256,address[])":"e416b7e1","nextClaimableRewardEpoch(address)":"69b91b59","setDataProviderFeePercentage(uint256)":"16e69328"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dataProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validFromEpoch\",\"type\":\"uint256\"}],\"name\":\"FeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ftsoRewardManager\",\"type\":\"address\"}],\"name\":\"FtsoRewardManagerActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ftsoRewardManager\",\"type\":\"address\"}],\"name\":\"FtsoRewardManagerDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dataProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whoClaimed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sentTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardEpochId\",\"type\":\"uint256\"}],\"name\":\"RewardClaimsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardEpochId\",\"type\":\"uint256\"}],\"name\":\"RewardClaimsExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ftso\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"UnearnedRewardsAccrued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"}],\"name\":\"autoClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_wrap\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardEpochs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_dataProviders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_wrap\",\"type\":\"bool\"}],\"name\":\"claimFromDataProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardEpochs\",\"type\":\"uint256[]\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardEpochs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_dataProviders\",\"type\":\"address[]\"}],\"name\":\"claimRewardFromDataProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dataProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getClaimedReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRewardEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataProvider\",\"type\":\"address\"}],\"name\":\"getDataProviderCurrentFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentageBIPS\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"}],\"name\":\"getDataProviderFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentageBIPS\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dataProvider\",\"type\":\"address\"}],\"name\":\"getDataProviderPerformanceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votePowerIgnoringRevocation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataProvider\",\"type\":\"address\"}],\"name\":\"getDataProviderScheduledFeePercentageChanges\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feePercentageBIPS\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_validFromEpoch\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_fixed\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"}],\"name\":\"getEpochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochsWithClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_startEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endEpochId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getEpochsWithUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_epochIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialRewardEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardEpochToExpireNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"}],\"name\":\"getRewardEpochVotePowerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"}],\"name\":\"getStateOfRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_dataProviders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_claimed\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"_claimable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_dataProviders\",\"type\":\"address[]\"}],\"name\":\"getStateOfRewardsFromDataProviders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_claimed\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"_claimable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardOwner\",\"type\":\"address\"}],\"name\":\"nextClaimableRewardEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentageBIPS\",\"type\":\"uint256\"}],\"name\":\"setDataProviderFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_validFromEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"autoClaim(address[],uint256)\":{\"params\":{\"_rewardEpoch\":\"last reward epoch to claim for\",\"_rewardOwners\":\"list of reward owners to claim for\"}},\"claim(address,address,uint256,bool)\":{\"details\":\"Reverts if `msg.sender` is delegating by amount\",\"params\":{\"_recipient\":\"address to transfer funds to\",\"_rewardEpoch\":\"last reward epoch to claim for\",\"_rewardOwner\":\"address of the reward owner\",\"_wrap\":\"should reward be wrapped immediately\"},\"returns\":{\"_rewardAmount\":\"       amount of total claimed rewards\"}},\"claimFromDataProviders(address,address,uint256[],address[],bool)\":{\"details\":\"Function can only be used for explicit delegations.\",\"params\":{\"_dataProviders\":\"array of addresses representing data providers to claim the reward from\",\"_recipient\":\"address to transfer funds to\",\"_rewardEpochs\":\"array of reward epoch numbers to claim for\",\"_rewardOwner\":\"address of the reward owner\",\"_wrap\":\"should reward be wrapped immediately\"},\"returns\":{\"_rewardAmount\":\"       amount of total claimed rewards\"}},\"claimReward(address,uint256[])\":{\"details\":\"Reverts if `msg.sender` is delegating by amountClaims for all unclaimed reward epochs to the 'max(_rewardEpochs)'.Retained for backward compatibility.This function is deprecated - use `claim` instead.\",\"params\":{\"_recipient\":\"address to transfer funds to\",\"_rewardEpochs\":\"array of reward epoch numbers to claim for\"},\"returns\":{\"_rewardAmount\":\"       amount of total claimed rewards\"}},\"claimRewardFromDataProviders(address,uint256[],address[])\":{\"details\":\"Function can only be used for explicit delegations.This function is deprecated - use `claimFromDataProviders` instead.\",\"params\":{\"_dataProviders\":\"array of addresses representing data providers to claim the reward from\",\"_recipient\":\"address to transfer funds to\",\"_rewardEpochs\":\"array of reward epoch numbers to claim for\"},\"returns\":{\"_rewardAmount\":\"       amount of total claimed rewards\"}},\"getClaimedReward(uint256,address,address)\":{\"params\":{\"_claimer\":\"address representing the claimer\",\"_dataProvider\":\"address representing the data provider\",\"_rewardEpoch\":\"reward epoch number\"},\"returns\":{\"_amount\":\"             number representing the claimed amount\",\"_claimed\":\"            boolean indicating if reward has been claimed\"}},\"getDataProviderCurrentFeePercentage(address)\":{\"params\":{\"_dataProvider\":\"address representing data provider\"}},\"getDataProviderFeePercentage(address,uint256)\":{\"params\":{\"_dataProvider\":\"address representing data provider\",\"_rewardEpoch\":\"reward epoch number\"}},\"getDataProviderPerformanceInfo(uint256,address)\":{\"params\":{\"_dataProvider\":\"address representing the data provider\",\"_rewardEpoch\":\"reward epoch number\"},\"returns\":{\"_rewardAmount\":\"                   number representing the amount of rewards\",\"_votePowerIgnoringRevocation\":\"    number representing the vote power ignoring revocations\"}},\"getDataProviderScheduledFeePercentageChanges(address)\":{\"params\":{\"_dataProvider\":\"address representing data provider\"},\"returns\":{\"_feePercentageBIPS\":\"  positional array of fee percentages in BIPS\",\"_fixed\":\"              positional array of boolean values indicating if settings are subjected to change\",\"_validFromEpoch\":\"     positional array of block numbers the fee settings are effective from\"}},\"getEpochReward(uint256)\":{\"params\":{\"_rewardEpoch\":\"reward epoch number\"},\"returns\":{\"_claimedReward\":\"      number representing the amount of total epoch reward that has been claimed\",\"_totalReward\":\"        number representing the total epoch reward\"}},\"getEpochsWithClaimableRewards()\":{\"params\":{\"_endEpochId\":\"the newest epoch id that allows reward claiming\",\"_startEpochId\":\"the oldest epoch id that allows reward claiming\"}},\"getEpochsWithUnclaimedRewards(address)\":{\"details\":\"Reverts when queried with `_beneficiary` delegating by amount\",\"params\":{\"_beneficiary\":\"address of reward beneficiary\"},\"returns\":{\"_epochIds\":\"           array of epoch ids\"}},\"getRewardEpochToExpireNext()\":{\"returns\":{\"_0\":\"Reward epoch id that will expire next\"}},\"getRewardEpochVotePowerBlock(uint256)\":{\"params\":{\"_rewardEpoch\":\"reward epoch number\"}},\"getStateOfRewards(address,uint256)\":{\"details\":\"Reverts when queried with `_beneficiary` delegating by amount\",\"params\":{\"_beneficiary\":\"address of reward beneficiary\",\"_rewardEpoch\":\"reward epoch number\"},\"returns\":{\"_claimable\":\"          boolean value indicating if rewards are claimable\",\"_claimed\":\"            positional array of boolean values indicating if reward is claimed\",\"_dataProviders\":\"      positional array of addresses representing data providers\",\"_rewardAmounts\":\"      positional array of reward amounts\"}},\"getStateOfRewardsFromDataProviders(address,uint256,address[])\":{\"params\":{\"_beneficiary\":\"address of reward beneficiary\",\"_dataProviders\":\"positional array of addresses representing data providers\",\"_rewardEpoch\":\"reward epoch number\"},\"returns\":{\"_claimable\":\"          boolean value indicating if rewards are claimable\",\"_claimed\":\"            positional array of boolean values indicating if reward is claimed\",\"_rewardAmounts\":\"      positional array of reward amounts\"}},\"nextClaimableRewardEpoch(address)\":{\"params\":{\"_rewardOwner\":\"address of the reward owner\"}},\"setDataProviderFeePercentage(uint256)\":{\"params\":{\"_feePercentageBIPS\":\"number representing fee percentage in BIPS\"},\"returns\":{\"_validFromEpoch\":\"     reward epoch number when the setting becomes effective.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"active()\":{\"notice\":\"Allows reward claiming\"},\"autoClaim(address[],uint256)\":{\"notice\":\"Allows batch claiming for the list of '_rewardOwners' and for all unclaimed epochs <= '_rewardEpoch'.If reward owner has enabled delegation account, rewards are also claimed for that delegation account and   total claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.Claimed amount is automatically wrapped.Method can be used by reward owner or executor. If executor is registered with fee > 0,   then fee is paid to executor for each claimed address from the list.\"},\"claim(address,address,uint256,bool)\":{\"notice\":\"Allows the sender to claim or wrap rewards for reward owner.This function is intended to be used to claim rewards in case of delegation by percentage.The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,   this approval is done by calling `setClaimExecutors`.It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can   call, we allow the owner to control the timing of the calls.Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\"},\"claimFromDataProviders(address,address,uint256[],address[],bool)\":{\"notice\":\"Allows the sender to claim or wrap rewards for reward owner from specified data providers.This function is intended to be used to claim rewards in case of delegation by amount.The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,   this approval is done by calling `setClaimExecutors`.It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can   call, we allow the owner to control the timing of the calls.Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\"},\"claimReward(address,uint256[])\":{\"notice\":\"Allows a percentage delegator to claim rewards.This function is intended to be used to claim rewards in case of delegation by percentage.\"},\"claimRewardFromDataProviders(address,uint256[],address[])\":{\"notice\":\"Allows the sender to claim rewards from specified data providers.This function is intended to be used to claim rewards in case of delegation by amount.\"},\"getClaimedReward(uint256,address,address)\":{\"notice\":\"Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`\"},\"getCurrentRewardEpoch()\":{\"notice\":\"Return current reward epoch number\"},\"getDataProviderCurrentFeePercentage(address)\":{\"notice\":\"Returns the current fee percentage of `_dataProvider`\"},\"getDataProviderFeePercentage(address,uint256)\":{\"notice\":\"Returns the fee percentage of `_dataProvider` at `_rewardEpoch`\"},\"getDataProviderPerformanceInfo(uint256,address)\":{\"notice\":\"Returns the information on rewards and initial vote power of `_dataProvider` for `_rewardEpoch`\"},\"getDataProviderScheduledFeePercentageChanges(address)\":{\"notice\":\"Returns the scheduled fee percentage changes of `_dataProvider`\"},\"getEpochReward(uint256)\":{\"notice\":\"Returns information on epoch reward\"},\"getEpochsWithClaimableRewards()\":{\"notice\":\"Returns the start and the end of the reward epoch range for which the reward is claimable\"},\"getEpochsWithUnclaimedRewards(address)\":{\"notice\":\"Returns the array of claimable epoch ids for which the reward has not yet been claimed\"},\"getInitialRewardEpoch()\":{\"notice\":\"Return initial reward epoch number\"},\"getRewardEpochToExpireNext()\":{\"notice\":\"Return reward epoch that will expire, when new reward epoch will start\"},\"getRewardEpochVotePowerBlock(uint256)\":{\"notice\":\"Return reward epoch vote power block\"},\"getStateOfRewards(address,uint256)\":{\"notice\":\"Returns the state of rewards for `_beneficiary` at `_rewardEpoch`\"},\"getStateOfRewardsFromDataProviders(address,uint256,address[])\":{\"notice\":\"Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`\"},\"nextClaimableRewardEpoch(address)\":{\"notice\":\"Returns the next claimable reward epoch for '_rewardOwner'.\"},\"setDataProviderFeePercentage(uint256)\":{\"notice\":\"Allows data provider to set (or update last) fee percentage.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol\":\"IFtsoRewardManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtsoRewardManager {\\n\\n    event RewardClaimed(\\n        address indexed dataProvider,\\n        address indexed whoClaimed,\\n        address indexed sentTo,\\n        uint256 rewardEpoch, \\n        uint256 amount\\n    );\\n\\n    event UnearnedRewardsAccrued(\\n        uint256 epochId,\\n        uint256 reward\\n    );\\n\\n    event RewardsDistributed(\\n        address indexed ftso,\\n        uint256 epochId,\\n        address[] addresses,\\n        uint256[] rewards\\n    );\\n\\n    event RewardClaimsEnabled(\\n        uint256 rewardEpochId\\n    ); \\n\\n    event FeePercentageChanged(\\n        address indexed dataProvider,\\n        uint256 value,\\n        uint256 validFromEpoch\\n    );\\n\\n    event RewardClaimsExpired(\\n        uint256 rewardEpochId\\n    );    \\n\\n    event FtsoRewardManagerActivated(address ftsoRewardManager);\\n    event FtsoRewardManagerDeactivated(address ftsoRewardManager);\\n\\n    /**\\n     * @notice Allows a percentage delegator to claim rewards.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Reverts if `msg.sender` is delegating by amount\\n     * @dev Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'.\\n     * @dev Retained for backward compatibility.\\n     * @dev This function is deprecated - use `claim` instead.\\n     */\\n    function claimReward(\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows the sender to claim or wrap rewards for reward owner.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\\n     *   this approval is done by calling `setClaimExecutors`.\\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\\n     *   call, we allow the owner to control the timing of the calls.\\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\\n     * @param _rewardOwner          address of the reward owner\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpoch          last reward epoch to claim for\\n     * @param _wrap                 should reward be wrapped immediately\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Reverts if `msg.sender` is delegating by amount\\n     */\\n    function claim(\\n        address _rewardOwner,\\n        address payable _recipient,\\n        uint256 _rewardEpoch,\\n        bool _wrap\\n    )\\n        external returns (uint256 _rewardAmount);\\n    \\n    /**\\n     * @notice Allows the sender to claim rewards from specified data providers.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Function can only be used for explicit delegations.\\n     * @dev This function is deprecated - use `claimFromDataProviders` instead.\\n     */\\n    function claimRewardFromDataProviders(\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs,\\n        address[] calldata _dataProviders\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows the sender to claim or wrap rewards for reward owner from specified data providers.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\\n     *   this approval is done by calling `setClaimExecutors`.\\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\\n     *   call, we allow the owner to control the timing of the calls.\\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\\n     * @param _rewardOwner          address of the reward owner\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\\n     * @param _wrap                 should reward be wrapped immediately\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Function can only be used for explicit delegations.\\n     */\\n    function claimFromDataProviders(\\n        address _rewardOwner,\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs,\\n        address[] calldata _dataProviders,\\n        bool _wrap\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows batch claiming for the list of '_rewardOwners' and for all unclaimed epochs <= '_rewardEpoch'.\\n     * @notice If reward owner has enabled delegation account, rewards are also claimed for that delegation account and\\n     *   total claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.\\n     * @notice Claimed amount is automatically wrapped.\\n     * @notice Method can be used by reward owner or executor. If executor is registered with fee > 0,\\n     *   then fee is paid to executor for each claimed address from the list.\\n     * @param _rewardOwners         list of reward owners to claim for\\n     * @param _rewardEpoch          last reward epoch to claim for\\n     */\\n    function autoClaim(address[] calldata _rewardOwners, uint256 _rewardEpoch) external;\\n    \\n    /**\\n     * @notice Allows data provider to set (or update last) fee percentage.\\n     * @param _feePercentageBIPS    number representing fee percentage in BIPS\\n     * @return _validFromEpoch      reward epoch number when the setting becomes effective.\\n     */\\n    function setDataProviderFeePercentage(uint256 _feePercentageBIPS)\\n        external returns (uint256 _validFromEpoch);\\n\\n    /**\\n     * @notice Allows reward claiming\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the current fee percentage of `_dataProvider`\\n     * @param _dataProvider         address representing data provider\\n     */\\n    function getDataProviderCurrentFeePercentage(address _dataProvider)\\n        external view returns (uint256 _feePercentageBIPS);\\n\\n    /**\\n     * @notice Returns the fee percentage of `_dataProvider` at `_rewardEpoch`\\n     * @param _dataProvider         address representing data provider\\n     * @param _rewardEpoch          reward epoch number\\n     */\\n    function getDataProviderFeePercentage(\\n        address _dataProvider,\\n        uint256 _rewardEpoch\\n    )\\n        external view\\n        returns (uint256 _feePercentageBIPS);\\n\\n    /**\\n     * @notice Returns the scheduled fee percentage changes of `_dataProvider`\\n     * @param _dataProvider         address representing data provider\\n     * @return _feePercentageBIPS   positional array of fee percentages in BIPS\\n     * @return _validFromEpoch      positional array of block numbers the fee settings are effective from\\n     * @return _fixed               positional array of boolean values indicating if settings are subjected to change\\n     */\\n    function getDataProviderScheduledFeePercentageChanges(address _dataProvider) external view \\n        returns (\\n            uint256[] memory _feePercentageBIPS,\\n            uint256[] memory _validFromEpoch,\\n            bool[] memory _fixed\\n        );\\n\\n    /**\\n     * @notice Returns information on epoch reward\\n     * @param _rewardEpoch          reward epoch number\\n     * @return _totalReward         number representing the total epoch reward\\n     * @return _claimedReward       number representing the amount of total epoch reward that has been claimed\\n     */\\n    function getEpochReward(uint256 _rewardEpoch) external view\\n        returns (uint256 _totalReward, uint256 _claimedReward);\\n\\n    /**\\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch`\\n     * @param _beneficiary          address of reward beneficiary\\n     * @param _rewardEpoch          reward epoch number\\n     * @return _dataProviders       positional array of addresses representing data providers\\n     * @return _rewardAmounts       positional array of reward amounts\\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\\n     * @return _claimable           boolean value indicating if rewards are claimable\\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\\n     */\\n    function getStateOfRewards(\\n        address _beneficiary,\\n        uint256 _rewardEpoch\\n    )\\n        external view \\n        returns (\\n            address[] memory _dataProviders,\\n            uint256[] memory _rewardAmounts,\\n            bool[] memory _claimed,\\n            bool _claimable\\n        );\\n\\n    /**\\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`\\n     * @param _beneficiary          address of reward beneficiary\\n     * @param _rewardEpoch          reward epoch number\\n     * @param _dataProviders        positional array of addresses representing data providers\\n     * @return _rewardAmounts       positional array of reward amounts\\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\\n     * @return _claimable           boolean value indicating if rewards are claimable\\n     */\\n    function getStateOfRewardsFromDataProviders(\\n        address _beneficiary,\\n        uint256 _rewardEpoch,\\n        address[] calldata _dataProviders\\n    )\\n        external view\\n        returns (\\n            uint256[] memory _rewardAmounts,\\n            bool[] memory _claimed,\\n            bool _claimable\\n        );\\n\\n    /**\\n     * @notice Returns the start and the end of the reward epoch range for which the reward is claimable\\n     * @param _startEpochId         the oldest epoch id that allows reward claiming\\n     * @param _endEpochId           the newest epoch id that allows reward claiming\\n     */\\n    function getEpochsWithClaimableRewards() external view \\n        returns (\\n            uint256 _startEpochId,\\n            uint256 _endEpochId\\n        );\\n\\n    /**\\n     * @notice Returns the next claimable reward epoch for '_rewardOwner'.\\n     * @param _rewardOwner          address of the reward owner\\n     */\\n    function nextClaimableRewardEpoch(address _rewardOwner) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the array of claimable epoch ids for which the reward has not yet been claimed\\n     * @param _beneficiary          address of reward beneficiary\\n     * @return _epochIds            array of epoch ids\\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\\n     */\\n    function getEpochsWithUnclaimedRewards(address _beneficiary) external view returns (\\n        uint256[] memory _epochIds\\n    );\\n\\n    /**\\n     * @notice Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`\\n     * @param _rewardEpoch          reward epoch number\\n     * @param _dataProvider         address representing the data provider\\n     * @param _claimer              address representing the claimer\\n     * @return _claimed             boolean indicating if reward has been claimed\\n     * @return _amount              number representing the claimed amount\\n     */\\n    function getClaimedReward(\\n        uint256 _rewardEpoch,\\n        address _dataProvider,\\n        address _claimer\\n    )\\n        external view\\n        returns (\\n            bool _claimed,\\n            uint256 _amount\\n        );\\n\\n    /**\\n     * @notice Return reward epoch that will expire, when new reward epoch will start\\n     * @return Reward epoch id that will expire next\\n     */\\n    function getRewardEpochToExpireNext() external view returns (uint256);\\n\\n    /**\\n     * @notice Return reward epoch vote power block\\n     * @param _rewardEpoch          reward epoch number\\n     */\\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\\n\\n    /**\\n     * @notice Return current reward epoch number\\n     */\\n    function getCurrentRewardEpoch() external view returns (uint256);\\n\\n    /**\\n     * @notice Return initial reward epoch number\\n     */\\n    function getInitialRewardEpoch() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the information on rewards and initial vote power of `_dataProvider` for `_rewardEpoch`\\n     * @param _rewardEpoch                      reward epoch number\\n     * @param _dataProvider                     address representing the data provider\\n     * @return _rewardAmount                    number representing the amount of rewards\\n     * @return _votePowerIgnoringRevocation     number representing the vote power ignoring revocations\\n     */\\n    function getDataProviderPerformanceInfo(\\n        uint256 _rewardEpoch,\\n        address _dataProvider\\n    )\\n        external view \\n        returns (\\n            uint256 _rewardAmount,\\n            uint256 _votePowerIgnoringRevocation\\n        );\\n}\\n\",\"keccak256\":\"0x03ea94df67caf6f0a31f2d24a08e4ecb3703d177ae181ecf3fd2ddd4d59ac102\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"active()":{"notice":"Allows reward claiming"},"autoClaim(address[],uint256)":{"notice":"Allows batch claiming for the list of '_rewardOwners' and for all unclaimed epochs <= '_rewardEpoch'.If reward owner has enabled delegation account, rewards are also claimed for that delegation account and   total claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.Claimed amount is automatically wrapped.Method can be used by reward owner or executor. If executor is registered with fee > 0,   then fee is paid to executor for each claimed address from the list."},"claim(address,address,uint256,bool)":{"notice":"Allows the sender to claim or wrap rewards for reward owner.This function is intended to be used to claim rewards in case of delegation by percentage.The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,   this approval is done by calling `setClaimExecutors`.It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can   call, we allow the owner to control the timing of the calls.Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`."},"claimFromDataProviders(address,address,uint256[],address[],bool)":{"notice":"Allows the sender to claim or wrap rewards for reward owner from specified data providers.This function is intended to be used to claim rewards in case of delegation by amount.The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,   this approval is done by calling `setClaimExecutors`.It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can   call, we allow the owner to control the timing of the calls.Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`."},"claimReward(address,uint256[])":{"notice":"Allows a percentage delegator to claim rewards.This function is intended to be used to claim rewards in case of delegation by percentage."},"claimRewardFromDataProviders(address,uint256[],address[])":{"notice":"Allows the sender to claim rewards from specified data providers.This function is intended to be used to claim rewards in case of delegation by amount."},"getClaimedReward(uint256,address,address)":{"notice":"Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`"},"getCurrentRewardEpoch()":{"notice":"Return current reward epoch number"},"getDataProviderCurrentFeePercentage(address)":{"notice":"Returns the current fee percentage of `_dataProvider`"},"getDataProviderFeePercentage(address,uint256)":{"notice":"Returns the fee percentage of `_dataProvider` at `_rewardEpoch`"},"getDataProviderPerformanceInfo(uint256,address)":{"notice":"Returns the information on rewards and initial vote power of `_dataProvider` for `_rewardEpoch`"},"getDataProviderScheduledFeePercentageChanges(address)":{"notice":"Returns the scheduled fee percentage changes of `_dataProvider`"},"getEpochReward(uint256)":{"notice":"Returns information on epoch reward"},"getEpochsWithClaimableRewards()":{"notice":"Returns the start and the end of the reward epoch range for which the reward is claimable"},"getEpochsWithUnclaimedRewards(address)":{"notice":"Returns the array of claimable epoch ids for which the reward has not yet been claimed"},"getInitialRewardEpoch()":{"notice":"Return initial reward epoch number"},"getRewardEpochToExpireNext()":{"notice":"Return reward epoch that will expire, when new reward epoch will start"},"getRewardEpochVotePowerBlock(uint256)":{"notice":"Return reward epoch vote power block"},"getStateOfRewards(address,uint256)":{"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch`"},"getStateOfRewardsFromDataProviders(address,uint256,address[])":{"notice":"Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`"},"nextClaimableRewardEpoch(address)":{"notice":"Returns the next claimable reward epoch for '_rewardOwner'."},"setDataProviderFeePercentage(uint256)":{"notice":"Allows data provider to set (or update last) fee percentage."}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol":{"IPriceSubmitter":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"submitter","type":"address"},{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"contract IFtsoGenesis[]","name":"ftsos","type":"address[]"},{"indexed":false,"internalType":"bytes32[]","name":"hashes","type":"bytes32[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"PriceHashesSubmitted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"voter","type":"address"},{"indexed":true,"internalType":"uint256","name":"epochId","type":"uint256"},{"indexed":false,"internalType":"contract IFtsoGenesis[]","name":"ftsos","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"prices","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"randoms","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"PricesRevealed","type":"event"},{"inputs":[],"name":"getFtsoManager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFtsoRegistry","outputs":[{"internalType":"contract IFtsoRegistryGenesis","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVoterWhitelister","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"uint256[]","name":"_ftsoIndices","type":"uint256[]"},{"internalType":"uint256[]","name":"_prices","type":"uint256[]"},{"internalType":"uint256[]","name":"_randoms","type":"uint256[]"}],"name":"revealPrices","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_epochId","type":"uint256"},{"internalType":"uint256[]","name":"_ftsoIndices","type":"uint256[]"},{"internalType":"bytes32[]","name":"_hashes","type":"bytes32[]"}],"name":"submitPriceHashes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"}],"name":"voterWhitelistBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"PriceHashesSubmitted(address,uint256,address[],bytes32[],uint256)":{"params":{"epochId":"current price epoch id","ftsos":"array of ftsos that correspond to the indexes in call","hashes":"the submitted hashes","submitter":"the address of the sender","timestamp":"current block timestamp"}},"PricesRevealed(address,uint256,address[],uint256[],uint256[],uint256)":{"params":{"epochId":"id of the epoch in which the price hash was submitted","ftsos":"array of ftsos that correspond to the indexes in the call","prices":"the submitted prices","timestamp":"current block timestamp","voter":"the address of the sender"}}},"kind":"dev","methods":{"revealPrices(uint256,uint256[],uint256[],uint256[])":{"params":{"_epochId":"Id of the epoch in which the price hashes was submitted","_ftsoIndices":"List of ftso indices","_prices":"List of submitted prices in USD","_randoms":"List of submitted random numbers"}},"submitPriceHashes(uint256,uint256[],bytes32[])":{"params":{"_epochId":"Target epoch id to which hashes are submitted","_ftsoIndices":"List of ftso indices","_hashes":"List of hashed price and random number"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getFtsoManager()":"b39c6858","getFtsoRegistry()":"8c9d28b6","getVoterWhitelister()":"71e1fad9","revealPrices(uint256,uint256[],uint256[],uint256[])":"60848b44","submitPriceHashes(uint256,uint256[],bytes32[])":"c5adc539","voterWhitelistBitmap(address)":"7ac420ad"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IFtsoGenesis[]\",\"name\":\"ftsos\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceHashesSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IFtsoGenesis[]\",\"name\":\"ftsos\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randoms\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PricesRevealed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getFtsoManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFtsoRegistry\",\"outputs\":[{\"internalType\":\"contract IFtsoRegistryGenesis\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoterWhitelister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ftsoIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_randoms\",\"type\":\"uint256[]\"}],\"name\":\"revealPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ftsoIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_hashes\",\"type\":\"bytes32[]\"}],\"name\":\"submitPriceHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"voterWhitelistBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PriceHashesSubmitted(address,uint256,address[],bytes32[],uint256)\":{\"params\":{\"epochId\":\"current price epoch id\",\"ftsos\":\"array of ftsos that correspond to the indexes in call\",\"hashes\":\"the submitted hashes\",\"submitter\":\"the address of the sender\",\"timestamp\":\"current block timestamp\"}},\"PricesRevealed(address,uint256,address[],uint256[],uint256[],uint256)\":{\"params\":{\"epochId\":\"id of the epoch in which the price hash was submitted\",\"ftsos\":\"array of ftsos that correspond to the indexes in the call\",\"prices\":\"the submitted prices\",\"timestamp\":\"current block timestamp\",\"voter\":\"the address of the sender\"}}},\"kind\":\"dev\",\"methods\":{\"revealPrices(uint256,uint256[],uint256[],uint256[])\":{\"params\":{\"_epochId\":\"Id of the epoch in which the price hashes was submitted\",\"_ftsoIndices\":\"List of ftso indices\",\"_prices\":\"List of submitted prices in USD\",\"_randoms\":\"List of submitted random numbers\"}},\"submitPriceHashes(uint256,uint256[],bytes32[])\":{\"params\":{\"_epochId\":\"Target epoch id to which hashes are submitted\",\"_ftsoIndices\":\"List of ftso indices\",\"_hashes\":\"List of hashed price and random number\"}}},\"version\":1},\"userdoc\":{\"events\":{\"PriceHashesSubmitted(address,uint256,address[],bytes32[],uint256)\":{\"notice\":\"Event emitted when price hashes were submitted through PriceSubmitter.\"},\"PricesRevealed(address,uint256,address[],uint256[],uint256[],uint256)\":{\"notice\":\"Event emitted when prices were revealed through PriceSubmitter.\"}},\"kind\":\"user\",\"methods\":{\"revealPrices(uint256,uint256[],uint256[],uint256[])\":{\"notice\":\"Reveals submitted prices during epoch reveal periodThe hash of _price and _random must be equal to the submitted hashEmits PricesRevealed event\"},\"submitPriceHashes(uint256,uint256[],bytes32[])\":{\"notice\":\"Submits price hashes for current epochEmits PriceHashesSubmitted event\"},\"voterWhitelistBitmap(address)\":{\"notice\":\"Returns bitmap of all ftso's for which `_voter` is allowed to submit prices/hashes. If voter is allowed to vote for ftso at index (see *_FTSO_INDEX), the corrsponding bit in the result will be 1.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol\":\"IPriceSubmitter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n    \\n    /**\\n     * @notice Submits price hash for current epoch - only price submitter\\n     * @param _sender               Sender address\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _hash                 Hashed price and random number\\n     * @notice Emits PriceHashSubmitted event. \\n     */\\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @param _random               Submitted random number\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _random,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffadc43743fb1d76d63438725462cd018e0fb31463802f0c235c0b6409dc97a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./IFtsoGenesis.sol\\\";\\n\\n\\ninterface IFtsoRegistryGenesis {\\n\\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x4765fdcb22dcc64c015d02c019f0ddce8d8b36111160fd4160a3d94ea4f370a3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IPriceSubmitter {\\n    /**\\n     * Event emitted when price hashes were submitted through PriceSubmitter.\\n     * @param submitter the address of the sender\\n     * @param epochId current price epoch id\\n     * @param ftsos array of ftsos that correspond to the indexes in call\\n     * @param hashes the submitted hashes\\n     * @param timestamp current block timestamp\\n     */\\n    event PriceHashesSubmitted(\\n        address indexed submitter,\\n        uint256 indexed epochId,\\n        IFtsoGenesis[] ftsos,\\n        bytes32[] hashes,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * Event emitted when prices were revealed through PriceSubmitter.\\n     * @param voter the address of the sender\\n     * @param epochId id of the epoch in which the price hash was submitted\\n     * @param ftsos array of ftsos that correspond to the indexes in the call\\n     * @param prices the submitted prices\\n     * @param timestamp current block timestamp\\n     */\\n    event PricesRevealed(\\n        address indexed voter,\\n        uint256 indexed epochId,\\n        IFtsoGenesis[] ftsos,\\n        uint256[] prices,\\n        uint256[] randoms,\\n        uint256 timestamp\\n    );\\n    \\n    /**\\n     * @notice Submits price hashes for current epoch\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _ftsoIndices          List of ftso indices\\n     * @param _hashes               List of hashed price and random number\\n     * @notice Emits PriceHashesSubmitted event\\n     */\\n    function submitPriceHashes(\\n        uint256 _epochId,\\n        uint256[] memory _ftsoIndices,\\n        bytes32[] memory _hashes\\n    ) external;\\n\\n    /**\\n     * @notice Reveals submitted prices during epoch reveal period\\n     * @param _epochId              Id of the epoch in which the price hashes was submitted\\n     * @param _ftsoIndices          List of ftso indices\\n     * @param _prices               List of submitted prices in USD\\n     * @param _randoms              List of submitted random numbers\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PricesRevealed event\\n     */\\n    function revealPrices(\\n        uint256 _epochId,\\n        uint256[] memory _ftsoIndices,\\n        uint256[] memory _prices,\\n        uint256[] memory _randoms\\n    ) external;\\n\\n    /**\\n     * Returns bitmap of all ftso's for which `_voter` is allowed to submit prices/hashes.\\n     * If voter is allowed to vote for ftso at index (see *_FTSO_INDEX), the corrsponding\\n     * bit in the result will be 1.\\n     */    \\n    function voterWhitelistBitmap(address _voter) external view returns (uint256);\\n\\n    function getVoterWhitelister() external view returns (address);\\n    function getFtsoRegistry() external view returns (IFtsoRegistryGenesis);\\n    function getFtsoManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4859d5a14334c7905a7813ac8ee16151f8395611f832ff3bdf741be7f53a13a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"PriceHashesSubmitted(address,uint256,address[],bytes32[],uint256)":{"notice":"Event emitted when price hashes were submitted through PriceSubmitter."},"PricesRevealed(address,uint256,address[],uint256[],uint256[],uint256)":{"notice":"Event emitted when prices were revealed through PriceSubmitter."}},"kind":"user","methods":{"revealPrices(uint256,uint256[],uint256[],uint256[])":{"notice":"Reveals submitted prices during epoch reveal periodThe hash of _price and _random must be equal to the submitted hashEmits PricesRevealed event"},"submitPriceHashes(uint256,uint256[],bytes32[])":{"notice":"Submits price hashes for current epochEmits PriceHashesSubmitted event"},"voterWhitelistBitmap(address)":{"notice":"Returns bitmap of all ftso's for which `_voter` is allowed to submit prices/hashes. If voter is allowed to vote for ftso at index (see *_FTSO_INDEX), the corrsponding bit in the result will be 1."}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol":{"IVoterWhitelister":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"voter","type":"address"},{"indexed":false,"internalType":"uint256","name":"untilRewardEpoch","type":"uint256"}],"name":"VoterChilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"voter","type":"address"},{"indexed":false,"internalType":"uint256","name":"ftsoIndex","type":"uint256"}],"name":"VoterRemovedFromWhitelist","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"voter","type":"address"},{"indexed":false,"internalType":"uint256","name":"ftsoIndex","type":"uint256"}],"name":"VoterWhitelisted","type":"event"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"}],"name":"chilledUntilRewardEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"defaultMaxVotersForFtso","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ftsoIndex","type":"uint256"}],"name":"getFtsoWhitelistedPriceProviders","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_symbol","type":"string"}],"name":"getFtsoWhitelistedPriceProvidersBySymbol","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_ftsoIndex","type":"uint256"}],"name":"maxVotersForFtso","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"}],"name":"requestFullVoterWhitelisting","outputs":[{"internalType":"uint256[]","name":"_supportedIndices","type":"uint256[]"},{"internalType":"bool[]","name":"_success","type":"bool[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_voter","type":"address"},{"internalType":"uint256","name":"_ftsoIndex","type":"uint256"}],"name":"requestWhitelistingVoter","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"chilledUntilRewardEpoch(address)":"46538074","defaultMaxVotersForFtso()":"47ed51b1","getFtsoWhitelistedPriceProviders(uint256)":"09fcb400","getFtsoWhitelistedPriceProvidersBySymbol(string)":"aa89dfd4","maxVotersForFtso(uint256)":"98dccfc2","requestFullVoterWhitelisting(address)":"b06cbaf7","requestWhitelistingVoter(address,uint256)":"3de2cb1c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"untilRewardEpoch\",\"type\":\"uint256\"}],\"name\":\"VoterChilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ftsoIndex\",\"type\":\"uint256\"}],\"name\":\"VoterRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ftsoIndex\",\"type\":\"uint256\"}],\"name\":\"VoterWhitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"chilledUntilRewardEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMaxVotersForFtso\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ftsoIndex\",\"type\":\"uint256\"}],\"name\":\"getFtsoWhitelistedPriceProviders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getFtsoWhitelistedPriceProvidersBySymbol\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ftsoIndex\",\"type\":\"uint256\"}],\"name\":\"maxVotersForFtso\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"requestFullVoterWhitelisting\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_supportedIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_success\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ftsoIndex\",\"type\":\"uint256\"}],\"name\":\"requestWhitelistingVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"VoterChilled(address,uint256)\":{\"notice\":\"Raised when an account is chilled from the voter whitelist.\"},\"VoterRemovedFromWhitelist(address,uint256)\":{\"notice\":\"Raised when an account is removed from the voter whitelist.\"},\"VoterWhitelisted(address,uint256)\":{\"notice\":\"Raised when an account is removed from the voter whitelist.\"}},\"kind\":\"user\",\"methods\":{\"chilledUntilRewardEpoch(address)\":{\"notice\":\"In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards.\"},\"defaultMaxVotersForFtso()\":{\"notice\":\"Maximum number of voters in the whitelist for a new FTSO.\"},\"getFtsoWhitelistedPriceProviders(uint256)\":{\"notice\":\"Get whitelisted price providers for ftso at `_ftsoIndex`\"},\"getFtsoWhitelistedPriceProvidersBySymbol(string)\":{\"notice\":\"Get whitelisted price providers for ftso with `_symbol`\"},\"maxVotersForFtso(uint256)\":{\"notice\":\"Maximum number of voters in the whitelist for FTSO at index `_ftsoIndex`.\"},\"requestFullVoterWhitelisting(address)\":{\"notice\":\"Request to whitelist `_voter` account to all active ftsos. May be called by any address. It returns an array of supported ftso indices and success flag per index.\"},\"requestWhitelistingVoter(address,uint256)\":{\"notice\":\"Request to whitelist `_voter` account to ftso at `_ftsoIndex`. Will revert if vote power too low. May be called by any address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol\":\"IVoterWhitelister\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVoterWhitelister {\\n    /**\\n     * Raised when an account is removed from the voter whitelist.\\n     */\\n    event VoterWhitelisted(address voter, uint256 ftsoIndex);\\n    \\n    /**\\n     * Raised when an account is removed from the voter whitelist.\\n     */\\n    event VoterRemovedFromWhitelist(address voter, uint256 ftsoIndex);\\n\\n    /**\\n     * Raised when an account is chilled from the voter whitelist.\\n     */\\n    event VoterChilled(address voter, uint256 untilRewardEpoch);\\n\\n    /**\\n     * Request to whitelist `_voter` account to ftso at `_ftsoIndex`. Will revert if vote power too low.\\n     * May be called by any address.\\n     */\\n    function requestWhitelistingVoter(address _voter, uint256 _ftsoIndex) external;\\n\\n    /**\\n     * Request to whitelist `_voter` account to all active ftsos.\\n     * May be called by any address.\\n     * It returns an array of supported ftso indices and success flag per index.\\n     */\\n    function requestFullVoterWhitelisting(\\n        address _voter\\n    ) \\n        external \\n        returns (\\n            uint256[] memory _supportedIndices,\\n            bool[] memory _success\\n        );\\n\\n    /**\\n     * Maximum number of voters in the whitelist for a new FTSO.\\n     */\\n    function defaultMaxVotersForFtso() external view returns (uint256);\\n    \\n    /**\\n     * Maximum number of voters in the whitelist for FTSO at index `_ftsoIndex`.\\n     */\\n    function maxVotersForFtso(uint256 _ftsoIndex) external view returns (uint256);\\n\\n    /**\\n     * Get whitelisted price providers for ftso with `_symbol`\\n     */\\n    function getFtsoWhitelistedPriceProvidersBySymbol(string memory _symbol) external view returns (address[] memory);\\n\\n    /**\\n     * Get whitelisted price providers for ftso at `_ftsoIndex`\\n     */\\n    function getFtsoWhitelistedPriceProviders(uint256 _ftsoIndex) external view returns (address[] memory);\\n\\n    /**\\n     * In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs.\\n     * A voter can whitelist again from a returned reward epoch onwards.\\n     */\\n    function chilledUntilRewardEpoch(address _voter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfaa76e4db7440304e5c1518e24b8c5008cbda90e30d31646f48346be20057669\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"VoterChilled(address,uint256)":{"notice":"Raised when an account is chilled from the voter whitelist."},"VoterRemovedFromWhitelist(address,uint256)":{"notice":"Raised when an account is removed from the voter whitelist."},"VoterWhitelisted(address,uint256)":{"notice":"Raised when an account is removed from the voter whitelist."}},"kind":"user","methods":{"chilledUntilRewardEpoch(address)":{"notice":"In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs. A voter can whitelist again from a returned reward epoch onwards."},"defaultMaxVotersForFtso()":{"notice":"Maximum number of voters in the whitelist for a new FTSO."},"getFtsoWhitelistedPriceProviders(uint256)":{"notice":"Get whitelisted price providers for ftso at `_ftsoIndex`"},"getFtsoWhitelistedPriceProvidersBySymbol(string)":{"notice":"Get whitelisted price providers for ftso with `_symbol`"},"maxVotersForFtso(uint256)":{"notice":"Maximum number of voters in the whitelist for FTSO at index `_ftsoIndex`."},"requestFullVoterWhitelisting(address)":{"notice":"Request to whitelist `_voter` account to all active ftsos. May be called by any address. It returns an array of supported ftso indices and success flag per index."},"requestWhitelistingVoter(address,uint256)":{"notice":"Request to whitelist `_voter` account to ftso at `_ftsoIndex`. Will revert if vote power too low. May be called by any address."}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol":{"IGovernanceVotePower":{"abi":[{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"getDelegateOfAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"getDelegateOfAtNow","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"undelegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"delegate(address)":{"params":{"_to":"The address of the recipient*"}},"getDelegateOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_who":"The address to get delegate's address."},"returns":{"_0":"Delegate's address of `_who` at `_blockNumber`."}},"getDelegateOfAtNow(address)":{"params":{"_who":"The address to get delegate's address."},"returns":{"_0":"Delegate's address of `_who` at the current block number."}},"getVotes(address)":{"params":{"account":"The address to get voting power."},"returns":{"_0":"Vote power of `account` at the current block number."}},"votePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_who":"The address to get voting power."},"returns":{"_0":"_votePower    Governance vote power of `_who` at `_blockNumber`."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"delegate(address)":"5c19a95c","getDelegateOfAt(address,uint256)":"3c028e9d","getDelegateOfAtNow(address)":"b3e871ee","getVotes(address)":"9ab24eb0","undelegate()":"92ab89bb","votePowerOfAt(address,uint256)":"92bfe6d8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getDelegateOfAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getDelegateOfAtNow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"delegate(address)\":{\"params\":{\"_to\":\"The address of the recipient*\"}},\"getDelegateOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_who\":\"The address to get delegate's address.\"},\"returns\":{\"_0\":\"Delegate's address of `_who` at `_blockNumber`.\"}},\"getDelegateOfAtNow(address)\":{\"params\":{\"_who\":\"The address to get delegate's address.\"},\"returns\":{\"_0\":\"Delegate's address of `_who` at the current block number.\"}},\"getVotes(address)\":{\"params\":{\"account\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `account` at the current block number.\"}},\"votePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_who\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"_votePower    Governance vote power of `_who` at `_blockNumber`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"delegate(address)\":{\"notice\":\"Delegate all governance vote power of `msg.sender` to `_to`.\"},\"getDelegateOfAt(address,uint256)\":{\"notice\":\"Get the delegate's address of `_who` at block `_blockNumber`\"},\"getDelegateOfAtNow(address)\":{\"notice\":\"Get the delegate's address of `_who` at the current block.\"},\"getVotes(address)\":{\"notice\":\"Get the vote power of `account` at the current block.\"},\"undelegate()\":{\"notice\":\"Undelegate all governance vote power of `msg.sender``.*\"},\"votePowerOfAt(address,uint256)\":{\"notice\":\"Get the governance vote power of `_who` at block `_blockNumber`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":\"IGovernanceVotePower\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"delegate(address)":{"notice":"Delegate all governance vote power of `msg.sender` to `_to`."},"getDelegateOfAt(address,uint256)":{"notice":"Get the delegate's address of `_who` at block `_blockNumber`"},"getDelegateOfAtNow(address)":{"notice":"Get the delegate's address of `_who` at the current block."},"getVotes(address)":{"notice":"Get the vote power of `account` at the current block."},"undelegate()":{"notice":"Undelegate all governance vote power of `msg.sender``.*"},"votePowerOfAt(address,uint256)":{"notice":"Get the governance vote power of `_who` at block `_blockNumber`"}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol":{"AddressValidity":{"abi":[],"devdoc":{"author":"Flare","custom:id":"0x05","custom:lut":"`0xffffffffffffffff` ($2^{64}-1$ in hex)","custom:name":"AddressValidity","custom:supported":"BTC, DOGE, XRP, testBTC, testDOGE, testXRP","custom:verification":"The address is checked against all validity criteria of the chain with `sourceId`. Indicator of validity is provided. If the address is valid, its standard form and standard hash are computed. Validity criteria for each supported chain: - [BTC](/specs/attestations/external-chains/address-validity/BTC.md) - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md) - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Flare\",\"custom:id\":\"0x05\",\"custom:lut\":\"`0xffffffffffffffff` ($2^{64}-1$ in hex)\",\"custom:name\":\"AddressValidity\",\"custom:supported\":\"BTC, DOGE, XRP, testBTC, testDOGE, testXRP\",\"custom:verification\":\"The address is checked against all validity criteria of the chain with `sourceId`. Indicator of validity is provided. If the address is valid, its standard form and standard hash are computed. Validity criteria for each supported chain: - [BTC](/specs/attestations/external-chains/address-validity/BTC.md) - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md) - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"An assertion whether a string represents a valid address on an external chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol\":\"AddressValidity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name AddressValidity\\n * @custom:id 0x05\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion whether a string represents a valid address on an external chain.\\n * @custom:verification The address is checked against all validity criteria of the chain with `sourceId`.\\n * Indicator of validity is provided.\\n * If the address is valid, its standard form and standard hash are computed.\\n * Validity criteria for each supported chain:\\n * - [BTC](/specs/attestations/external-chains/address-validity/BTC.md)\\n * - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md)\\n * - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\\n * @custom:lut `0xffffffffffffffff` ($2^{64}-1$ in hex)\\n */\\ninterface AddressValidity {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId Id of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for AddressValidity attestation type\\n     * @param addressStr Address to be verified.\\n     */\\n    struct RequestBody {\\n        string addressStr;\\n    }\\n\\n    /**\\n     * @notice Response body for AddressValidity attestation type\\n     * @param isValid Boolean indicator of the address validity.\\n     * @param standardAddress If `isValid`, standard form of the validated address. Otherwise an empty string.\\n     * @param standardAddressHash If `isValid`, standard address hash of the validated address. Otherwise a zero bytes32 string.\\n     */\\n    struct ResponseBody {\\n        bool isValid;\\n        string standardAddress;\\n        bytes32 standardAddressHash;\\n    }\\n}\\n\",\"keccak256\":\"0xd30e59f7b4ef10d6d33e8c85af3157abca3799cb5b2ee5d2d20878567275dd99\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"An assertion whether a string represents a valid address on an external chain.","version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol":{"BalanceDecreasingTransaction":{"abi":[],"devdoc":{"author":"Flare","custom:id":"0x02","custom:lut":"`blockTimestamp`","custom:name":"BalanceDecreasingTransaction","custom:supported":"BTC, DOGE, XRP, testBTC, testDOGE, testXRP","custom:verification":"The transaction with `transactionId` is fetched from the API of the source blockchain node or relevant indexer. If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected. Once the transaction is received, the response fields are extracted if the transaction is balance decreasing for the indicated address. Some of the request and response fields are chain specific as described below. The fields can be computed with the help of a [balance decreasing summary](/specs/attestations/external-chains/transactions.md#balance-decreasing-summary). ### UTXO (Bitcoin and Dogecoin) - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string. If the indicated input does not exist or the indicated input does not have the address, the attestation request is rejected. The `sourceAddress` is the address of the indicated transaction input. - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of all outputs with `sourceAddress`. Can be negative. - `blockTimestamp` is the mediantime of a block. ### XRPL - `sourceAddressIndicator` is the [standard address hash](/specs/attestations/external-chains/standardAddress.md#standard-address-hash) of the address whose balance has been decreased. If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance of the address was not lowered in the transaction, the attestation request is rejected. - `spentAmount` is the difference between the balance of the indicated address after and before the transaction. Can be negative. - `blockTimestamp` is the close_time of a ledger converted to unix time.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Flare\",\"custom:id\":\"0x02\",\"custom:lut\":\"`blockTimestamp`\",\"custom:name\":\"BalanceDecreasingTransaction\",\"custom:supported\":\"BTC, DOGE, XRP, testBTC, testDOGE, testXRP\",\"custom:verification\":\"The transaction with `transactionId` is fetched from the API of the source blockchain node or relevant indexer. If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected. Once the transaction is received, the response fields are extracted if the transaction is balance decreasing for the indicated address. Some of the request and response fields are chain specific as described below. The fields can be computed with the help of a [balance decreasing summary](/specs/attestations/external-chains/transactions.md#balance-decreasing-summary). ### UTXO (Bitcoin and Dogecoin) - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string. If the indicated input does not exist or the indicated input does not have the address, the attestation request is rejected. The `sourceAddress` is the address of the indicated transaction input. - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of all outputs with `sourceAddress`. Can be negative. - `blockTimestamp` is the mediantime of a block. ### XRPL - `sourceAddressIndicator` is the [standard address hash](/specs/attestations/external-chains/standardAddress.md#standard-address-hash) of the address whose balance has been decreased. If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance of the address was not lowered in the transaction, the attestation request is rejected. - `spentAmount` is the difference between the balance of the indicated address after and before the transaction. Can be negative. - `blockTimestamp` is the close_time of a ledger converted to unix time.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A detection of a transaction that either decreases the balance for some address or is signed by the source address. Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate some funds locked by a smart contract on Flare. A transaction is considered \\u201cbalance decreasing\\u201d for the address, if the balance after the transaction is lower than before or the address is among the signers of the transaction (even if its balance is greater than before the transaction).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol\":\"BalanceDecreasingTransaction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name BalanceDecreasingTransaction\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A detection of a transaction that either decreases the balance for some address or is signed by the source address.\\n * Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate some funds locked by a smart contract on Flare.\\n *\\n * A transaction is considered \\u201cbalance decreasing\\u201d for the address, if the balance after the transaction is lower than before or the address is among the signers of the transaction (even if its balance is greater than before the transaction).\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the source blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the response fields are extracted if the transaction is balance decreasing for the indicated address.\\n * Some of the request and response fields are chain specific as described below.\\n * The fields can be computed with the help of a [balance decreasing summary](/specs/attestations/external-chains/transactions.md#balance-decreasing-summary).\\n *\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n * - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\\n * If the indicated input does not exist or the indicated input does not have the address, the attestation request is rejected.\\n * The `sourceAddress` is the address of the indicated transaction input.\\n * - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of all outputs with `sourceAddress`.\\n * Can be negative.\\n * - `blockTimestamp` is the mediantime of a block.\\n *\\n * ### XRPL\\n *\\n * - `sourceAddressIndicator` is the [standard address hash](/specs/attestations/external-chains/standardAddress.md#standard-address-hash) of the address whose balance has been decreased.\\n * If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance of the address was not lowered in the transaction, the attestation request is rejected.\\n *\\n * - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\\n * Can be negative.\\n * - `blockTimestamp` is the close_time of a ledger converted to unix time.\\n *\\n * @custom:lut `blockTimestamp`\\n */\\ninterface BalanceDecreasingTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered. This is a security measure to prevent a collision of attestation hashes.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for BalanceDecreasingTransaction attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param sourceAddressIndicator The indicator of the address whose balance has been decreased.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        bytes32 sourceAddressIndicator;\\n    }\\n\\n    /**\\n     * @notice Response body for BalanceDecreasingTransaction attestation type.\\n     * @param blockNumber The number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the address indicated by the `sourceAddressIndicator`.\\n     * @param spentAmount Amount spent by the source address in minimal units.\\n     * @param standardPaymentReference Standard payment reference of the transaction.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        int256 spentAmount;\\n        bytes32 standardPaymentReference;\\n    }\\n}\\n\",\"keccak256\":\"0x30df7b48485b7029d406aa6f2b98a6ad3685a2358ce006707870cd848c3b6b28\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A detection of a transaction that either decreases the balance for some address or is signed by the source address. Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate some funds locked by a smart contract on Flare. A transaction is considered “balance decreasing” for the address, if the balance after the transaction is lower than before or the address is among the signers of the transaction (even if its balance is greater than before the transaction).","version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol":{"ConfirmedBlockHeightExists":{"abi":[],"devdoc":{"author":"Flare","custom:id":"0x02","custom:lut":"`lowestQueryWindowBlockTimestamp`","custom:name":"ConfirmedBlockHeightExists","custom:supported":"BTC, DOGE, XRP, testBTC, testDOGE, testXRP","custom:verification":"It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`. If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block. Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.  Current confirmation heights consensus: | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` | | ------- | --------- | ----------------------- | ------------ | | `BTC`   | 0         | 6                       | mediantime   | | `DOGE`  | 2         | 60                      | mediantime   | | `XRP`   | 3         | 3                       | close_time   |","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Flare\",\"custom:id\":\"0x02\",\"custom:lut\":\"`lowestQueryWindowBlockTimestamp`\",\"custom:name\":\"ConfirmedBlockHeightExists\",\"custom:supported\":\"BTC, DOGE, XRP, testBTC, testDOGE, testXRP\",\"custom:verification\":\"It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`. If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block. Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.  Current confirmation heights consensus: | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` | | ------- | --------- | ----------------------- | ------------ | | `BTC`   | 0         | 6                       | mediantime   | | `DOGE`  | 2         | 60                      | mediantime   | | `XRP`   | 3         | 3                       | close_time   |\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"An assertion that a block with `blockNumber` is confirmed. It also provides data to compute the block production rate in the given time range.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol\":\"ConfirmedBlockHeightExists\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ConfirmedBlockHeightExists\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion that a block with `blockNumber` is confirmed.\\n * It also provides data to compute the block production rate in the given time range.\\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`.\\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\\n *\\n *\\n *  Current confirmation heights consensus:\\n *\\n *\\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\\n * | ------- | --------- | ----------------------- | ------------ |\\n * | `BTC`   | 0         | 6                       | mediantime   |\\n * | `DOGE`  | 2         | 60                      | mediantime   |\\n * | `XRP`   | 3         | 3                       | close_time   |\\n *\\n *\\n *\\n *\\n * @custom:lut `lowestQueryWindowBlockTimestamp`\\n */\\ninterface ConfirmedBlockHeightExists {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\\n     * @param blockNumber The number of the block the request wants a confirmation of.\\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\\n     */\\n    struct RequestBody {\\n        uint64 blockNumber;\\n        uint64 queryWindow;\\n    }\\n\\n    /**\\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp` and `lowestQueryWindowBlockTimestamp` can be used to compute the average block production time in the specified block range.\\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain. All attestation providers must agree on this number.\\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`.\\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 blockTimestamp;\\n        uint64 numberOfConfirmations;\\n        uint64 lowestQueryWindowBlockNumber;\\n        uint64 lowestQueryWindowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xc0b8563cb674c38c9569021bf662031877311f32c6bb9993b511c60d57fc7fd5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"An assertion that a block with `blockNumber` is confirmed. It also provides data to compute the block production rate in the given time range.","version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol":{"EVMTransaction":{"abi":[],"devdoc":{"author":"Flare","custom:id":"0x06","custom:lut":"`timestamp`","custom:name":"EVMTransaction","custom:supported":"ETH, FLR, SGB, testETH, testFLR, testSGB","custom:verification":"If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed. If an indicated event does not exist, the request is rejected.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Flare\",\"custom:id\":\"0x06\",\"custom:lut\":\"`timestamp`\",\"custom:name\":\"EVMTransaction\",\"custom:supported\":\"ETH, FLR, SGB, testETH, testFLR, testSGB\",\"custom:verification\":\"If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed. If an indicated event does not exist, the request is rejected.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A relay of a transaction from an EVM chain. This type is only relevant for EVM-compatible chains.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol\":\"EVMTransaction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name EVMTransaction\\n * @custom:id 0x06\\n * @custom:supported ETH, FLR, SGB, testETH, testFLR, testSGB\\n * @author Flare\\n * @notice A relay of a transaction from an EVM chain.\\n * This type is only relevant for EVM-compatible chains.\\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed.\\n * If an indicated event does not exist, the request is rejected.\\n * @custom:lut `timestamp`\\n */\\ninterface EVMTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId  ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for EVM transaction attestation type\\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\\n     * @param transactionHash Hash of the transaction(transactionHash).\\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\\n     * @param provideInput If true, \\\"input\\\" field is included in the response.\\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionHash;\\n        uint16 requiredConfirmations;\\n        bool provideInput;\\n        bool listEvents;\\n        uint32[] logIndices;\\n    }\\n\\n    /**\\n     * @notice Response body for EVM transaction attestation type\\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param timestamp Timestamp of the block in which the transaction is included.\\n     * @param sourceAddress The address (from) that signed the transaction.\\n     * @param isDeployment Indicate whether it is a contract creation transaction.\\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\\n     * @param value The value transferred by the initial transaction in wei.\\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\\n     * @param status Status of the transaction 1 - success, 0 - failure.\\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 timestamp;\\n        address sourceAddress;\\n        bool isDeployment;\\n        address receivingAddress;\\n        uint256 value;\\n        bytes input;\\n        uint8 status;\\n        Event[] events;\\n    }\\n\\n    /**\\n     * @notice Event log record\\n     * @custom:above An `Event` is a struct with the following fields:\\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\\n     * @param logIndex The consecutive number of the event in block.\\n     * @param emitterAddress The address of the contract that emitted the event.\\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\\n     */\\n    struct Event {\\n        uint32 logIndex;\\n        address emitterAddress;\\n        bytes32[] topics;\\n        bytes data;\\n        bool removed;\\n    }\\n}\\n\",\"keccak256\":\"0xd0665e3ac546858a8becbf7f0600fe87b6f003120f1d731759d14c6b5b8ae6d2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A relay of a transaction from an EVM chain. This type is only relevant for EVM-compatible chains.","version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol":{"IAddressValidityVerification":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"string","name":"addressStr","type":"string"}],"internalType":"struct AddressValidity.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"bool","name":"isValid","type":"bool"},{"internalType":"string","name":"standardAddress","type":"string"},{"internalType":"bytes32","name":"standardAddressHash","type":"bytes32"}],"internalType":"struct AddressValidity.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct AddressValidity.Response","name":"data","type":"tuple"}],"internalType":"struct AddressValidity.Proof","name":"_proof","type":"tuple"}],"name":"verifyAddressValidity","outputs":[{"internalType":"bool","name":"_proved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"verifyAddressValidity((bytes32[],(bytes32,bytes32,uint64,uint64,(string),(bool,string,bytes32))))":"f34ef587"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"addressStr\",\"type\":\"string\"}],\"internalType\":\"struct AddressValidity.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"standardAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"standardAddressHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct AddressValidity.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct AddressValidity.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct AddressValidity.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyAddressValidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_proved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol\":\"IAddressValidityVerification\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name AddressValidity\\n * @custom:id 0x05\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion whether a string represents a valid address on an external chain.\\n * @custom:verification The address is checked against all validity criteria of the chain with `sourceId`.\\n * Indicator of validity is provided.\\n * If the address is valid, its standard form and standard hash are computed.\\n * Validity criteria for each supported chain:\\n * - [BTC](/specs/attestations/external-chains/address-validity/BTC.md)\\n * - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md)\\n * - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\\n * @custom:lut `0xffffffffffffffff` ($2^{64}-1$ in hex)\\n */\\ninterface AddressValidity {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId Id of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for AddressValidity attestation type\\n     * @param addressStr Address to be verified.\\n     */\\n    struct RequestBody {\\n        string addressStr;\\n    }\\n\\n    /**\\n     * @notice Response body for AddressValidity attestation type\\n     * @param isValid Boolean indicator of the address validity.\\n     * @param standardAddress If `isValid`, standard form of the validated address. Otherwise an empty string.\\n     * @param standardAddressHash If `isValid`, standard address hash of the validated address. Otherwise a zero bytes32 string.\\n     */\\n    struct ResponseBody {\\n        bool isValid;\\n        string standardAddress;\\n        bytes32 standardAddressHash;\\n    }\\n}\\n\",\"keccak256\":\"0xd30e59f7b4ef10d6d33e8c85af3157abca3799cb5b2ee5d2d20878567275dd99\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./AddressValidity.sol\\\";\\n\\ninterface IAddressValidityVerification {\\n\\n   function verifyAddressValidity(\\n      AddressValidity.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0xcbe043d55f2fd1e57e12515b2c7cf024d45121303a8d8cdf8822cba40c9e5746\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol":{"IBalanceDecreasingTransactionVerification":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"bytes32","name":"sourceAddressIndicator","type":"bytes32"}],"internalType":"struct BalanceDecreasingTransaction.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint64","name":"blockTimestamp","type":"uint64"},{"internalType":"bytes32","name":"sourceAddressHash","type":"bytes32"},{"internalType":"int256","name":"spentAmount","type":"int256"},{"internalType":"bytes32","name":"standardPaymentReference","type":"bytes32"}],"internalType":"struct BalanceDecreasingTransaction.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct BalanceDecreasingTransaction.Response","name":"data","type":"tuple"}],"internalType":"struct BalanceDecreasingTransaction.Proof","name":"_proof","type":"tuple"}],"name":"verifyBalanceDecreasingTransaction","outputs":[{"internalType":"bool","name":"_proved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"verifyBalanceDecreasingTransaction((bytes32[],(bytes32,bytes32,uint64,uint64,(bytes32,bytes32),(uint64,uint64,bytes32,int256,bytes32))))":"6ec659c7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddressIndicator\",\"type\":\"bytes32\"}],\"internalType\":\"struct BalanceDecreasingTransaction.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blockTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddressHash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"spentAmount\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"standardPaymentReference\",\"type\":\"bytes32\"}],\"internalType\":\"struct BalanceDecreasingTransaction.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct BalanceDecreasingTransaction.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct BalanceDecreasingTransaction.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyBalanceDecreasingTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_proved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol\":\"IBalanceDecreasingTransactionVerification\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name BalanceDecreasingTransaction\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A detection of a transaction that either decreases the balance for some address or is signed by the source address.\\n * Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate some funds locked by a smart contract on Flare.\\n *\\n * A transaction is considered \\u201cbalance decreasing\\u201d for the address, if the balance after the transaction is lower than before or the address is among the signers of the transaction (even if its balance is greater than before the transaction).\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the source blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the response fields are extracted if the transaction is balance decreasing for the indicated address.\\n * Some of the request and response fields are chain specific as described below.\\n * The fields can be computed with the help of a [balance decreasing summary](/specs/attestations/external-chains/transactions.md#balance-decreasing-summary).\\n *\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n * - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\\n * If the indicated input does not exist or the indicated input does not have the address, the attestation request is rejected.\\n * The `sourceAddress` is the address of the indicated transaction input.\\n * - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of all outputs with `sourceAddress`.\\n * Can be negative.\\n * - `blockTimestamp` is the mediantime of a block.\\n *\\n * ### XRPL\\n *\\n * - `sourceAddressIndicator` is the [standard address hash](/specs/attestations/external-chains/standardAddress.md#standard-address-hash) of the address whose balance has been decreased.\\n * If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance of the address was not lowered in the transaction, the attestation request is rejected.\\n *\\n * - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\\n * Can be negative.\\n * - `blockTimestamp` is the close_time of a ledger converted to unix time.\\n *\\n * @custom:lut `blockTimestamp`\\n */\\ninterface BalanceDecreasingTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered. This is a security measure to prevent a collision of attestation hashes.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for BalanceDecreasingTransaction attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param sourceAddressIndicator The indicator of the address whose balance has been decreased.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        bytes32 sourceAddressIndicator;\\n    }\\n\\n    /**\\n     * @notice Response body for BalanceDecreasingTransaction attestation type.\\n     * @param blockNumber The number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the address indicated by the `sourceAddressIndicator`.\\n     * @param spentAmount Amount spent by the source address in minimal units.\\n     * @param standardPaymentReference Standard payment reference of the transaction.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        int256 spentAmount;\\n        bytes32 standardPaymentReference;\\n    }\\n}\\n\",\"keccak256\":\"0x30df7b48485b7029d406aa6f2b98a6ad3685a2358ce006707870cd848c3b6b28\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./BalanceDecreasingTransaction.sol\\\";\\n\\ninterface IBalanceDecreasingTransactionVerification {\\n\\n   function verifyBalanceDecreasingTransaction(\\n      BalanceDecreasingTransaction.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x4c23fc95b39a72f3dbf1d53a1cc1a0567f05770c1e1d6cd981b31f8f9ba3b5b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol":{"IConfirmedBlockHeightExistsVerification":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint64","name":"queryWindow","type":"uint64"}],"internalType":"struct ConfirmedBlockHeightExists.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockTimestamp","type":"uint64"},{"internalType":"uint64","name":"numberOfConfirmations","type":"uint64"},{"internalType":"uint64","name":"lowestQueryWindowBlockNumber","type":"uint64"},{"internalType":"uint64","name":"lowestQueryWindowBlockTimestamp","type":"uint64"}],"internalType":"struct ConfirmedBlockHeightExists.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct ConfirmedBlockHeightExists.Response","name":"data","type":"tuple"}],"internalType":"struct ConfirmedBlockHeightExists.Proof","name":"_proof","type":"tuple"}],"name":"verifyConfirmedBlockHeightExists","outputs":[{"internalType":"bool","name":"_proved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"verifyConfirmedBlockHeightExists((bytes32[],(bytes32,bytes32,uint64,uint64,(uint64,uint64),(uint64,uint64,uint64,uint64))))":"5e30ebfb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"queryWindow\",\"type\":\"uint64\"}],\"internalType\":\"struct ConfirmedBlockHeightExists.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"numberOfConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestQueryWindowBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestQueryWindowBlockTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct ConfirmedBlockHeightExists.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct ConfirmedBlockHeightExists.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct ConfirmedBlockHeightExists.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyConfirmedBlockHeightExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_proved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol\":\"IConfirmedBlockHeightExistsVerification\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ConfirmedBlockHeightExists\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion that a block with `blockNumber` is confirmed.\\n * It also provides data to compute the block production rate in the given time range.\\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`.\\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\\n *\\n *\\n *  Current confirmation heights consensus:\\n *\\n *\\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\\n * | ------- | --------- | ----------------------- | ------------ |\\n * | `BTC`   | 0         | 6                       | mediantime   |\\n * | `DOGE`  | 2         | 60                      | mediantime   |\\n * | `XRP`   | 3         | 3                       | close_time   |\\n *\\n *\\n *\\n *\\n * @custom:lut `lowestQueryWindowBlockTimestamp`\\n */\\ninterface ConfirmedBlockHeightExists {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\\n     * @param blockNumber The number of the block the request wants a confirmation of.\\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\\n     */\\n    struct RequestBody {\\n        uint64 blockNumber;\\n        uint64 queryWindow;\\n    }\\n\\n    /**\\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp` and `lowestQueryWindowBlockTimestamp` can be used to compute the average block production time in the specified block range.\\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain. All attestation providers must agree on this number.\\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`.\\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 blockTimestamp;\\n        uint64 numberOfConfirmations;\\n        uint64 lowestQueryWindowBlockNumber;\\n        uint64 lowestQueryWindowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xc0b8563cb674c38c9569021bf662031877311f32c6bb9993b511c60d57fc7fd5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./ConfirmedBlockHeightExists.sol\\\";\\n\\ninterface IConfirmedBlockHeightExistsVerification {\\n\\n   function verifyConfirmedBlockHeightExists(\\n      ConfirmedBlockHeightExists.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x12e36fb4b606598150995483e3fc5badc39f727834403907de61dc4968aa117f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol":{"IEVMTransactionVerification":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"bytes32","name":"transactionHash","type":"bytes32"},{"internalType":"uint16","name":"requiredConfirmations","type":"uint16"},{"internalType":"bool","name":"provideInput","type":"bool"},{"internalType":"bool","name":"listEvents","type":"bool"},{"internalType":"uint32[]","name":"logIndices","type":"uint32[]"}],"internalType":"struct EVMTransaction.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"address","name":"sourceAddress","type":"address"},{"internalType":"bool","name":"isDeployment","type":"bool"},{"internalType":"address","name":"receivingAddress","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"input","type":"bytes"},{"internalType":"uint8","name":"status","type":"uint8"},{"components":[{"internalType":"uint32","name":"logIndex","type":"uint32"},{"internalType":"address","name":"emitterAddress","type":"address"},{"internalType":"bytes32[]","name":"topics","type":"bytes32[]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"removed","type":"bool"}],"internalType":"struct EVMTransaction.Event[]","name":"events","type":"tuple[]"}],"internalType":"struct EVMTransaction.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct EVMTransaction.Response","name":"data","type":"tuple"}],"internalType":"struct EVMTransaction.Proof","name":"_proof","type":"tuple"}],"name":"verifyEVMTransaction","outputs":[{"internalType":"bool","name":"_proved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"verifyEVMTransaction((bytes32[],(bytes32,bytes32,uint64,uint64,(bytes32,uint16,bool,bool,uint32[]),(uint64,uint64,address,bool,address,uint256,bytes,uint8,(uint32,address,bytes32[],bytes,bool)[]))))":"58fbe9e1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requiredConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"provideInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"listEvents\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"logIndices\",\"type\":\"uint32[]\"}],\"internalType\":\"struct EVMTransaction.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct EVMTransaction.Event[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EVMTransaction.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyEVMTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_proved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol\":\"IEVMTransactionVerification\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name EVMTransaction\\n * @custom:id 0x06\\n * @custom:supported ETH, FLR, SGB, testETH, testFLR, testSGB\\n * @author Flare\\n * @notice A relay of a transaction from an EVM chain.\\n * This type is only relevant for EVM-compatible chains.\\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed.\\n * If an indicated event does not exist, the request is rejected.\\n * @custom:lut `timestamp`\\n */\\ninterface EVMTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId  ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for EVM transaction attestation type\\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\\n     * @param transactionHash Hash of the transaction(transactionHash).\\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\\n     * @param provideInput If true, \\\"input\\\" field is included in the response.\\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionHash;\\n        uint16 requiredConfirmations;\\n        bool provideInput;\\n        bool listEvents;\\n        uint32[] logIndices;\\n    }\\n\\n    /**\\n     * @notice Response body for EVM transaction attestation type\\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param timestamp Timestamp of the block in which the transaction is included.\\n     * @param sourceAddress The address (from) that signed the transaction.\\n     * @param isDeployment Indicate whether it is a contract creation transaction.\\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\\n     * @param value The value transferred by the initial transaction in wei.\\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\\n     * @param status Status of the transaction 1 - success, 0 - failure.\\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 timestamp;\\n        address sourceAddress;\\n        bool isDeployment;\\n        address receivingAddress;\\n        uint256 value;\\n        bytes input;\\n        uint8 status;\\n        Event[] events;\\n    }\\n\\n    /**\\n     * @notice Event log record\\n     * @custom:above An `Event` is a struct with the following fields:\\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\\n     * @param logIndex The consecutive number of the event in block.\\n     * @param emitterAddress The address of the contract that emitted the event.\\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\\n     */\\n    struct Event {\\n        uint32 logIndex;\\n        address emitterAddress;\\n        bytes32[] topics;\\n        bytes data;\\n        bool removed;\\n    }\\n}\\n\",\"keccak256\":\"0xd0665e3ac546858a8becbf7f0600fe87b6f003120f1d731759d14c6b5b8ae6d2\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./EVMTransaction.sol\\\";\\n\\ninterface IEVMTransactionVerification {\\n\\n   function verifyEVMTransaction(\\n      EVMTransaction.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0xb0cea88e37fc6f45623aff43ad1d1231259c7b0959262b074e9f94b51721b092\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol":{"IPaymentVerification":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint256","name":"inUtxo","type":"uint256"},{"internalType":"uint256","name":"utxo","type":"uint256"}],"internalType":"struct Payment.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint64","name":"blockTimestamp","type":"uint64"},{"internalType":"bytes32","name":"sourceAddressHash","type":"bytes32"},{"internalType":"bytes32","name":"receivingAddressHash","type":"bytes32"},{"internalType":"bytes32","name":"intendedReceivingAddressHash","type":"bytes32"},{"internalType":"int256","name":"spentAmount","type":"int256"},{"internalType":"int256","name":"intendedSpentAmount","type":"int256"},{"internalType":"int256","name":"receivedAmount","type":"int256"},{"internalType":"int256","name":"intendedReceivedAmount","type":"int256"},{"internalType":"bytes32","name":"standardPaymentReference","type":"bytes32"},{"internalType":"bool","name":"oneToOne","type":"bool"},{"internalType":"uint8","name":"status","type":"uint8"}],"internalType":"struct Payment.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct Payment.Response","name":"data","type":"tuple"}],"internalType":"struct Payment.Proof","name":"_proof","type":"tuple"}],"name":"verifyPayment","outputs":[{"internalType":"bool","name":"_proved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"verifyPayment((bytes32[],(bytes32,bytes32,uint64,uint64,(bytes32,uint256,uint256),(uint64,uint64,bytes32,bytes32,bytes32,int256,int256,int256,int256,bytes32,bool,uint8))))":"8cc386ce"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"inUtxo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utxo\",\"type\":\"uint256\"}],\"internalType\":\"struct Payment.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blockTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddressHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"receivingAddressHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"intendedReceivingAddressHash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"spentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"intendedSpentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"receivedAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"intendedReceivedAmount\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"standardPaymentReference\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"oneToOne\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Payment.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct Payment.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Payment.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_proved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol\":\"IPaymentVerification\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./Payment.sol\\\";\\n\\ninterface IPaymentVerification {\\n\\n   function verifyPayment(\\n      Payment.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x73beb24942b4ca93c02441a6985e37db659368b191cfe9737ea30b0a79634fa6\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name Payment\\n * @custom:id 0x01\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\\n * Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\\n * transaction should be formed to be provable by this attestation type.\\n * The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain.\\n * If the summary is successfully calculated, the response is assembled from the summary.\\n * `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\\n * For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\\n * For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\\n *\\n * If the summary is not successfully calculated, the attestation request is rejected.\\n * @custom:lut `blockTimestamp`\\n */\\ninterface Payment {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for Payment attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param inUtxo For UTXO chains, this is the index of the transaction input with source address. Always 0 for the non-utxo chains.\\n     * @param utxo For UTXO chains, this is the index of the transaction output with receiving address. Always 0 for the non-utxo chains.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        uint256 inUtxo;\\n        uint256 utxo;\\n    }\\n\\n    /**\\n     * @notice Response body for Payment attestation type\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the source address.\\n     * @param receivingAddressHash Standard address hash of the receiving address. The zero 32-byte string if there is no receivingAddress (if `status` is not success).\\n     * @param intendedReceivingAddressHash Standard address hash of the intended receiving address. Relevant if the transaction is unsuccessful.\\n     * @param spentAmount Amount in minimal units spent by the source address.\\n     * @param intendedSpentAmount Amount in minimal units to be spent by the source address. Relevant if the transaction status is unsuccessful.\\n     * @param receivedAmount Amount in minimal units received by the receiving address.\\n     * @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address. Relevant if the transaction is unsuccessful.\\n     * @param standardPaymentReference [Standard payment reference](/specs/attestations/external-chains/standardPaymentReference.md) of the transaction.\\n     * @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\\n     * @param status  [Succes status](/specs/attestations/external-chains/transactions.md#transaction-success-status) of the transaction: 0 - success, 1 - failed by sender's fault,x  2 - failed by receiver's fault.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        bytes32 receivingAddressHash;\\n        bytes32 intendedReceivingAddressHash;\\n        int256 spentAmount;\\n        int256 intendedSpentAmount;\\n        int256 receivedAmount;\\n        int256 intendedReceivedAmount;\\n        bytes32 standardPaymentReference;\\n        bool oneToOne;\\n        uint8 status;\\n    }\\n}\\n\",\"keccak256\":\"0x3127f961b3eb6575ac983b39bef5a61126a4dca50f115dc2056b8e4dfada01b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol":{"IReferencedPaymentNonexistenceVerification":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"uint64","name":"minimalBlockNumber","type":"uint64"},{"internalType":"uint64","name":"deadlineBlockNumber","type":"uint64"},{"internalType":"uint64","name":"deadlineTimestamp","type":"uint64"},{"internalType":"bytes32","name":"destinationAddressHash","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"standardPaymentReference","type":"bytes32"}],"internalType":"struct ReferencedPaymentNonexistence.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"uint64","name":"minimalBlockTimestamp","type":"uint64"},{"internalType":"uint64","name":"firstOverflowBlockNumber","type":"uint64"},{"internalType":"uint64","name":"firstOverflowBlockTimestamp","type":"uint64"}],"internalType":"struct ReferencedPaymentNonexistence.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct ReferencedPaymentNonexistence.Response","name":"data","type":"tuple"}],"internalType":"struct ReferencedPaymentNonexistence.Proof","name":"_proof","type":"tuple"}],"name":"verifyReferencedPaymentNonexistence","outputs":[{"internalType":"bool","name":"_proved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"verifyReferencedPaymentNonexistence((bytes32[],(bytes32,bytes32,uint64,uint64,(uint64,uint64,uint64,bytes32,uint256,bytes32),(uint64,uint64,uint64))))":"be4b1ed8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"minimalBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"destinationAddressHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"standardPaymentReference\",\"type\":\"bytes32\"}],\"internalType\":\"struct ReferencedPaymentNonexistence.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"minimalBlockTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstOverflowBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstOverflowBlockTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct ReferencedPaymentNonexistence.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct ReferencedPaymentNonexistence.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct ReferencedPaymentNonexistence.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyReferencedPaymentNonexistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_proved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol\":\"IReferencedPaymentNonexistenceVerification\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./ReferencedPaymentNonexistence.sol\\\";\\n\\ninterface IReferencedPaymentNonexistenceVerification {\\n\\n   function verifyReferencedPaymentNonexistence(\\n      ReferencedPaymentNonexistence.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x2fd0b205022bdfd99ba765e97c5b69fc87ef0febe53d7e123c8cef24e152a613\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ReferencedPaymentNonexistence\\n * @custom:id 0x04\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.\\n * \\n * \\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed. \\n *\\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected.\\n *\\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\\n * The criteria and timestamp are chain specific.\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n *\\n * Criteria for the transaction:\\n *\\n *\\n * - It is not coinbase transaction.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains).\\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).\\n *\\n * \\n * Timestamp is `mediantime`.\\n\\n * ### XRPL\\n *\\n *\\n *\\n * Criteria for the transaction:\\n * - The transaction is of type payment.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp),\\n * - One of the following is true:\\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.\\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.\\n *\\n * \\n * Timestamp is `close_time` converted to UNIX time.\\n *\\n * @custom:lut `minimalBlockTimestamp`\\n */\\ninterface ReferencedPaymentNonexistence {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ReferencePaymentNonexistence attestation type\\n     * @param minimalBlockNumber The start block of the search range.\\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\\n     * @param deadlineTimestamp The timestamp to be included in the search range.\\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\\n     * @param amount The requested amount in minimal units that had to be payed.\\n     * @param standardPaymentReference The requested standard payment reference.\\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\\n     */\\n    struct RequestBody {\\n        uint64 minimalBlockNumber;\\n        uint64 deadlineBlockNumber;\\n        uint64 deadlineTimestamp;\\n        bytes32 destinationAddressHash;\\n        uint256 amount;\\n        bytes32 standardPaymentReference;\\n    }\\n\\n    /**\\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\\n     * The specified search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 minimalBlockTimestamp;\\n        uint64 firstOverflowBlockNumber;\\n        uint64 firstOverflowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0f61aa13fbc26ceef5f26adb75293023a658c28994acad975e5bd0eda164a563\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol":{"IStateConnector":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"AttestationRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"RoundFinalised","type":"event"},{"inputs":[],"name":"BUFFER_TIMESTAMP_OFFSET","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BUFFER_WINDOW","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastFinalizedRoundId","outputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"merkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"requestAttestations","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"BUFFER_TIMESTAMP_OFFSET()":"4b8a125f","BUFFER_WINDOW()":"f5f59a4a","lastFinalizedRoundId()":"dd862157","merkleRoot(uint256)":"3c70b357","requestAttestations(bytes)":"f64b6fda"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"AttestationRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"RoundFinalised\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUFFER_TIMESTAMP_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUFFER_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"requestAttestations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BUFFER_TIMESTAMP_OFFSET()\":{\"notice\":\"The first buffer timestamp (start time in seconds for converting the timestamp into a round number).\"},\"BUFFER_WINDOW()\":{\"notice\":\"Amount of time a buffer is active before cycling to the next one (round length in seconds for converting the timestamp into a round number).\"},\"lastFinalizedRoundId()\":{\"notice\":\"Last finalized round id.\"},\"merkleRoot(uint256)\":{\"notice\":\"Get Merkle root for the round and check for buffer overflows.\"},\"requestAttestations(bytes)\":{\"notice\":\"The method to call for requesting a new attestation. Emits event `AttestationRequest`, which triggers work by attestation providers.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol\":\"IStateConnector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IStateConnector {\\n    event AttestationRequest(\\n        address sender,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event RoundFinalised(\\n        uint256 indexed roundId,\\n        bytes32 merkleRoot\\n    );\\n\\n    /**\\n     * The method to call for requesting a new attestation.\\n     * Emits event `AttestationRequest`, which triggers work by attestation providers.\\n     */\\n    function requestAttestations(bytes calldata _data) external;\\n\\n    /**\\n     * Last finalized round id.\\n     */\\n    function lastFinalizedRoundId() external view returns (uint256 _roundId);\\n\\n    /**\\n     * Get Merkle root for the round and check for buffer overflows.\\n     */\\n    function merkleRoot(uint256 _roundId) external view returns (bytes32);\\n\\n    /**\\n     * The first buffer timestamp\\n     * (start time in seconds for converting the timestamp into a round number).\\n     */\\n    function BUFFER_TIMESTAMP_OFFSET() external view returns (uint256);\\n\\n    /**\\n     * Amount of time a buffer is active before cycling to the next one\\n     * (round length in seconds for converting the timestamp into a round number).\\n     */\\n    function BUFFER_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x08bc17a7293cb38902d8592cdad00434c44f033c7f735cf49b67d963cf48ed74\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"BUFFER_TIMESTAMP_OFFSET()":{"notice":"The first buffer timestamp (start time in seconds for converting the timestamp into a round number)."},"BUFFER_WINDOW()":{"notice":"Amount of time a buffer is active before cycling to the next one (round length in seconds for converting the timestamp into a round number)."},"lastFinalizedRoundId()":{"notice":"Last finalized round id."},"merkleRoot(uint256)":{"notice":"Get Merkle root for the round and check for buffer overflows."},"requestAttestations(bytes)":{"notice":"The method to call for requesting a new attestation. Emits event `AttestationRequest`, which triggers work by attestation providers."}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol":{"Payment":{"abi":[],"devdoc":{"author":"Flare","custom:id":"0x01","custom:lut":"`blockTimestamp`","custom:name":"Payment","custom:supported":"BTC, DOGE, XRP, testBTC, testDOGE, testXRP","custom:verification":"The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer. If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected. Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain. If the summary is successfully calculated, the response is assembled from the summary. `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data. For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block. For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time. If the summary is not successfully calculated, the attestation request is rejected.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Flare\",\"custom:id\":\"0x01\",\"custom:lut\":\"`blockTimestamp`\",\"custom:name\":\"Payment\",\"custom:supported\":\"BTC, DOGE, XRP, testBTC, testDOGE, testXRP\",\"custom:verification\":\"The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer. If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected. Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain. If the summary is successfully calculated, the response is assembled from the summary. `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data. For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block. For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time. If the summary is not successfully calculated, the attestation request is rejected.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A relay of a transaction on an external chain that is considered a payment in a native currency. Various blockchains support different types of native payments. For each blockchain, it is specified how a payment transaction should be formed to be provable by this attestation type. The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol\":\"Payment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name Payment\\n * @custom:id 0x01\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\\n * Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\\n * transaction should be formed to be provable by this attestation type.\\n * The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain.\\n * If the summary is successfully calculated, the response is assembled from the summary.\\n * `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\\n * For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\\n * For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\\n *\\n * If the summary is not successfully calculated, the attestation request is rejected.\\n * @custom:lut `blockTimestamp`\\n */\\ninterface Payment {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for Payment attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param inUtxo For UTXO chains, this is the index of the transaction input with source address. Always 0 for the non-utxo chains.\\n     * @param utxo For UTXO chains, this is the index of the transaction output with receiving address. Always 0 for the non-utxo chains.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        uint256 inUtxo;\\n        uint256 utxo;\\n    }\\n\\n    /**\\n     * @notice Response body for Payment attestation type\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the source address.\\n     * @param receivingAddressHash Standard address hash of the receiving address. The zero 32-byte string if there is no receivingAddress (if `status` is not success).\\n     * @param intendedReceivingAddressHash Standard address hash of the intended receiving address. Relevant if the transaction is unsuccessful.\\n     * @param spentAmount Amount in minimal units spent by the source address.\\n     * @param intendedSpentAmount Amount in minimal units to be spent by the source address. Relevant if the transaction status is unsuccessful.\\n     * @param receivedAmount Amount in minimal units received by the receiving address.\\n     * @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address. Relevant if the transaction is unsuccessful.\\n     * @param standardPaymentReference [Standard payment reference](/specs/attestations/external-chains/standardPaymentReference.md) of the transaction.\\n     * @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\\n     * @param status  [Succes status](/specs/attestations/external-chains/transactions.md#transaction-success-status) of the transaction: 0 - success, 1 - failed by sender's fault,x  2 - failed by receiver's fault.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        bytes32 receivingAddressHash;\\n        bytes32 intendedReceivingAddressHash;\\n        int256 spentAmount;\\n        int256 intendedSpentAmount;\\n        int256 receivedAmount;\\n        int256 intendedReceivedAmount;\\n        bytes32 standardPaymentReference;\\n        bool oneToOne;\\n        uint8 status;\\n    }\\n}\\n\",\"keccak256\":\"0x3127f961b3eb6575ac983b39bef5a61126a4dca50f115dc2056b8e4dfada01b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A relay of a transaction on an external chain that is considered a payment in a native currency. Various blockchains support different types of native payments. For each blockchain, it is specified how a payment transaction should be formed to be provable by this attestation type. The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.","version":1}}},"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol":{"ReferencedPaymentNonexistence":{"abi":[],"devdoc":{"author":"Flare","custom:id":"0x04","custom:lut":"`minimalBlockTimestamp`","custom:name":"ReferencedPaymentNonexistence","custom:supported":"BTC, DOGE, XRP, testBTC, testDOGE, testXRP","custom:verification":"If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected. If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected. The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`. If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected. The request is confirmed if no transaction meeting the specified criteria is found in the search range. The criteria and timestamp are chain specific. ### UTXO (Bitcoin and Dogecoin) Criteria for the transaction: - It is not coinbase transaction. - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains). - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).  Timestamp is `mediantime`. ### XRPL Criteria for the transaction: - The transaction is of type payment. - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp), - One of the following is true:   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.  Timestamp is `close_time` converted to UNIX time.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Flare\",\"custom:id\":\"0x04\",\"custom:lut\":\"`minimalBlockTimestamp`\",\"custom:name\":\"ReferencedPaymentNonexistence\",\"custom:supported\":\"BTC, DOGE, XRP, testBTC, testDOGE, testXRP\",\"custom:verification\":\"If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected. If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected. The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`. If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected. The request is confirmed if no transaction meeting the specified criteria is found in the search range. The criteria and timestamp are chain specific. ### UTXO (Bitcoin and Dogecoin) Criteria for the transaction: - It is not coinbase transaction. - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains). - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).  Timestamp is `mediantime`. ### XRPL Criteria for the transaction: - The transaction is of type payment. - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp), - One of the following is true:   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.  Timestamp is `close_time` converted to UNIX time.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Assertion that an agreed-upon payment has not been made by a certain deadline. A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.   This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol\":\"ReferencedPaymentNonexistence\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ReferencedPaymentNonexistence\\n * @custom:id 0x04\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.\\n * \\n * \\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed. \\n *\\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected.\\n *\\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\\n * The criteria and timestamp are chain specific.\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n *\\n * Criteria for the transaction:\\n *\\n *\\n * - It is not coinbase transaction.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains).\\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).\\n *\\n * \\n * Timestamp is `mediantime`.\\n\\n * ### XRPL\\n *\\n *\\n *\\n * Criteria for the transaction:\\n * - The transaction is of type payment.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp),\\n * - One of the following is true:\\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.\\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.\\n *\\n * \\n * Timestamp is `close_time` converted to UNIX time.\\n *\\n * @custom:lut `minimalBlockTimestamp`\\n */\\ninterface ReferencedPaymentNonexistence {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ReferencePaymentNonexistence attestation type\\n     * @param minimalBlockNumber The start block of the search range.\\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\\n     * @param deadlineTimestamp The timestamp to be included in the search range.\\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\\n     * @param amount The requested amount in minimal units that had to be payed.\\n     * @param standardPaymentReference The requested standard payment reference.\\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\\n     */\\n    struct RequestBody {\\n        uint64 minimalBlockNumber;\\n        uint64 deadlineBlockNumber;\\n        uint64 deadlineTimestamp;\\n        bytes32 destinationAddressHash;\\n        uint256 amount;\\n        bytes32 standardPaymentReference;\\n    }\\n\\n    /**\\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\\n     * The specified search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 minimalBlockTimestamp;\\n        uint64 firstOverflowBlockNumber;\\n        uint64 firstOverflowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0f61aa13fbc26ceef5f26adb75293023a658c28994acad975e5bd0eda164a563\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Assertion that an agreed-upon payment has not been made by a certain deadline. A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.   This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed. ","version":1}}},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol":{"FlareContractsRegistryLibrary":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122077898dc31f42540cd4820d26678619c47745166974fe0fe352f36838f44ed07064736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x898DC31F42540CD4820D26678619C47745166974FE0FE352 RETURN PUSH9 0x38F44ED07064736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"1632:5051:24:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122077898dc31f42540cd4820d26678619c47745166974fe0fe352f36838f44ed07064736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x898DC31F42540CD4820D26678619C47745166974FE0FE352 RETURN PUSH9 0x38F44ED07064736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"1632:5051:24:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"auxiliaryGetIAddressValidityVerification()":"infinite","auxiliaryGetIBalanceDecreasingTransactionVerification()":"infinite","auxiliaryGetIConfirmedBlockHeightExistsVerification()":"infinite","auxiliaryGetIEVMTransactionVerification()":"infinite","auxiliaryGetIPaymentVerification()":"infinite","auxiliaryGetIReferencedPaymentNonexistenceVerification()":"infinite","getAllContracts()":"infinite","getContractAddressByHash(bytes32)":"infinite","getContractAddressByName(string memory)":"infinite","getContractAddressesByHash(bytes32[] memory)":"infinite","getContractAddressesByName(string memory[] memory)":"infinite","getFtsoManager()":"infinite","getFtsoRegistry()":"infinite","getFtsoRewardManager()":"infinite","getPriceSubmitter()":"infinite","getStateConnector()":"infinite","getVoterWhitelister()":"infinite","getWNat()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol\":\"FlareContractsRegistryLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../../userInterfaces/IFtso.sol\\\";\\nimport \\\"../../../util-contracts/token/token/interface/IIVPToken.sol\\\";\\n\\n\\ninterface IIFtso is IFtso, IFtsoGenesis {\\n\\n    /// function finalizePriceReveal\\n    /// called by reward manager only on correct timing.\\n    /// if price reveal period for epoch x ended. finalize.\\n    /// iterate list of price submissions\\n    /// find weighted median\\n    /// find adjucant 50% of price submissions.\\n    /// Allocate reward for any price submission which is same as a \\\"winning\\\" submission\\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\\n        returns(\\n            address[] memory _eligibleAddresses,\\n            uint256[] memory _natWeights,\\n            uint256 _totalNatWeight\\n        );\\n\\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    // activateFtso will be called by ftso manager once ftso is added \\n    // before this is done, FTSO can't run\\n    function activateFtso(\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    ) external;\\n\\n    function deactivateFtso() external;\\n\\n    // update initial price and timestamp - only if not active\\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\\n\\n    function configureEpochs(\\n        uint256 _maxVotePowerNatThresholdFraction,\\n        uint256 _maxVotePowerAssetThresholdFraction,\\n        uint256 _lowAssetUSDThreshold,\\n        uint256 _highAssetUSDThreshold,\\n        uint256 _highAssetTurnoutThresholdBIPS,\\n        uint256 _lowNatTurnoutThresholdBIPS,\\n        uint256 _elasticBandRewardBIPS,\\n        uint256 _elasticBandWidthPPM,\\n        address[] memory _trustedAddresses\\n    ) external;\\n\\n    function setAsset(IIVPToken _asset) external;\\n\\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\\n\\n    // current vote power block will update per reward epoch. \\n    // the FTSO doesn't have notion of reward epochs.\\n    // reward manager only can set this data. \\n    function setVotePowerBlock(uint256 _blockNumber) external;\\n\\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\\n  \\n    /**\\n     * @notice Returns ftso manager address\\n     */\\n    function ftsoManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the FTSO asset\\n     * @dev Asset is null in case of multi-asset FTSO\\n     */\\n    function getAsset() external view returns (IIVPToken);\\n\\n    /**\\n     * @notice Returns the Asset FTSOs\\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\\n     */\\n    function getAssetFtsos() external view returns (IIFtso[] memory);\\n\\n    /**\\n     * @notice Returns current configuration of epoch state\\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \\n        elastic band (prices within _elasticBandWidthPPM of the median) \\n        and 10000 - elasticBandRewardBIPS to the IQR \\n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\\n     */\\n    function epochsConfiguration() external view \\n        returns (\\n            uint256 _maxVotePowerNatThresholdFraction,\\n            uint256 _maxVotePowerAssetThresholdFraction,\\n            uint256 _lowAssetUSDThreshold,\\n            uint256 _highAssetUSDThreshold,\\n            uint256 _highAssetTurnoutThresholdBIPS,\\n            uint256 _lowNatTurnoutThresholdBIPS,\\n            uint256 _elasticBandRewardBIPS,\\n            uint256 _elasticBandWidthPPM,\\n            address[] memory _trustedAddresses\\n        );\\n\\n    /**\\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\\n     * @return _assets                  the list of Assets that are accounted in vote\\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\\n     * @return _totalVotePowerNat       total native token vote power at block\\n     * @return _totalVotePowerAsset     total combined asset vote power at block\\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\\n     * @return _votePowerBlock          vote powewr block for given epoch\\n     */\\n    function getVoteWeightingParameters() external view \\n        returns (\\n            IIVPToken[] memory _assets,\\n            uint256[] memory _assetMultipliers,\\n            uint256 _totalVotePowerNat,\\n            uint256 _totalVotePowerAsset,\\n            uint256 _assetWeightRatio,\\n            uint256 _votePowerBlock\\n        );\\n\\n    function wNat() external view returns (IIVPToken);\\n}\\n\",\"keccak256\":\"0xd245b3c083496b3539224dc707381db5a5e8a49a5012d370b34514caefa3415d\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n    \\n    /**\\n     * @notice Submits price hash for current epoch - only price submitter\\n     * @param _sender               Sender address\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _hash                 Hashed price and random number\\n     * @notice Emits PriceHashSubmitted event. \\n     */\\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @param _random               Submitted random number\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _random,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffadc43743fb1d76d63438725462cd018e0fb31463802f0c235c0b6409dc97a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoManagerGenesis {\\n\\n    function getCurrentPriceEpochId() external view returns (uint256 _priceEpochId);\\n\\n}\\n\",\"keccak256\":\"0xe3282e14304e70a34f6c7a6ee563267635a6cc6eff09f2459a43946ae3a113ab\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./IFtsoGenesis.sol\\\";\\n\\n\\ninterface IFtsoRegistryGenesis {\\n\\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x4765fdcb22dcc64c015d02c019f0ddce8d8b36111160fd4160a3d94ea4f370a3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    // events\\n    event PriceHashSubmitted(\\n        address indexed submitter, uint256 indexed epochId, bytes32 hash, uint256 timestamp\\n    );\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 random, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1d5ba4d911d3191721469f2f975e64c0d3eed6a54801a7ad8710d830973f03b9\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoManagerGenesis.sol\\\";\\n\\ninterface IFtsoManager is IFtsoManagerGenesis {\\n\\n    event FtsoAdded(IIFtso ftso, bool add);\\n    event FallbackMode(bool fallbackMode);\\n    event FtsoFallbackMode(IIFtso ftso, bool fallbackMode);\\n    event RewardEpochFinalized(uint256 votepowerBlock, uint256 startBlock);\\n    event PriceEpochFinalized(address chosenFtso, uint256 rewardEpochId);\\n    event InitializingCurrentEpochStateForRevealFailed(IIFtso ftso, uint256 epochId);\\n    event FinalizingPriceEpochFailed(IIFtso ftso, uint256 epochId, IFtso.PriceFinalizationType failingType);\\n    event DistributingRewardsFailed(address ftso, uint256 epochId);\\n    event AccruingUnearnedRewardsFailed(uint256 epochId);\\n    event UseGoodRandomSet(bool useGoodRandom, uint256 maxWaitForGoodRandomSeconds);\\n\\n    function active() external view returns (bool);\\n\\n    function getCurrentRewardEpoch() external view returns (uint256);\\n\\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\\n\\n    function getRewardEpochToExpireNext() external view returns (uint256);\\n    \\n    function getCurrentPriceEpochData() external view \\n        returns (\\n            uint256 _priceEpochId,\\n            uint256 _priceEpochStartTimestamp,\\n            uint256 _priceEpochEndTimestamp,\\n            uint256 _priceEpochRevealEndTimestamp,\\n            uint256 _currentTimestamp\\n        );\\n\\n    function getFtsos() external view returns (IIFtso[] memory _ftsos);\\n\\n    function getPriceEpochConfiguration() external view \\n        returns (\\n            uint256 _firstPriceEpochStartTs,\\n            uint256 _priceEpochDurationSeconds,\\n            uint256 _revealEpochDurationSeconds\\n        );\\n\\n    function getRewardEpochConfiguration() external view \\n        returns (\\n            uint256 _firstRewardEpochStartTs,\\n            uint256 _rewardEpochDurationSeconds\\n        );\\n\\n    function getFallbackMode() external view \\n        returns (\\n            bool _fallbackMode,\\n            IIFtso[] memory _ftsos,\\n            bool[] memory _ftsoInFallbackMode\\n        );\\n}\\n\",\"keccak256\":\"0x878d2d19d239d8a91515a304ed2d461f31ae8aeaedef6a7bc92509e6fc4258d0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\\n\\n    struct PriceInfo {\\n        uint256 ftsoIndex;\\n        uint256 price;\\n        uint256 decimals;\\n        uint256 timestamp;\\n    }\\n\\n    function getFtso(uint256 _ftsoIndex) external view returns(IIFtso _activeFtsoAddress);\\n    function getFtsoBySymbol(string memory _symbol) external view returns(IIFtso _activeFtsoAddress);\\n    function getSupportedIndices() external view returns(uint256[] memory _supportedIndices);\\n    function getSupportedSymbols() external view returns(string[] memory _supportedSymbols);\\n    function getSupportedFtsos() external view returns(IIFtso[] memory _ftsos);\\n    function getFtsoIndex(string memory _symbol) external view returns (uint256 _assetIndex);\\n    function getFtsoSymbol(uint256 _ftsoIndex) external view returns (string memory _symbol);\\n    function getCurrentPrice(uint256 _ftsoIndex) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPrice(string memory _symbol) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPriceWithDecimals(uint256 _assetIndex) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n    function getCurrentPriceWithDecimals(string memory _symbol) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n\\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\\n    function getCurrentPricesByIndices(uint256[] memory _indices) external view returns (PriceInfo[] memory);\\n    function getCurrentPricesBySymbols(string[] memory _symbols) external view returns (PriceInfo[] memory);\\n\\n    function getSupportedIndicesAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\\n\\n    function getSupportedSymbolsAndFtsos() external view \\n        returns(string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n\\n    function getSupportedIndicesAndSymbols() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols);\\n\\n    function getSupportedIndicesSymbolsAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x2b818c0cd8f2f1be88da36edd966d2b358c6954e50e0aa653a9d65ef2e9712d7\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtsoRewardManager {\\n\\n    event RewardClaimed(\\n        address indexed dataProvider,\\n        address indexed whoClaimed,\\n        address indexed sentTo,\\n        uint256 rewardEpoch, \\n        uint256 amount\\n    );\\n\\n    event UnearnedRewardsAccrued(\\n        uint256 epochId,\\n        uint256 reward\\n    );\\n\\n    event RewardsDistributed(\\n        address indexed ftso,\\n        uint256 epochId,\\n        address[] addresses,\\n        uint256[] rewards\\n    );\\n\\n    event RewardClaimsEnabled(\\n        uint256 rewardEpochId\\n    ); \\n\\n    event FeePercentageChanged(\\n        address indexed dataProvider,\\n        uint256 value,\\n        uint256 validFromEpoch\\n    );\\n\\n    event RewardClaimsExpired(\\n        uint256 rewardEpochId\\n    );    \\n\\n    event FtsoRewardManagerActivated(address ftsoRewardManager);\\n    event FtsoRewardManagerDeactivated(address ftsoRewardManager);\\n\\n    /**\\n     * @notice Allows a percentage delegator to claim rewards.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Reverts if `msg.sender` is delegating by amount\\n     * @dev Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'.\\n     * @dev Retained for backward compatibility.\\n     * @dev This function is deprecated - use `claim` instead.\\n     */\\n    function claimReward(\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows the sender to claim or wrap rewards for reward owner.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\\n     *   this approval is done by calling `setClaimExecutors`.\\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\\n     *   call, we allow the owner to control the timing of the calls.\\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\\n     * @param _rewardOwner          address of the reward owner\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpoch          last reward epoch to claim for\\n     * @param _wrap                 should reward be wrapped immediately\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Reverts if `msg.sender` is delegating by amount\\n     */\\n    function claim(\\n        address _rewardOwner,\\n        address payable _recipient,\\n        uint256 _rewardEpoch,\\n        bool _wrap\\n    )\\n        external returns (uint256 _rewardAmount);\\n    \\n    /**\\n     * @notice Allows the sender to claim rewards from specified data providers.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Function can only be used for explicit delegations.\\n     * @dev This function is deprecated - use `claimFromDataProviders` instead.\\n     */\\n    function claimRewardFromDataProviders(\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs,\\n        address[] calldata _dataProviders\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows the sender to claim or wrap rewards for reward owner from specified data providers.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\\n     *   this approval is done by calling `setClaimExecutors`.\\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\\n     *   call, we allow the owner to control the timing of the calls.\\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\\n     * @param _rewardOwner          address of the reward owner\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\\n     * @param _wrap                 should reward be wrapped immediately\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Function can only be used for explicit delegations.\\n     */\\n    function claimFromDataProviders(\\n        address _rewardOwner,\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs,\\n        address[] calldata _dataProviders,\\n        bool _wrap\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows batch claiming for the list of '_rewardOwners' and for all unclaimed epochs <= '_rewardEpoch'.\\n     * @notice If reward owner has enabled delegation account, rewards are also claimed for that delegation account and\\n     *   total claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.\\n     * @notice Claimed amount is automatically wrapped.\\n     * @notice Method can be used by reward owner or executor. If executor is registered with fee > 0,\\n     *   then fee is paid to executor for each claimed address from the list.\\n     * @param _rewardOwners         list of reward owners to claim for\\n     * @param _rewardEpoch          last reward epoch to claim for\\n     */\\n    function autoClaim(address[] calldata _rewardOwners, uint256 _rewardEpoch) external;\\n    \\n    /**\\n     * @notice Allows data provider to set (or update last) fee percentage.\\n     * @param _feePercentageBIPS    number representing fee percentage in BIPS\\n     * @return _validFromEpoch      reward epoch number when the setting becomes effective.\\n     */\\n    function setDataProviderFeePercentage(uint256 _feePercentageBIPS)\\n        external returns (uint256 _validFromEpoch);\\n\\n    /**\\n     * @notice Allows reward claiming\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the current fee percentage of `_dataProvider`\\n     * @param _dataProvider         address representing data provider\\n     */\\n    function getDataProviderCurrentFeePercentage(address _dataProvider)\\n        external view returns (uint256 _feePercentageBIPS);\\n\\n    /**\\n     * @notice Returns the fee percentage of `_dataProvider` at `_rewardEpoch`\\n     * @param _dataProvider         address representing data provider\\n     * @param _rewardEpoch          reward epoch number\\n     */\\n    function getDataProviderFeePercentage(\\n        address _dataProvider,\\n        uint256 _rewardEpoch\\n    )\\n        external view\\n        returns (uint256 _feePercentageBIPS);\\n\\n    /**\\n     * @notice Returns the scheduled fee percentage changes of `_dataProvider`\\n     * @param _dataProvider         address representing data provider\\n     * @return _feePercentageBIPS   positional array of fee percentages in BIPS\\n     * @return _validFromEpoch      positional array of block numbers the fee settings are effective from\\n     * @return _fixed               positional array of boolean values indicating if settings are subjected to change\\n     */\\n    function getDataProviderScheduledFeePercentageChanges(address _dataProvider) external view \\n        returns (\\n            uint256[] memory _feePercentageBIPS,\\n            uint256[] memory _validFromEpoch,\\n            bool[] memory _fixed\\n        );\\n\\n    /**\\n     * @notice Returns information on epoch reward\\n     * @param _rewardEpoch          reward epoch number\\n     * @return _totalReward         number representing the total epoch reward\\n     * @return _claimedReward       number representing the amount of total epoch reward that has been claimed\\n     */\\n    function getEpochReward(uint256 _rewardEpoch) external view\\n        returns (uint256 _totalReward, uint256 _claimedReward);\\n\\n    /**\\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch`\\n     * @param _beneficiary          address of reward beneficiary\\n     * @param _rewardEpoch          reward epoch number\\n     * @return _dataProviders       positional array of addresses representing data providers\\n     * @return _rewardAmounts       positional array of reward amounts\\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\\n     * @return _claimable           boolean value indicating if rewards are claimable\\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\\n     */\\n    function getStateOfRewards(\\n        address _beneficiary,\\n        uint256 _rewardEpoch\\n    )\\n        external view \\n        returns (\\n            address[] memory _dataProviders,\\n            uint256[] memory _rewardAmounts,\\n            bool[] memory _claimed,\\n            bool _claimable\\n        );\\n\\n    /**\\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`\\n     * @param _beneficiary          address of reward beneficiary\\n     * @param _rewardEpoch          reward epoch number\\n     * @param _dataProviders        positional array of addresses representing data providers\\n     * @return _rewardAmounts       positional array of reward amounts\\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\\n     * @return _claimable           boolean value indicating if rewards are claimable\\n     */\\n    function getStateOfRewardsFromDataProviders(\\n        address _beneficiary,\\n        uint256 _rewardEpoch,\\n        address[] calldata _dataProviders\\n    )\\n        external view\\n        returns (\\n            uint256[] memory _rewardAmounts,\\n            bool[] memory _claimed,\\n            bool _claimable\\n        );\\n\\n    /**\\n     * @notice Returns the start and the end of the reward epoch range for which the reward is claimable\\n     * @param _startEpochId         the oldest epoch id that allows reward claiming\\n     * @param _endEpochId           the newest epoch id that allows reward claiming\\n     */\\n    function getEpochsWithClaimableRewards() external view \\n        returns (\\n            uint256 _startEpochId,\\n            uint256 _endEpochId\\n        );\\n\\n    /**\\n     * @notice Returns the next claimable reward epoch for '_rewardOwner'.\\n     * @param _rewardOwner          address of the reward owner\\n     */\\n    function nextClaimableRewardEpoch(address _rewardOwner) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the array of claimable epoch ids for which the reward has not yet been claimed\\n     * @param _beneficiary          address of reward beneficiary\\n     * @return _epochIds            array of epoch ids\\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\\n     */\\n    function getEpochsWithUnclaimedRewards(address _beneficiary) external view returns (\\n        uint256[] memory _epochIds\\n    );\\n\\n    /**\\n     * @notice Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`\\n     * @param _rewardEpoch          reward epoch number\\n     * @param _dataProvider         address representing the data provider\\n     * @param _claimer              address representing the claimer\\n     * @return _claimed             boolean indicating if reward has been claimed\\n     * @return _amount              number representing the claimed amount\\n     */\\n    function getClaimedReward(\\n        uint256 _rewardEpoch,\\n        address _dataProvider,\\n        address _claimer\\n    )\\n        external view\\n        returns (\\n            bool _claimed,\\n            uint256 _amount\\n        );\\n\\n    /**\\n     * @notice Return reward epoch that will expire, when new reward epoch will start\\n     * @return Reward epoch id that will expire next\\n     */\\n    function getRewardEpochToExpireNext() external view returns (uint256);\\n\\n    /**\\n     * @notice Return reward epoch vote power block\\n     * @param _rewardEpoch          reward epoch number\\n     */\\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\\n\\n    /**\\n     * @notice Return current reward epoch number\\n     */\\n    function getCurrentRewardEpoch() external view returns (uint256);\\n\\n    /**\\n     * @notice Return initial reward epoch number\\n     */\\n    function getInitialRewardEpoch() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the information on rewards and initial vote power of `_dataProvider` for `_rewardEpoch`\\n     * @param _rewardEpoch                      reward epoch number\\n     * @param _dataProvider                     address representing the data provider\\n     * @return _rewardAmount                    number representing the amount of rewards\\n     * @return _votePowerIgnoringRevocation     number representing the vote power ignoring revocations\\n     */\\n    function getDataProviderPerformanceInfo(\\n        uint256 _rewardEpoch,\\n        address _dataProvider\\n    )\\n        external view \\n        returns (\\n            uint256 _rewardAmount,\\n            uint256 _votePowerIgnoringRevocation\\n        );\\n}\\n\",\"keccak256\":\"0x03ea94df67caf6f0a31f2d24a08e4ecb3703d177ae181ecf3fd2ddd4d59ac102\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IPriceSubmitter {\\n    /**\\n     * Event emitted when price hashes were submitted through PriceSubmitter.\\n     * @param submitter the address of the sender\\n     * @param epochId current price epoch id\\n     * @param ftsos array of ftsos that correspond to the indexes in call\\n     * @param hashes the submitted hashes\\n     * @param timestamp current block timestamp\\n     */\\n    event PriceHashesSubmitted(\\n        address indexed submitter,\\n        uint256 indexed epochId,\\n        IFtsoGenesis[] ftsos,\\n        bytes32[] hashes,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * Event emitted when prices were revealed through PriceSubmitter.\\n     * @param voter the address of the sender\\n     * @param epochId id of the epoch in which the price hash was submitted\\n     * @param ftsos array of ftsos that correspond to the indexes in the call\\n     * @param prices the submitted prices\\n     * @param timestamp current block timestamp\\n     */\\n    event PricesRevealed(\\n        address indexed voter,\\n        uint256 indexed epochId,\\n        IFtsoGenesis[] ftsos,\\n        uint256[] prices,\\n        uint256[] randoms,\\n        uint256 timestamp\\n    );\\n    \\n    /**\\n     * @notice Submits price hashes for current epoch\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _ftsoIndices          List of ftso indices\\n     * @param _hashes               List of hashed price and random number\\n     * @notice Emits PriceHashesSubmitted event\\n     */\\n    function submitPriceHashes(\\n        uint256 _epochId,\\n        uint256[] memory _ftsoIndices,\\n        bytes32[] memory _hashes\\n    ) external;\\n\\n    /**\\n     * @notice Reveals submitted prices during epoch reveal period\\n     * @param _epochId              Id of the epoch in which the price hashes was submitted\\n     * @param _ftsoIndices          List of ftso indices\\n     * @param _prices               List of submitted prices in USD\\n     * @param _randoms              List of submitted random numbers\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PricesRevealed event\\n     */\\n    function revealPrices(\\n        uint256 _epochId,\\n        uint256[] memory _ftsoIndices,\\n        uint256[] memory _prices,\\n        uint256[] memory _randoms\\n    ) external;\\n\\n    /**\\n     * Returns bitmap of all ftso's for which `_voter` is allowed to submit prices/hashes.\\n     * If voter is allowed to vote for ftso at index (see *_FTSO_INDEX), the corrsponding\\n     * bit in the result will be 1.\\n     */    \\n    function voterWhitelistBitmap(address _voter) external view returns (uint256);\\n\\n    function getVoterWhitelister() external view returns (address);\\n    function getFtsoRegistry() external view returns (IFtsoRegistryGenesis);\\n    function getFtsoManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4859d5a14334c7905a7813ac8ee16151f8395611f832ff3bdf741be7f53a13a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVoterWhitelister {\\n    /**\\n     * Raised when an account is removed from the voter whitelist.\\n     */\\n    event VoterWhitelisted(address voter, uint256 ftsoIndex);\\n    \\n    /**\\n     * Raised when an account is removed from the voter whitelist.\\n     */\\n    event VoterRemovedFromWhitelist(address voter, uint256 ftsoIndex);\\n\\n    /**\\n     * Raised when an account is chilled from the voter whitelist.\\n     */\\n    event VoterChilled(address voter, uint256 untilRewardEpoch);\\n\\n    /**\\n     * Request to whitelist `_voter` account to ftso at `_ftsoIndex`. Will revert if vote power too low.\\n     * May be called by any address.\\n     */\\n    function requestWhitelistingVoter(address _voter, uint256 _ftsoIndex) external;\\n\\n    /**\\n     * Request to whitelist `_voter` account to all active ftsos.\\n     * May be called by any address.\\n     * It returns an array of supported ftso indices and success flag per index.\\n     */\\n    function requestFullVoterWhitelisting(\\n        address _voter\\n    ) \\n        external \\n        returns (\\n            uint256[] memory _supportedIndices,\\n            bool[] memory _success\\n        );\\n\\n    /**\\n     * Maximum number of voters in the whitelist for a new FTSO.\\n     */\\n    function defaultMaxVotersForFtso() external view returns (uint256);\\n    \\n    /**\\n     * Maximum number of voters in the whitelist for FTSO at index `_ftsoIndex`.\\n     */\\n    function maxVotersForFtso(uint256 _ftsoIndex) external view returns (uint256);\\n\\n    /**\\n     * Get whitelisted price providers for ftso with `_symbol`\\n     */\\n    function getFtsoWhitelistedPriceProvidersBySymbol(string memory _symbol) external view returns (address[] memory);\\n\\n    /**\\n     * Get whitelisted price providers for ftso at `_ftsoIndex`\\n     */\\n    function getFtsoWhitelistedPriceProviders(uint256 _ftsoIndex) external view returns (address[] memory);\\n\\n    /**\\n     * In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs.\\n     * A voter can whitelist again from a returned reward epoch onwards.\\n     */\\n    function chilledUntilRewardEpoch(address _voter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfaa76e4db7440304e5c1518e24b8c5008cbda90e30d31646f48346be20057669\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name AddressValidity\\n * @custom:id 0x05\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion whether a string represents a valid address on an external chain.\\n * @custom:verification The address is checked against all validity criteria of the chain with `sourceId`.\\n * Indicator of validity is provided.\\n * If the address is valid, its standard form and standard hash are computed.\\n * Validity criteria for each supported chain:\\n * - [BTC](/specs/attestations/external-chains/address-validity/BTC.md)\\n * - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md)\\n * - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\\n * @custom:lut `0xffffffffffffffff` ($2^{64}-1$ in hex)\\n */\\ninterface AddressValidity {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId Id of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for AddressValidity attestation type\\n     * @param addressStr Address to be verified.\\n     */\\n    struct RequestBody {\\n        string addressStr;\\n    }\\n\\n    /**\\n     * @notice Response body for AddressValidity attestation type\\n     * @param isValid Boolean indicator of the address validity.\\n     * @param standardAddress If `isValid`, standard form of the validated address. Otherwise an empty string.\\n     * @param standardAddressHash If `isValid`, standard address hash of the validated address. Otherwise a zero bytes32 string.\\n     */\\n    struct ResponseBody {\\n        bool isValid;\\n        string standardAddress;\\n        bytes32 standardAddressHash;\\n    }\\n}\\n\",\"keccak256\":\"0xd30e59f7b4ef10d6d33e8c85af3157abca3799cb5b2ee5d2d20878567275dd99\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name BalanceDecreasingTransaction\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A detection of a transaction that either decreases the balance for some address or is signed by the source address.\\n * Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate some funds locked by a smart contract on Flare.\\n *\\n * A transaction is considered \\u201cbalance decreasing\\u201d for the address, if the balance after the transaction is lower than before or the address is among the signers of the transaction (even if its balance is greater than before the transaction).\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the source blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the response fields are extracted if the transaction is balance decreasing for the indicated address.\\n * Some of the request and response fields are chain specific as described below.\\n * The fields can be computed with the help of a [balance decreasing summary](/specs/attestations/external-chains/transactions.md#balance-decreasing-summary).\\n *\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n * - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\\n * If the indicated input does not exist or the indicated input does not have the address, the attestation request is rejected.\\n * The `sourceAddress` is the address of the indicated transaction input.\\n * - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of all outputs with `sourceAddress`.\\n * Can be negative.\\n * - `blockTimestamp` is the mediantime of a block.\\n *\\n * ### XRPL\\n *\\n * - `sourceAddressIndicator` is the [standard address hash](/specs/attestations/external-chains/standardAddress.md#standard-address-hash) of the address whose balance has been decreased.\\n * If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance of the address was not lowered in the transaction, the attestation request is rejected.\\n *\\n * - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\\n * Can be negative.\\n * - `blockTimestamp` is the close_time of a ledger converted to unix time.\\n *\\n * @custom:lut `blockTimestamp`\\n */\\ninterface BalanceDecreasingTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered. This is a security measure to prevent a collision of attestation hashes.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for BalanceDecreasingTransaction attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param sourceAddressIndicator The indicator of the address whose balance has been decreased.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        bytes32 sourceAddressIndicator;\\n    }\\n\\n    /**\\n     * @notice Response body for BalanceDecreasingTransaction attestation type.\\n     * @param blockNumber The number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the address indicated by the `sourceAddressIndicator`.\\n     * @param spentAmount Amount spent by the source address in minimal units.\\n     * @param standardPaymentReference Standard payment reference of the transaction.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        int256 spentAmount;\\n        bytes32 standardPaymentReference;\\n    }\\n}\\n\",\"keccak256\":\"0x30df7b48485b7029d406aa6f2b98a6ad3685a2358ce006707870cd848c3b6b28\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ConfirmedBlockHeightExists\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion that a block with `blockNumber` is confirmed.\\n * It also provides data to compute the block production rate in the given time range.\\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`.\\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\\n *\\n *\\n *  Current confirmation heights consensus:\\n *\\n *\\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\\n * | ------- | --------- | ----------------------- | ------------ |\\n * | `BTC`   | 0         | 6                       | mediantime   |\\n * | `DOGE`  | 2         | 60                      | mediantime   |\\n * | `XRP`   | 3         | 3                       | close_time   |\\n *\\n *\\n *\\n *\\n * @custom:lut `lowestQueryWindowBlockTimestamp`\\n */\\ninterface ConfirmedBlockHeightExists {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\\n     * @param blockNumber The number of the block the request wants a confirmation of.\\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\\n     */\\n    struct RequestBody {\\n        uint64 blockNumber;\\n        uint64 queryWindow;\\n    }\\n\\n    /**\\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp` and `lowestQueryWindowBlockTimestamp` can be used to compute the average block production time in the specified block range.\\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain. All attestation providers must agree on this number.\\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`.\\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 blockTimestamp;\\n        uint64 numberOfConfirmations;\\n        uint64 lowestQueryWindowBlockNumber;\\n        uint64 lowestQueryWindowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xc0b8563cb674c38c9569021bf662031877311f32c6bb9993b511c60d57fc7fd5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name EVMTransaction\\n * @custom:id 0x06\\n * @custom:supported ETH, FLR, SGB, testETH, testFLR, testSGB\\n * @author Flare\\n * @notice A relay of a transaction from an EVM chain.\\n * This type is only relevant for EVM-compatible chains.\\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed.\\n * If an indicated event does not exist, the request is rejected.\\n * @custom:lut `timestamp`\\n */\\ninterface EVMTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId  ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for EVM transaction attestation type\\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\\n     * @param transactionHash Hash of the transaction(transactionHash).\\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\\n     * @param provideInput If true, \\\"input\\\" field is included in the response.\\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionHash;\\n        uint16 requiredConfirmations;\\n        bool provideInput;\\n        bool listEvents;\\n        uint32[] logIndices;\\n    }\\n\\n    /**\\n     * @notice Response body for EVM transaction attestation type\\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param timestamp Timestamp of the block in which the transaction is included.\\n     * @param sourceAddress The address (from) that signed the transaction.\\n     * @param isDeployment Indicate whether it is a contract creation transaction.\\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\\n     * @param value The value transferred by the initial transaction in wei.\\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\\n     * @param status Status of the transaction 1 - success, 0 - failure.\\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 timestamp;\\n        address sourceAddress;\\n        bool isDeployment;\\n        address receivingAddress;\\n        uint256 value;\\n        bytes input;\\n        uint8 status;\\n        Event[] events;\\n    }\\n\\n    /**\\n     * @notice Event log record\\n     * @custom:above An `Event` is a struct with the following fields:\\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\\n     * @param logIndex The consecutive number of the event in block.\\n     * @param emitterAddress The address of the contract that emitted the event.\\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\\n     */\\n    struct Event {\\n        uint32 logIndex;\\n        address emitterAddress;\\n        bytes32[] topics;\\n        bytes data;\\n        bool removed;\\n    }\\n}\\n\",\"keccak256\":\"0xd0665e3ac546858a8becbf7f0600fe87b6f003120f1d731759d14c6b5b8ae6d2\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./AddressValidity.sol\\\";\\n\\ninterface IAddressValidityVerification {\\n\\n   function verifyAddressValidity(\\n      AddressValidity.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0xcbe043d55f2fd1e57e12515b2c7cf024d45121303a8d8cdf8822cba40c9e5746\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./BalanceDecreasingTransaction.sol\\\";\\n\\ninterface IBalanceDecreasingTransactionVerification {\\n\\n   function verifyBalanceDecreasingTransaction(\\n      BalanceDecreasingTransaction.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x4c23fc95b39a72f3dbf1d53a1cc1a0567f05770c1e1d6cd981b31f8f9ba3b5b3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./ConfirmedBlockHeightExists.sol\\\";\\n\\ninterface IConfirmedBlockHeightExistsVerification {\\n\\n   function verifyConfirmedBlockHeightExists(\\n      ConfirmedBlockHeightExists.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x12e36fb4b606598150995483e3fc5badc39f727834403907de61dc4968aa117f\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./EVMTransaction.sol\\\";\\n\\ninterface IEVMTransactionVerification {\\n\\n   function verifyEVMTransaction(\\n      EVMTransaction.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0xb0cea88e37fc6f45623aff43ad1d1231259c7b0959262b074e9f94b51721b092\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./Payment.sol\\\";\\n\\ninterface IPaymentVerification {\\n\\n   function verifyPayment(\\n      Payment.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x73beb24942b4ca93c02441a6985e37db659368b191cfe9737ea30b0a79634fa6\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./ReferencedPaymentNonexistence.sol\\\";\\n\\ninterface IReferencedPaymentNonexistenceVerification {\\n\\n   function verifyReferencedPaymentNonexistence(\\n      ReferencedPaymentNonexistence.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x2fd0b205022bdfd99ba765e97c5b69fc87ef0febe53d7e123c8cef24e152a613\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IStateConnector {\\n    event AttestationRequest(\\n        address sender,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event RoundFinalised(\\n        uint256 indexed roundId,\\n        bytes32 merkleRoot\\n    );\\n\\n    /**\\n     * The method to call for requesting a new attestation.\\n     * Emits event `AttestationRequest`, which triggers work by attestation providers.\\n     */\\n    function requestAttestations(bytes calldata _data) external;\\n\\n    /**\\n     * Last finalized round id.\\n     */\\n    function lastFinalizedRoundId() external view returns (uint256 _roundId);\\n\\n    /**\\n     * Get Merkle root for the round and check for buffer overflows.\\n     */\\n    function merkleRoot(uint256 _roundId) external view returns (bytes32);\\n\\n    /**\\n     * The first buffer timestamp\\n     * (start time in seconds for converting the timestamp into a round number).\\n     */\\n    function BUFFER_TIMESTAMP_OFFSET() external view returns (uint256);\\n\\n    /**\\n     * Amount of time a buffer is active before cycling to the next one\\n     * (round length in seconds for converting the timestamp into a round number).\\n     */\\n    function BUFFER_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x08bc17a7293cb38902d8592cdad00434c44f033c7f735cf49b67d963cf48ed74\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name Payment\\n * @custom:id 0x01\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\\n * Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\\n * transaction should be formed to be provable by this attestation type.\\n * The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain.\\n * If the summary is successfully calculated, the response is assembled from the summary.\\n * `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\\n * For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\\n * For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\\n *\\n * If the summary is not successfully calculated, the attestation request is rejected.\\n * @custom:lut `blockTimestamp`\\n */\\ninterface Payment {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for Payment attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param inUtxo For UTXO chains, this is the index of the transaction input with source address. Always 0 for the non-utxo chains.\\n     * @param utxo For UTXO chains, this is the index of the transaction output with receiving address. Always 0 for the non-utxo chains.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        uint256 inUtxo;\\n        uint256 utxo;\\n    }\\n\\n    /**\\n     * @notice Response body for Payment attestation type\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the source address.\\n     * @param receivingAddressHash Standard address hash of the receiving address. The zero 32-byte string if there is no receivingAddress (if `status` is not success).\\n     * @param intendedReceivingAddressHash Standard address hash of the intended receiving address. Relevant if the transaction is unsuccessful.\\n     * @param spentAmount Amount in minimal units spent by the source address.\\n     * @param intendedSpentAmount Amount in minimal units to be spent by the source address. Relevant if the transaction status is unsuccessful.\\n     * @param receivedAmount Amount in minimal units received by the receiving address.\\n     * @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address. Relevant if the transaction is unsuccessful.\\n     * @param standardPaymentReference [Standard payment reference](/specs/attestations/external-chains/standardPaymentReference.md) of the transaction.\\n     * @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\\n     * @param status  [Succes status](/specs/attestations/external-chains/transactions.md#transaction-success-status) of the transaction: 0 - success, 1 - failed by sender's fault,x  2 - failed by receiver's fault.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        bytes32 receivingAddressHash;\\n        bytes32 intendedReceivingAddressHash;\\n        int256 spentAmount;\\n        int256 intendedSpentAmount;\\n        int256 receivedAmount;\\n        int256 intendedReceivedAmount;\\n        bytes32 standardPaymentReference;\\n        bool oneToOne;\\n        uint8 status;\\n    }\\n}\\n\",\"keccak256\":\"0x3127f961b3eb6575ac983b39bef5a61126a4dca50f115dc2056b8e4dfada01b3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ReferencedPaymentNonexistence\\n * @custom:id 0x04\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.\\n * \\n * \\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed. \\n *\\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected.\\n *\\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\\n * The criteria and timestamp are chain specific.\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n *\\n * Criteria for the transaction:\\n *\\n *\\n * - It is not coinbase transaction.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains).\\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).\\n *\\n * \\n * Timestamp is `mediantime`.\\n\\n * ### XRPL\\n *\\n *\\n *\\n * Criteria for the transaction:\\n * - The transaction is of type payment.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp),\\n * - One of the following is true:\\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.\\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.\\n *\\n * \\n * Timestamp is `close_time` converted to UNIX time.\\n *\\n * @custom:lut `minimalBlockTimestamp`\\n */\\ninterface ReferencedPaymentNonexistence {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ReferencePaymentNonexistence attestation type\\n     * @param minimalBlockNumber The start block of the search range.\\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\\n     * @param deadlineTimestamp The timestamp to be included in the search range.\\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\\n     * @param amount The requested amount in minimal units that had to be payed.\\n     * @param standardPaymentReference The requested standard payment reference.\\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\\n     */\\n    struct RequestBody {\\n        uint64 minimalBlockNumber;\\n        uint64 deadlineBlockNumber;\\n        uint64 deadlineTimestamp;\\n        bytes32 destinationAddressHash;\\n        uint256 amount;\\n        bytes32 standardPaymentReference;\\n    }\\n\\n    /**\\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\\n     * The specified search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 minimalBlockTimestamp;\\n        uint64 firstOverflowBlockNumber;\\n        uint64 firstOverflowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0f61aa13fbc26ceef5f26adb75293023a658c28994acad975e5bd0eda164a563\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IFlareContractRegistry} from \\\"./userInterfaces/IFlareContractRegistry.sol\\\";\\n// Auto generated imports\\n// AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\\nimport { IStateConnector } from \\\"../stateConnector/interface/IStateConnector.sol\\\";\\nimport { IPriceSubmitter } from \\\"../ftso/userInterfaces/IPriceSubmitter.sol\\\";\\nimport { IFtsoRewardManager } from \\\"../ftso/userInterfaces/IFtsoRewardManager.sol\\\";\\nimport { IFtsoRegistry } from \\\"../ftso/userInterfaces/IFtsoRegistry.sol\\\";\\nimport { IVoterWhitelister } from \\\"../ftso/userInterfaces/IVoterWhitelister.sol\\\";\\nimport { IFtsoManager } from \\\"../ftso/userInterfaces/IFtsoManager.sol\\\";\\nimport { IWNat } from \\\"../util-contracts/token/userInterfaces/IWNat.sol\\\";\\nimport { IEVMTransactionVerification } from \\\"../stateConnector/interface/IEVMTransactionVerification.sol\\\";\\nimport { IAddressValidityVerification } from \\\"../stateConnector/interface/IAddressValidityVerification.sol\\\";\\nimport { IBalanceDecreasingTransactionVerification } from \\\"../stateConnector/interface/IBalanceDecreasingTransactionVerification.sol\\\";\\nimport { IConfirmedBlockHeightExistsVerification } from \\\"../stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol\\\";\\nimport { IPaymentVerification } from \\\"../stateConnector/interface/IPaymentVerification.sol\\\";\\nimport { IReferencedPaymentNonexistenceVerification } from \\\"../stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol\\\"; \\n// END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\\n\\n// Library is intended to be used inline, so the strings are all memory allocated (instead of calldata)\\nlibrary FlareContractsRegistryLibrary {\\n    address internal constant FLARE_CONTRACT_REGISTRY_ADDRESS =\\n        0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019;\\n\\n    IFlareContractRegistry internal constant FLARE_CONTRACT_REGISTRY =\\n        IFlareContractRegistry(FLARE_CONTRACT_REGISTRY_ADDRESS);\\n\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(\\n        string memory _name\\n    ) internal view returns (address) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByName(_name);\\n    }\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(\\n        bytes32 _nameHash\\n    ) internal view returns (address) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByHash(_nameHash);\\n    }\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(\\n        string[] memory _names\\n    ) internal view returns (address[] memory) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByName(_names);\\n    }\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(\\n        bytes32[] memory _nameHashes\\n    ) internal view returns (address[] memory) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByHash(_nameHashes);\\n    }\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts()\\n        internal\\n        view\\n        returns (string[] memory _names, address[] memory _addresses)\\n    {\\n        return FLARE_CONTRACT_REGISTRY.getAllContracts();\\n    }\\n\\n    // Nice typed getters for all the important contracts\\n    // AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\\n    function getStateConnector() internal view returns(IStateConnector){\\nreturn IStateConnector(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"StateConnector\\\"));\\n\\n}\\n\\n\\nfunction getPriceSubmitter() internal view returns(IPriceSubmitter){\\nreturn IPriceSubmitter(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"PriceSubmitter\\\"));\\n\\n}\\n\\n\\nfunction getFtsoRewardManager() internal view returns(IFtsoRewardManager){\\nreturn IFtsoRewardManager(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"FtsoRewardManager\\\"));\\n\\n}\\n\\n\\nfunction getFtsoRegistry() internal view returns(IFtsoRegistry){\\nreturn IFtsoRegistry(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"FtsoRegistry\\\"));\\n\\n}\\n\\n\\nfunction getVoterWhitelister() internal view returns(IVoterWhitelister){\\nreturn IVoterWhitelister(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"VoterWhitelister\\\"));\\n\\n}\\n\\n\\nfunction getFtsoManager() internal view returns(IFtsoManager){\\nreturn IFtsoManager(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"FtsoManager\\\"));\\n\\n}\\n\\n\\nfunction getWNat() internal view returns(IWNat){\\nreturn IWNat(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"WNat\\\"));\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIEVMTransactionVerification() internal view returns(IEVMTransactionVerification){\\nreturn IEVMTransactionVerification(0xf37AD1278917c04fb291C75a42e61710964Cb57c);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIAddressValidityVerification() internal view returns(IAddressValidityVerification){\\nreturn IAddressValidityVerification(0xd94721da1dD5e222020D256fC073e8Be301ebdCB);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIBalanceDecreasingTransactionVerification() internal view returns(IBalanceDecreasingTransactionVerification){\\nreturn IBalanceDecreasingTransactionVerification(0xeDa84A2eeDfdA53e7c33ef5fDe7B2798B910BF4A);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIConfirmedBlockHeightExistsVerification() internal view returns(IConfirmedBlockHeightExistsVerification){\\nreturn IConfirmedBlockHeightExistsVerification(0x632A984d63f9Ae3C2Eb31e0dc2EeEaE1E282E0da);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIPaymentVerification() internal view returns(IPaymentVerification){\\nreturn IPaymentVerification(0x1ECe6dd08D19c0faf3AB8cEcB146cd5ea5b9b7d9);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIReferencedPaymentNonexistenceVerification() internal view returns(IReferencedPaymentNonexistenceVerification){\\nreturn IReferencedPaymentNonexistenceVerification(0xDfE5926fABA166187B29C33BC95DfDb18bbE52cd);\\n\\n}\\n \\n    // END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\\n}\\n\",\"keccak256\":\"0xa621627ceb67f88d870556f37d2460f213ed40579e628fb03d484782d7312a90\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d338d76bee3c13abb65b25ed5c7394e24dab8b03d34ac4f9fc36588a2d679f4\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Event triggered when an delegator's balance changes.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateVotesChanged(\\n    address indexed delegate, \\n    uint256 previousBalance, \\n    uint256 newBalance\\n    );\\n\\n    /**\\n     * Event triggered when an account delegates to another account.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateChanged(\\n    address indexed delegator, \\n    address indexed fromDelegate, \\n    address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * @notice Get the token that this governance vote power contract belongs to.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xb8947f604f760c89f116bcfbb601f8d00c7be2e7a455f265e07b6f2eac5e5ff0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x065330415186515d281beed2f006e41202d8f16159ceb4d4597c4dd7773b6924\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x037c127ad7ac96c904170b6ad3b1e04adc2ac138fb1a84dde5fb7fe0591bc0d1\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IWNat {\\n    /**\\n     * @notice Deposit native token and mint WNAT ERC20.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Withdraw native token and burn WNAT ERC20.\\n     * @param _amount The amount to withdraw.\\n     */\\n    function withdraw(uint256 _amount) external;\\n    \\n    /**\\n     * @notice Deposit native token from msg.sender and mint WNAT ERC20.\\n     * @param _recipient An address to receive minted WNAT.\\n     */\\n    function depositTo(address _recipient) external payable;\\n    \\n    /**\\n     * @notice Withdraw WNAT from an owner and send NAT to msg.sender given an allowance.\\n     * @param _owner An address spending the native tokens.\\n     * @param _amount The amount to spend.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` must have a balance of at least `_amount`.\\n     * - the caller must have allowance for `_owners`'s tokens of at least\\n     * `_amount`.\\n     */\\n    function withdrawFrom(address _owner, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0eeddaabf31e538f15f9c2e54f4c0c8cebaea41b952cd8a978b01dc1504da903\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\",\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol":{"IICleanable":{"abi":[{"inputs":[],"name":"cleanupBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_cleanerContract","type":"address"}],"name":"setCleanerContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"setCleanupBlockNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cleanupBlockNumberManager","type":"address"}],"name":"setCleanupBlockNumberManager","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"setCleanupBlockNumber(uint256)":{"params":{"_blockNumber":"The new cleanup block number."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"cleanupBlockNumber()":"deea13e7","setCleanerContract(address)":"f6a494af","setCleanupBlockNumber(uint256)":"13de97f5","setCleanupBlockNumberManager(address)":"7f4fcaa9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"cleanupBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerContract\",\"type\":\"address\"}],\"name\":\"setCleanerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"setCleanupBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanupBlockNumberManager\",\"type\":\"address\"}],\"name\":\"setCleanupBlockNumberManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setCleanupBlockNumber(uint256)\":{\"params\":{\"_blockNumber\":\"The new cleanup block number.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cleanupBlockNumber()\":{\"notice\":\"Get the current cleanup block number.\"},\"setCleanerContract(address)\":{\"notice\":\"Set the contract that is allowed to call history cleaning methods.\"},\"setCleanupBlockNumber(uint256)\":{\"notice\":\"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block.\"},\"setCleanupBlockNumberManager(address)\":{\"notice\":\"Set the contract that is allowed to set cleanupBlockNumber. Usually this will be an instance of CleanupBlockNumberManager.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":\"IICleanable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d338d76bee3c13abb65b25ed5c7394e24dab8b03d34ac4f9fc36588a2d679f4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"cleanupBlockNumber()":{"notice":"Get the current cleanup block number."},"setCleanerContract(address)":{"notice":"Set the contract that is allowed to call history cleaning methods."},"setCleanupBlockNumber(uint256)":{"notice":"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block."},"setCleanupBlockNumberManager(address)":{"notice":"Set the contract that is allowed to set cleanupBlockNumber. Usually this will be an instance of CleanupBlockNumberManager."}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol":{"IIGovernanceVotePower":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"fromDelegate","type":"address"},{"indexed":true,"internalType":"address","name":"toDelegate","type":"address"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":false,"internalType":"uint256","name":"previousBalance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newBalance","type":"uint256"}],"name":"DelegateVotesChanged","type":"event"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCleanupBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"getDelegateOfAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"getDelegateOfAtNow","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ownerToken","outputs":[{"internalType":"contract IVPToken","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_cleanerContract","type":"address"}],"name":"setCleanerContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"setCleanupBlockNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"undelegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"updateAtTokenTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"delegate(address)":{"params":{"_to":"The address of the recipient*"}},"getDelegateOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_who":"The address to get delegate's address."},"returns":{"_0":"Delegate's address of `_who` at `_blockNumber`."}},"getDelegateOfAtNow(address)":{"params":{"_who":"The address to get delegate's address."},"returns":{"_0":"Delegate's address of `_who` at the current block number."}},"getVotes(address)":{"params":{"account":"The address to get voting power."},"returns":{"_0":"Vote power of `account` at the current block number."}},"setCleanupBlockNumber(uint256)":{"params":{"_blockNumber":"The new cleanup block number."}},"votePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_who":"The address to get voting power."},"returns":{"_0":"_votePower    Governance vote power of `_who` at `_blockNumber`."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"delegate(address)":"5c19a95c","getCleanupBlockNumber()":"a72ec4b6","getDelegateOfAt(address,uint256)":"3c028e9d","getDelegateOfAtNow(address)":"b3e871ee","getVotes(address)":"9ab24eb0","ownerToken()":"65371883","setCleanerContract(address)":"f6a494af","setCleanupBlockNumber(uint256)":"13de97f5","undelegate()":"92ab89bb","updateAtTokenTransfer(address,address,uint256,uint256,uint256)":"eadb4362","votePowerOfAt(address,uint256)":"92bfe6d8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCleanupBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getDelegateOfAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getDelegateOfAtNow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerToken\",\"outputs\":[{\"internalType\":\"contract IVPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerContract\",\"type\":\"address\"}],\"name\":\"setCleanerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"setCleanupBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateAtTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"delegate(address)\":{\"params\":{\"_to\":\"The address of the recipient*\"}},\"getDelegateOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_who\":\"The address to get delegate's address.\"},\"returns\":{\"_0\":\"Delegate's address of `_who` at `_blockNumber`.\"}},\"getDelegateOfAtNow(address)\":{\"params\":{\"_who\":\"The address to get delegate's address.\"},\"returns\":{\"_0\":\"Delegate's address of `_who` at the current block number.\"}},\"getVotes(address)\":{\"params\":{\"account\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `account` at the current block number.\"}},\"setCleanupBlockNumber(uint256)\":{\"params\":{\"_blockNumber\":\"The new cleanup block number.\"}},\"votePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_who\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"_votePower    Governance vote power of `_who` at `_blockNumber`.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DelegateChanged(address,address,address)\":{\"notice\":\"Event triggered when an account delegates to another account. Note: the event is always emitted from `GovernanceVotePower`.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"Event triggered when an delegator's balance changes. Note: the event is always emitted from `GovernanceVotePower`.\"}},\"kind\":\"user\",\"methods\":{\"delegate(address)\":{\"notice\":\"Delegate all governance vote power of `msg.sender` to `_to`.\"},\"getDelegateOfAt(address,uint256)\":{\"notice\":\"Get the delegate's address of `_who` at block `_blockNumber`\"},\"getDelegateOfAtNow(address)\":{\"notice\":\"Get the delegate's address of `_who` at the current block.\"},\"getVotes(address)\":{\"notice\":\"Get the vote power of `account` at the current block.\"},\"ownerToken()\":{\"notice\":\"Get the token that this governance vote power contract belongs to.\"},\"setCleanerContract(address)\":{\"notice\":\"Set the contract that is allowed to call history cleaning methods.\"},\"setCleanupBlockNumber(uint256)\":{\"notice\":\"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block.\"},\"undelegate()\":{\"notice\":\"Undelegate all governance vote power of `msg.sender``.*\"},\"updateAtTokenTransfer(address,address,uint256,uint256,uint256)\":{\"notice\":\"Update vote powers when tokens are transferred.*\"},\"votePowerOfAt(address,uint256)\":{\"notice\":\"Get the governance vote power of `_who` at block `_blockNumber`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":\"IIGovernanceVotePower\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Event triggered when an delegator's balance changes.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateVotesChanged(\\n    address indexed delegate, \\n    uint256 previousBalance, \\n    uint256 newBalance\\n    );\\n\\n    /**\\n     * Event triggered when an account delegates to another account.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateChanged(\\n    address indexed delegator, \\n    address indexed fromDelegate, \\n    address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * @notice Get the token that this governance vote power contract belongs to.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xb8947f604f760c89f116bcfbb601f8d00c7be2e7a455f265e07b6f2eac5e5ff0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"DelegateChanged(address,address,address)":{"notice":"Event triggered when an account delegates to another account. Note: the event is always emitted from `GovernanceVotePower`."},"DelegateVotesChanged(address,uint256,uint256)":{"notice":"Event triggered when an delegator's balance changes. Note: the event is always emitted from `GovernanceVotePower`."}},"kind":"user","methods":{"delegate(address)":{"notice":"Delegate all governance vote power of `msg.sender` to `_to`."},"getDelegateOfAt(address,uint256)":{"notice":"Get the delegate's address of `_who` at block `_blockNumber`"},"getDelegateOfAtNow(address)":{"notice":"Get the delegate's address of `_who` at the current block."},"getVotes(address)":{"notice":"Get the vote power of `account` at the current block."},"ownerToken()":{"notice":"Get the token that this governance vote power contract belongs to."},"setCleanerContract(address)":{"notice":"Set the contract that is allowed to call history cleaning methods."},"setCleanupBlockNumber(uint256)":{"notice":"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block."},"undelegate()":{"notice":"Undelegate all governance vote power of `msg.sender``.*"},"updateAtTokenTransfer(address,address,uint256,uint256,uint256)":{"notice":"Update vote powers when tokens are transferred.*"},"votePowerOfAt(address,uint256)":{"notice":"Get the governance vote power of `_who` at block `_blockNumber`"}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol":{"IIVPContract":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"priorVotePower","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newVotePower","type":"uint256"}],"name":"Delegate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"delegatee","type":"address"},{"indexed":false,"internalType":"uint256","name":"votePower","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"Revoke","type":"event"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"batchVotePowerOfAt","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cleanupBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_bips","type":"uint256"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"delegateExplicit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"delegatesOf","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"delegatesOfAt","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"delegationModeOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isReplacement","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ownerToken","outputs":[{"internalType":"contract IVPToken","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"revokeDelegationAt","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cleanerContract","type":"address"}],"name":"setCleanerContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"setCleanupBlockNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cleanupBlockNumberManager","type":"address"}],"name":"setCleanupBlockNumberManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"undelegateAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"}],"name":"undelegateAllExplicit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"undelegatedVotePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"undelegatedVotePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"updateAtTokenTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"votePowerFromTo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_balance","type":"uint256"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerFromToAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"votePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerOfAtCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"batchVotePowerOfAt(address[],uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owners":"The list of addresses to fetch vote power of."},"returns":{"_0":"A list of vote powers."}},"delegate(address,address,uint256,uint256)":{"params":{"_balance":"The delegator's current balance","_bips":"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).*","_from":"The address of the delegator","_to":"The address of the recipient"}},"delegateExplicit(address,address,uint256,uint256)":{"params":{"_amount":"An explicit vote power amount to be delegated.   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*","_balance":"The delegator's current balance","_from":"The address of the delegator","_to":"The address of the recipient"}},"delegatesOf(address)":{"params":{"_owner":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegatesOfAt(address,uint256)":{"params":{"_blockNumber":"The block for which we want to know the delegations.","_owner":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegationModeOf(address)":{"params":{"_who":"The address to get delegation mode."},"returns":{"_0":"Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))"}},"revokeDelegationAt(address,address,uint256,uint256)":{"params":{"_balance":"The delegator's current balance","_blockNumber":"The block number at which to revoke delegation.*","_from":"The address of the delegator","_who":"Address of the delegatee"}},"setCleanupBlockNumber(uint256)":{"params":{"_blockNumber":"The new cleanup block number."}},"undelegateAll(address,uint256)":{"params":{"_from":"The address of the delegator*"}},"undelegateAllExplicit(address,address[])":{"params":{"_delegateAddresses":"Explicit delegation does not store delegatees' addresses,    so the caller must supply them.","_from":"The address of the delegator"},"returns":{"_0":"The amount still delegated (in case the list of delegates was incomplete)."}},"undelegatedVotePowerOf(address,uint256)":{"params":{"_balance":"Owner's current balance","_owner":"The address to get undelegated voting power."},"returns":{"_0":"The unallocated vote power of `_owner`"}},"undelegatedVotePowerOfAt(address,uint256,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get undelegated voting power."},"returns":{"_0":"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)"}},"votePowerFromTo(address,address,uint256)":{"params":{"_balance":"The delegator's current balance","_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerFromToAt(address,address,uint256,uint256)":{"params":{"_balance":"The delegator's current balance","_blockNumber":"The block number at which to fetch.","_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerOf(address)":{"params":{"_who":"The address to get voting power."},"returns":{"_0":"Current vote power of `_who`."}},"votePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_who":"The address to get voting power."},"returns":{"_0":"Vote power of `_who` at `_blockNumber`."}},"votePowerOfAtCached(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_who":"The address to get voting power."},"returns":{"_0":"Vote power of `_who` at `_blockNumber`."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchVotePowerOfAt(address[],uint256)":"49e3c7e5","cleanupBlockNumber()":"deea13e7","delegate(address,address,uint256,uint256)":"6230001a","delegateExplicit(address,address,uint256,uint256)":"404d9e82","delegatesOf(address)":"7de5b8ed","delegatesOfAt(address,uint256)":"ed475a79","delegationModeOf(address)":"f6837767","isReplacement()":"aa94d3f2","ownerToken()":"65371883","revokeDelegationAt(address,address,uint256,uint256)":"c7c62fab","setCleanerContract(address)":"f6a494af","setCleanupBlockNumber(uint256)":"13de97f5","setCleanupBlockNumberManager(address)":"7f4fcaa9","undelegateAll(address,uint256)":"05109ecf","undelegateAllExplicit(address,address[])":"0f8b8af7","undelegatedVotePowerOf(address,uint256)":"4a03d556","undelegatedVotePowerOfAt(address,uint256,uint256)":"31503927","updateAtTokenTransfer(address,address,uint256,uint256,uint256)":"eadb4362","votePowerFromTo(address,address,uint256)":"9dc6b9f2","votePowerFromToAt(address,address,uint256,uint256)":"833aca92","votePowerOf(address)":"142d1018","votePowerOfAt(address,uint256)":"92bfe6d8","votePowerOfAtCached(address,uint256)":"e587497e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priorVotePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotePower\",\"type\":\"uint256\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"batchVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanupBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bips\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegateExplicit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"delegatesOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"delegatesOfAt\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"delegationModeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReplacement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerToken\",\"outputs\":[{\"internalType\":\"contract IVPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"revokeDelegationAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerContract\",\"type\":\"address\"}],\"name\":\"setCleanerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"setCleanupBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanupBlockNumberManager\",\"type\":\"address\"}],\"name\":\"setCleanupBlockNumberManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"undelegateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"}],\"name\":\"undelegateAllExplicit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"undelegatedVotePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"undelegatedVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateAtTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"votePowerFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerFromToAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"votePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAtCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchVotePowerOfAt(address[],uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owners\":\"The list of addresses to fetch vote power of.\"},\"returns\":{\"_0\":\"A list of vote powers.\"}},\"delegate(address,address,uint256,uint256)\":{\"params\":{\"_balance\":\"The delegator's current balance\",\"_bips\":\"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).*\",\"_from\":\"The address of the delegator\",\"_to\":\"The address of the recipient\"}},\"delegateExplicit(address,address,uint256,uint256)\":{\"params\":{\"_amount\":\"An explicit vote power amount to be delegated.   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*\",\"_balance\":\"The delegator's current balance\",\"_from\":\"The address of the delegator\",\"_to\":\"The address of the recipient\"}},\"delegatesOf(address)\":{\"params\":{\"_owner\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegatesOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block for which we want to know the delegations.\",\"_owner\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegationModeOf(address)\":{\"params\":{\"_who\":\"The address to get delegation mode.\"},\"returns\":{\"_0\":\"Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\"}},\"revokeDelegationAt(address,address,uint256,uint256)\":{\"params\":{\"_balance\":\"The delegator's current balance\",\"_blockNumber\":\"The block number at which to revoke delegation.*\",\"_from\":\"The address of the delegator\",\"_who\":\"Address of the delegatee\"}},\"setCleanupBlockNumber(uint256)\":{\"params\":{\"_blockNumber\":\"The new cleanup block number.\"}},\"undelegateAll(address,uint256)\":{\"params\":{\"_from\":\"The address of the delegator*\"}},\"undelegateAllExplicit(address,address[])\":{\"params\":{\"_delegateAddresses\":\"Explicit delegation does not store delegatees' addresses,    so the caller must supply them.\",\"_from\":\"The address of the delegator\"},\"returns\":{\"_0\":\"The amount still delegated (in case the list of delegates was incomplete).\"}},\"undelegatedVotePowerOf(address,uint256)\":{\"params\":{\"_balance\":\"Owner's current balance\",\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The unallocated vote power of `_owner`\"}},\"undelegatedVotePowerOfAt(address,uint256,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\"}},\"votePowerFromTo(address,address,uint256)\":{\"params\":{\"_balance\":\"The delegator's current balance\",\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerFromToAt(address,address,uint256,uint256)\":{\"params\":{\"_balance\":\"The delegator's current balance\",\"_blockNumber\":\"The block number at which to fetch.\",\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerOf(address)\":{\"params\":{\"_who\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Current vote power of `_who`.\"}},\"votePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_who\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_who` at `_blockNumber`.\"}},\"votePowerOfAtCached(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_who\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_who` at `_blockNumber`.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Delegate(address,address,uint256,uint256)\":{\"notice\":\"Event triggered when an account delegates or undelegates another account.  Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`. For undelegation, `newVotePower` is 0. Note: the event is always emitted from VPToken's `writeVotePowerContract`.\"},\"Revoke(address,address,uint256,uint256)\":{\"notice\":\"Event triggered only when account `delegator` revokes delegation to `delegatee` for a single block in the past (typically the current vote block). Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\"}},\"kind\":\"user\",\"methods\":{\"batchVotePowerOfAt(address[],uint256)\":{\"notice\":\"Return vote powers for several addresses in a batch.\"},\"cleanupBlockNumber()\":{\"notice\":\"Get the current cleanup block number.\"},\"delegate(address,address,uint256,uint256)\":{\"notice\":\"Delegate `_bips` percentage of voting power to `_to` from `_from`\"},\"delegateExplicit(address,address,uint256,uint256)\":{\"notice\":\"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\"},\"delegatesOf(address)\":{\"notice\":\"Get the vote power delegation `_delegateAddresses`   and `pcts` of an `_owner`. Returned in two separate positional arrays.\"},\"delegatesOfAt(address,uint256)\":{\"notice\":\"Get the vote power delegation `delegationAddresses`   and `pcts` of an `_owner`. Returned in two separate positional arrays.\"},\"delegationModeOf(address)\":{\"notice\":\"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value.\"},\"isReplacement()\":{\"notice\":\"Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block.\"},\"ownerToken()\":{\"notice\":\"The VPToken (or some other contract) that owns this VPContract. All state changing methods may be called only from this address. This is because original msg.sender is sent in `_from` parameter and we must be sure that it cannot be faked by directly calling VPContract. Owner token is also used in case of replacement to recover vote powers from balances.\"},\"revokeDelegationAt(address,address,uint256,uint256)\":{\"notice\":\"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\"},\"setCleanerContract(address)\":{\"notice\":\"Set the contract that is allowed to call history cleaning methods.\"},\"setCleanupBlockNumber(uint256)\":{\"notice\":\"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block.\"},\"setCleanupBlockNumberManager(address)\":{\"notice\":\"Set the contract that is allowed to set cleanupBlockNumber. Usually this will be an instance of CleanupBlockNumberManager.\"},\"undelegateAll(address,uint256)\":{\"notice\":\"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET.\"},\"undelegateAllExplicit(address,address[])\":{\"notice\":\"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET.\"},\"undelegatedVotePowerOf(address,uint256)\":{\"notice\":\"Compute the current undelegated vote power of `_owner`\"},\"undelegatedVotePowerOfAt(address,uint256,uint256)\":{\"notice\":\"Get the undelegated vote power of `_owner` at given block.\"},\"updateAtTokenTransfer(address,address,uint256,uint256,uint256)\":{\"notice\":\"Update vote powers when tokens are transferred. Also update delegated vote powers for percentage delegation and check for enough funds for explicit delegations.*\"},\"votePowerFromTo(address,address,uint256)\":{\"notice\":\"Get current delegated vote power `_from` delegator delegated `_to` delegatee.\"},\"votePowerFromToAt(address,address,uint256,uint256)\":{\"notice\":\"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\"},\"votePowerOf(address)\":{\"notice\":\"Get the current vote power of `_who`.\"},\"votePowerOfAt(address,uint256)\":{\"notice\":\"Get the vote power of `_who` at block `_blockNumber`\"},\"votePowerOfAtCached(address,uint256)\":{\"notice\":\"Get the vote power of `_who` at block `_blockNumber`   Reads/updates cache and upholds revocations.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol\":\"IIVPContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d338d76bee3c13abb65b25ed5c7394e24dab8b03d34ac4f9fc36588a2d679f4\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x065330415186515d281beed2f006e41202d8f16159ceb4d4597c4dd7773b6924\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Delegate(address,address,uint256,uint256)":{"notice":"Event triggered when an account delegates or undelegates another account.  Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`. For undelegation, `newVotePower` is 0. Note: the event is always emitted from VPToken's `writeVotePowerContract`."},"Revoke(address,address,uint256,uint256)":{"notice":"Event triggered only when account `delegator` revokes delegation to `delegatee` for a single block in the past (typically the current vote block). Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`."}},"kind":"user","methods":{"batchVotePowerOfAt(address[],uint256)":{"notice":"Return vote powers for several addresses in a batch."},"cleanupBlockNumber()":{"notice":"Get the current cleanup block number."},"delegate(address,address,uint256,uint256)":{"notice":"Delegate `_bips` percentage of voting power to `_to` from `_from`"},"delegateExplicit(address,address,uint256,uint256)":{"notice":"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`."},"delegatesOf(address)":{"notice":"Get the vote power delegation `_delegateAddresses`   and `pcts` of an `_owner`. Returned in two separate positional arrays."},"delegatesOfAt(address,uint256)":{"notice":"Get the vote power delegation `delegationAddresses`   and `pcts` of an `_owner`. Returned in two separate positional arrays."},"delegationModeOf(address)":{"notice":"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value."},"isReplacement()":{"notice":"Return true if this IIVPContract is configured to be used as a replacement for other contract. It means that vote powers are not necessarily correct at the initialization, therefore every method that reads vote power must check whether it is initialized for that address and block."},"ownerToken()":{"notice":"The VPToken (or some other contract) that owns this VPContract. All state changing methods may be called only from this address. This is because original msg.sender is sent in `_from` parameter and we must be sure that it cannot be faked by directly calling VPContract. Owner token is also used in case of replacement to recover vote powers from balances."},"revokeDelegationAt(address,address,uint256,uint256)":{"notice":"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit."},"setCleanerContract(address)":{"notice":"Set the contract that is allowed to call history cleaning methods."},"setCleanupBlockNumber(uint256)":{"notice":"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block."},"setCleanupBlockNumberManager(address)":{"notice":"Set the contract that is allowed to set cleanupBlockNumber. Usually this will be an instance of CleanupBlockNumberManager."},"undelegateAll(address,uint256)":{"notice":"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET."},"undelegateAllExplicit(address,address[])":{"notice":"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET."},"undelegatedVotePowerOf(address,uint256)":{"notice":"Compute the current undelegated vote power of `_owner`"},"undelegatedVotePowerOfAt(address,uint256,uint256)":{"notice":"Get the undelegated vote power of `_owner` at given block."},"updateAtTokenTransfer(address,address,uint256,uint256,uint256)":{"notice":"Update vote powers when tokens are transferred. Also update delegated vote powers for percentage delegation and check for enough funds for explicit delegations.*"},"votePowerFromTo(address,address,uint256)":{"notice":"Get current delegated vote power `_from` delegator delegated `_to` delegatee."},"votePowerFromToAt(address,address,uint256,uint256)":{"notice":"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`."},"votePowerOf(address)":{"notice":"Get the current vote power of `_who`."},"votePowerOfAt(address,uint256)":{"notice":"Get the vote power of `_who` at block `_blockNumber`"},"votePowerOfAtCached(address,uint256)":{"notice":"Get the vote power of `_who` at block `_blockNumber`   Reads/updates cache and upholds revocations."}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol":{"IIVPToken":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"balanceOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"batchVotePowerOfAt","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cleanupBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_bips","type":"uint256"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"delegateExplicit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"delegatesOf","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"delegatesOfAt","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"delegationModeOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"governanceVotePower","outputs":[{"internalType":"contract IGovernanceVotePower","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"readVotePowerContract","outputs":[{"internalType":"contract IVPContractEvents","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"revokeDelegationAt","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cleanerContract","type":"address"}],"name":"setCleanerContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"setCleanupBlockNumber","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cleanupBlockNumberManager","type":"address"}],"name":"setCleanupBlockNumberManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IIGovernanceVotePower","name":"_governanceVotePower","type":"address"}],"name":"setGovernanceVotePower","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalVotePower","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"totalVotePowerAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"totalVotePowerAtCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"undelegateAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"}],"name":"undelegateAllExplicit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"undelegatedVotePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"undelegatedVotePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"votePowerFromTo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerFromToAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"votePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerOfAtCached","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"writeVotePowerContract","outputs":[{"internalType":"contract IVPContractEvents","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"balanceOfAt(address,uint256)":{"details":"Queries the token balance of `_owner` at a specific `_blockNumber`.","params":{"_blockNumber":"The block number when the balance is queried.","_owner":"The address from which the balance will be retrieved."},"returns":{"_0":"The balance at `_blockNumber`.*"}},"batchVotePowerOfAt(address[],uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owners":"The list of addresses to fetch vote power of."},"returns":{"_0":"A list of vote powers."}},"decimals()":{"details":"Should be compatible with ERC20 method"},"delegate(address,uint256)":{"params":{"_bips":"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*","_to":"The address of the recipient"}},"delegateExplicit(address,uint256)":{"params":{"_amount":"An explicit vote power amount to be delegated.   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*","_to":"The address of the recipient"}},"delegatesOf(address)":{"params":{"_who":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegatesOfAt(address,uint256)":{"params":{"_blockNumber":"The block for which we want to know the delegations.","_who":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegationModeOf(address)":{"params":{"_who":"The address to get delegation mode."},"returns":{"_0":"delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)"}},"name()":{"details":"Should be compatible with ERC20 method"},"revokeDelegationAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to revoke delegation.","_who":"Address of the delegatee"}},"setCleanupBlockNumber(uint256)":{"params":{"_blockNumber":"The new cleanup block number."}},"symbol()":{"details":"Should be compatible with ERC20 method"},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"totalSupplyAt(uint256)":{"params":{"_blockNumber":"The block number when the totalSupply is queried"},"returns":{"_0":"The total amount of tokens at `_blockNumber`*"}},"totalVotePower()":{"returns":{"_0":"The current total vote power (sum of all accounts' vote powers)."}},"totalVotePowerAt(uint256)":{"params":{"_blockNumber":"The block number at which to fetch."},"returns":{"_0":"The total vote power at the block  (sum of all accounts' vote powers)."}},"totalVotePowerAtCached(uint256)":{"params":{"_blockNumber":"The block number at which to fetch."},"returns":{"_0":"The total vote power at the block (sum of all accounts' vote powers)."}},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"undelegateAllExplicit(address[])":{"params":{"_delegateAddresses":"Explicit delegation does not store delegatees' addresses,    so the caller must supply them."},"returns":{"_0":"The amount still delegated (in case the list of delegates was incomplete)."}},"undelegatedVotePowerOf(address)":{"params":{"_owner":"The address to get undelegated voting power."},"returns":{"_0":"The unallocated vote power of `_owner`"}},"undelegatedVotePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get undelegated voting power."},"returns":{"_0":"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)"}},"votePowerFromTo(address,address)":{"params":{"_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerFromToAt(address,address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerOf(address)":{"params":{"_owner":"The address to get voting power."},"returns":{"_0":"Current vote power of `_owner`."}},"votePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get voting power."},"returns":{"_0":"Vote power of `_owner` at `_blockNumber`."}},"votePowerOfAtCached(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get voting power."},"returns":{"_0":"Vote power of `_owner` at `_blockNumber`."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","balanceOfAt(address,uint256)":"4ee2cd7e","batchVotePowerOfAt(address[],uint256)":"49e3c7e5","cleanupBlockNumber()":"deea13e7","decimals()":"313ce567","delegate(address,uint256)":"026e402b","delegateExplicit(address,uint256)":"d06dc3ad","delegatesOf(address)":"7de5b8ed","delegatesOfAt(address,uint256)":"ed475a79","delegationModeOf(address)":"f6837767","governanceVotePower()":"8c2b8ae1","name()":"06fdde03","readVotePowerContract()":"9b3baa0e","revokeDelegationAt(address,uint256)":"bbd6fbf8","setCleanerContract(address)":"f6a494af","setCleanupBlockNumber(uint256)":"13de97f5","setCleanupBlockNumberManager(address)":"7f4fcaa9","setGovernanceVotePower(address)":"9ca2231a","symbol()":"95d89b41","totalSupply()":"18160ddd","totalSupplyAt(uint256)":"981b24d0","totalVotePower()":"f5f3d4f7","totalVotePowerAt(uint256)":"3e5aa26a","totalVotePowerAtCached(uint256)":"caeb942b","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","undelegateAll()":"b302f393","undelegateAllExplicit(address[])":"5d6d11eb","undelegatedVotePowerOf(address)":"d6aa0b77","undelegatedVotePowerOfAt(address,uint256)":"83035a82","votePowerFromTo(address,address)":"be0ca747","votePowerFromToAt(address,address,uint256)":"e64767aa","votePowerOf(address)":"142d1018","votePowerOfAt(address,uint256)":"92bfe6d8","votePowerOfAtCached(address,uint256)":"e587497e","writeVotePowerContract()":"1fec092a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"batchVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanupBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bips\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegateExplicit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"delegatesOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"delegatesOfAt\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"delegationModeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceVotePower\",\"outputs\":[{\"internalType\":\"contract IGovernanceVotePower\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readVotePowerContract\",\"outputs\":[{\"internalType\":\"contract IVPContractEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"revokeDelegationAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerContract\",\"type\":\"address\"}],\"name\":\"setCleanerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"setCleanupBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanupBlockNumberManager\",\"type\":\"address\"}],\"name\":\"setCleanupBlockNumberManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIGovernanceVotePower\",\"name\":\"_governanceVotePower\",\"type\":\"address\"}],\"name\":\"setGovernanceVotePower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalVotePowerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalVotePowerAtCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"}],\"name\":\"undelegateAllExplicit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"undelegatedVotePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"undelegatedVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"votePowerFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerFromToAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"votePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAtCached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"writeVotePowerContract\",\"outputs\":[{\"internalType\":\"contract IVPContractEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the token balance of `_owner` at a specific `_blockNumber`.\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried.\",\"_owner\":\"The address from which the balance will be retrieved.\"},\"returns\":{\"_0\":\"The balance at `_blockNumber`.*\"}},\"batchVotePowerOfAt(address[],uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owners\":\"The list of addresses to fetch vote power of.\"},\"returns\":{\"_0\":\"A list of vote powers.\"}},\"decimals()\":{\"details\":\"Should be compatible with ERC20 method\"},\"delegate(address,uint256)\":{\"params\":{\"_bips\":\"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*\",\"_to\":\"The address of the recipient\"}},\"delegateExplicit(address,uint256)\":{\"params\":{\"_amount\":\"An explicit vote power amount to be delegated.   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*\",\"_to\":\"The address of the recipient\"}},\"delegatesOf(address)\":{\"params\":{\"_who\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegatesOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block for which we want to know the delegations.\",\"_who\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegationModeOf(address)\":{\"params\":{\"_who\":\"The address to get delegation mode.\"},\"returns\":{\"_0\":\"delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\"}},\"name()\":{\"details\":\"Should be compatible with ERC20 method\"},\"revokeDelegationAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to revoke delegation.\",\"_who\":\"Address of the delegatee\"}},\"setCleanupBlockNumber(uint256)\":{\"params\":{\"_blockNumber\":\"The new cleanup block number.\"}},\"symbol()\":{\"details\":\"Should be compatible with ERC20 method\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"totalSupplyAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number when the totalSupply is queried\"},\"returns\":{\"_0\":\"The total amount of tokens at `_blockNumber`*\"}},\"totalVotePower()\":{\"returns\":{\"_0\":\"The current total vote power (sum of all accounts' vote powers).\"}},\"totalVotePowerAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\"},\"returns\":{\"_0\":\"The total vote power at the block  (sum of all accounts' vote powers).\"}},\"totalVotePowerAtCached(uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\"},\"returns\":{\"_0\":\"The total vote power at the block (sum of all accounts' vote powers).\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"undelegateAllExplicit(address[])\":{\"params\":{\"_delegateAddresses\":\"Explicit delegation does not store delegatees' addresses,    so the caller must supply them.\"},\"returns\":{\"_0\":\"The amount still delegated (in case the list of delegates was incomplete).\"}},\"undelegatedVotePowerOf(address)\":{\"params\":{\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The unallocated vote power of `_owner`\"}},\"undelegatedVotePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\"}},\"votePowerFromTo(address,address)\":{\"params\":{\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerFromToAt(address,address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerOf(address)\":{\"params\":{\"_owner\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Current vote power of `_owner`.\"}},\"votePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_owner` at `_blockNumber`.\"}},\"votePowerOfAtCached(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_owner` at `_blockNumber`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchVotePowerOfAt(address[],uint256)\":{\"notice\":\"Return vote powers for several addresses in a batch.\"},\"cleanupBlockNumber()\":{\"notice\":\"Get the current cleanup block number.\"},\"delegate(address,uint256)\":{\"notice\":\"Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\"},\"delegateExplicit(address,uint256)\":{\"notice\":\"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\"},\"delegatesOf(address)\":{\"notice\":\"Get the vote power delegation `delegationAddresses`   and `_bips` of `_who`. Returned in two separate positional arrays.\"},\"delegatesOfAt(address,uint256)\":{\"notice\":\"Get the vote power delegation `delegationAddresses`   and `pcts` of `_who`. Returned in two separate positional arrays.\"},\"delegationModeOf(address)\":{\"notice\":\"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value. Once the delegation mode is set,   it never changes, even if all delegations are removed.\"},\"governanceVotePower()\":{\"notice\":\"When set, allows token owners to participate in governance voting and delegate governance vote power.\"},\"readVotePowerContract()\":{\"notice\":\"Returns VPContract used for readonly operations (view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`readVotePowerContract` is almost always equal to `writeVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before).You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Revoke` only).\"},\"revokeDelegationAt(address,uint256)\":{\"notice\":\"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\"},\"setCleanerContract(address)\":{\"notice\":\"Set the contract that is allowed to call history cleaning methods.\"},\"setCleanupBlockNumber(uint256)\":{\"notice\":\"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block.\"},\"setCleanupBlockNumberManager(address)\":{\"notice\":\"Set the contract that is allowed to set cleanupBlockNumber. Usually this will be an instance of CleanupBlockNumberManager.\"},\"setGovernanceVotePower(address)\":{\"notice\":\"Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power. \"},\"totalSupplyAt(uint256)\":{\"notice\":\"Total amount of tokens at a specific `_blockNumber`.\"},\"totalVotePower()\":{\"notice\":\"Get the current total vote power.\"},\"totalVotePowerAt(uint256)\":{\"notice\":\"Get the total vote power at block `_blockNumber`\"},\"totalVotePowerAtCached(uint256)\":{\"notice\":\"Get the total vote power at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \"},\"undelegateAll()\":{\"notice\":\"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET.*\"},\"undelegateAllExplicit(address[])\":{\"notice\":\"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET.\"},\"undelegatedVotePowerOf(address)\":{\"notice\":\"Compute the current undelegated vote power of `_owner`\"},\"undelegatedVotePowerOfAt(address,uint256)\":{\"notice\":\"Get the undelegated vote power of `_owner` at given block.\"},\"votePowerFromTo(address,address)\":{\"notice\":\"Get current delegated vote power `_from` delegator delegated `_to` delegatee.\"},\"votePowerFromToAt(address,address,uint256)\":{\"notice\":\"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\"},\"votePowerOf(address)\":{\"notice\":\"Get the current vote power of `_owner`.\"},\"votePowerOfAt(address,uint256)\":{\"notice\":\"Get the vote power of `_owner` at block `_blockNumber`\"},\"votePowerOfAtCached(address,uint256)\":{\"notice\":\"Get the vote power of `_owner` at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if _blockNumber is in the past, otherwise reverts.    \"},\"writeVotePowerContract()\":{\"notice\":\"Returns VPContract used for state changing operations (non-view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`writeVotePowerContract` is almost always equal to `readVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before). In the case of upgrade, `writeVotePowerContract` will be replaced first to establish delegations, and after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Delegate` and `Revoke` only).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol\":\"IIVPToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d338d76bee3c13abb65b25ed5c7394e24dab8b03d34ac4f9fc36588a2d679f4\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Event triggered when an delegator's balance changes.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateVotesChanged(\\n    address indexed delegate, \\n    uint256 previousBalance, \\n    uint256 newBalance\\n    );\\n\\n    /**\\n     * Event triggered when an account delegates to another account.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateChanged(\\n    address indexed delegator, \\n    address indexed fromDelegate, \\n    address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * @notice Get the token that this governance vote power contract belongs to.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xb8947f604f760c89f116bcfbb601f8d00c7be2e7a455f265e07b6f2eac5e5ff0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x065330415186515d281beed2f006e41202d8f16159ceb4d4597c4dd7773b6924\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x037c127ad7ac96c904170b6ad3b1e04adc2ac138fb1a84dde5fb7fe0591bc0d1\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchVotePowerOfAt(address[],uint256)":{"notice":"Return vote powers for several addresses in a batch."},"cleanupBlockNumber()":{"notice":"Get the current cleanup block number."},"delegate(address,uint256)":{"notice":"Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`."},"delegateExplicit(address,uint256)":{"notice":"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`."},"delegatesOf(address)":{"notice":"Get the vote power delegation `delegationAddresses`   and `_bips` of `_who`. Returned in two separate positional arrays."},"delegatesOfAt(address,uint256)":{"notice":"Get the vote power delegation `delegationAddresses`   and `pcts` of `_who`. Returned in two separate positional arrays."},"delegationModeOf(address)":{"notice":"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value. Once the delegation mode is set,   it never changes, even if all delegations are removed."},"governanceVotePower()":{"notice":"When set, allows token owners to participate in governance voting and delegate governance vote power."},"readVotePowerContract()":{"notice":"Returns VPContract used for readonly operations (view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`readVotePowerContract` is almost always equal to `writeVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before).You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Revoke` only)."},"revokeDelegationAt(address,uint256)":{"notice":"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit."},"setCleanerContract(address)":{"notice":"Set the contract that is allowed to call history cleaning methods."},"setCleanupBlockNumber(uint256)":{"notice":"Set the cleanup block number. Historic data for the blocks before `cleanupBlockNumber` can be erased, history before that block should never be used since it can be inconsistent. In particular, cleanup block number must be before current vote power block."},"setCleanupBlockNumberManager(address)":{"notice":"Set the contract that is allowed to set cleanupBlockNumber. Usually this will be an instance of CleanupBlockNumberManager."},"setGovernanceVotePower(address)":{"notice":"Sets new governance vote power contract that allows token owners to participate in governance voting and delegate governance vote power. "},"totalSupplyAt(uint256)":{"notice":"Total amount of tokens at a specific `_blockNumber`."},"totalVotePower()":{"notice":"Get the current total vote power."},"totalVotePowerAt(uint256)":{"notice":"Get the total vote power at block `_blockNumber`"},"totalVotePowerAtCached(uint256)":{"notice":"Get the total vote power at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if `_blockNumber` is in the past, otherwise reverts.    "},"undelegateAll()":{"notice":"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET.*"},"undelegateAllExplicit(address[])":{"notice":"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET."},"undelegatedVotePowerOf(address)":{"notice":"Compute the current undelegated vote power of `_owner`"},"undelegatedVotePowerOfAt(address,uint256)":{"notice":"Get the undelegated vote power of `_owner` at given block."},"votePowerFromTo(address,address)":{"notice":"Get current delegated vote power `_from` delegator delegated `_to` delegatee."},"votePowerFromToAt(address,address,uint256)":{"notice":"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`."},"votePowerOf(address)":{"notice":"Get the current vote power of `_owner`."},"votePowerOfAt(address,uint256)":{"notice":"Get the vote power of `_owner` at block `_blockNumber`"},"votePowerOfAtCached(address,uint256)":{"notice":"Get the vote power of `_owner` at block `_blockNumber` using cache.   It tries to read the cached value and if not found, reads the actual value and stores it in cache.   Can only be used if _blockNumber is in the past, otherwise reverts.    "},"writeVotePowerContract()":{"notice":"Returns VPContract used for state changing operations (non-view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`writeVotePowerContract` is almost always equal to `readVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before). In the case of upgrade, `writeVotePowerContract` will be replaced first to establish delegations, and after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Delegate` and `Revoke` only)."}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol":{"IVPContractEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"priorVotePower","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newVotePower","type":"uint256"}],"name":"Delegate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"delegatee","type":"address"},{"indexed":false,"internalType":"uint256","name":"votePower","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"Revoke","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priorVotePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotePower\",\"type\":\"uint256\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"Delegate(address,address,uint256,uint256)\":{\"notice\":\"Event triggered when an account delegates or undelegates another account.  Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`. For undelegation, `newVotePower` is 0. Note: the event is always emitted from VPToken's `writeVotePowerContract`.\"},\"Revoke(address,address,uint256,uint256)\":{\"notice\":\"Event triggered only when account `delegator` revokes delegation to `delegatee` for a single block in the past (typically the current vote block). Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":\"IVPContractEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Delegate(address,address,uint256,uint256)":{"notice":"Event triggered when an account delegates or undelegates another account.  Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`. For undelegation, `newVotePower` is 0. Note: the event is always emitted from VPToken's `writeVotePowerContract`."},"Revoke(address,address,uint256,uint256)":{"notice":"Event triggered only when account `delegator` revokes delegation to `delegatee` for a single block in the past (typically the current vote block). Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`."}},"kind":"user","methods":{},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol":{"IVPToken":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"balanceOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_bips","type":"uint256"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"delegateExplicit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"delegatesOf","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"delegatesOfAt","outputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_bips","type":"uint256[]"},{"internalType":"uint256","name":"_count","type":"uint256"},{"internalType":"uint256","name":"_delegationMode","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"delegationModeOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"governanceVotePower","outputs":[{"internalType":"contract IGovernanceVotePower","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"readVotePowerContract","outputs":[{"internalType":"contract IVPContractEvents","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"revokeDelegationAt","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"totalSupplyAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalVotePower","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"totalVotePowerAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"undelegateAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_delegateAddresses","type":"address[]"}],"name":"undelegateAllExplicit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"undelegatedVotePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"undelegatedVotePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"votePowerFromTo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerFromToAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"votePowerOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"}],"name":"votePowerOfAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"writeVotePowerContract","outputs":[{"internalType":"contract IVPContractEvents","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"balanceOfAt(address,uint256)":{"details":"Queries the token balance of `_owner` at a specific `_blockNumber`.","params":{"_blockNumber":"The block number when the balance is queried.","_owner":"The address from which the balance will be retrieved."},"returns":{"_0":"The balance at `_blockNumber`.*"}},"decimals()":{"details":"Should be compatible with ERC20 method"},"delegate(address,uint256)":{"params":{"_bips":"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*","_to":"The address of the recipient"}},"delegateExplicit(address,uint256)":{"params":{"_amount":"An explicit vote power amount to be delegated.   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*","_to":"The address of the recipient"}},"delegatesOf(address)":{"params":{"_who":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegatesOfAt(address,uint256)":{"params":{"_blockNumber":"The block for which we want to know the delegations.","_who":"The address to get delegations."},"returns":{"_bips":"Positional array of delegation percents specified in basis points (1/100 or 1 percent)","_count":"The number of delegates.","_delegateAddresses":"Positional array of delegation addresses.","_delegationMode":"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2)."}},"delegationModeOf(address)":{"params":{"_who":"The address to get delegation mode."},"returns":{"_0":"delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)"}},"name()":{"details":"Should be compatible with ERC20 method"},"revokeDelegationAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to revoke delegation.","_who":"Address of the delegatee"}},"symbol()":{"details":"Should be compatible with ERC20 method"},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"totalSupplyAt(uint256)":{"params":{"_blockNumber":"The block number when the totalSupply is queried"},"returns":{"_0":"The total amount of tokens at `_blockNumber`*"}},"totalVotePower()":{"returns":{"_0":"The current total vote power (sum of all accounts' vote powers)."}},"totalVotePowerAt(uint256)":{"params":{"_blockNumber":"The block number at which to fetch."},"returns":{"_0":"The total vote power at the block  (sum of all accounts' vote powers)."}},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"undelegateAllExplicit(address[])":{"params":{"_delegateAddresses":"Explicit delegation does not store delegatees' addresses,    so the caller must supply them."},"returns":{"_0":"The amount still delegated (in case the list of delegates was incomplete)."}},"undelegatedVotePowerOf(address)":{"params":{"_owner":"The address to get undelegated voting power."},"returns":{"_0":"The unallocated vote power of `_owner`"}},"undelegatedVotePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get undelegated voting power."},"returns":{"_0":"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)"}},"votePowerFromTo(address,address)":{"params":{"_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerFromToAt(address,address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_from":"Address of delegator","_to":"Address of delegatee"},"returns":{"_0":"The delegated vote power."}},"votePowerOf(address)":{"params":{"_owner":"The address to get voting power."},"returns":{"_0":"Current vote power of `_owner`."}},"votePowerOfAt(address,uint256)":{"params":{"_blockNumber":"The block number at which to fetch.","_owner":"The address to get voting power."},"returns":{"_0":"Vote power of `_owner` at `_blockNumber`."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","balanceOfAt(address,uint256)":"4ee2cd7e","decimals()":"313ce567","delegate(address,uint256)":"026e402b","delegateExplicit(address,uint256)":"d06dc3ad","delegatesOf(address)":"7de5b8ed","delegatesOfAt(address,uint256)":"ed475a79","delegationModeOf(address)":"f6837767","governanceVotePower()":"8c2b8ae1","name()":"06fdde03","readVotePowerContract()":"9b3baa0e","revokeDelegationAt(address,uint256)":"bbd6fbf8","symbol()":"95d89b41","totalSupply()":"18160ddd","totalSupplyAt(uint256)":"981b24d0","totalVotePower()":"f5f3d4f7","totalVotePowerAt(uint256)":"3e5aa26a","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","undelegateAll()":"b302f393","undelegateAllExplicit(address[])":"5d6d11eb","undelegatedVotePowerOf(address)":"d6aa0b77","undelegatedVotePowerOfAt(address,uint256)":"83035a82","votePowerFromTo(address,address)":"be0ca747","votePowerFromToAt(address,address,uint256)":"e64767aa","votePowerOf(address)":"142d1018","votePowerOfAt(address,uint256)":"92bfe6d8","writeVotePowerContract()":"1fec092a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bips\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegateExplicit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"delegatesOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"delegatesOfAt\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bips\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationMode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"delegationModeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceVotePower\",\"outputs\":[{\"internalType\":\"contract IGovernanceVotePower\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readVotePowerContract\",\"outputs\":[{\"internalType\":\"contract IVPContractEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"revokeDelegationAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalVotePowerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegateAddresses\",\"type\":\"address[]\"}],\"name\":\"undelegateAllExplicit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"undelegatedVotePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"undelegatedVotePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"votePowerFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerFromToAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"votePowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"votePowerOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"writeVotePowerContract\",\"outputs\":[{\"internalType\":\"contract IVPContractEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the token balance of `_owner` at a specific `_blockNumber`.\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried.\",\"_owner\":\"The address from which the balance will be retrieved.\"},\"returns\":{\"_0\":\"The balance at `_blockNumber`.*\"}},\"decimals()\":{\"details\":\"Should be compatible with ERC20 method\"},\"delegate(address,uint256)\":{\"params\":{\"_bips\":\"The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*\",\"_to\":\"The address of the recipient\"}},\"delegateExplicit(address,uint256)\":{\"params\":{\"_amount\":\"An explicit vote power amount to be delegated.   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).*\",\"_to\":\"The address of the recipient\"}},\"delegatesOf(address)\":{\"params\":{\"_who\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegatesOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block for which we want to know the delegations.\",\"_who\":\"The address to get delegations.\"},\"returns\":{\"_bips\":\"Positional array of delegation percents specified in basis points (1/100 or 1 percent)\",\"_count\":\"The number of delegates.\",\"_delegateAddresses\":\"Positional array of delegation addresses.\",\"_delegationMode\":\"The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\"}},\"delegationModeOf(address)\":{\"params\":{\"_who\":\"The address to get delegation mode.\"},\"returns\":{\"_0\":\"delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\"}},\"name()\":{\"details\":\"Should be compatible with ERC20 method\"},\"revokeDelegationAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to revoke delegation.\",\"_who\":\"Address of the delegatee\"}},\"symbol()\":{\"details\":\"Should be compatible with ERC20 method\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"totalSupplyAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number when the totalSupply is queried\"},\"returns\":{\"_0\":\"The total amount of tokens at `_blockNumber`*\"}},\"totalVotePower()\":{\"returns\":{\"_0\":\"The current total vote power (sum of all accounts' vote powers).\"}},\"totalVotePowerAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\"},\"returns\":{\"_0\":\"The total vote power at the block  (sum of all accounts' vote powers).\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"undelegateAllExplicit(address[])\":{\"params\":{\"_delegateAddresses\":\"Explicit delegation does not store delegatees' addresses,    so the caller must supply them.\"},\"returns\":{\"_0\":\"The amount still delegated (in case the list of delegates was incomplete).\"}},\"undelegatedVotePowerOf(address)\":{\"params\":{\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The unallocated vote power of `_owner`\"}},\"undelegatedVotePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get undelegated voting power.\"},\"returns\":{\"_0\":\"The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\"}},\"votePowerFromTo(address,address)\":{\"params\":{\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerFromToAt(address,address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_from\":\"Address of delegator\",\"_to\":\"Address of delegatee\"},\"returns\":{\"_0\":\"The delegated vote power.\"}},\"votePowerOf(address)\":{\"params\":{\"_owner\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Current vote power of `_owner`.\"}},\"votePowerOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to fetch.\",\"_owner\":\"The address to get voting power.\"},\"returns\":{\"_0\":\"Vote power of `_owner` at `_blockNumber`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"delegate(address,uint256)\":{\"notice\":\"Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\"},\"delegateExplicit(address,uint256)\":{\"notice\":\"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\"},\"delegatesOf(address)\":{\"notice\":\"Get the vote power delegation `delegationAddresses`   and `_bips` of `_who`. Returned in two separate positional arrays.\"},\"delegatesOfAt(address,uint256)\":{\"notice\":\"Get the vote power delegation `delegationAddresses`   and `pcts` of `_who`. Returned in two separate positional arrays.\"},\"delegationModeOf(address)\":{\"notice\":\"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value. Once the delegation mode is set,   it never changes, even if all delegations are removed.\"},\"governanceVotePower()\":{\"notice\":\"When set, allows token owners to participate in governance voting and delegate governance vote power.\"},\"readVotePowerContract()\":{\"notice\":\"Returns VPContract used for readonly operations (view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`readVotePowerContract` is almost always equal to `writeVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before).You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Revoke` only).\"},\"revokeDelegationAt(address,uint256)\":{\"notice\":\"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Total amount of tokens at a specific `_blockNumber`.\"},\"totalVotePower()\":{\"notice\":\"Get the current total vote power.\"},\"totalVotePowerAt(uint256)\":{\"notice\":\"Get the total vote power at block `_blockNumber`\"},\"undelegateAll()\":{\"notice\":\"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET.*\"},\"undelegateAllExplicit(address[])\":{\"notice\":\"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET.\"},\"undelegatedVotePowerOf(address)\":{\"notice\":\"Compute the current undelegated vote power of `_owner`\"},\"undelegatedVotePowerOfAt(address,uint256)\":{\"notice\":\"Get the undelegated vote power of `_owner` at given block.\"},\"votePowerFromTo(address,address)\":{\"notice\":\"Get current delegated vote power `_from` delegator delegated `_to` delegatee.\"},\"votePowerFromToAt(address,address,uint256)\":{\"notice\":\"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\"},\"votePowerOf(address)\":{\"notice\":\"Get the current vote power of `_owner`.\"},\"votePowerOfAt(address,uint256)\":{\"notice\":\"Get the vote power of `_owner` at block `_blockNumber`\"},\"writeVotePowerContract()\":{\"notice\":\"Returns VPContract used for state changing operations (non-view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`writeVotePowerContract` is almost always equal to `readVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before). In the case of upgrade, `writeVotePowerContract` will be replaced first to establish delegations, and after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Delegate` and `Revoke` only).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":\"IVPToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"delegate(address,uint256)":{"notice":"Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`."},"delegateExplicit(address,uint256)":{"notice":"Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`."},"delegatesOf(address)":{"notice":"Get the vote power delegation `delegationAddresses`   and `_bips` of `_who`. Returned in two separate positional arrays."},"delegatesOfAt(address,uint256)":{"notice":"Get the vote power delegation `delegationAddresses`   and `pcts` of `_who`. Returned in two separate positional arrays."},"delegationModeOf(address)":{"notice":"Get the delegation mode for '_who'. This mode determines whether vote power is  allocated by percentage or by explicit value. Once the delegation mode is set,   it never changes, even if all delegations are removed."},"governanceVotePower()":{"notice":"When set, allows token owners to participate in governance voting and delegate governance vote power."},"readVotePowerContract()":{"notice":"Returns VPContract used for readonly operations (view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`readVotePowerContract` is almost always equal to `writeVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before).You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Revoke` only)."},"revokeDelegationAt(address,uint256)":{"notice":"Revoke all delegation from sender to `_who` at given block.     Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.    Block `_blockNumber` must be in the past.     This method should be used only to prevent rogue delegate voting in the current voting block.    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit."},"totalSupplyAt(uint256)":{"notice":"Total amount of tokens at a specific `_blockNumber`."},"totalVotePower()":{"notice":"Get the current total vote power."},"totalVotePowerAt(uint256)":{"notice":"Get the total vote power at block `_blockNumber`"},"undelegateAll()":{"notice":"Undelegate all voting power for delegates of `msg.sender`    Can only be used with percentage delegation.    Does not reset delegation mode back to NOTSET.*"},"undelegateAllExplicit(address[])":{"notice":"Undelegate all explicit vote power by amount delegates for `msg.sender`.    Can only be used with explicit delegation.    Does not reset delegation mode back to NOTSET."},"undelegatedVotePowerOf(address)":{"notice":"Compute the current undelegated vote power of `_owner`"},"undelegatedVotePowerOfAt(address,uint256)":{"notice":"Get the undelegated vote power of `_owner` at given block."},"votePowerFromTo(address,address)":{"notice":"Get current delegated vote power `_from` delegator delegated `_to` delegatee."},"votePowerFromToAt(address,address,uint256)":{"notice":"Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`."},"votePowerOf(address)":{"notice":"Get the current vote power of `_owner`."},"votePowerOfAt(address,uint256)":{"notice":"Get the vote power of `_owner` at block `_blockNumber`"},"writeVotePowerContract()":{"notice":"Returns VPContract used for state changing operations (non-view methods). The only non-view method that might be called on it is `revokeDelegationAt`.`writeVotePowerContract` is almost always equal to `readVotePowerContract` except during upgrade from one VPContract to a new version (which should happen rarely or never and will be anounced before). In the case of upgrade, `writeVotePowerContract` will be replaced first to establish delegations, and after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.You shouldn't call any methods on VPContract directly, all are exposed via VPToken (and state changing methods are forbidden from direct calls).  This is the reason why this method returns `IVPContractEvents` - it should only be used for listening to events (`Delegate` and `Revoke` only)."}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol":{"IWNat":{"abi":[{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"}],"name":"depositTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"depositTo(address)":{"params":{"_recipient":"An address to receive minted WNAT."}},"withdraw(uint256)":{"params":{"_amount":"The amount to withdraw."}},"withdrawFrom(address,uint256)":{"params":{"_amount":"The amount to spend. Requirements: - `_owner` must have a balance of at least `_amount`. - the caller must have allowance for `_owners`'s tokens of at least `_amount`.","_owner":"An address spending the native tokens."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit()":"d0e30db0","depositTo(address)":"b760faf9","withdraw(uint256)":"2e1a7d4d","withdrawFrom(address,uint256)":"9470b0bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositTo(address)\":{\"params\":{\"_recipient\":\"An address to receive minted WNAT.\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount to withdraw.\"}},\"withdrawFrom(address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend. Requirements: - `_owner` must have a balance of at least `_amount`. - the caller must have allowance for `_owners`'s tokens of at least `_amount`.\",\"_owner\":\"An address spending the native tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Deposit native token and mint WNAT ERC20.\"},\"depositTo(address)\":{\"notice\":\"Deposit native token from msg.sender and mint WNAT ERC20.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw native token and burn WNAT ERC20.\"},\"withdrawFrom(address,uint256)\":{\"notice\":\"Withdraw WNAT from an owner and send NAT to msg.sender given an allowance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol\":\"IWNat\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IWNat {\\n    /**\\n     * @notice Deposit native token and mint WNAT ERC20.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Withdraw native token and burn WNAT ERC20.\\n     * @param _amount The amount to withdraw.\\n     */\\n    function withdraw(uint256 _amount) external;\\n    \\n    /**\\n     * @notice Deposit native token from msg.sender and mint WNAT ERC20.\\n     * @param _recipient An address to receive minted WNAT.\\n     */\\n    function depositTo(address _recipient) external payable;\\n    \\n    /**\\n     * @notice Withdraw WNAT from an owner and send NAT to msg.sender given an allowance.\\n     * @param _owner An address spending the native tokens.\\n     * @param _amount The amount to spend.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` must have a balance of at least `_amount`.\\n     * - the caller must have allowance for `_owners`'s tokens of at least\\n     * `_amount`.\\n     */\\n    function withdrawFrom(address _owner, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0eeddaabf31e538f15f9c2e54f4c0c8cebaea41b952cd8a978b01dc1504da903\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"deposit()":{"notice":"Deposit native token and mint WNAT ERC20."},"depositTo(address)":{"notice":"Deposit native token from msg.sender and mint WNAT ERC20."},"withdraw(uint256)":{"notice":"Withdraw native token and burn WNAT ERC20."},"withdrawFrom(address,uint256)":{"notice":"Withdraw WNAT from an owner and send NAT to msg.sender given an allowance."}},"version":1}}},"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol":{"IFlareContractRegistry":{"abi":[{"inputs":[],"name":"getAllContracts","outputs":[{"internalType":"string[]","name":"_names","type":"string[]"},{"internalType":"address[]","name":"_addresses","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_nameHash","type":"bytes32"}],"name":"getContractAddressByHash","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"getContractAddressByName","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"_nameHashes","type":"bytes32[]"}],"name":"getContractAddressesByHash","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string[]","name":"_names","type":"string[]"}],"name":"getContractAddressesByName","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getContractAddressByHash(bytes32)":{"params":{"_nameHash":"hash of the contract name (keccak256(abi.encode(name))"}},"getContractAddressByName(string)":{"params":{"_name":"name of the contract"}},"getContractAddressesByHash(bytes32[])":{"params":{"_nameHashes":"hashes of the contract names (keccak256(abi.encode(name))"}},"getContractAddressesByName(string[])":{"params":{"_names":"names of the contracts"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getAllContracts()":"18d3ce96","getContractAddressByHash(bytes32)":"159354a2","getContractAddressByName(string)":"82760fca","getContractAddressesByHash(bytes32[])":"5e11e2d1","getContractAddressesByName(string[])":"76d2b1af"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nameHash\",\"type\":\"bytes32\"}],\"name\":\"getContractAddressByHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getContractAddressByName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nameHashes\",\"type\":\"bytes32[]\"}],\"name\":\"getContractAddressesByHash\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"}],\"name\":\"getContractAddressesByName\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getContractAddressByHash(bytes32)\":{\"params\":{\"_nameHash\":\"hash of the contract name (keccak256(abi.encode(name))\"}},\"getContractAddressByName(string)\":{\"params\":{\"_name\":\"name of the contract\"}},\"getContractAddressesByHash(bytes32[])\":{\"params\":{\"_nameHashes\":\"hashes of the contract names (keccak256(abi.encode(name))\"}},\"getContractAddressesByName(string[])\":{\"params\":{\"_names\":\"names of the contracts\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAllContracts()\":{\"notice\":\"Returns all contract names and corresponding addresses\"},\"getContractAddressByHash(bytes32)\":{\"notice\":\"Returns contract address for the given name hash - might be address(0)\"},\"getContractAddressByName(string)\":{\"notice\":\"Returns contract address for the given name - might be address(0)\"},\"getContractAddressesByHash(bytes32[])\":{\"notice\":\"Returns contract addresses for the given name hashes - might be address(0)\"},\"getContractAddressesByName(string[])\":{\"notice\":\"Returns contract addresses for the given names - might be address(0)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol\":\"IFlareContractRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\",\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getAllContracts()":{"notice":"Returns all contract names and corresponding addresses"},"getContractAddressByHash(bytes32)":{"notice":"Returns contract address for the given name hash - might be address(0)"},"getContractAddressByName(string)":{"notice":"Returns contract address for the given name - might be address(0)"},"getContractAddressesByHash(bytes32[])":{"notice":"Returns contract addresses for the given name hashes - might be address(0)"},"getContractAddressesByName(string[])":{"notice":"Returns contract addresses for the given names - might be address(0)"}},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3209,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3212,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3878,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":2716,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":2836,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"IERC1967Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":\"IERC1967Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"IERC1822ProxiableUpgradeable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"ERC1967UpgradeUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3209,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3212,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3191,"contract":"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"IBeaconUpgradeable":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3209,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3212,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3209,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3212,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3191,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3506,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b1e3be4c5b3b88c3c0cf80d5016514a1a8cec2d1065e8003ff831c61f49c62db64736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE3 0xBE 0x4C JUMPDEST EXTCODESIZE DUP9 0xC3 0xC0 0xCF DUP1 0xD5 ADD PUSH6 0x14A1A8CEC2D1 MOD 0x5E DUP1 SUB SELFDESTRUCT DUP4 SHR PUSH2 0xF49C PUSH3 0xDB6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"194:9180:40:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b1e3be4c5b3b88c3c0cf80d5016514a1a8cec2d1065e8003ff831c61f49c62db64736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xE3 0xBE 0x4C JUMPDEST EXTCODESIZE DUP9 0xC3 0xC0 0xCF DUP1 0xD5 ADD PUSH6 0x14A1A8CEC2D1 MOD 0x5E DUP1 SUB SELFDESTRUCT DUP4 SHR PUSH2 0xF49C PUSH3 0xDB6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"194:9180:40:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3209,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3212,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3878,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"StorageSlotUpgradeable":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220d5316a15c9aedf1238b60ad56577f4a69cfc811a6b1f01726800648dfd510cb364736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 BALANCE PUSH11 0x15C9AEDF1238B60AD56577 DELEGATECALL 0xA6 SWAP13 0xFC DUP2 BYTE PUSH12 0x1F01726800648DFD510CB364 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"1420:2696:42:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220d5316a15c9aedf1238b60ad56577f4a69cfc811a6b1f01726800648dfd510cb364736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 BALANCE PUSH11 0x15C9AEDF1238B60AD56577 DELEGATECALL 0xA6 SWAP13 0xFC DUP2 BYTE PUSH12 0x1F01726800648DFD510CB364 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"1420:2696:42:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_string_fromMemory":{"entryPoint":840,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":802,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"6080604052346200031d5762000c64803803806200001d8162000322565b9283398101906040818303126200031d5780516001600160401b03908181116200031d57836200004f91840162000348565b91602093848201518381116200031d576200006b920162000348565b82518281116200021d576003918254916001958684811c9416801562000312575b88851014620002fc578190601f94858111620002a6575b5088908583116001146200023f5760009262000233575b505060001982861b1c191690861b1783555b80519384116200021d5760049586548681811c9116801562000212575b82821014620001fd57838111620001b2575b508092851160011462000144575093839491849260009562000138575b50501b92600019911b1c19161790555b6040516108a99081620003bb8239f35b01519350388062000118565b92919084601f1981168860005285600020956000905b898383106200019757505050106200017c575b50505050811b01905562000128565b01519060f884600019921b161c19169055388080806200016d565b8587015189559097019694850194889350908101906200015a565b87600052816000208480880160051c820192848910620001f3575b0160051c019087905b828110620001e6575050620000fb565b60008155018790620001d6565b92508192620001cd565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90889350601f19831691876000528a6000209260005b8c8282106200028f575050841162000276575b505050811b018355620000cc565b015160001983881b60f8161c1916905538808062000268565b8385015186558c9790950194938401930162000255565b90915085600052886000208580850160051c8201928b8610620002f2575b918a91869594930160051c01915b828110620002e2575050620000a3565b600081558594508a9101620002d2565b92508192620002c4565b634e487b7160e01b600052602260045260246000fd5b93607f16936200008c565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200021d57604052565b919080601f840112156200031d5782516001600160401b0381116200021d576020906200037e601f8201601f1916830162000322565b928184528282870101116200031d5760005b818110620003a657508260009394955001015290565b85810183015184820184015282016200039056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146104ad57508163095ea7b31461048357816318160ddd1461046457816323b872dd1461039a578163313ce5671461037e578163395093511461031757816370a08231146102e057816395d89b41146101c1578163a457c2d71461011957508063a9059cbb146100e95763dd62ed3e1461009e57600080fd5b346100e557806003193601126100e557806020926100ba6105d2565b6100c26105ed565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e557806003193601126100e5576020906101126101086105d2565b6024359033610603565b5160018152f35b905082346101be57826003193601126101be576101346105d2565b918360243592338152600160205281812060018060a01b038616825260205220549082821061016d576020856101128585038733610771565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b8383346100e557816003193601126100e557805190828454600181811c908083169283156102d6575b60209384841081146102c3578388529081156102a75750600114610252575b505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102935750505050830101858080610209565b80548886018301529301928490820161027d565b60ff1916878501525050151560051b8401019050858080610209565b634e487b7160e01b895260228a52602489fd5b91607f16916101ea565b5050346100e55760203660031901126100e55760209181906001600160a01b036103086105d2565b16815280845220549051908152f35b8284346101be57816003193601126101be576103316105d2565b338252600160209081528383206001600160a01b038316845290528282205460243581019290831061036b57602084610112858533610771565b634e487b7160e01b815260118552602490fd5b5050346100e557816003193601126100e5576020905160128152f35b839150346100e55760603660031901126100e5576103b66105d2565b6103be6105ed565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036103f8575b602086610112878787610603565b84821061042157509183916104166020969561011295033383610771565b9193948193506103ea565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100e557816003193601126100e5576020906002549051908152f35b5050346100e557806003193601126100e5576020906101126104a36105d2565b6024359033610771565b8490843461058557826003193601126105855782600354600181811c9080831692831561057b575b60209384841081146102c3578388529081156102a7575060011461052557505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106105675750505050830101858080610209565b805488860183015293019284908201610551565b91607f16916104d5565b8280fd5b6020808252825181830181905290939260005b8281106105be57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161059c565b600435906001600160a01b03821682036105e857565b600080fd5b602435906001600160a01b03821682036105e857565b6001600160a01b0390811691821561071e57169182156106cd5760008281528060205260408120549180831061067957604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561082257169182156107d25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea2646970667358221220e2630a34f9b3480636fa4600fd04be81ae40d88fd21f2d136b8ffbc9804b577564736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x31D JUMPI PUSH3 0xC64 DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH3 0x31D JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH3 0x31D JUMPI DUP4 PUSH3 0x4F SWAP2 DUP5 ADD PUSH3 0x348 JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP4 DUP5 DUP3 ADD MLOAD DUP4 DUP2 GT PUSH3 0x31D JUMPI PUSH3 0x6B SWAP3 ADD PUSH3 0x348 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x1 SWAP6 DUP7 DUP5 DUP2 SHR SWAP5 AND DUP1 ISZERO PUSH3 0x312 JUMPI JUMPDEST DUP9 DUP6 LT EQ PUSH3 0x2FC JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP5 DUP6 DUP2 GT PUSH3 0x2A6 JUMPI JUMPDEST POP DUP9 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH3 0x23F JUMPI PUSH1 0x0 SWAP3 PUSH3 0x233 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP4 SSTORE JUMPDEST DUP1 MLOAD SWAP4 DUP5 GT PUSH3 0x21D JUMPI PUSH1 0x4 SWAP6 DUP7 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x212 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x1FD JUMPI DUP4 DUP2 GT PUSH3 0x1B2 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x144 JUMPI POP SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x138 JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8A9 SWAP1 DUP2 PUSH3 0x3BB DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x118 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND DUP9 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH3 0x197 JUMPI POP POP POP LT PUSH3 0x17C JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x128 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x16D JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x15A JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP5 DUP10 LT PUSH3 0x1F3 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP8 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x1E6 JUMPI POP POP PUSH3 0xFB JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP8 SWAP1 PUSH3 0x1D6 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x1CD JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xE9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xBA JUMP JUMPDEST SWAP1 DUP9 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP8 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0x28F JUMPI POP POP DUP5 GT PUSH3 0x276 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0xCC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x268 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x255 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 PUSH1 0x0 MSTORE DUP9 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH3 0x2F2 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x2E2 JUMPI POP POP PUSH3 0xA3 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH3 0x2D2 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x2C4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH3 0x8C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x21D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH3 0x31D JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x20 SWAP1 PUSH3 0x37E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE DUP3 DUP3 DUP8 ADD ADD GT PUSH3 0x31D JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH3 0x3A6 JUMPI POP DUP3 PUSH1 0x0 SWAP4 SWAP5 SWAP6 POP ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP6 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x390 JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x4AD JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x483 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x464 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x39A JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x37E JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x317 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x2E0 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x119 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE9 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xBA PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x108 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x603 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1BE JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x134 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x16D JUMPI PUSH1 0x20 DUP6 PUSH2 0x112 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2D6 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x252 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x293 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1EA JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x308 PUSH2 0x5D2 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x1BE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x331 PUSH2 0x5D2 JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 MSTORE SWAP1 MSTORE DUP3 DUP3 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD DUP2 ADD SWAP3 SWAP1 DUP4 LT PUSH2 0x36B JUMPI PUSH1 0x20 DUP5 PUSH2 0x112 DUP6 DUP6 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH2 0x3B6 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x5ED JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x3F8 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x112 DUP8 DUP8 DUP8 PUSH2 0x603 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x421 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x416 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x112 SWAP6 SUB CALLER DUP4 PUSH2 0x771 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x4A3 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x771 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x57B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x525 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x567 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x551 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4D5 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x5BE JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x71E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x679 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x822 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 PUSH4 0xA34F9B3 BASEFEE MOD CALLDATASIZE STATICCALL CHAINID STOP REVERT DIV 0xBE DUP2 0xAE BLOCKHASH 0xD8 DUP16 0xD2 0x1F 0x2D SGT PUSH12 0x8FFBC9804B577564736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"1532:11312:43:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:43;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2046:13;1532:11312;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;-1:-1:-1;;;;1532:11312:43;;;;;;;;;;;;;;;;;;;;2069:17;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;-1:-1:-1;1532:11312:43;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;-1:-1:-1;1532:11312:43;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;2069:17;1532:11312;;-1:-1:-1;1532:11312:43;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;-1:-1:-1;1532:11312:43;;-1:-1:-1;1532:11312:43;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;-1:-1:-1;;1532:11312:43;;;-1:-1:-1;;;;;1532:11312:43;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:43;;;;;;;;;;-1:-1:-1;;1532:11312:43;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":1490,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_4782":{"entryPoint":1517,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_string":{"entryPoint":1417,"id":null,"parameterSlots":2,"returnSlots":1},"fun_approve":{"entryPoint":1905,"id":4510,"parameterSlots":3,"returnSlots":0},"fun_transfer":{"entryPoint":1539,"id":4336,"parameterSlots":3,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146104ad57508163095ea7b31461048357816318160ddd1461046457816323b872dd1461039a578163313ce5671461037e578163395093511461031757816370a08231146102e057816395d89b41146101c1578163a457c2d71461011957508063a9059cbb146100e95763dd62ed3e1461009e57600080fd5b346100e557806003193601126100e557806020926100ba6105d2565b6100c26105ed565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e557806003193601126100e5576020906101126101086105d2565b6024359033610603565b5160018152f35b905082346101be57826003193601126101be576101346105d2565b918360243592338152600160205281812060018060a01b038616825260205220549082821061016d576020856101128585038733610771565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b8383346100e557816003193601126100e557805190828454600181811c908083169283156102d6575b60209384841081146102c3578388529081156102a75750600114610252575b505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102935750505050830101858080610209565b80548886018301529301928490820161027d565b60ff1916878501525050151560051b8401019050858080610209565b634e487b7160e01b895260228a52602489fd5b91607f16916101ea565b5050346100e55760203660031901126100e55760209181906001600160a01b036103086105d2565b16815280845220549051908152f35b8284346101be57816003193601126101be576103316105d2565b338252600160209081528383206001600160a01b038316845290528282205460243581019290831061036b57602084610112858533610771565b634e487b7160e01b815260118552602490fd5b5050346100e557816003193601126100e5576020905160128152f35b839150346100e55760603660031901126100e5576103b66105d2565b6103be6105ed565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036103f8575b602086610112878787610603565b84821061042157509183916104166020969561011295033383610771565b9193948193506103ea565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100e557816003193601126100e5576020906002549051908152f35b5050346100e557806003193601126100e5576020906101126104a36105d2565b6024359033610771565b8490843461058557826003193601126105855782600354600181811c9080831692831561057b575b60209384841081146102c3578388529081156102a7575060011461052557505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106105675750505050830101858080610209565b805488860183015293019284908201610551565b91607f16916104d5565b8280fd5b6020808252825181830181905290939260005b8281106105be57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161059c565b600435906001600160a01b03821682036105e857565b600080fd5b602435906001600160a01b03821682036105e857565b6001600160a01b0390811691821561071e57169182156106cd5760008281528060205260408120549180831061067957604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561082257169182156107d25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea2646970667358221220e2630a34f9b3480636fa4600fd04be81ae40d88fd21f2d136b8ffbc9804b577564736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x4AD JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x483 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x464 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x39A JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x37E JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x317 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x2E0 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x119 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE9 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xBA PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x108 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x603 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1BE JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x134 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x16D JUMPI PUSH1 0x20 DUP6 PUSH2 0x112 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2D6 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x252 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x293 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1EA JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x308 PUSH2 0x5D2 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x1BE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x331 PUSH2 0x5D2 JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 MSTORE SWAP1 MSTORE DUP3 DUP3 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD DUP2 ADD SWAP3 SWAP1 DUP4 LT PUSH2 0x36B JUMPI PUSH1 0x20 DUP5 PUSH2 0x112 DUP6 DUP6 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH2 0x3B6 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x5ED JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x3F8 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x112 DUP8 DUP8 DUP8 PUSH2 0x603 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x421 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x416 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x112 SWAP6 SUB CALLER DUP4 PUSH2 0x771 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x4A3 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x771 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x57B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x525 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x567 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x551 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4D5 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x5BE JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x71E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x679 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x822 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 PUSH4 0xA34F9B3 BASEFEE MOD CALLDATASIZE STATICCALL CHAINID STOP REVERT DIV 0xBE DUP2 0xAE BLOCKHASH 0xD8 DUP16 0xD2 0x1F 0x2D SGT PUSH12 0x8FFBC9804B577564736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"1532:11312:43:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:6;1532:11312;;:::i;:::-;;;734:10:49;;3894:6:43;:::i;:::-;1532:11312;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;734:10:49;;1532:11312:43;;;;;;;;;;;;;;;;;;;;;6792:35;;;;1532:11312;;;;6928:34;1532:11312;;;;734:10:49;6928:34:43;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;-1:-1:-1;;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:43;;;;;-1:-1:-1;;1532:11312:43;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:43;;;;;;;;-1:-1:-1;;;;;1532:11312:43;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;734:10:49;1532:11312:43;;;;;;;;;;-1:-1:-1;;;;;1532:11312:43;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;734:10:49;6021:38:43;734:10:49;;;6021:38:43;:::i;1532:11312::-;-1:-1:-1;;;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;3186:2;1532:11312;;;;;;;;;;;;-1:-1:-1;;1532:11312:43;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;734:10:49;1532:11312:43;;;;;;11264:17;;;11244:37;;11240:243;;1532:11312;;5424:6;;;;;;:::i;11240:243::-;11305:26;;;1532:11312;;;;;;11432:25;1532:11312;;;5424:6;1532:11312;;734:10:49;11432:25:43;;:::i;:::-;11240:243;;;;;;;;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3342:12;1532:11312;;;;;;;;;;;;;;;;;;;;;;;4606:6;1532:11312;;:::i;:::-;;;734:10:49;;4606:6:43;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;-1:-1:-1;;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:43;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;1532:11312:43;;;;;;:::o;7456:788::-;-1:-1:-1;;;;;1532:11312:43;;;;7552:18;;1532:11312;;;7630:16;;;1532:11312;;7568:1;1532:11312;;;;;;;;;;7801:21;;;;1532:11312;;;;;8163:26;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26;7456:788::o;1532:11312::-;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;10457:340;-1:-1:-1;;;;;1532:11312:43;;;;10558:19;;1532:11312;;;10636:21;;;1532:11312;;;10758:32;1532:11312;;10575:1;1532:11312;;;;;10575:1;1532:11312;;10575:1;1532:11312;;;;;10575:1;1532:11312;;;;;;;10758:32;10457:340::o;1532:11312::-;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:43;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"443400","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"2788","approve(address,uint256)":"24387","balanceOf(address)":"2563","decimals()":"262","decreaseAllowance(address,uint256)":"26828","increaseAllowance(address,uint256)":"26763","name()":"infinite","symbol()":"infinite","totalSupply()":"2324","transfer(address,uint256)":"50966","transferFrom(address,address,uint256)":"77385"},"internal":{"_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4005,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":4011,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":4013,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":4015,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":4017,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212204aa91ca25ab8fe51bd2c9c4dd243e614afee9689a7afaf9535a2b1edcf362c7064736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xA9 SHR LOG2 GAS 0xB8 INVALID MLOAD 0xBD 0x2C SWAP13 0x4D 0xD2 NUMBER 0xE6 EQ 0xAF 0xEE SWAP7 DUP10 0xA7 0xAF 0xAF SWAP6 CALLDATALOAD LOG2 0xB1 0xED 0xCF CALLDATASIZE 0x2C PUSH17 0x64736F6C63430008110033000000000000 ","sourceMap":"701:6234:47:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212204aa91ca25ab8fe51bd2c9c4dd243e614afee9689a7afaf9535a2b1edcf362c7064736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4A 0xA9 SHR LOG2 GAS 0xB8 INVALID MLOAD 0xBD 0x2C SWAP13 0x4D 0xD2 NUMBER 0xE6 EQ 0xAF 0xEE SWAP7 DUP10 0xA7 0xAF 0xAF SWAP6 CALLDATALOAD LOG2 0xB1 0xED 0xCF CALLDATASIZE 0x2C PUSH17 0x64736F6C63430008110033000000000000 ","sourceMap":"701:6234:47:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220c6cd06e3b07a7571fff946559d926ab4d9c8518b5c2ee59aa516271ec5a0ae1c64736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 0xCD MOD 0xE3 0xB0 PUSH27 0x7571FFF946559D926AB4D9C8518B5C2EE59AA516271EC5A0AE1C64 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"194:9169:48:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220c6cd06e3b07a7571fff946559d926ab4d9c8518b5c2ee59aa516271ec5a0ae1c64736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 0xCD MOD 0xE3 0xB0 PUSH27 0x7571FFF946559D926AB4D9C8518B5C2EE59AA516271EC5A0AE1C64 PUSH20 0x6F6C634300081100330000000000000000000000 ","sourceMap":"194:9169:48:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"ERC165Checker":{"abi":[],"devdoc":{"details":"Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122026f4150071b7fad95c81a5359e4e7d81c72b96ed2c721be958dc01887caa5fce64736f6c63430008110033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 DELEGATECALL ISZERO STOP PUSH18 0xB7FAD95C81A5359E4E7D81C72B96ED2C721B 0xE9 PC 0xDC ADD DUP9 PUSH29 0xAA5FCE64736F6C63430008110033000000000000000000000000000000 ","sourceMap":"449:4621:50:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122026f4150071b7fad95c81a5359e4e7d81c72b96ed2c721be958dc01887caa5fce64736f6c63430008110033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 DELEGATECALL ISZERO STOP PUSH18 0xB7FAD95C81A5359E4E7D81C72B96ED2C721B 0xE9 PC 0xDC ADD DUP9 PUSH29 0xAA5FCE64736F6C63430008110033000000000000000000000000000000 ","sourceMap":"449:4621:50:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"getSupportedInterfaces(address,bytes4[] memory)":"infinite","supportsAllInterfaces(address,bytes4[] memory)":"infinite","supportsERC165(address)":"infinite","supportsERC165InterfaceUnchecked(address,bytes4)":"infinite","supportsInterface(address,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":\"ERC165Checker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/FirelinkBridge.sol":{"FirelinkBridge":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"localToken","type":"address"},{"indexed":true,"internalType":"address","name":"remoteToken","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"ERC20BridgeFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"localToken","type":"address"},{"indexed":true,"internalType":"address","name":"remoteToken","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"ERC20BridgeInitiated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"ETHBridgeFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"ETHBridgeInitiated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"bytes32","name":"transactionHash","type":"bytes32"},{"internalType":"uint16","name":"requiredConfirmations","type":"uint16"},{"internalType":"bool","name":"provideInput","type":"bool"},{"internalType":"bool","name":"listEvents","type":"bool"},{"internalType":"uint32[]","name":"logIndices","type":"uint32[]"}],"internalType":"struct EVMTransaction.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"address","name":"sourceAddress","type":"address"},{"internalType":"bool","name":"isDeployment","type":"bool"},{"internalType":"address","name":"receivingAddress","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"input","type":"bytes"},{"internalType":"uint8","name":"status","type":"uint8"},{"components":[{"internalType":"uint32","name":"logIndex","type":"uint32"},{"internalType":"address","name":"emitterAddress","type":"address"},{"internalType":"bytes32[]","name":"topics","type":"bytes32[]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"removed","type":"bool"}],"internalType":"struct EVMTransaction.Event[]","name":"events","type":"tuple[]"}],"internalType":"struct EVMTransaction.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct EVMTransaction.Response","name":"data","type":"tuple"}],"internalType":"struct EVMTransaction.Proof","name":"_transaction","type":"tuple"}],"name":"FinalizeBridgeAndReleaseEth","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"MESSENGER","outputs":[{"internalType":"contract IFlareRelayer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OTHER_BRIDGE","outputs":[{"internalType":"contract FirelinkBridge","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_localToken","type":"address"},{"internalType":"address","name":"_remoteToken","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint32","name":"_minGasLimit","type":"uint32"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"bridgeERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_localToken","type":"address"},{"internalType":"address","name":"_remoteToken","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint32","name":"_minGasLimit","type":"uint32"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"bridgeERC20To","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_minGasLimit","type":"uint32"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"bridgeETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint32","name":"_minGasLimit","type":"uint32"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"bridgeETHTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"deposits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_localToken","type":"address"},{"internalType":"address","name":"_remoteToken","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"finalizeBridgeERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"finalizeBridgeETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getAllTransactions","outputs":[{"components":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"bytes32","name":"transactionHash","type":"bytes32"},{"internalType":"uint16","name":"requiredConfirmations","type":"uint16"},{"internalType":"bool","name":"provideInput","type":"bool"},{"internalType":"bool","name":"listEvents","type":"bool"},{"internalType":"uint32[]","name":"logIndices","type":"uint32[]"}],"internalType":"struct EVMTransaction.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"address","name":"sourceAddress","type":"address"},{"internalType":"bool","name":"isDeployment","type":"bool"},{"internalType":"address","name":"receivingAddress","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"input","type":"bytes"},{"internalType":"uint8","name":"status","type":"uint8"},{"components":[{"internalType":"uint32","name":"logIndex","type":"uint32"},{"internalType":"address","name":"emitterAddress","type":"address"},{"internalType":"bytes32[]","name":"topics","type":"bytes32[]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"removed","type":"bool"}],"internalType":"struct EVMTransaction.Event[]","name":"events","type":"tuple[]"}],"internalType":"struct EVMTransaction.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct EVMTransaction.Response","name":"data","type":"tuple"}],"internalType":"struct EVMTransaction.Proof","name":"originalTransaction","type":"tuple"},{"internalType":"uint256","name":"eventNumber","type":"uint256"},{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct FirelinkBridge.EventInfo[]","name":"eventInfo","type":"tuple[]"}],"internalType":"struct FirelinkBridge.TransactionInfo[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTransactionCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"},{"internalType":"address payable","name":"_messenger","type":"address"},{"internalType":"address payable","name":"_otherBridge","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"bytes32","name":"transactionHash","type":"bytes32"},{"internalType":"uint16","name":"requiredConfirmations","type":"uint16"},{"internalType":"bool","name":"provideInput","type":"bool"},{"internalType":"bool","name":"listEvents","type":"bool"},{"internalType":"uint32[]","name":"logIndices","type":"uint32[]"}],"internalType":"struct EVMTransaction.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"address","name":"sourceAddress","type":"address"},{"internalType":"bool","name":"isDeployment","type":"bool"},{"internalType":"address","name":"receivingAddress","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"input","type":"bytes"},{"internalType":"uint8","name":"status","type":"uint8"},{"components":[{"internalType":"uint32","name":"logIndex","type":"uint32"},{"internalType":"address","name":"emitterAddress","type":"address"},{"internalType":"bytes32[]","name":"topics","type":"bytes32[]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"removed","type":"bool"}],"internalType":"struct EVMTransaction.Event[]","name":"events","type":"tuple[]"}],"internalType":"struct EVMTransaction.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct EVMTransaction.Response","name":"data","type":"tuple"}],"internalType":"struct EVMTransaction.Proof","name":"transaction","type":"tuple"}],"name":"isEVMTransactionProofValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_ethAddress","type":"address"}],"name":"setEthERC20ContractAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"transactions","outputs":[{"components":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"},{"components":[{"internalType":"bytes32","name":"attestationType","type":"bytes32"},{"internalType":"bytes32","name":"sourceId","type":"bytes32"},{"internalType":"uint64","name":"votingRound","type":"uint64"},{"internalType":"uint64","name":"lowestUsedTimestamp","type":"uint64"},{"components":[{"internalType":"bytes32","name":"transactionHash","type":"bytes32"},{"internalType":"uint16","name":"requiredConfirmations","type":"uint16"},{"internalType":"bool","name":"provideInput","type":"bool"},{"internalType":"bool","name":"listEvents","type":"bool"},{"internalType":"uint32[]","name":"logIndices","type":"uint32[]"}],"internalType":"struct EVMTransaction.RequestBody","name":"requestBody","type":"tuple"},{"components":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"uint64","name":"timestamp","type":"uint64"},{"internalType":"address","name":"sourceAddress","type":"address"},{"internalType":"bool","name":"isDeployment","type":"bool"},{"internalType":"address","name":"receivingAddress","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"input","type":"bytes"},{"internalType":"uint8","name":"status","type":"uint8"},{"components":[{"internalType":"uint32","name":"logIndex","type":"uint32"},{"internalType":"address","name":"emitterAddress","type":"address"},{"internalType":"bytes32[]","name":"topics","type":"bytes32[]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"removed","type":"bool"}],"internalType":"struct EVMTransaction.Event[]","name":"events","type":"tuple[]"}],"internalType":"struct EVMTransaction.ResponseBody","name":"responseBody","type":"tuple"}],"internalType":"struct EVMTransaction.Response","name":"data","type":"tuple"}],"internalType":"struct EVMTransaction.Proof","name":"originalTransaction","type":"tuple"},{"internalType":"uint256","name":"eventNumber","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"owner()":{"details":"Returns the address of the current owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a08060405234620000e157306080526000549060ff8260081c166200008f575060ff8082160362000053575b604051613df99081620000e78239608051818181610b3b01528181610e4f0152610f650152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386200002c565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630166a07a146101d357806309f5dc91146101ca57806309fc8843146101c15780631635f5fd146101b857806327506f53146101af5780632e7700f0146101a65780633659cfe61461019d5780634f1ef2861461019457806352d1902d1461018b578063540abf7314610182578063715018a6146101795780637eccb307146101705780637f46ddb214610167578063870876231461015e5780638da5cb5b146101555780638f601f661461014c578063927ede2d146101435780639ace38c21461013a578063c0c53b8b14610131578063e11013dd14610128578063ecc6da0c1461011f5763f2fde38b0361000e5761011a611e4d565b61000e565b5061011a611e05565b5061011a611d84565b5061011a611c7d565b5061011a611be5565b5061011a6115cc565b5061011a611568565b5061011a61153e565b5061011a6113ed565b5061011a6113c3565b5061011a6111d9565b5061011a61117a565b5061011a611017565b5061011a610f51565b5061011a610e0d565b5061011a610b13565b5061011a610af4565b5061011a610997565b5061011a6104a9565b5061011a61042b565b5061011a6103fa565b5061011a61022c565b6001600160a01b038116036101ed57565b600080fd5b35906101fd826101dc565b565b9181601f840112156101ed578235916001600160401b0383116101ed57602083818601950101116101ed57565b50346101ed5760c03660031901126101ed5760043561024a816101dc565b60243590610257826101dc565b604435610263816101dc565b60643561026f816101dc565b6084359160a4356001600160401b0381116101ed576102929036906004016101ff565b959061029d86612885565b15610343576102b46102af83886129f0565b612671565b6001600160a01b03861690813b156101ed576040516340c10f1960e01b81526001600160a01b03861660048201526024810187905261001998610317939091906000908290604490829084905af18015610336575b61031d575b505b3691610dbb565b94612b84565b8061032a61033092610c78565b806105d6565b3861030e565b61033e612064565b610309565b610317906100199761038c876103868661036f8c60018060a01b031660005260ce602052604060002090565b9060018060a01b0316600052602052604060002090565b5461265c565b6001600160a01b038916600090815260ce602052604090206103af90869061036f565b556103c487876001600160a01b038b166126f6565b610310565b600319906020818301126101ed57600435916001600160401b0383116101ed57826040920301126101ed5760040190565b50346101ed57602061041361040e366103c9565b612ec5565b6040519015158152f35b63ffffffff8116036101ed57565b5060403660031901126101ed5761044360043561041d565b6024356001600160401b0381116101ed576104656104709136906004016101ff565b610310333b156124c6565b604051907f2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af53392806104a433943483612ab5565b0390a3005b5060803660031901126101ed576004356104c2816101dc565b6024356104ce816101dc565b604435906064356001600160401b0381116101ed576104f19036906004016101ff565b929081340361056b5761001994610566946105579284918691610551916103106001600160a01b03851661052730821415612538565b60c95461054a9061053e906001600160a01b031681565b6001600160a01b031690565b1415612590565b92612acc565b5a610560612042565b92612bcb565b6125ed565b60405162461bcd60e51b815260206004820152603a60248201527f466972656c696e6b4272696467653a20616d6f756e742073656e7420646f657360448201527f206e6f74206d6174636820616d6f756e742072657175697265640000000000006064820152608490fd5b60009103126101ed57565b90815180825260208080930193019160005b828110610601575050505090565b8351855293810193928101926001016105f3565b919082519283825260005b848110610641575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610620565b908082519081815260208091019281808460051b8301019501936000915b8483106106835750505050505090565b9091929394958480600192601f1985820301865289519063ffffffff8251168152848060a01b038383015116838201526106e26106cf6040808501519060a080918601528401906105e1565b6060808501519084830390850152610615565b9160808091015115159101529801930193019194939290610673565b80516001600160401b0316825261079991906020818101516001600160401b0316908301526040818101516001600160a01b0316908301526060818101511515908301526080818101516001600160a01b03169083015260a081015160a083015261077860c08201516101208060c0860152840190610615565b60e08281015160ff1690840152916101008092015191818403910152610655565b90565b9190916107b281516040855260408501906105e1565b60208092015193828183039101528351815281840151828201526001600160401b03806040860151166040830152606085015116606082015260808401519160c060808301526080610160830193805160c085015261ffff838201511660e0850152604081015115156101008501526060810151151561012085015201519260a0610140840152835180915281610180840194019160005b82811061086c575050505060a0610799939401519060a08184039101526106fe565b835163ffffffff168652948101949281019260010161084a565b6020808201908083528351809252604092838101600594838186881b850101970195600080945b8786106108c05750505050505050505090565b909192939495969798603f19828203018652878a51805190876108eb6060938487528487019061079c565b918481015185870152015193888183039101528351808252838201918480838b1b83010196019388905b8b84831061093b5750505050505050806001929b019601960194979695939291906108ad565b9661098660019395979983839496989a601f198a8403018c528c5190878060a01b03808351168552868301511686850152808201519084015201519060809081888201520190610615565b9801960192018d9594929391610915565b50346101ed57600080600319360112610af15760cb54906109b782611782565b906040906109c782519384610d56565b838352601f196109d685611782565b01815b818110610a315750505b8381106109fb578151806109f78582610886565b0390f35b80610a11610a0b610a2c9361160d565b50613cf1565b610a1b8286613ccf565b52610a268185613ccf565b50613a9a565b6109e3565b6020908451610a3f81610c98565b8551610a4a81610cb3565b6060808252875191610a5b83610cce565b87835285928884820152888a82015288838201528951610a7a81610ce9565b8981528985820152898b8201528984820152608090848282015281830152898b5191610aa583610d04565b8183528187840152818d840152818684015282015260a08a818301528460c08301528a60e0830152846101008301528201528382015283528682840152878301528288010152016109d9565b80fd5b50346101ed5760003660031901126101ed57602060cb54604051908152f35b50346101ed5760203660031901126101ed57600435610b31816101dc565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190610b6a30841415611f80565b610b87600080516020613da4833981519152938285541614611fe1565b610b8f611edf565b60405190610b9c82610d3b565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610bd6575050610019915061211e565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610c31575b50610c1e5760405162461bcd60e51b815280610c1a600482016120cf565b0390fd5b61001993610c2c9114612071565b6121ae565b610c5391925060203d8111610c5a575b610c4b8183610d56565b810190612055565b9038610bfc565b503d610c41565b50634e487b7160e01b600052604160045260246000fd5b6001600160401b038111610c8b57604052565b610c93610c61565b604052565b606081019081106001600160401b03821117610c8b57604052565b604081019081106001600160401b03821117610c8b57604052565b60c081019081106001600160401b03821117610c8b57604052565b60a081019081106001600160401b03821117610c8b57604052565b61012081019081106001600160401b03821117610c8b57604052565b608081019081106001600160401b03821117610c8b57604052565b602081019081106001600160401b03821117610c8b57604052565b90601f801991011681019081106001600160401b03821117610c8b57604052565b604051906101fd82610d20565b604051906101fd82610d04565b6020906001600160401b038111610dae575b601f01601f19160190565b610db6610c61565b610da3565b929192610dc782610d91565b91610dd56040519384610d56565b8294818452818301116101ed578281602093846000960137010152565b9080601f830112156101ed5781602061079993359101610dbb565b5060403660031901126101ed57600435610e26816101dc565b6024356001600160401b0381116101ed57610e45903690600401610df2565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929190610e7f30851415611f80565b610e9c600080516020613da4833981519152948286541614611fe1565b610ea4611edf565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610eda575050610019915061211e565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610f31575b50610f1e5760405162461bcd60e51b815280610c1a600482016120cf565b61001993610f2c9114612071565b61226a565b610f4a91925060203d8111610c5a57610c4b8183610d56565b9038610f00565b50346101ed5760003660031901126101ed577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610fac57604051600080516020613da48339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b50346101ed5760c03660031901126101ed57600435611035816101dc565b60243590611042826101dc565b60443561104e816101dc565b6064359061105d60843561041d565b60a4356001600160401b0381116101ed5761031061107f9136906004016101ff565b9261108981612885565b1561110e5761109b6102af86836129f0565b6001600160a01b03811694853b156101ed57604051632770a7eb60e21b815233600482015260248101859052610019966000908290604490829084905af18015611101575b6110ee575b505b3391612b38565b8061032a6110fb92610c78565b386110e5565b611109612064565b6110e0565b610019946111278430336001600160a01b038616612843565b6111518461114b8361036f8660018060a01b031660005260ce602052604060002090565b54612836565b6001600160a01b038316600090815260ce6020526040902061117490839061036f565b556110e7565b50346101ed57600080600319360112610af157611195611edf565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101ed576111e8366103c9565b6111f96111f482612ec5565b61309e565b60cb54906112056130ea565b505061121a816112148461160d565b50613903565b60208082019261122a8484613218565b600f61126461123e60a093848101906133ec565b9361124f610100958681019061315d565b9050600e61125c8361160d565b50015561160d565b50019460005b61128c61128361127a8489613218565b858101906133ec565b8581019061315d565b905081101561132057806113166113086112cb61131b946112c56112bc6112b3898e613218565b8a8101906133ec565b8a81019061315d565b90613ab6565b6112e56112dd6060928381019061340c565b810190613adc565b93926112f395919295610d77565b6001600160a01b03918216815295168c860152565b604084015282015289613b72565b613a9a565b61126a565b60fe548790611337906001600160a01b031661053e565b90600261136061135a600161134b85613b25565b5001546001600160a01b031690565b92613b25565b500154823b156101ed576040516340c10f1960e01b81526001600160a01b039290921660048301526024820152906000908290604490829084905af180156113b6575b6113a957005b8061032a61001992610c78565b6113be612064565b6113a3565b50346101ed5760003660031901126101ed5760ca546040516001600160a01b039091168152602090f35b50346101ed5760a03660031901126101ed5760043561140b816101dc565b602435611417816101dc565b60443561142560643561041d565b6084356001600160401b0381116101ed576104656114479136906004016101ff565b9161145184612885565b156114d8576114636102af82866129f0565b6001600160a01b03841693843b156101ed57604051632770a7eb60e21b815233600482015260248101849052610019956000908290604490829084905af180156114cb575b6114b8575b505b33913391612b38565b8061032a6114c592610c78565b386114ad565b6114d3612064565b6114a8565b610019936114f18330336001600160a01b038516612843565b6115158361114b8461036f8560018060a01b031660005260ce602052604060002090565b6001600160a01b038216600090815260ce6020526040902061153890849061036f565b556114af565b50346101ed5760003660031901126101ed576033546040516001600160a01b039091168152602090f35b50346101ed5760403660031901126101ed5760206115c360043561158b816101dc565b60243590611598826101dc565b60018060a01b031660005260ce835260406000209060018060a01b0316600052602052604060002090565b54604051908152f35b50346101ed5760003660031901126101ed5760c9546040516001600160a01b039091168152602090f35b50634e487b7160e01b600052603260045260246000fd5b60cb54811015611648575b60cb60005260041b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b6116506115f6565b611618565b9060405191828154918282526020928383019160005283600020936000905b82821061168a575050506101fd92500383610d56565b855484526001958601958895509381019390910190611674565b90600182811c921680156116d4575b60208310146116be57565b634e487b7160e01b600052602260045260246000fd5b91607f16916116b3565b90604051918260008254926116f2846116a4565b90818452600194858116908160001461175f575060011461171c575b50506101fd92500383610d56565b9093915060005260209081600020936000915b8183106117475750506101fd9350820101388061170e565b8554888401850152948501948794509183019161172f565b9150506101fd94506020925060ff191682840152151560051b820101388061170e565b6020906001600160401b03811161179b575b60051b0190565b6117a3610c61565b611794565b9081546117b481611782565b926040936117c485519182610d56565b828152809460208092019260005281600020906000935b8585106117ea57505050505050565b60048460019284516117fb81610ce9565b865463ffffffff81168252858060a01b0390841c168382015261181f858801611655565b8682015261182f600288016116de565b606082015260ff600388015416151560808201528152019301940193916117db565b906118eb600661185f610d84565b84546001600160401b03808216835260409190911c1660208201529360018101546001600160a01b038116604087015260a01c60ff161515606086015260028101546001600160a01b03166080860152600381015460a08601526118c5600482016116de565b60c08601526118e56118db600583015460ff1690565b60ff1660e0870152565b016117a8565b610100830152565b9060409182519261190384610cb3565b8361190d83611655565b815281519261191b84610cce565b600192838201548552600282015493602094858701528460038401546001600160401b03808216858a0152606091851c168189015283519361195c85610ce9565b6004860154855260ff600587015461ffff811685880152818160101c1615158388015260181c16151582860152600686019181519081956119b26119a68654809560209181520190565b95600052602060002090565b916000925b846007850110611b275793879389979360079b99611a249894611a349e9c985495858510611b11575b858510611af9575b858510611adf575b50848410611aba575b50838310611a95575b838310611a70575b838310611a4b575b505010611a3d575b5090500382610d56565b6080820152608087015201611851565b60a08401520152565b60e01c815201899038611a1a565b909194611a668163ffffffff8760c01c1663ffffffff169052565b0193013885611a12565b85611a8b83949763ffffffff8860a01c1663ffffffff169052565b0194019085611a0a565b85611ab083949763ffffffff8860801c1663ffffffff169052565b0194019085611a02565b95611ad48163ffffffff8886979a1c1663ffffffff169052565b0194019085386119f9565b86901c63ffffffff168752929582908201960192386119f0565b63ffffffff87841c16885296820196938301936119e8565b63ffffffff8716885296820196938301936119e0565b96916101008194959697611bd460089495611bc98c5491611b6963ffffffff91611b588784871663ffffffff169052565b63ffffffff85821c84161690870152565b63ffffffff838e1c821616858e015263ffffffff838a1c821616858a0152611b9e60808285828901921c1663ffffffff169052565b611bb560a08285828901921c1663ffffffff169052565b60c09083828701921c1663ffffffff169052565b60e090811c90830152565b019701930191908b969594936119b7565b50346101ed5760203660031901126101ed5760043560cb548110156101ed57611c739060cb60005260041b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d0709611c5c827fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb016118f3565b91015460405192839260408452604084019061079c565b9060208301520390f35b50346101ed5760603660031901126101ed57600435611c9b816101dc565b611cf8602435611caa816101dc565b60443590611cb7826101dc565b60005493611cdc60ff8660081c161580968197611d76575b8115611d56575b50612386565b84611cef600160ff196000541617600055565b611d3d576123e9565b611cfe57005b611d0e61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b611d5161010061ff00196000541617600055565b6123e9565b303b15915081611d68575b5038611cd6565b6001915060ff161438611d61565b600160ff8216109150611ccf565b5060603660031901126101ed57600435611d9d816101dc565b611da860243561041d565b6044356001600160401b0381116101ed57610310611dca9136906004016101ff565b7f2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af56040519260018060a01b031692806104a433943483612ab5565b50346101ed5760203660031901126101ed57600435611e23816101dc565b611e2b611edf565b60fe80546001600160a01b0319166001600160a01b0392909216919091179055005b50346101ed5760203660031901126101ed57600435611e6b816101dc565b611e73611edf565b6001600160a01b03811615611e8b5761001990611f37565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6033546001600160a01b03163303611ef357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15611f8757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611fe857565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b6040519061204f82610d3b565b60008252565b908160209103126101ed575190565b506040513d6000823e3d90fd5b1561207857565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b1561215357600080516020613da483398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b906121b88261211e565b6001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115801590612262575b6121fa575050565b61225f916000806040519361220e85610c98565b602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020860152660819985a5b195960ca1b6040860152602081519101845af46122596122bd565b916122ed565b50565b5060006121f2565b906122748261211e565b6001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28051158015906122b5576121fa575050565b5060016121f2565b3d156122e8573d906122ce82610d91565b916122dc6040519384610d56565b82523d6000602084013e565b606090565b9192901561234f5750815115612301575090565b3b1561230a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156123625750805190602001fd5b60405162461bcd60e51b815260206004820152908190610c1a906024830190610615565b1561238d57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b919061240560ff60005460081c1661240081612466565b612466565b61240e33611f37565b61241f60ff60005460081c16612466565b60018060a01b038092816bffffffffffffffffffffffff60a01b93168360c954161760c955169060ca54161760ca55612456611edf565b811615611e8b576101fd90611f37565b1561246d57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b156124cd57565b60405162461bcd60e51b815260206004820152603760248201527f466972656c696e6b4272696467653a2066756e6374696f6e2063616e206f6e6c60448201527f792062652063616c6c65642066726f6d20616e20454f410000000000000000006064820152608490fd5b1561253f57565b60405162461bcd60e51b815260206004820152602360248201527f466972656c696e6b4272696467653a2063616e6e6f742073656e6420746f207360448201526232b63360e91b6064820152608490fd5b1561259757565b60405162461bcd60e51b815260206004820152602860248201527f466972656c696e6b4272696467653a2063616e6e6f742073656e6420746f206d60448201526732b9b9b2b733b2b960c11b6064820152608490fd5b156125f457565b60405162461bcd60e51b815260206004820152602360248201527f466972656c696e6b4272696467653a20455448207472616e73666572206661696044820152621b195960ea1b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b9190820391821161266957565b6101fd612645565b1561267857565b60405162461bcd60e51b815260206004820152604a60248201527f466972656c696e6b4272696467653a2077726f6e672072656d6f746520746f6b60448201527f656e20666f7220466972656c696e6b204d696e7461626c65204552433230206c60648201526937b1b0b6103a37b5b2b760b11b608482015260a490fd5b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526101fd91612732606483610d56565b612756565b801515036101ed57565b908160209103126101ed575161079981612737565b6040516127ae916001600160a01b031661276f82610cb3565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16122596122bd565b80519082821592831561281e575b505050156127c75750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b61282e9350820181019101612741565b3882816127bc565b9190820180921161266957565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526101fd9161273282610ce9565b61288e81612925565b908115612899575090565b90506128a481612982565b9081612913575b816128b4575090565b60209150600090604051838101906301ffc9a760e01b825263ec4fc8e360e01b6024820152602481526128e681610c98565b5191617530fa6000513d82612907575b5081612900575090565b9050151590565b602011159150386128f6565b905061291e816129ab565b15906128ab565b61292e81612982565b9081612970575b8161293e575090565b60209150600090604051838101906301ffc9a760e01b8252631d1d8b6360e01b6024820152602481526128e681610c98565b905061297b816129ab565b1590612935565b6000602091604051838101906301ffc9a760e01b8083526024820152602481526128e681610c98565b6000602091604051838101906301ffc9a760e01b825263ffffffff60e01b6024820152602481526128e681610c98565b908160209103126101ed5751610799816101dc565b6129f981612925565b15612a785760405163600f0deb60e11b81526001600160a01b03918291906020908290600490829086165afa908115612a6b575b600091612a3d575b501691161490565b612a5e915060203d8111612a64575b612a568183610d56565b8101906129db565b38612a35565b503d612a4c565b612a73612064565b612a2d565b6040516335b02cb160e21b81526001600160a01b03918291906020908290600490829086165afa908115612a6b57600091612a3d57501691161490565b604090610799939281528160208201520190610615565b6040516001600160a01b039283169492909116927f31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d928291612b0f919083612ab5565b0390a3565b610799939260609260018060a01b0316825260208201528160408201520190610615565b6040516001600160a01b03938416969284169591909316937f7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf93928392612b7f9284612b14565b0390a4565b6040516001600160a01b03938416969284169591909316937fd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd93928392612b7f9284612b14565b906000939192849360208451940192f190565b9035601e19823603018112156101ed5701602081359101916001600160401b0382116101ed578160051b360383136101ed57565b81835290916001600160fb1b0383116101ed5760209260051b809284830137010190565b6001600160401b038116036101ed57565b35906101fd82612c36565b9035609e19823603018112156101ed570190565b61ffff8116036101ed57565b35906101fd82612737565b903561011e19823603018112156101ed570190565b9035601e19823603018112156101ed5701602081359101916001600160401b0382116101ed5781360383136101ed57565b908060209392818452848401376000828201840152601f01601f1916010190565b60ff8116036101ed57565b35906101fd82612ce4565b90808352602080930192838260051b810194846000925b858410612d22575050505050505090565b9091929394959685808284600194038752612d3d8b87612c52565b9063ffffffff8235612d4e8161041d565b16815282820135612d5e816101dc565b858060a01b031683820152612da9612d8e6040612d7d81860186612bde565b909160a08091870152850191612c12565b6060612d9c81860186612c92565b9185840390860152612cc3565b91608080910135612db981612737565b1515910152990194019401929594939190612d11565b61079991612ded81612de084612c47565b6001600160401b03169052565b612e0c612dfc60208401612c47565b6001600160401b03166020830152565b612e2b612e1b604084016101f2565b6001600160a01b03166040830152565b612e43612e3a60608401612c72565b15156060830152565b612e62612e52608084016101f2565b6001600160a01b03166080830152565b60a082013560a0820152612e8d612e7c60c0840184612c92565b6101208060c0860152840191612cc3565b91612ea7612e9d60e08301612cef565b60ff1660e0840152565b612eb76101009182810190612bde565b929091818503910152612cfa565b6040516358fbe9e160e01b815260206004820181905291612efa612ee98280612bde565b604060248601526064850191612c12565b908381013560be19823603018112156101ed578383036023190160448501520180358252808401358285015290839083906040840135612f3981612c36565b6001600160401b0380911660408301526060850135612f5781612c36565b166060820152612f6a6080850185612c52565b9360c06080830152612fce610160830195803560c085015261ffff86820135612f9281612c66565b1660e08501526040810135612fa681612737565b15156101008501526060810135612fbc81612737565b15156101208501526080810190612bde565b60a06101408501529586905261018083019560005b8181106130705750505093613010916130028660a08697980190612c7d565b9060a0818403910152612dcf565b038173f37ad1278917c04fb291c75a42e61710964cb57c5afa918215613063575b60009261303d57505090565b6107999250803d1061305c575b6130548183610d56565b810190612741565b503d61304a565b61306b612064565b613031565b929450929480829763ffffffff6001943561308a8161041d565b168152019601910190879492879492612fe3565b156130a557565b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207472616e73616374696f6e2070726f6f66000000000000006044820152606490fd5b60cb54600160401b811015613139575b600181018060cb558110156116485760cb60005260041b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b613141610c61565b6130fa565b50634e487b7160e01b600052600060045260246000fd5b903590601e19813603018212156101ed57018035906001600160401b0382116101ed57602001918160051b360383136101ed57565b805490600090818155826131a557505050565b815260208120918201915b8281106131bc57505050565b8181556001016131b0565b600160401b821161320b575b8054918082558281106131e557505050565b60009182526020822092830192015b82811061320057505050565b8181556001016131f4565b613213610c61565b6131d3565b90359060be19813603018212156101ed570190565b3561079981612c36565b903590609e19813603018212156101ed570190565b3561079981612737565b818110613261575050565b60008155600101613256565b90600160401b81116132d6575b815481835580821061328b57505050565b6101fd926000526007602060002091601c82850160031c84019460021b16806132bb575b500160031c0190613256565b600019908186019182549160200360031b1c169055386132af565b6132de610c61565b61327a565b356107998161041d565b9190613318906001600160401b0383116133df575b61330c838561326d565b92600052602060002090565b8160031c9160005b83811061338f5750600719811690038061333b575b50505050565b92600093845b81811061335657505050015538808080613335565b909194602061338560019261336a896132e3565b908560021b60031b63ffffffff811b9283911b169119161790565b9601929101613341565b6000805b600881106133a8575083820155600101613320565b959060206133d66001926133bb856132e3565b908a60021b60031b63ffffffff811b9283911b169119161790565b92019601613393565b6133e7610c61565b613302565b90359061011e19813603018212156101ed570190565b35610799816101dc565b903590601e19813603018212156101ed57018035906001600160401b0382116101ed576020019181360383136101ed57565b9190601f811161344d57505050565b6101fd926000526020600020906020601f840160051c83019310613479575b601f0160051c0190613256565b909150819061346c565b9092916001600160401b03811161354b575b6134a9816134a384546116a4565b8461343e565b6000601f82116001146134e357819293946000926134d8575b50508160011b916000199060031b1c1916179055565b0135905038806134c2565b601f198216946134f884600052602060002090565b91805b878110613533575083600195969710613519575b505050811b019055565b0135600019600384901b60f8161c1916905538808061350f565b909260206001819286860135815501940191016134fb565b613553610c61565b613495565b3561079981612ce4565b9063ffffffff81356135738161041d565b1682548163ffffffff19821617845560209182840135613592816101dc565b6001600160c01b03199092161790821b640100000000600160c01b03161783556001908382016135c5604085018561315d565b92906001600160401b038411613649575b6135e084846131c7565b91600052806000209060005b8481106136385750505050505090600361362560808461361f61361560606101fd98018361340c565b9060028801613483565b0161324c565b91019060ff801983541691151516179055565b8335838201559281019285016135ec565b613651610c61565b6135d6565b600160401b83116137a3575b80548382558084106136ba575b50906136818192600052602060002090565b906000925b848410613694575050505050565b60046020826136ae6136a860019587613237565b87613562565b01930193019291613686565b6001600160fe1b038181168203613796575b84168403613789575b60008281526020812091600290811b83019286821b015b8381106136fb5750505061366f565b80836004925583600161370f818401613192565b8483019061371d82546116a4565b9081613732575b5050506003820155016136ec565b601f80831160011461374c57505050555b83388080613724565b613784945090613774929161376685600052602060002090565b920160051c82019101613256565b6000908082528160208120915555565b613743565b613791612645565b6136d5565b61379e612645565b6136cc565b6137ab610c61565b613662565b6006906138fa6101fd936137e36137c68261322d565b845467ffffffffffffffff19166001600160401b03909116178455565b61381f6137f26020830161322d565b84546fffffffffffffffff0000000000000000191660409190911b67ffffffffffffffff60401b16178455565b6138776001840161385161383560408501613402565b82546001600160a01b0319166001600160a01b03909116178255565b61385d6060840161324c565b815460ff60a01b191690151560a01b60ff60a01b16179055565b6138a961388660808301613402565b6002850180546001600160a01b0319166001600160a01b03909216919091179055565b60a081013560038401556138cd6138c360c083018361340c565b9060048601613483565b6138ef6138dc60e08301613558565b600585019060ff1660ff19825416179055565b61010081019061315d565b92909101613656565b9061390e818061315d565b91906001600160401b038311613a8d575b61392983856131c7565b91836000526020928360002060005b838110613a7b5750505050613a7482613a6a613a60613960856101fd98976007970190613218565b92833560018801558084013560028801556139dd600388016139a6604087013561398981612c36565b825467ffffffffffffffff19166001600160401b03909116178255565b6060860135906139b582612c36565b9067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b613a566139ed6080860186613237565b91823560048a01556005890190830135613a0681612c66565b815461ffff62ff00006040870135613a1d81612737565b151560101b1692169062ffffff191617178155613a3c6060840161324c565b815463ff000000191690151560181b63ff00000016179055565b608081019061315d565b90600687016132ed565b60a08101906133ec565b91016137b0565b82358282015591850191600101613938565b613a95610c61565b61391f565b6001906000198114613aaa570190565b613ab2612645565b0190565b909161079992811015613acf575b60051b810190613237565b613ad76115f6565b613ac4565b906080828203126101ed578135613af2816101dc565b926020830135613b01816101dc565b9260408101359260608201356001600160401b0381116101ed576107999201610df2565b805415613b3b575b600052602060002090600090565b613b436115f6565b613b2d565b8054821015613b65575b60005260206000209060021b0190600090565b613b6d6115f6565b613b52565b613b918154600160401b811015613cc2575b6001928382018155613b48565b613cb5575b825181546001600160a01b039182166001600160a01b031991821617835560208086015185850180549093169316929092179055906060906003906040860151600282015501930151908151916001600160401b038311613ca8575b613c0683613c0087546116a4565b8761343e565b81601f8411600114613c3f5750928293918392600094613c34575b50501b916000199060031b1c1916179055565b015192503880613c21565b919083601f198116613c5688600052602060002090565b946000905b88838310613c8e5750505010613c7557505050811b019055565b015160001960f88460031b161c1916905538808061350f565b858701518855909601959485019487935090810190613c5b565b613cb0610c61565b613bf2565b613cbd613146565b613b96565b613cca610c61565b613b84565b6020918151811015613ce4575b60051b010190565b613cec6115f6565b613cdc565b90604091825192613d0184610c98565b83613d0b836118f3565b8152600f600e840154936020948584015201805490613d2982611782565b94613d3685519687610d56565b82865260009182528082208187015b848410613d555750505050500152565b6004836001928951613d6681610d20565b848060a01b0380875416825285870154168382015260028601548b820152613d90600387016116de565b6060820152815201920193019290613d4556fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f0fd61f6d1c68c5e8a5ad095f38f61965c7fe15a03b48781bd49f9a13b6ed4e664736f6c63430008110033","opcodes":"PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0xE1 JUMPI ADDRESS PUSH1 0x80 MSTORE PUSH1 0x0 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND PUSH3 0x8F JUMPI POP PUSH1 0xFF DUP1 DUP3 AND SUB PUSH3 0x53 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DF9 SWAP1 DUP2 PUSH3 0xE7 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0xB3B ADD MSTORE DUP2 DUP2 PUSH2 0xE4F ADD MSTORE PUSH2 0xF65 ADD MSTORE RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 CODESIZE PUSH3 0x2C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x166A07A EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x9F5DC91 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x9FC8843 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x1635F5FD EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x27506F53 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x2E7700F0 EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x540ABF73 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x7ECCB307 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x7F46DDB2 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x87087623 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x8F601F66 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x927EDE2D EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x9ACE38C2 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0xC0C53B8B EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xE11013DD EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0xECC6DA0C EQ PUSH2 0x11F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x11A PUSH2 0x1E4D JUMP JUMPDEST PUSH2 0xE JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1E05 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1D84 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1C7D JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1BE5 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x15CC JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1568 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x153E JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x13ED JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x13C3 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x11D9 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x117A JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1017 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0xF51 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0xE0D JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0xB13 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0xAF4 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x997 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x4A9 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x42B JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x3FA JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x22C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0x1DC JUMP JUMPDEST JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1ED JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x1ED JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x1ED JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x24A DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x257 DUP3 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH2 0x263 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH2 0x26F DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP2 PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x292 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0x29D DUP7 PUSH2 0x2885 JUMP JUMPDEST ISZERO PUSH2 0x343 JUMPI PUSH2 0x2B4 PUSH2 0x2AF DUP4 DUP9 PUSH2 0x29F0 JUMP JUMPDEST PUSH2 0x2671 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0x19 SWAP9 PUSH2 0x317 SWAP4 SWAP1 SWAP2 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x336 JUMPI JUMPDEST PUSH2 0x31D JUMPI JUMPDEST POP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0xDBB JUMP JUMPDEST SWAP5 PUSH2 0x2B84 JUMP JUMPDEST DUP1 PUSH2 0x32A PUSH2 0x330 SWAP3 PUSH2 0xC78 JUMP JUMPDEST DUP1 PUSH2 0x5D6 JUMP JUMPDEST CODESIZE PUSH2 0x30E JUMP JUMPDEST PUSH2 0x33E PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x309 JUMP JUMPDEST PUSH2 0x317 SWAP1 PUSH2 0x19 SWAP8 PUSH2 0x38C DUP8 PUSH2 0x386 DUP7 PUSH2 0x36F DUP13 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x265C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3AF SWAP1 DUP7 SWAP1 PUSH2 0x36F JUMP JUMPDEST SSTORE PUSH2 0x3C4 DUP8 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH2 0x26F6 JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST PUSH1 0x3 NOT SWAP1 PUSH1 0x20 DUP2 DUP4 ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x1ED JUMPI DUP3 PUSH1 0x40 SWAP3 SUB ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 PUSH2 0x413 PUSH2 0x40E CALLDATASIZE PUSH2 0x3C9 JUMP JUMPDEST PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH2 0x443 PUSH1 0x4 CALLDATALOAD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x465 PUSH2 0x470 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x310 CALLER EXTCODESIZE ISZERO PUSH2 0x24C6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH32 0x2849B43074093A05396B6F2A937DEE8565B15A48A7B3D4BFFB732A5017380AF5 CALLER SWAP3 DUP1 PUSH2 0x4A4 CALLER SWAP5 CALLVALUE DUP4 PUSH2 0x2AB5 JUMP JUMPDEST SUB SWAP1 LOG3 STOP JUMPDEST POP PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x4C2 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x4CE DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x4F1 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST SWAP3 SWAP1 DUP2 CALLVALUE SUB PUSH2 0x56B JUMPI PUSH2 0x19 SWAP5 PUSH2 0x566 SWAP5 PUSH2 0x557 SWAP3 DUP5 SWAP2 DUP7 SWAP2 PUSH2 0x551 SWAP2 PUSH2 0x310 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x527 ADDRESS DUP3 EQ ISZERO PUSH2 0x2538 JUMP JUMPDEST PUSH1 0xC9 SLOAD PUSH2 0x54A SWAP1 PUSH2 0x53E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST EQ ISZERO PUSH2 0x2590 JUMP JUMPDEST SWAP3 PUSH2 0x2ACC JUMP JUMPDEST GAS PUSH2 0x560 PUSH2 0x2042 JUMP JUMPDEST SWAP3 PUSH2 0x2BCB JUMP JUMPDEST PUSH2 0x25ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A20616D6F756E742073656E7420646F6573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206E6F74206D6174636820616D6F756E74207265717569726564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x1ED JUMPI JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x601 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x5F3 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x641 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x620 JUMP JUMPDEST SWAP1 DUP1 DUP3 MLOAD SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 SWAP2 ADD SWAP3 DUP2 DUP1 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x683 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH1 0x1 SWAP3 PUSH1 0x1F NOT DUP6 DUP3 SUB ADD DUP7 MSTORE DUP10 MLOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 MLOAD AND DUP2 MSTORE DUP5 DUP1 PUSH1 0xA0 SHL SUB DUP4 DUP4 ADD MLOAD AND DUP4 DUP3 ADD MSTORE PUSH2 0x6E2 PUSH2 0x6CF PUSH1 0x40 DUP1 DUP6 ADD MLOAD SWAP1 PUSH1 0xA0 DUP1 SWAP2 DUP7 ADD MSTORE DUP5 ADD SWAP1 PUSH2 0x5E1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP6 ADD MLOAD SWAP1 DUP5 DUP4 SUB SWAP1 DUP6 ADD MSTORE PUSH2 0x615 JUMP JUMPDEST SWAP2 PUSH1 0x80 DUP1 SWAP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x673 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 MSTORE PUSH2 0x799 SWAP2 SWAP1 PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP2 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x778 PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x120 DUP1 PUSH1 0xC0 DUP7 ADD MSTORE DUP5 ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST PUSH1 0xE0 DUP3 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP5 ADD MSTORE SWAP2 PUSH2 0x100 DUP1 SWAP3 ADD MLOAD SWAP2 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x655 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x7B2 DUP2 MLOAD PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x5E1 JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP3 ADD MLOAD SWAP4 DUP3 DUP2 DUP4 SUB SWAP2 ADD MSTORE DUP4 MLOAD DUP2 MSTORE DUP2 DUP5 ADD MLOAD DUP3 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 PUSH1 0x40 DUP7 ADD MLOAD AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD SWAP2 PUSH1 0xC0 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x80 PUSH2 0x160 DUP4 ADD SWAP4 DUP1 MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0xFFFF DUP4 DUP3 ADD MLOAD AND PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x100 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x120 DUP6 ADD MSTORE ADD MLOAD SWAP3 PUSH1 0xA0 PUSH2 0x140 DUP5 ADD MSTORE DUP4 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH2 0x180 DUP5 ADD SWAP5 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x86C JUMPI POP POP POP POP PUSH1 0xA0 PUSH2 0x799 SWAP4 SWAP5 ADD MLOAD SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x6FE JUMP JUMPDEST DUP4 MLOAD PUSH4 0xFFFFFFFF AND DUP7 MSTORE SWAP5 DUP2 ADD SWAP5 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x84A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP2 ADD PUSH1 0x5 SWAP5 DUP4 DUP2 DUP7 DUP9 SHL DUP6 ADD ADD SWAP8 ADD SWAP6 PUSH1 0x0 DUP1 SWAP5 JUMPDEST DUP8 DUP7 LT PUSH2 0x8C0 JUMPI POP POP POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 PUSH1 0x3F NOT DUP3 DUP3 SUB ADD DUP7 MSTORE DUP8 DUP11 MLOAD DUP1 MLOAD SWAP1 DUP8 PUSH2 0x8EB PUSH1 0x60 SWAP4 DUP5 DUP8 MSTORE DUP5 DUP8 ADD SWAP1 PUSH2 0x79C JUMP JUMPDEST SWAP2 DUP5 DUP2 ADD MLOAD DUP6 DUP8 ADD MSTORE ADD MLOAD SWAP4 DUP9 DUP2 DUP4 SUB SWAP2 ADD MSTORE DUP4 MLOAD DUP1 DUP3 MSTORE DUP4 DUP3 ADD SWAP2 DUP5 DUP1 DUP4 DUP12 SHL DUP4 ADD ADD SWAP7 ADD SWAP4 DUP9 SWAP1 JUMPDEST DUP12 DUP5 DUP4 LT PUSH2 0x93B JUMPI POP POP POP POP POP POP POP DUP1 PUSH1 0x1 SWAP3 SWAP12 ADD SWAP7 ADD SWAP7 ADD SWAP5 SWAP8 SWAP7 SWAP6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8AD JUMP JUMPDEST SWAP7 PUSH2 0x986 PUSH1 0x1 SWAP4 SWAP6 SWAP8 SWAP10 DUP4 DUP4 SWAP5 SWAP7 SWAP9 SWAP11 PUSH1 0x1F NOT DUP11 DUP5 SUB ADD DUP13 MSTORE DUP13 MLOAD SWAP1 DUP8 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 MLOAD AND DUP6 MSTORE DUP7 DUP4 ADD MLOAD AND DUP7 DUP6 ADD MSTORE DUP1 DUP3 ADD MLOAD SWAP1 DUP5 ADD MSTORE ADD MLOAD SWAP1 PUSH1 0x80 SWAP1 DUP2 DUP9 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST SWAP9 ADD SWAP7 ADD SWAP3 ADD DUP14 SWAP6 SWAP5 SWAP3 SWAP4 SWAP2 PUSH2 0x915 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAF1 JUMPI PUSH1 0xCB SLOAD SWAP1 PUSH2 0x9B7 DUP3 PUSH2 0x1782 JUMP JUMPDEST SWAP1 PUSH1 0x40 SWAP1 PUSH2 0x9C7 DUP3 MLOAD SWAP4 DUP5 PUSH2 0xD56 JUMP JUMPDEST DUP4 DUP4 MSTORE PUSH1 0x1F NOT PUSH2 0x9D6 DUP6 PUSH2 0x1782 JUMP JUMPDEST ADD DUP2 JUMPDEST DUP2 DUP2 LT PUSH2 0xA31 JUMPI POP POP JUMPDEST DUP4 DUP2 LT PUSH2 0x9FB JUMPI DUP2 MLOAD DUP1 PUSH2 0x9F7 DUP6 DUP3 PUSH2 0x886 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH2 0xA11 PUSH2 0xA0B PUSH2 0xA2C SWAP4 PUSH2 0x160D JUMP JUMPDEST POP PUSH2 0x3CF1 JUMP JUMPDEST PUSH2 0xA1B DUP3 DUP7 PUSH2 0x3CCF JUMP JUMPDEST MSTORE PUSH2 0xA26 DUP2 DUP6 PUSH2 0x3CCF JUMP JUMPDEST POP PUSH2 0x3A9A JUMP JUMPDEST PUSH2 0x9E3 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP5 MLOAD PUSH2 0xA3F DUP2 PUSH2 0xC98 JUMP JUMPDEST DUP6 MLOAD PUSH2 0xA4A DUP2 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP8 MLOAD SWAP2 PUSH2 0xA5B DUP4 PUSH2 0xCCE JUMP JUMPDEST DUP8 DUP4 MSTORE DUP6 SWAP3 DUP9 DUP5 DUP3 ADD MSTORE DUP9 DUP11 DUP3 ADD MSTORE DUP9 DUP4 DUP3 ADD MSTORE DUP10 MLOAD PUSH2 0xA7A DUP2 PUSH2 0xCE9 JUMP JUMPDEST DUP10 DUP2 MSTORE DUP10 DUP6 DUP3 ADD MSTORE DUP10 DUP12 DUP3 ADD MSTORE DUP10 DUP5 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 DUP5 DUP3 DUP3 ADD MSTORE DUP2 DUP4 ADD MSTORE DUP10 DUP12 MLOAD SWAP2 PUSH2 0xAA5 DUP4 PUSH2 0xD04 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP8 DUP5 ADD MSTORE DUP2 DUP14 DUP5 ADD MSTORE DUP2 DUP7 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH1 0xA0 DUP11 DUP2 DUP4 ADD MSTORE DUP5 PUSH1 0xC0 DUP4 ADD MSTORE DUP11 PUSH1 0xE0 DUP4 ADD MSTORE DUP5 PUSH2 0x100 DUP4 ADD MSTORE DUP3 ADD MSTORE DUP4 DUP3 ADD MSTORE DUP4 MSTORE DUP7 DUP3 DUP5 ADD MSTORE DUP8 DUP4 ADD MSTORE DUP3 DUP9 ADD ADD MSTORE ADD PUSH2 0x9D9 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x20 PUSH1 0xCB SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xB31 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 SWAP1 PUSH2 0xB6A ADDRESS DUP5 EQ ISZERO PUSH2 0x1F80 JUMP JUMPDEST PUSH2 0xB87 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 DUP3 DUP6 SLOAD AND EQ PUSH2 0x1FE1 JUMP JUMPDEST PUSH2 0xB8F PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xB9C DUP3 PUSH2 0xD3B JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBD6 JUMPI POP POP PUSH2 0x19 SWAP2 POP PUSH2 0x211E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x4 SWAP2 PUSH1 0x40 SWAP5 SWAP4 SWAP5 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP3 MSTORE DUP7 AND GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xC31 JUMPI JUMPDEST POP PUSH2 0xC1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC1A PUSH1 0x4 DUP3 ADD PUSH2 0x20CF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x19 SWAP4 PUSH2 0xC2C SWAP2 EQ PUSH2 0x2071 JUMP JUMPDEST PUSH2 0x21AE JUMP JUMPDEST PUSH2 0xC53 SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xC5A JUMPI JUMPDEST PUSH2 0xC4B DUP2 DUP4 PUSH2 0xD56 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2055 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xBFC JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xC41 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xC93 PUSH2 0xC61 JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x120 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0xD20 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xDAE JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB6 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0xDA3 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0xDC7 DUP3 PUSH2 0xD91 JUMP JUMPDEST SWAP2 PUSH2 0xDD5 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xD56 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x1ED JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1ED JUMPI DUP2 PUSH1 0x20 PUSH2 0x799 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0xDBB JUMP JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xE26 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0xE45 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 SWAP2 SWAP1 PUSH2 0xE7F ADDRESS DUP6 EQ ISZERO PUSH2 0x1F80 JUMP JUMPDEST PUSH2 0xE9C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP5 DUP3 DUP7 SLOAD AND EQ PUSH2 0x1FE1 JUMP JUMPDEST PUSH2 0xEA4 PUSH2 0x1EDF JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xEDA JUMPI POP POP PUSH2 0x19 SWAP2 POP PUSH2 0x211E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x4 SWAP2 PUSH1 0x40 SWAP5 SWAP4 SWAP5 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP3 MSTORE DUP7 AND GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xF31 JUMPI JUMPDEST POP PUSH2 0xF1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC1A PUSH1 0x4 DUP3 ADD PUSH2 0x20CF JUMP JUMPDEST PUSH2 0x19 SWAP4 PUSH2 0xF2C SWAP2 EQ PUSH2 0x2071 JUMP JUMPDEST PUSH2 0x226A JUMP JUMPDEST PUSH2 0xF4A SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xC5A JUMPI PUSH2 0xC4B DUP2 DUP4 PUSH2 0xD56 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xF00 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0xFAC JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1035 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1042 DUP3 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH2 0x104E DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH2 0x105D PUSH1 0x84 CALLDATALOAD PUSH2 0x41D JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x310 PUSH2 0x107F SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST SWAP3 PUSH2 0x1089 DUP2 PUSH2 0x2885 JUMP JUMPDEST ISZERO PUSH2 0x110E JUMPI PUSH2 0x109B PUSH2 0x2AF DUP7 DUP4 PUSH2 0x29F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP5 DUP6 EXTCODESIZE ISZERO PUSH2 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH2 0x19 SWAP7 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x1101 JUMPI JUMPDEST PUSH2 0x10EE JUMPI JUMPDEST POP JUMPDEST CALLER SWAP2 PUSH2 0x2B38 JUMP JUMPDEST DUP1 PUSH2 0x32A PUSH2 0x10FB SWAP3 PUSH2 0xC78 JUMP JUMPDEST CODESIZE PUSH2 0x10E5 JUMP JUMPDEST PUSH2 0x1109 PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x10E0 JUMP JUMPDEST PUSH2 0x19 SWAP5 PUSH2 0x1127 DUP5 ADDRESS CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x2843 JUMP JUMPDEST PUSH2 0x1151 DUP5 PUSH2 0x114B DUP4 PUSH2 0x36F DUP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x2836 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1174 SWAP1 DUP4 SWAP1 PUSH2 0x36F JUMP JUMPDEST SSTORE PUSH2 0x10E7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAF1 JUMPI PUSH2 0x1195 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH2 0x11E8 CALLDATASIZE PUSH2 0x3C9 JUMP JUMPDEST PUSH2 0x11F9 PUSH2 0x11F4 DUP3 PUSH2 0x2EC5 JUMP JUMPDEST PUSH2 0x309E JUMP JUMPDEST PUSH1 0xCB SLOAD SWAP1 PUSH2 0x1205 PUSH2 0x30EA JUMP JUMPDEST POP POP PUSH2 0x121A DUP2 PUSH2 0x1214 DUP5 PUSH2 0x160D JUMP JUMPDEST POP PUSH2 0x3903 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP3 PUSH2 0x122A DUP5 DUP5 PUSH2 0x3218 JUMP JUMPDEST PUSH1 0xF PUSH2 0x1264 PUSH2 0x123E PUSH1 0xA0 SWAP4 DUP5 DUP2 ADD SWAP1 PUSH2 0x33EC JUMP JUMPDEST SWAP4 PUSH2 0x124F PUSH2 0x100 SWAP6 DUP7 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP1 POP PUSH1 0xE PUSH2 0x125C DUP4 PUSH2 0x160D JUMP JUMPDEST POP ADD SSTORE PUSH2 0x160D JUMP JUMPDEST POP ADD SWAP5 PUSH1 0x0 JUMPDEST PUSH2 0x128C PUSH2 0x1283 PUSH2 0x127A DUP5 DUP10 PUSH2 0x3218 JUMP JUMPDEST DUP6 DUP2 ADD SWAP1 PUSH2 0x33EC JUMP JUMPDEST DUP6 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x1320 JUMPI DUP1 PUSH2 0x1316 PUSH2 0x1308 PUSH2 0x12CB PUSH2 0x131B SWAP5 PUSH2 0x12C5 PUSH2 0x12BC PUSH2 0x12B3 DUP10 DUP15 PUSH2 0x3218 JUMP JUMPDEST DUP11 DUP2 ADD SWAP1 PUSH2 0x33EC JUMP JUMPDEST DUP11 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP1 PUSH2 0x3AB6 JUMP JUMPDEST PUSH2 0x12E5 PUSH2 0x12DD PUSH1 0x60 SWAP3 DUP4 DUP2 ADD SWAP1 PUSH2 0x340C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3ADC JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x12F3 SWAP6 SWAP2 SWAP3 SWAP6 PUSH2 0xD77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP6 AND DUP13 DUP7 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE DUP3 ADD MSTORE DUP10 PUSH2 0x3B72 JUMP JUMPDEST PUSH2 0x3A9A JUMP JUMPDEST PUSH2 0x126A JUMP JUMPDEST PUSH1 0xFE SLOAD DUP8 SWAP1 PUSH2 0x1337 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x53E JUMP JUMPDEST SWAP1 PUSH1 0x2 PUSH2 0x1360 PUSH2 0x135A PUSH1 0x1 PUSH2 0x134B DUP6 PUSH2 0x3B25 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0x3B25 JUMP JUMPDEST POP ADD SLOAD DUP3 EXTCODESIZE ISZERO PUSH2 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x13B6 JUMPI JUMPDEST PUSH2 0x13A9 JUMPI STOP JUMPDEST DUP1 PUSH2 0x32A PUSH2 0x19 SWAP3 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x13BE PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x13A3 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0xCA SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x140B DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x1417 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH2 0x1425 PUSH1 0x64 CALLDATALOAD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x465 PUSH2 0x1447 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST SWAP2 PUSH2 0x1451 DUP5 PUSH2 0x2885 JUMP JUMPDEST ISZERO PUSH2 0x14D8 JUMPI PUSH2 0x1463 PUSH2 0x2AF DUP3 DUP7 PUSH2 0x29F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH2 0x19 SWAP6 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x14CB JUMPI JUMPDEST PUSH2 0x14B8 JUMPI JUMPDEST POP JUMPDEST CALLER SWAP2 CALLER SWAP2 PUSH2 0x2B38 JUMP JUMPDEST DUP1 PUSH2 0x32A PUSH2 0x14C5 SWAP3 PUSH2 0xC78 JUMP JUMPDEST CODESIZE PUSH2 0x14AD JUMP JUMPDEST PUSH2 0x14D3 PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x14A8 JUMP JUMPDEST PUSH2 0x19 SWAP4 PUSH2 0x14F1 DUP4 ADDRESS CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x2843 JUMP JUMPDEST PUSH2 0x1515 DUP4 PUSH2 0x114B DUP5 PUSH2 0x36F DUP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1538 SWAP1 DUP5 SWAP1 PUSH2 0x36F JUMP JUMPDEST SSTORE PUSH2 0x14AF JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x20 PUSH2 0x15C3 PUSH1 0x4 CALLDATALOAD PUSH2 0x158B DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1598 DUP3 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xCE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0xC9 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xCB SLOAD DUP2 LT ISZERO PUSH2 0x1648 JUMPI JUMPDEST PUSH1 0xCB PUSH1 0x0 MSTORE PUSH1 0x4 SHL PUSH32 0xA7CE836D032B2BF62B7E2097A8E0A6D8AEB35405AD15271E96D3B0188A1D06FB ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1650 PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x1618 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x168A JUMPI POP POP POP PUSH2 0x1FD SWAP3 POP SUB DUP4 PUSH2 0xD56 JUMP JUMPDEST DUP6 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1674 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x16D4 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x16BE JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x16B3 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x16F2 DUP5 PUSH2 0x16A4 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x175F JUMPI POP PUSH1 0x1 EQ PUSH2 0x171C JUMPI JUMPDEST POP POP PUSH2 0x1FD SWAP3 POP SUB DUP4 PUSH2 0xD56 JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1747 JUMPI POP POP PUSH2 0x1FD SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x170E JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x172F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1FD SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x170E JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x179B JUMPI JUMPDEST PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH2 0x17A3 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x1794 JUMP JUMPDEST SWAP1 DUP2 SLOAD PUSH2 0x17B4 DUP2 PUSH2 0x1782 JUMP JUMPDEST SWAP3 PUSH1 0x40 SWAP4 PUSH2 0x17C4 DUP6 MLOAD SWAP2 DUP3 PUSH2 0xD56 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP5 PUSH1 0x20 DUP1 SWAP3 ADD SWAP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP4 JUMPDEST DUP6 DUP6 LT PUSH2 0x17EA JUMPI POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP5 PUSH1 0x1 SWAP3 DUP5 MLOAD PUSH2 0x17FB DUP2 PUSH2 0xCE9 JUMP JUMPDEST DUP7 SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP3 MSTORE DUP6 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP5 SHR AND DUP4 DUP3 ADD MSTORE PUSH2 0x181F DUP6 DUP9 ADD PUSH2 0x1655 JUMP JUMPDEST DUP7 DUP3 ADD MSTORE PUSH2 0x182F PUSH1 0x2 DUP9 ADD PUSH2 0x16DE JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xFF PUSH1 0x3 DUP9 ADD SLOAD AND ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP5 ADD SWAP4 SWAP2 PUSH2 0x17DB JUMP JUMPDEST SWAP1 PUSH2 0x18EB PUSH1 0x6 PUSH2 0x185F PUSH2 0xD84 JUMP JUMPDEST DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 AND DUP4 MSTORE PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHR AND PUSH1 0x20 DUP3 ADD MSTORE SWAP4 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0xA0 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0x18C5 PUSH1 0x4 DUP3 ADD PUSH2 0x16DE JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MSTORE PUSH2 0x18E5 PUSH2 0x18DB PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xE0 DUP8 ADD MSTORE JUMP JUMPDEST ADD PUSH2 0x17A8 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP3 PUSH2 0x1903 DUP5 PUSH2 0xCB3 JUMP JUMPDEST DUP4 PUSH2 0x190D DUP4 PUSH2 0x1655 JUMP JUMPDEST DUP2 MSTORE DUP2 MLOAD SWAP3 PUSH2 0x191B DUP5 PUSH2 0xCCE JUMP JUMPDEST PUSH1 0x1 SWAP3 DUP4 DUP3 ADD SLOAD DUP6 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 PUSH1 0x20 SWAP5 DUP6 DUP8 ADD MSTORE DUP5 PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 AND DUP6 DUP11 ADD MSTORE PUSH1 0x60 SWAP2 DUP6 SHR AND DUP2 DUP10 ADD MSTORE DUP4 MLOAD SWAP4 PUSH2 0x195C DUP6 PUSH2 0xCE9 JUMP JUMPDEST PUSH1 0x4 DUP7 ADD SLOAD DUP6 MSTORE PUSH1 0xFF PUSH1 0x5 DUP8 ADD SLOAD PUSH2 0xFFFF DUP2 AND DUP6 DUP9 ADD MSTORE DUP2 DUP2 PUSH1 0x10 SHR AND ISZERO ISZERO DUP4 DUP9 ADD MSTORE PUSH1 0x18 SHR AND ISZERO ISZERO DUP3 DUP7 ADD MSTORE PUSH1 0x6 DUP7 ADD SWAP2 DUP2 MLOAD SWAP1 DUP2 SWAP6 PUSH2 0x19B2 PUSH2 0x19A6 DUP7 SLOAD DUP1 SWAP6 PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 PUSH1 0x7 DUP6 ADD LT PUSH2 0x1B27 JUMPI SWAP4 DUP8 SWAP4 DUP10 SWAP8 SWAP4 PUSH1 0x7 SWAP12 SWAP10 PUSH2 0x1A24 SWAP9 SWAP5 PUSH2 0x1A34 SWAP15 SWAP13 SWAP9 SLOAD SWAP6 DUP6 DUP6 LT PUSH2 0x1B11 JUMPI JUMPDEST DUP6 DUP6 LT PUSH2 0x1AF9 JUMPI JUMPDEST DUP6 DUP6 LT PUSH2 0x1ADF JUMPI JUMPDEST POP DUP5 DUP5 LT PUSH2 0x1ABA JUMPI JUMPDEST POP DUP4 DUP4 LT PUSH2 0x1A95 JUMPI JUMPDEST DUP4 DUP4 LT PUSH2 0x1A70 JUMPI JUMPDEST DUP4 DUP4 LT PUSH2 0x1A4B JUMPI JUMPDEST POP POP LT PUSH2 0x1A3D JUMPI JUMPDEST POP SWAP1 POP SUB DUP3 PUSH2 0xD56 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP8 ADD MSTORE ADD PUSH2 0x1851 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0xE0 SHR DUP2 MSTORE ADD DUP10 SWAP1 CODESIZE PUSH2 0x1A1A JUMP JUMPDEST SWAP1 SWAP2 SWAP5 PUSH2 0x1A66 DUP2 PUSH4 0xFFFFFFFF DUP8 PUSH1 0xC0 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST ADD SWAP4 ADD CODESIZE DUP6 PUSH2 0x1A12 JUMP JUMPDEST DUP6 PUSH2 0x1A8B DUP4 SWAP5 SWAP8 PUSH4 0xFFFFFFFF DUP9 PUSH1 0xA0 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP1 DUP6 PUSH2 0x1A0A JUMP JUMPDEST DUP6 PUSH2 0x1AB0 DUP4 SWAP5 SWAP8 PUSH4 0xFFFFFFFF DUP9 PUSH1 0x80 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP1 DUP6 PUSH2 0x1A02 JUMP JUMPDEST SWAP6 PUSH2 0x1AD4 DUP2 PUSH4 0xFFFFFFFF DUP9 DUP7 SWAP8 SWAP11 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP1 DUP6 CODESIZE PUSH2 0x19F9 JUMP JUMPDEST DUP7 SWAP1 SHR PUSH4 0xFFFFFFFF AND DUP8 MSTORE SWAP3 SWAP6 DUP3 SWAP1 DUP3 ADD SWAP7 ADD SWAP3 CODESIZE PUSH2 0x19F0 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP8 DUP5 SHR AND DUP9 MSTORE SWAP7 DUP3 ADD SWAP7 SWAP4 DUP4 ADD SWAP4 PUSH2 0x19E8 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP8 AND DUP9 MSTORE SWAP7 DUP3 ADD SWAP7 SWAP4 DUP4 ADD SWAP4 PUSH2 0x19E0 JUMP JUMPDEST SWAP7 SWAP2 PUSH2 0x100 DUP2 SWAP5 SWAP6 SWAP7 SWAP8 PUSH2 0x1BD4 PUSH1 0x8 SWAP5 SWAP6 PUSH2 0x1BC9 DUP13 SLOAD SWAP2 PUSH2 0x1B69 PUSH4 0xFFFFFFFF SWAP2 PUSH2 0x1B58 DUP8 DUP5 DUP8 AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP6 DUP3 SHR DUP5 AND AND SWAP1 DUP8 ADD MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP4 DUP15 SHR DUP3 AND AND DUP6 DUP15 ADD MSTORE PUSH4 0xFFFFFFFF DUP4 DUP11 SHR DUP3 AND AND DUP6 DUP11 ADD MSTORE PUSH2 0x1B9E PUSH1 0x80 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1BB5 PUSH1 0xA0 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xC0 SWAP1 DUP4 DUP3 DUP8 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xE0 SWAP1 DUP2 SHR SWAP1 DUP4 ADD MSTORE JUMP JUMPDEST ADD SWAP8 ADD SWAP4 ADD SWAP2 SWAP1 DUP12 SWAP7 SWAP6 SWAP5 SWAP4 PUSH2 0x19B7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xCB SLOAD DUP2 LT ISZERO PUSH2 0x1ED JUMPI PUSH2 0x1C73 SWAP1 PUSH1 0xCB PUSH1 0x0 MSTORE PUSH1 0x4 SHL PUSH32 0xA7CE836D032B2BF62B7E2097A8E0A6D8AEB35405AD15271E96D3B0188A1D0709 PUSH2 0x1C5C DUP3 PUSH32 0xA7CE836D032B2BF62B7E2097A8E0A6D8AEB35405AD15271E96D3B0188A1D06FB ADD PUSH2 0x18F3 JUMP JUMPDEST SWAP2 ADD SLOAD PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x79C JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1C9B DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x1CF8 PUSH1 0x24 CALLDATALOAD PUSH2 0x1CAA DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH2 0x1CB7 DUP3 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP4 PUSH2 0x1CDC PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND ISZERO DUP1 SWAP7 DUP2 SWAP8 PUSH2 0x1D76 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1D56 JUMPI JUMPDEST POP PUSH2 0x2386 JUMP JUMPDEST DUP5 PUSH2 0x1CEF PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x1D3D JUMPI PUSH2 0x23E9 JUMP JUMPDEST PUSH2 0x1CFE JUMPI STOP JUMPDEST PUSH2 0x1D0E PUSH2 0xFF00 NOT PUSH1 0x0 SLOAD AND PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST PUSH2 0x1D51 PUSH2 0x100 PUSH2 0xFF00 NOT PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x23E9 JUMP JUMPDEST ADDRESS EXTCODESIZE ISZERO SWAP2 POP DUP2 PUSH2 0x1D68 JUMPI JUMPDEST POP CODESIZE PUSH2 0x1CD6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP PUSH1 0xFF AND EQ CODESIZE PUSH2 0x1D61 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF DUP3 AND LT SWAP2 POP PUSH2 0x1CCF JUMP JUMPDEST POP PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1D9D DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x1DA8 PUSH1 0x24 CALLDATALOAD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x310 PUSH2 0x1DCA SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH32 0x2849B43074093A05396B6F2A937DEE8565B15A48A7B3D4BFFB732A5017380AF5 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP1 PUSH2 0x4A4 CALLER SWAP5 CALLVALUE DUP4 PUSH2 0x2AB5 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1E23 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x1E2B PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0xFE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE STOP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1E6B DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x1E73 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1E8B JUMPI PUSH2 0x19 SWAP1 PUSH2 0x1F37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1EF3 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST ISZERO PUSH2 0x1F87 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1FE8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x204F DUP3 PUSH2 0xD3B JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1ED JUMPI MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2078 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x2E PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x2153 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x21B8 DUP3 PUSH2 0x211E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP1 LOG2 DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2262 JUMPI JUMPDEST PUSH2 0x21FA JUMPI POP POP JUMP JUMPDEST PUSH2 0x225F SWAP2 PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x220E DUP6 PUSH2 0xC98 JUMP JUMPDEST PUSH1 0x27 DUP6 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x20 DUP7 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL PUSH2 0x2259 PUSH2 0x22BD JUMP JUMPDEST SWAP2 PUSH2 0x22ED JUMP JUMPDEST POP JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x21F2 JUMP JUMPDEST SWAP1 PUSH2 0x2274 DUP3 PUSH2 0x211E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP1 LOG2 DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x22B5 JUMPI PUSH2 0x21FA JUMPI POP POP JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x21F2 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x22E8 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x22CE DUP3 PUSH2 0xD91 JUMP JUMPDEST SWAP2 PUSH2 0x22DC PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xD56 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x234F JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2301 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x230A JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2362 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0xC1A SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST ISZERO PUSH2 0x238D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x2405 PUSH1 0xFF PUSH1 0x0 SLOAD PUSH1 0x8 SHR AND PUSH2 0x2400 DUP2 PUSH2 0x2466 JUMP JUMPDEST PUSH2 0x2466 JUMP JUMPDEST PUSH2 0x240E CALLER PUSH2 0x1F37 JUMP JUMPDEST PUSH2 0x241F PUSH1 0xFF PUSH1 0x0 SLOAD PUSH1 0x8 SHR AND PUSH2 0x2466 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP4 AND DUP4 PUSH1 0xC9 SLOAD AND OR PUSH1 0xC9 SSTORE AND SWAP1 PUSH1 0xCA SLOAD AND OR PUSH1 0xCA SSTORE PUSH2 0x2456 PUSH2 0x1EDF JUMP JUMPDEST DUP2 AND ISZERO PUSH2 0x1E8B JUMPI PUSH2 0x1FD SWAP1 PUSH2 0x1F37 JUMP JUMPDEST ISZERO PUSH2 0x246D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x24CD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A2066756E6374696F6E2063616E206F6E6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x792062652063616C6C65642066726F6D20616E20454F41000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x253F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A2063616E6E6F742073656E6420746F2073 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x32B633 PUSH1 0xE9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2597 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A2063616E6E6F742073656E6420746F206D PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x32B9B9B2B733B2B9 PUSH1 0xC1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x25F4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A20455448207472616E7366657220666169 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x1B1959 PUSH1 0xEA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x2669 JUMPI JUMP JUMPDEST PUSH2 0x1FD PUSH2 0x2645 JUMP JUMPDEST ISZERO PUSH2 0x2678 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A2077726F6E672072656D6F746520746F6B PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656E20666F7220466972656C696E6B204D696E7461626C65204552433230206C PUSH1 0x64 DUP3 ADD MSTORE PUSH10 0x37B1B0B6103A37B5B2B7 PUSH1 0xB1 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x1FD SWAP2 PUSH2 0x2732 PUSH1 0x64 DUP4 PUSH2 0xD56 JUMP JUMPDEST PUSH2 0x2756 JUMP JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1ED JUMPI MLOAD PUSH2 0x799 DUP2 PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27AE SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x276F DUP3 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 SWAP6 DUP7 DUP6 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP8 DUP7 ADD MSTORE DUP7 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL PUSH2 0x2259 PUSH2 0x22BD JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP3 DUP3 ISZERO SWAP3 DUP4 ISZERO PUSH2 0x281E JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x27C7 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x282E SWAP4 POP DUP3 ADD DUP2 ADD SWAP2 ADD PUSH2 0x2741 JUMP JUMPDEST CODESIZE DUP3 DUP2 PUSH2 0x27BC JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x2669 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x1FD SWAP2 PUSH2 0x2732 DUP3 PUSH2 0xCE9 JUMP JUMPDEST PUSH2 0x288E DUP2 PUSH2 0x2925 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2899 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x28A4 DUP2 PUSH2 0x2982 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x2913 JUMPI JUMPDEST DUP2 PUSH2 0x28B4 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH4 0xEC4FC8E3 PUSH1 0xE0 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x28E6 DUP2 PUSH2 0xC98 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x7530 STATICCALL PUSH1 0x0 MLOAD RETURNDATASIZE DUP3 PUSH2 0x2907 JUMPI JUMPDEST POP DUP2 PUSH2 0x2900 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 GT ISZERO SWAP2 POP CODESIZE PUSH2 0x28F6 JUMP JUMPDEST SWAP1 POP PUSH2 0x291E DUP2 PUSH2 0x29AB JUMP JUMPDEST ISZERO SWAP1 PUSH2 0x28AB JUMP JUMPDEST PUSH2 0x292E DUP2 PUSH2 0x2982 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x2970 JUMPI JUMPDEST DUP2 PUSH2 0x293E JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH4 0x1D1D8B63 PUSH1 0xE0 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x28E6 DUP2 PUSH2 0xC98 JUMP JUMPDEST SWAP1 POP PUSH2 0x297B DUP2 PUSH2 0x29AB JUMP JUMPDEST ISZERO SWAP1 PUSH2 0x2935 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP1 DUP4 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x28E6 DUP2 PUSH2 0xC98 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x28E6 DUP2 PUSH2 0xC98 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1ED JUMPI MLOAD PUSH2 0x799 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x29F9 DUP2 PUSH2 0x2925 JUMP JUMPDEST ISZERO PUSH2 0x2A78 JUMPI PUSH1 0x40 MLOAD PUSH4 0x600F0DEB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x2A6B JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x2A3D JUMPI JUMPDEST POP AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2A5E SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2A64 JUMPI JUMPDEST PUSH2 0x2A56 DUP2 DUP4 PUSH2 0xD56 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x29DB JUMP JUMPDEST CODESIZE PUSH2 0x2A35 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2A4C JUMP JUMPDEST PUSH2 0x2A73 PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x2A2D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35B02CB1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x2A6B JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2A3D JUMPI POP AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x799 SWAP4 SWAP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP5 SWAP3 SWAP1 SWAP2 AND SWAP3 PUSH32 0x31B2166FF604FC5672EA5DF08A78081D2BC6D746CADCE880747F3643D819E83D SWAP3 DUP3 SWAP2 PUSH2 0x2B0F SWAP2 SWAP1 DUP4 PUSH2 0x2AB5 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x799 SWAP4 SWAP3 PUSH1 0x60 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP7 SWAP3 DUP5 AND SWAP6 SWAP2 SWAP1 SWAP4 AND SWAP4 PUSH32 0x7FF126DB8024424BBFD9826E8AB82FF59136289EA440B04B39A0DF1B03B9CABF SWAP4 SWAP3 DUP4 SWAP3 PUSH2 0x2B7F SWAP3 DUP5 PUSH2 0x2B14 JUMP JUMPDEST SUB SWAP1 LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP7 SWAP3 DUP5 AND SWAP6 SWAP2 SWAP1 SWAP4 AND SWAP4 PUSH32 0xD59C65B35445225835C83F50B6EDE06A7BE047D22E357073E250D9AF537518CD SWAP4 SWAP3 DUP4 SWAP3 PUSH2 0x2B7F SWAP3 DUP5 PUSH2 0x2B14 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP4 SWAP2 SWAP3 DUP5 SWAP4 PUSH1 0x20 DUP5 MLOAD SWAP5 ADD SWAP3 CALL SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1ED JUMPI DUP2 PUSH1 0x5 SHL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1ED JUMPI JUMP JUMPDEST DUP2 DUP4 MSTORE SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT PUSH2 0x1ED JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0x2C36 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x9E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0x2737 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH2 0x11E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1ED JUMPI DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x1ED JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0x2CE4 JUMP JUMPDEST SWAP1 DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 SWAP4 ADD SWAP3 DUP4 DUP3 PUSH1 0x5 SHL DUP2 ADD SWAP5 DUP5 PUSH1 0x0 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x2D22 JUMPI POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 DUP6 DUP1 DUP3 DUP5 PUSH1 0x1 SWAP5 SUB DUP8 MSTORE PUSH2 0x2D3D DUP12 DUP8 PUSH2 0x2C52 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF DUP3 CALLDATALOAD PUSH2 0x2D4E DUP2 PUSH2 0x41D JUMP JUMPDEST AND DUP2 MSTORE DUP3 DUP3 ADD CALLDATALOAD PUSH2 0x2D5E DUP2 PUSH2 0x1DC JUMP JUMPDEST DUP6 DUP1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 ADD MSTORE PUSH2 0x2DA9 PUSH2 0x2D8E PUSH1 0x40 PUSH2 0x2D7D DUP2 DUP7 ADD DUP7 PUSH2 0x2BDE JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xA0 DUP1 SWAP2 DUP8 ADD MSTORE DUP6 ADD SWAP2 PUSH2 0x2C12 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2D9C DUP2 DUP7 ADD DUP7 PUSH2 0x2C92 JUMP JUMPDEST SWAP2 DUP6 DUP5 SUB SWAP1 DUP7 ADD MSTORE PUSH2 0x2CC3 JUMP JUMPDEST SWAP2 PUSH1 0x80 DUP1 SWAP2 ADD CALLDATALOAD PUSH2 0x2DB9 DUP2 PUSH2 0x2737 JUMP JUMPDEST ISZERO ISZERO SWAP2 ADD MSTORE SWAP10 ADD SWAP5 ADD SWAP5 ADD SWAP3 SWAP6 SWAP5 SWAP4 SWAP2 SWAP1 PUSH2 0x2D11 JUMP JUMPDEST PUSH2 0x799 SWAP2 PUSH2 0x2DED DUP2 PUSH2 0x2DE0 DUP5 PUSH2 0x2C47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x2E0C PUSH2 0x2DFC PUSH1 0x20 DUP5 ADD PUSH2 0x2C47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x2E2B PUSH2 0x2E1B PUSH1 0x40 DUP5 ADD PUSH2 0x1F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x2E43 PUSH2 0x2E3A PUSH1 0x60 DUP5 ADD PUSH2 0x2C72 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x2E62 PUSH2 0x2E52 PUSH1 0x80 DUP5 ADD PUSH2 0x1F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x2E8D PUSH2 0x2E7C PUSH1 0xC0 DUP5 ADD DUP5 PUSH2 0x2C92 JUMP JUMPDEST PUSH2 0x120 DUP1 PUSH1 0xC0 DUP7 ADD MSTORE DUP5 ADD SWAP2 PUSH2 0x2CC3 JUMP JUMPDEST SWAP2 PUSH2 0x2EA7 PUSH2 0x2E9D PUSH1 0xE0 DUP4 ADD PUSH2 0x2CEF JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xE0 DUP5 ADD MSTORE JUMP JUMPDEST PUSH2 0x2EB7 PUSH2 0x100 SWAP2 DUP3 DUP2 ADD SWAP1 PUSH2 0x2BDE JUMP JUMPDEST SWAP3 SWAP1 SWAP2 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0x2CFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x58FBE9E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH2 0x2EFA PUSH2 0x2EE9 DUP3 DUP1 PUSH2 0x2BDE JUMP JUMPDEST PUSH1 0x40 PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD SWAP2 PUSH2 0x2C12 JUMP JUMPDEST SWAP1 DUP4 DUP2 ADD CALLDATALOAD PUSH1 0xBE NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI DUP4 DUP4 SUB PUSH1 0x23 NOT ADD PUSH1 0x44 DUP6 ADD MSTORE ADD DUP1 CALLDATALOAD DUP3 MSTORE DUP1 DUP5 ADD CALLDATALOAD DUP3 DUP6 ADD MSTORE SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2F39 DUP2 PUSH2 0x2C36 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 SWAP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x2F57 DUP2 PUSH2 0x2C36 JUMP JUMPDEST AND PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x2F6A PUSH1 0x80 DUP6 ADD DUP6 PUSH2 0x2C52 JUMP JUMPDEST SWAP4 PUSH1 0xC0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x2FCE PUSH2 0x160 DUP4 ADD SWAP6 DUP1 CALLDATALOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0xFFFF DUP7 DUP3 ADD CALLDATALOAD PUSH2 0x2F92 DUP2 PUSH2 0x2C66 JUMP JUMPDEST AND PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH2 0x2FA6 DUP2 PUSH2 0x2737 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x100 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH2 0x2FBC DUP2 PUSH2 0x2737 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x120 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP1 PUSH2 0x2BDE JUMP JUMPDEST PUSH1 0xA0 PUSH2 0x140 DUP6 ADD MSTORE SWAP6 DUP7 SWAP1 MSTORE PUSH2 0x180 DUP4 ADD SWAP6 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3070 JUMPI POP POP POP SWAP4 PUSH2 0x3010 SWAP2 PUSH2 0x3002 DUP7 PUSH1 0xA0 DUP7 SWAP8 SWAP9 ADD SWAP1 PUSH2 0x2C7D JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2DCF JUMP JUMPDEST SUB DUP2 PUSH20 0xF37AD1278917C04FB291C75A42E61710964CB57C GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x3063 JUMPI JUMPDEST PUSH1 0x0 SWAP3 PUSH2 0x303D JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH2 0x799 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x305C JUMPI JUMPDEST PUSH2 0x3054 DUP2 DUP4 PUSH2 0xD56 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2741 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x304A JUMP JUMPDEST PUSH2 0x306B PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x3031 JUMP JUMPDEST SWAP3 SWAP5 POP SWAP3 SWAP5 DUP1 DUP3 SWAP8 PUSH4 0xFFFFFFFF PUSH1 0x1 SWAP5 CALLDATALOAD PUSH2 0x308A DUP2 PUSH2 0x41D JUMP JUMPDEST AND DUP2 MSTORE ADD SWAP7 ADD SWAP2 ADD SWAP1 DUP8 SWAP5 SWAP3 DUP8 SWAP5 SWAP3 PUSH2 0x2FE3 JUMP JUMPDEST ISZERO PUSH2 0x30A5 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964207472616E73616374696F6E2070726F6F6600000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x3139 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0xCB SSTORE DUP2 LT ISZERO PUSH2 0x1648 JUMPI PUSH1 0xCB PUSH1 0x0 MSTORE PUSH1 0x4 SHL PUSH32 0xA7CE836D032B2BF62B7E2097A8E0A6D8AEB35405AD15271E96D3B0188A1D06FB ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3141 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x30FA JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1ED JUMPI PUSH1 0x20 ADD SWAP2 DUP2 PUSH1 0x5 SHL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1ED JUMPI JUMP JUMPDEST DUP1 SLOAD SWAP1 PUSH1 0x0 SWAP1 DUP2 DUP2 SSTORE DUP3 PUSH2 0x31A5 JUMPI POP POP POP JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP2 DUP3 ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x31BC JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x31B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x320B JUMPI JUMPDEST DUP1 SLOAD SWAP2 DUP1 DUP3 SSTORE DUP3 DUP2 LT PUSH2 0x31E5 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP3 DUP4 ADD SWAP3 ADD JUMPDEST DUP3 DUP2 LT PUSH2 0x3200 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x31F4 JUMP JUMPDEST PUSH2 0x3213 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x31D3 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0xBE NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x2C36 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x9E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x2737 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x3261 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3256 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP2 GT PUSH2 0x32D6 JUMPI JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP1 DUP3 LT PUSH2 0x328B JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x1FD SWAP3 PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x1C DUP3 DUP6 ADD PUSH1 0x3 SHR DUP5 ADD SWAP5 PUSH1 0x2 SHL AND DUP1 PUSH2 0x32BB JUMPI JUMPDEST POP ADD PUSH1 0x3 SHR ADD SWAP1 PUSH2 0x3256 JUMP JUMPDEST PUSH1 0x0 NOT SWAP1 DUP2 DUP7 ADD SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x20 SUB PUSH1 0x3 SHL SHR AND SWAP1 SSTORE CODESIZE PUSH2 0x32AF JUMP JUMPDEST PUSH2 0x32DE PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x327A JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x41D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3318 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x33DF JUMPI JUMPDEST PUSH2 0x330C DUP4 DUP6 PUSH2 0x326D JUMP JUMPDEST SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x3 SHR SWAP2 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x338F JUMPI POP PUSH1 0x7 NOT DUP2 AND SWAP1 SUB DUP1 PUSH2 0x333B JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP4 DUP5 JUMPDEST DUP2 DUP2 LT PUSH2 0x3356 JUMPI POP POP POP ADD SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3335 JUMP JUMPDEST SWAP1 SWAP2 SWAP5 PUSH1 0x20 PUSH2 0x3385 PUSH1 0x1 SWAP3 PUSH2 0x336A DUP10 PUSH2 0x32E3 JUMP JUMPDEST SWAP1 DUP6 PUSH1 0x2 SHL PUSH1 0x3 SHL PUSH4 0xFFFFFFFF DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP7 ADD SWAP3 SWAP2 ADD PUSH2 0x3341 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0x33A8 JUMPI POP DUP4 DUP3 ADD SSTORE PUSH1 0x1 ADD PUSH2 0x3320 JUMP JUMPDEST SWAP6 SWAP1 PUSH1 0x20 PUSH2 0x33D6 PUSH1 0x1 SWAP3 PUSH2 0x33BB DUP6 PUSH2 0x32E3 JUMP JUMPDEST SWAP1 DUP11 PUSH1 0x2 SHL PUSH1 0x3 SHL PUSH4 0xFFFFFFFF DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP3 ADD SWAP7 ADD PUSH2 0x3393 JUMP JUMPDEST PUSH2 0x33E7 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3302 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH2 0x11E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x1DC JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1ED JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x1ED JUMPI JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x344D JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x1FD SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x3479 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3256 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x346C JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x354B JUMPI JUMPDEST PUSH2 0x34A9 DUP2 PUSH2 0x34A3 DUP5 SLOAD PUSH2 0x16A4 JUMP JUMPDEST DUP5 PUSH2 0x343E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x34E3 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x34D8 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD CALLDATALOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x34C2 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP5 PUSH2 0x34F8 DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 DUP1 JUMPDEST DUP8 DUP2 LT PUSH2 0x3533 JUMPI POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x3519 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD CALLDATALOAD PUSH1 0x0 NOT PUSH1 0x3 DUP5 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x350F JUMP JUMPDEST SWAP1 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP7 ADD CALLDATALOAD DUP2 SSTORE ADD SWAP5 ADD SWAP2 ADD PUSH2 0x34FB JUMP JUMPDEST PUSH2 0x3553 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3495 JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x2CE4 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF DUP2 CALLDATALOAD PUSH2 0x3573 DUP2 PUSH2 0x41D JUMP JUMPDEST AND DUP3 SLOAD DUP2 PUSH4 0xFFFFFFFF NOT DUP3 AND OR DUP5 SSTORE PUSH1 0x20 SWAP2 DUP3 DUP5 ADD CALLDATALOAD PUSH2 0x3592 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP3 AND OR SWAP1 DUP3 SHL PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB AND OR DUP4 SSTORE PUSH1 0x1 SWAP1 DUP4 DUP3 ADD PUSH2 0x35C5 PUSH1 0x40 DUP6 ADD DUP6 PUSH2 0x315D JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT PUSH2 0x3649 JUMPI JUMPDEST PUSH2 0x35E0 DUP5 DUP5 PUSH2 0x31C7 JUMP JUMPDEST SWAP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3638 JUMPI POP POP POP POP POP POP SWAP1 PUSH1 0x3 PUSH2 0x3625 PUSH1 0x80 DUP5 PUSH2 0x361F PUSH2 0x3615 PUSH1 0x60 PUSH2 0x1FD SWAP9 ADD DUP4 PUSH2 0x340C JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP9 ADD PUSH2 0x3483 JUMP JUMPDEST ADD PUSH2 0x324C JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST DUP4 CALLDATALOAD DUP4 DUP3 ADD SSTORE SWAP3 DUP2 ADD SWAP3 DUP6 ADD PUSH2 0x35EC JUMP JUMPDEST PUSH2 0x3651 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x35D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP4 GT PUSH2 0x37A3 JUMPI JUMPDEST DUP1 SLOAD DUP4 DUP3 SSTORE DUP1 DUP5 LT PUSH2 0x36BA JUMPI JUMPDEST POP SWAP1 PUSH2 0x3681 DUP2 SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3694 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 DUP3 PUSH2 0x36AE PUSH2 0x36A8 PUSH1 0x1 SWAP6 DUP8 PUSH2 0x3237 JUMP JUMPDEST DUP8 PUSH2 0x3562 JUMP JUMPDEST ADD SWAP4 ADD SWAP4 ADD SWAP3 SWAP2 PUSH2 0x3686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xFE SHL SUB DUP2 DUP2 AND DUP3 SUB PUSH2 0x3796 JUMPI JUMPDEST DUP5 AND DUP5 SUB PUSH2 0x3789 JUMPI JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP2 PUSH1 0x2 SWAP1 DUP2 SHL DUP4 ADD SWAP3 DUP7 DUP3 SHL ADD JUMPDEST DUP4 DUP2 LT PUSH2 0x36FB JUMPI POP POP POP PUSH2 0x366F JUMP JUMPDEST DUP1 DUP4 PUSH1 0x4 SWAP3 SSTORE DUP4 PUSH1 0x1 PUSH2 0x370F DUP2 DUP5 ADD PUSH2 0x3192 JUMP JUMPDEST DUP5 DUP4 ADD SWAP1 PUSH2 0x371D DUP3 SLOAD PUSH2 0x16A4 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x3732 JUMPI JUMPDEST POP POP POP PUSH1 0x3 DUP3 ADD SSTORE ADD PUSH2 0x36EC JUMP JUMPDEST PUSH1 0x1F DUP1 DUP4 GT PUSH1 0x1 EQ PUSH2 0x374C JUMPI POP POP POP SSTORE JUMPDEST DUP4 CODESIZE DUP1 DUP1 PUSH2 0x3724 JUMP JUMPDEST PUSH2 0x3784 SWAP5 POP SWAP1 PUSH2 0x3774 SWAP3 SWAP2 PUSH2 0x3766 DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 ADD PUSH2 0x3256 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE DUP2 PUSH1 0x20 DUP2 KECCAK256 SWAP2 SSTORE SSTORE JUMP JUMPDEST PUSH2 0x3743 JUMP JUMPDEST PUSH2 0x3791 PUSH2 0x2645 JUMP JUMPDEST PUSH2 0x36D5 JUMP JUMPDEST PUSH2 0x379E PUSH2 0x2645 JUMP JUMPDEST PUSH2 0x36CC JUMP JUMPDEST PUSH2 0x37AB PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3662 JUMP JUMPDEST PUSH1 0x6 SWAP1 PUSH2 0x38FA PUSH2 0x1FD SWAP4 PUSH2 0x37E3 PUSH2 0x37C6 DUP3 PUSH2 0x322D JUMP JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND OR DUP5 SSTORE JUMP JUMPDEST PUSH2 0x381F PUSH2 0x37F2 PUSH1 0x20 DUP4 ADD PUSH2 0x322D JUMP JUMPDEST DUP5 SLOAD PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT AND PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 SHL AND OR DUP5 SSTORE JUMP JUMPDEST PUSH2 0x3877 PUSH1 0x1 DUP5 ADD PUSH2 0x3851 PUSH2 0x3835 PUSH1 0x40 DUP6 ADD PUSH2 0x3402 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x385D PUSH1 0x60 DUP5 ADD PUSH2 0x324C JUMP JUMPDEST DUP2 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 ISZERO ISZERO PUSH1 0xA0 SHL PUSH1 0xFF PUSH1 0xA0 SHL AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x38A9 PUSH2 0x3886 PUSH1 0x80 DUP4 ADD PUSH2 0x3402 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD CALLDATALOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH2 0x38CD PUSH2 0x38C3 PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x340C JUMP JUMPDEST SWAP1 PUSH1 0x4 DUP7 ADD PUSH2 0x3483 JUMP JUMPDEST PUSH2 0x38EF PUSH2 0x38DC PUSH1 0xE0 DUP4 ADD PUSH2 0x3558 JUMP JUMPDEST PUSH1 0x5 DUP6 ADD SWAP1 PUSH1 0xFF AND PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x100 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP3 SWAP1 SWAP2 ADD PUSH2 0x3656 JUMP JUMPDEST SWAP1 PUSH2 0x390E DUP2 DUP1 PUSH2 0x315D JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x3A8D JUMPI JUMPDEST PUSH2 0x3929 DUP4 DUP6 PUSH2 0x31C7 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP3 DUP4 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x3A7B JUMPI POP POP POP POP PUSH2 0x3A74 DUP3 PUSH2 0x3A6A PUSH2 0x3A60 PUSH2 0x3960 DUP6 PUSH2 0x1FD SWAP9 SWAP8 PUSH1 0x7 SWAP8 ADD SWAP1 PUSH2 0x3218 JUMP JUMPDEST SWAP3 DUP4 CALLDATALOAD PUSH1 0x1 DUP9 ADD SSTORE DUP1 DUP5 ADD CALLDATALOAD PUSH1 0x2 DUP9 ADD SSTORE PUSH2 0x39DD PUSH1 0x3 DUP9 ADD PUSH2 0x39A6 PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x3989 DUP2 PUSH2 0x2C36 JUMP JUMPDEST DUP3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x39B5 DUP3 PUSH2 0x2C36 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 SHL DUP3 SLOAD SWAP2 PUSH1 0x40 SHL AND SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 SHL NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3A56 PUSH2 0x39ED PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x3237 JUMP JUMPDEST SWAP2 DUP3 CALLDATALOAD PUSH1 0x4 DUP11 ADD SSTORE PUSH1 0x5 DUP10 ADD SWAP1 DUP4 ADD CALLDATALOAD PUSH2 0x3A06 DUP2 PUSH2 0x2C66 JUMP JUMPDEST DUP2 SLOAD PUSH2 0xFFFF PUSH3 0xFF0000 PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x3A1D DUP2 PUSH2 0x2737 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x10 SHL AND SWAP3 AND SWAP1 PUSH3 0xFFFFFF NOT AND OR OR DUP2 SSTORE PUSH2 0x3A3C PUSH1 0x60 DUP5 ADD PUSH2 0x324C JUMP JUMPDEST DUP2 SLOAD PUSH4 0xFF000000 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x18 SHL PUSH4 0xFF000000 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP1 PUSH1 0x6 DUP8 ADD PUSH2 0x32ED JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x33EC JUMP JUMPDEST SWAP2 ADD PUSH2 0x37B0 JUMP JUMPDEST DUP3 CALLDATALOAD DUP3 DUP3 ADD SSTORE SWAP2 DUP6 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x3938 JUMP JUMPDEST PUSH2 0x3A95 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x391F JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x3AAA JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x3AB2 PUSH2 0x2645 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x799 SWAP3 DUP2 LT ISZERO PUSH2 0x3ACF JUMPI JUMPDEST PUSH1 0x5 SHL DUP2 ADD SWAP1 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x3AD7 PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x3AC4 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x1ED JUMPI DUP2 CALLDATALOAD PUSH2 0x3AF2 DUP2 PUSH2 0x1DC JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3B01 DUP2 PUSH2 0x1DC JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x799 SWAP3 ADD PUSH2 0xDF2 JUMP JUMPDEST DUP1 SLOAD ISZERO PUSH2 0x3B3B JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3B43 PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x3B2D JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x3B65 JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 SHL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3B6D PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x3B52 JUMP JUMPDEST PUSH2 0x3B91 DUP2 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x3CC2 JUMPI JUMPDEST PUSH1 0x1 SWAP3 DUP4 DUP3 ADD DUP2 SSTORE PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3CB5 JUMPI JUMPDEST DUP3 MLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR DUP4 SSTORE PUSH1 0x20 DUP1 DUP7 ADD MLOAD DUP6 DUP6 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE ADD SWAP4 ADD MLOAD SWAP1 DUP2 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x3CA8 JUMPI JUMPDEST PUSH2 0x3C06 DUP4 PUSH2 0x3C00 DUP8 SLOAD PUSH2 0x16A4 JUMP JUMPDEST DUP8 PUSH2 0x343E JUMP JUMPDEST DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x3C3F JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 PUSH1 0x0 SWAP5 PUSH2 0x3C34 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH2 0x3C21 JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND PUSH2 0x3C56 DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0x3C8E JUMPI POP POP POP LT PUSH2 0x3C75 JUMPI POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x350F JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x3C5B JUMP JUMPDEST PUSH2 0x3CB0 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3BF2 JUMP JUMPDEST PUSH2 0x3CBD PUSH2 0x3146 JUMP JUMPDEST PUSH2 0x3B96 JUMP JUMPDEST PUSH2 0x3CCA PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3B84 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3CE4 JUMPI JUMPDEST PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x3CEC PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x3CDC JUMP JUMPDEST SWAP1 PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP3 PUSH2 0x3D01 DUP5 PUSH2 0xC98 JUMP JUMPDEST DUP4 PUSH2 0x3D0B DUP4 PUSH2 0x18F3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0xF PUSH1 0xE DUP5 ADD SLOAD SWAP4 PUSH1 0x20 SWAP5 DUP6 DUP5 ADD MSTORE ADD DUP1 SLOAD SWAP1 PUSH2 0x3D29 DUP3 PUSH2 0x1782 JUMP JUMPDEST SWAP5 PUSH2 0x3D36 DUP6 MLOAD SWAP7 DUP8 PUSH2 0xD56 JUMP JUMPDEST DUP3 DUP7 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE DUP1 DUP3 KECCAK256 DUP2 DUP8 ADD JUMPDEST DUP5 DUP5 LT PUSH2 0x3D55 JUMPI POP POP POP POP POP ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP4 PUSH1 0x1 SWAP3 DUP10 MLOAD PUSH2 0x3D66 DUP2 PUSH2 0xD20 JUMP JUMPDEST DUP5 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP8 SLOAD AND DUP3 MSTORE DUP6 DUP8 ADD SLOAD AND DUP4 DUP3 ADD MSTORE PUSH1 0x2 DUP7 ADD SLOAD DUP12 DUP3 ADD MSTORE PUSH2 0x3D90 PUSH1 0x3 DUP8 ADD PUSH2 0x16DE JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP3 ADD SWAP4 ADD SWAP3 SWAP1 PUSH2 0x3D45 JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220F0 REVERT PUSH2 0xF6D1 0xC6 DUP13 0x5E DUP11 GAS 0xD0 SWAP6 RETURN DUP16 PUSH2 0x965C PUSH32 0xE15A03B48781BD49F9A13B6ED4E664736F6C6343000811003300000000000000 ","sourceMap":"1369:11033:52:-:0;;;;;;;1332:4:39;1324:13;;6007::38;1369:11033:52;;;;;;;;;;;;;;6078:31:38;6074:139;;-1:-1:-1;1369:11033:52;;;;;;;;1324:13:39;1369:11033:52;;;;;;;;;;;;;;;;6074:139:38;1369:11033:52;;;;;;6007:13:38;1369:11033:52;6174:28:38;1369:11033:52;;;;;;6174:28:38;6074:139;;;1369:11033:52;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode":{"entryPoint":1494,"id":null,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":498,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":10715,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_address_payablet_address_payablet_uint256t_bytes":{"entryPoint":15068,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_available_length_bytes":{"entryPoint":3515,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool":{"entryPoint":11378,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":10049,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":3570,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes32_fromMemory":{"entryPoint":8277,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":511,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_struct_Proof_calldata":{"entryPoint":969,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint64":{"entryPoint":11335,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint8":{"entryPoint":11503,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_address_uint256_bytes":{"entryPoint":11028,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_array_bytes32_dyn":{"entryPoint":1505,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_bytes32_dyn_calldata":{"entryPoint":11282,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_array_struct_Event_calldata_dyn_calldata":{"entryPoint":11514,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_array_struct_Event_dyn":{"entryPoint":1621,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_struct_TransactionInfo_dyn":{"entryPoint":2182,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_bytes":{"entryPoint":1557,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes32":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":11459,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_rational_by":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_8e8e":{"entryPoint":8399,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_struct_Proof":{"entryPoint":1948,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_ResponseBody":{"entryPoint":1790,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_ResponseBody_calldata":{"entryPoint":11727,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256_bytes":{"entryPoint":10933,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_uint32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_uint8":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"access_calldata_tail_array_bytes32_dyn_calldata":{"entryPoint":12637,"id":null,"parameterSlots":2,"returnSlots":2},"access_calldata_tail_bytes_calldata":{"entryPoint":13324,"id":null,"parameterSlots":2,"returnSlots":2},"access_calldata_tail_struct_RequestBody_calldata":{"entryPoint":12855,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_struct_ResponseBody_calldata":{"entryPoint":13292,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_struct_Response_calldata":{"entryPoint":12824,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":3460,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_23527":{"entryPoint":3447,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_array_bytes":{"entryPoint":8258,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_struct_Event_dyn":{"entryPoint":6018,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":3473,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_array_struct_TransactionInfo_storage_dyn":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"array_push_from_struct_EventInfo_to_array_struct_EventInfo_storage_dyn_ptr":{"entryPoint":15218,"id":null,"parameterSlots":2,"returnSlots":0},"array_push_zero_array_struct_TransactionInfo_storage_dyn_ptr":{"entryPoint":12522,"id":null,"parameterSlots":0,"returnSlots":2},"array_storeLengthForEncoding_array_struct_TransactionInfo_dyn":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_array_bytes32_dyn_calldata":{"entryPoint":11230,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_access_bytes_calldata":{"entryPoint":11410,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_access_struct_RequestBody_calldata":{"entryPoint":11346,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_struct_ResponseBody_calldata":{"entryPoint":11389,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_array_index_access_struct_Event_calldata_dyn_calldata":{"entryPoint":15030,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_uint256":{"entryPoint":10294,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":9820,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":13374,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_uint32":{"entryPoint":12886,"id":null,"parameterSlots":2,"returnSlots":0},"copy_array_from_storage_to_memory_array_bytes32_dyn":{"entryPoint":5717,"id":null,"parameterSlots":1,"returnSlots":1},"copy_array_from_storage_to_memory_array_struct_Event_dyn":{"entryPoint":6056,"id":null,"parameterSlots":1,"returnSlots":1},"copy_array_from_storage_to_memory_bytes":{"entryPoint":5854,"id":null,"parameterSlots":1,"returnSlots":1},"copy_array_to_storage_from_array_struct_Event_calldata_dyn_calldata_to_array_struct_Event_dyn":{"entryPoint":13910,"id":null,"parameterSlots":3,"returnSlots":0},"copy_array_to_storage_from_array_uint32_dyn_calldata_to_array_uint32_dyn":{"entryPoint":13037,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_bytes_calldata_to_bytes":{"entryPoint":13443,"id":null,"parameterSlots":3,"returnSlots":0},"copy_struct_to_storage_from_struct_Event_calldata_to_struct_Event":{"entryPoint":13666,"id":null,"parameterSlots":2,"returnSlots":0},"copy_struct_to_storage_from_struct_Proof_calldata_to_struct_Proof":{"entryPoint":14595,"id":null,"parameterSlots":2,"returnSlots":0},"copy_struct_to_storage_from_struct_ResponseBody_calldata_to_struct_ResponseBody":{"entryPoint":14256,"id":null,"parameterSlots":2,"returnSlots":0},"external_fun_FinalizeBridgeAndReleaseEth":{"entryPoint":4569,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_MESSENGER":{"entryPoint":5580,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_OTHER_BRIDGE":{"entryPoint":5059,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_bridgeERC20":{"entryPoint":5101,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_bridgeERC20To":{"entryPoint":4119,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_bridgeETH":{"entryPoint":1067,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_bridgeETHTo":{"entryPoint":7556,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_deposits":{"entryPoint":5480,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_finalizeBridgeERC20":{"entryPoint":556,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_finalizeBridgeETH":{"entryPoint":1193,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getAllTransactions":{"entryPoint":2455,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getTransactionCount":{"entryPoint":2804,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_initialize":{"entryPoint":7293,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_isEVMTransactionProofValid":{"entryPoint":1018,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_owner":{"entryPoint":5438,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_proxiableUUID":{"entryPoint":3921,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_renounceOwnership":{"entryPoint":4474,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_setEthERC20ContractAddress":{"entryPoint":7685,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_transactions":{"entryPoint":7141,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_transferOwnership":{"entryPoint":7757,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_upgradeTo":{"entryPoint":2835,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_upgradeToAndCall":{"entryPoint":3597,"id":null,"parameterSlots":0,"returnSlots":0},"extract_byte_array_length":{"entryPoint":5796,"id":null,"parameterSlots":1,"returnSlots":1},"extract_from_storage_value_offsett_uint8":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"extract_returndata":{"entryPoint":8893,"id":null,"parameterSlots":0,"returnSlots":1},"finalize_allocation":{"entryPoint":3414,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_23502":{"entryPoint":3192,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_23506":{"entryPoint":3224,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_23507":{"entryPoint":3251,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_23508":{"entryPoint":3278,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_23509":{"entryPoint":3305,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_23510":{"entryPoint":3332,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_23692":{"entryPoint":3360,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_35615":{"entryPoint":3387,"id":null,"parameterSlots":1,"returnSlots":0},"fun_call":{"entryPoint":11211,"id":6358,"parameterSlots":4,"returnSlots":1},"fun_callOptionalReturn":{"entryPoint":10070,"id":5042,"parameterSlots":2,"returnSlots":0},"fun_checkOwner":{"entryPoint":7903,"id":2774,"parameterSlots":0,"returnSlots":0},"fun_emitERC20BridgeFinalized":{"entryPoint":11140,"id":6338,"parameterSlots":6,"returnSlots":0},"fun_emitERC20BridgeInitiated":{"entryPoint":11064,"id":6313,"parameterSlots":6,"returnSlots":0},"fun_emitETHBridgeFinalized":{"entryPoint":10956,"id":6288,"parameterSlots":4,"returnSlots":0},"fun_initialize_inner":{"entryPoint":9193,"id":null,"parameterSlots":3,"returnSlots":0},"fun_isCorrectTokenPair":{"entryPoint":10736,"id":6250,"parameterSlots":2,"returnSlots":1},"fun_isEVMTransactionProofValid":{"entryPoint":11973,"id":6393,"parameterSlots":1,"returnSlots":1},"fun_isFirelinkMintableERC20":{"entryPoint":10373,"id":6213,"parameterSlots":1,"returnSlots":1},"fun_safeTransfer":{"entryPoint":9974,"id":4748,"parameterSlots":3,"returnSlots":0},"fun_safeTransferFrom":{"entryPoint":10307,"id":4775,"parameterSlots":4,"returnSlots":0},"fun_setImplementation":{"entryPoint":8478,"id":2937,"parameterSlots":1,"returnSlots":0},"fun_supportsERC165InterfaceUnchecked":{"entryPoint":10667,"id":5644,"parameterSlots":1,"returnSlots":1},"fun_supportsERC165InterfaceUnchecked_23601":{"entryPoint":10626,"id":5644,"parameterSlots":1,"returnSlots":1},"fun_supportsInterface":{"entryPoint":10533,"id":5501,"parameterSlots":1,"returnSlots":1},"fun_transferOwnership":{"entryPoint":7991,"id":2831,"parameterSlots":1,"returnSlots":0},"fun_upgradeToAndCall":{"entryPoint":8810,"id":2982,"parameterSlots":2,"returnSlots":0},"fun_upgradeToAndCall_35616":{"entryPoint":8622,"id":2982,"parameterSlots":2,"returnSlots":0},"fun_verifyCallResultFromTarget":{"entryPoint":8941,"id":3792,"parameterSlots":4,"returnSlots":1},"increment_uint256":{"entryPoint":15002,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_address_mapping_address_uint256_of_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"mapping_index_access_mapping_address_mapping_address_uint256_of_address_23500":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_struct_TransactionInfo_dyn":{"entryPoint":15567,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x00":{"entryPoint":12614,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x11":{"entryPoint":9797,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5622,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3169,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_calldatat_address":{"entryPoint":13314,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_bool":{"entryPoint":12876,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_uint32":{"entryPoint":13027,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_uint64":{"entryPoint":12845,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_uint8":{"entryPoint":13656,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_storage_reference_type_struct_Proof":{"entryPoint":6387,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_storage_reference_type_struct_ResponseBody":{"entryPoint":6225,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_storage_reference_type_struct_TransactionInfo":{"entryPoint":15601,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":9414,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_180c":{"entryPoint":9709,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_36e1":{"entryPoint":8064,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_52f1":{"entryPoint":8161,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_6598":{"entryPoint":9528,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_67e7":{"entryPoint":9616,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_76b6":{"entryPoint":8305,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_7a2a":{"entryPoint":9094,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_b419":{"entryPoint":12446,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_c3a7":{"entryPoint":9841,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_d688":{"entryPoint":9318,"id":null,"parameterSlots":1,"returnSlots":0},"resize_array_array_bytes32_dyn_storage":{"entryPoint":12743,"id":null,"parameterSlots":2,"returnSlots":0},"resize_array_array_bytes32_dyn_storage_23647":{"entryPoint":12690,"id":null,"parameterSlots":1,"returnSlots":0},"resize_array_array_uint32_dyn_storage":{"entryPoint":12909,"id":null,"parameterSlots":2,"returnSlots":0},"revert_forward":{"entryPoint":8292,"id":null,"parameterSlots":0,"returnSlots":0},"storage_array_index_access_struct_EventInfo_dyn_ptr":{"entryPoint":15176,"id":null,"parameterSlots":2,"returnSlots":2},"storage_array_index_access_struct_EventInfo_dyn_ptr_23528":{"entryPoint":15141,"id":null,"parameterSlots":1,"returnSlots":2},"storage_array_index_access_struct_TransactionInfo_dyn":{"entryPoint":5645,"id":null,"parameterSlots":1,"returnSlots":2},"transit_byte_array_long_to_short_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic4":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_offset_0t_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offset_3t_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_address_to_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_bool_to_bool_23546":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_bool_to_bool_23547":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_uint64_to_t_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint64_to_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint8_to_uint8":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint8_to_uint8_23545":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":476,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":10039,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint16":{"entryPoint":11366,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint32":{"entryPoint":1053,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint64":{"entryPoint":11318,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint8":{"entryPoint":11492,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"write_to_memory_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"write_to_memory_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"write_to_memory_uint8":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"3402":[{"length":32,"start":2875},{"length":32,"start":3663},{"length":32,"start":3941}]},"linkReferences":{},"object":"6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630166a07a146101d357806309f5dc91146101ca57806309fc8843146101c15780631635f5fd146101b857806327506f53146101af5780632e7700f0146101a65780633659cfe61461019d5780634f1ef2861461019457806352d1902d1461018b578063540abf7314610182578063715018a6146101795780637eccb307146101705780637f46ddb214610167578063870876231461015e5780638da5cb5b146101555780638f601f661461014c578063927ede2d146101435780639ace38c21461013a578063c0c53b8b14610131578063e11013dd14610128578063ecc6da0c1461011f5763f2fde38b0361000e5761011a611e4d565b61000e565b5061011a611e05565b5061011a611d84565b5061011a611c7d565b5061011a611be5565b5061011a6115cc565b5061011a611568565b5061011a61153e565b5061011a6113ed565b5061011a6113c3565b5061011a6111d9565b5061011a61117a565b5061011a611017565b5061011a610f51565b5061011a610e0d565b5061011a610b13565b5061011a610af4565b5061011a610997565b5061011a6104a9565b5061011a61042b565b5061011a6103fa565b5061011a61022c565b6001600160a01b038116036101ed57565b600080fd5b35906101fd826101dc565b565b9181601f840112156101ed578235916001600160401b0383116101ed57602083818601950101116101ed57565b50346101ed5760c03660031901126101ed5760043561024a816101dc565b60243590610257826101dc565b604435610263816101dc565b60643561026f816101dc565b6084359160a4356001600160401b0381116101ed576102929036906004016101ff565b959061029d86612885565b15610343576102b46102af83886129f0565b612671565b6001600160a01b03861690813b156101ed576040516340c10f1960e01b81526001600160a01b03861660048201526024810187905261001998610317939091906000908290604490829084905af18015610336575b61031d575b505b3691610dbb565b94612b84565b8061032a61033092610c78565b806105d6565b3861030e565b61033e612064565b610309565b610317906100199761038c876103868661036f8c60018060a01b031660005260ce602052604060002090565b9060018060a01b0316600052602052604060002090565b5461265c565b6001600160a01b038916600090815260ce602052604090206103af90869061036f565b556103c487876001600160a01b038b166126f6565b610310565b600319906020818301126101ed57600435916001600160401b0383116101ed57826040920301126101ed5760040190565b50346101ed57602061041361040e366103c9565b612ec5565b6040519015158152f35b63ffffffff8116036101ed57565b5060403660031901126101ed5761044360043561041d565b6024356001600160401b0381116101ed576104656104709136906004016101ff565b610310333b156124c6565b604051907f2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af53392806104a433943483612ab5565b0390a3005b5060803660031901126101ed576004356104c2816101dc565b6024356104ce816101dc565b604435906064356001600160401b0381116101ed576104f19036906004016101ff565b929081340361056b5761001994610566946105579284918691610551916103106001600160a01b03851661052730821415612538565b60c95461054a9061053e906001600160a01b031681565b6001600160a01b031690565b1415612590565b92612acc565b5a610560612042565b92612bcb565b6125ed565b60405162461bcd60e51b815260206004820152603a60248201527f466972656c696e6b4272696467653a20616d6f756e742073656e7420646f657360448201527f206e6f74206d6174636820616d6f756e742072657175697265640000000000006064820152608490fd5b60009103126101ed57565b90815180825260208080930193019160005b828110610601575050505090565b8351855293810193928101926001016105f3565b919082519283825260005b848110610641575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610620565b908082519081815260208091019281808460051b8301019501936000915b8483106106835750505050505090565b9091929394958480600192601f1985820301865289519063ffffffff8251168152848060a01b038383015116838201526106e26106cf6040808501519060a080918601528401906105e1565b6060808501519084830390850152610615565b9160808091015115159101529801930193019194939290610673565b80516001600160401b0316825261079991906020818101516001600160401b0316908301526040818101516001600160a01b0316908301526060818101511515908301526080818101516001600160a01b03169083015260a081015160a083015261077860c08201516101208060c0860152840190610615565b60e08281015160ff1690840152916101008092015191818403910152610655565b90565b9190916107b281516040855260408501906105e1565b60208092015193828183039101528351815281840151828201526001600160401b03806040860151166040830152606085015116606082015260808401519160c060808301526080610160830193805160c085015261ffff838201511660e0850152604081015115156101008501526060810151151561012085015201519260a0610140840152835180915281610180840194019160005b82811061086c575050505060a0610799939401519060a08184039101526106fe565b835163ffffffff168652948101949281019260010161084a565b6020808201908083528351809252604092838101600594838186881b850101970195600080945b8786106108c05750505050505050505090565b909192939495969798603f19828203018652878a51805190876108eb6060938487528487019061079c565b918481015185870152015193888183039101528351808252838201918480838b1b83010196019388905b8b84831061093b5750505050505050806001929b019601960194979695939291906108ad565b9661098660019395979983839496989a601f198a8403018c528c5190878060a01b03808351168552868301511686850152808201519084015201519060809081888201520190610615565b9801960192018d9594929391610915565b50346101ed57600080600319360112610af15760cb54906109b782611782565b906040906109c782519384610d56565b838352601f196109d685611782565b01815b818110610a315750505b8381106109fb578151806109f78582610886565b0390f35b80610a11610a0b610a2c9361160d565b50613cf1565b610a1b8286613ccf565b52610a268185613ccf565b50613a9a565b6109e3565b6020908451610a3f81610c98565b8551610a4a81610cb3565b6060808252875191610a5b83610cce565b87835285928884820152888a82015288838201528951610a7a81610ce9565b8981528985820152898b8201528984820152608090848282015281830152898b5191610aa583610d04565b8183528187840152818d840152818684015282015260a08a818301528460c08301528a60e0830152846101008301528201528382015283528682840152878301528288010152016109d9565b80fd5b50346101ed5760003660031901126101ed57602060cb54604051908152f35b50346101ed5760203660031901126101ed57600435610b31816101dc565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190610b6a30841415611f80565b610b87600080516020613da4833981519152938285541614611fe1565b610b8f611edf565b60405190610b9c82610d3b565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610bd6575050610019915061211e565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610c31575b50610c1e5760405162461bcd60e51b815280610c1a600482016120cf565b0390fd5b61001993610c2c9114612071565b6121ae565b610c5391925060203d8111610c5a575b610c4b8183610d56565b810190612055565b9038610bfc565b503d610c41565b50634e487b7160e01b600052604160045260246000fd5b6001600160401b038111610c8b57604052565b610c93610c61565b604052565b606081019081106001600160401b03821117610c8b57604052565b604081019081106001600160401b03821117610c8b57604052565b60c081019081106001600160401b03821117610c8b57604052565b60a081019081106001600160401b03821117610c8b57604052565b61012081019081106001600160401b03821117610c8b57604052565b608081019081106001600160401b03821117610c8b57604052565b602081019081106001600160401b03821117610c8b57604052565b90601f801991011681019081106001600160401b03821117610c8b57604052565b604051906101fd82610d20565b604051906101fd82610d04565b6020906001600160401b038111610dae575b601f01601f19160190565b610db6610c61565b610da3565b929192610dc782610d91565b91610dd56040519384610d56565b8294818452818301116101ed578281602093846000960137010152565b9080601f830112156101ed5781602061079993359101610dbb565b5060403660031901126101ed57600435610e26816101dc565b6024356001600160401b0381116101ed57610e45903690600401610df2565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929190610e7f30851415611f80565b610e9c600080516020613da4833981519152948286541614611fe1565b610ea4611edf565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610eda575050610019915061211e565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610f31575b50610f1e5760405162461bcd60e51b815280610c1a600482016120cf565b61001993610f2c9114612071565b61226a565b610f4a91925060203d8111610c5a57610c4b8183610d56565b9038610f00565b50346101ed5760003660031901126101ed577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610fac57604051600080516020613da48339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b50346101ed5760c03660031901126101ed57600435611035816101dc565b60243590611042826101dc565b60443561104e816101dc565b6064359061105d60843561041d565b60a4356001600160401b0381116101ed5761031061107f9136906004016101ff565b9261108981612885565b1561110e5761109b6102af86836129f0565b6001600160a01b03811694853b156101ed57604051632770a7eb60e21b815233600482015260248101859052610019966000908290604490829084905af18015611101575b6110ee575b505b3391612b38565b8061032a6110fb92610c78565b386110e5565b611109612064565b6110e0565b610019946111278430336001600160a01b038616612843565b6111518461114b8361036f8660018060a01b031660005260ce602052604060002090565b54612836565b6001600160a01b038316600090815260ce6020526040902061117490839061036f565b556110e7565b50346101ed57600080600319360112610af157611195611edf565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101ed576111e8366103c9565b6111f96111f482612ec5565b61309e565b60cb54906112056130ea565b505061121a816112148461160d565b50613903565b60208082019261122a8484613218565b600f61126461123e60a093848101906133ec565b9361124f610100958681019061315d565b9050600e61125c8361160d565b50015561160d565b50019460005b61128c61128361127a8489613218565b858101906133ec565b8581019061315d565b905081101561132057806113166113086112cb61131b946112c56112bc6112b3898e613218565b8a8101906133ec565b8a81019061315d565b90613ab6565b6112e56112dd6060928381019061340c565b810190613adc565b93926112f395919295610d77565b6001600160a01b03918216815295168c860152565b604084015282015289613b72565b613a9a565b61126a565b60fe548790611337906001600160a01b031661053e565b90600261136061135a600161134b85613b25565b5001546001600160a01b031690565b92613b25565b500154823b156101ed576040516340c10f1960e01b81526001600160a01b039290921660048301526024820152906000908290604490829084905af180156113b6575b6113a957005b8061032a61001992610c78565b6113be612064565b6113a3565b50346101ed5760003660031901126101ed5760ca546040516001600160a01b039091168152602090f35b50346101ed5760a03660031901126101ed5760043561140b816101dc565b602435611417816101dc565b60443561142560643561041d565b6084356001600160401b0381116101ed576104656114479136906004016101ff565b9161145184612885565b156114d8576114636102af82866129f0565b6001600160a01b03841693843b156101ed57604051632770a7eb60e21b815233600482015260248101849052610019956000908290604490829084905af180156114cb575b6114b8575b505b33913391612b38565b8061032a6114c592610c78565b386114ad565b6114d3612064565b6114a8565b610019936114f18330336001600160a01b038516612843565b6115158361114b8461036f8560018060a01b031660005260ce602052604060002090565b6001600160a01b038216600090815260ce6020526040902061153890849061036f565b556114af565b50346101ed5760003660031901126101ed576033546040516001600160a01b039091168152602090f35b50346101ed5760403660031901126101ed5760206115c360043561158b816101dc565b60243590611598826101dc565b60018060a01b031660005260ce835260406000209060018060a01b0316600052602052604060002090565b54604051908152f35b50346101ed5760003660031901126101ed5760c9546040516001600160a01b039091168152602090f35b50634e487b7160e01b600052603260045260246000fd5b60cb54811015611648575b60cb60005260041b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b6116506115f6565b611618565b9060405191828154918282526020928383019160005283600020936000905b82821061168a575050506101fd92500383610d56565b855484526001958601958895509381019390910190611674565b90600182811c921680156116d4575b60208310146116be57565b634e487b7160e01b600052602260045260246000fd5b91607f16916116b3565b90604051918260008254926116f2846116a4565b90818452600194858116908160001461175f575060011461171c575b50506101fd92500383610d56565b9093915060005260209081600020936000915b8183106117475750506101fd9350820101388061170e565b8554888401850152948501948794509183019161172f565b9150506101fd94506020925060ff191682840152151560051b820101388061170e565b6020906001600160401b03811161179b575b60051b0190565b6117a3610c61565b611794565b9081546117b481611782565b926040936117c485519182610d56565b828152809460208092019260005281600020906000935b8585106117ea57505050505050565b60048460019284516117fb81610ce9565b865463ffffffff81168252858060a01b0390841c168382015261181f858801611655565b8682015261182f600288016116de565b606082015260ff600388015416151560808201528152019301940193916117db565b906118eb600661185f610d84565b84546001600160401b03808216835260409190911c1660208201529360018101546001600160a01b038116604087015260a01c60ff161515606086015260028101546001600160a01b03166080860152600381015460a08601526118c5600482016116de565b60c08601526118e56118db600583015460ff1690565b60ff1660e0870152565b016117a8565b610100830152565b9060409182519261190384610cb3565b8361190d83611655565b815281519261191b84610cce565b600192838201548552600282015493602094858701528460038401546001600160401b03808216858a0152606091851c168189015283519361195c85610ce9565b6004860154855260ff600587015461ffff811685880152818160101c1615158388015260181c16151582860152600686019181519081956119b26119a68654809560209181520190565b95600052602060002090565b916000925b846007850110611b275793879389979360079b99611a249894611a349e9c985495858510611b11575b858510611af9575b858510611adf575b50848410611aba575b50838310611a95575b838310611a70575b838310611a4b575b505010611a3d575b5090500382610d56565b6080820152608087015201611851565b60a08401520152565b60e01c815201899038611a1a565b909194611a668163ffffffff8760c01c1663ffffffff169052565b0193013885611a12565b85611a8b83949763ffffffff8860a01c1663ffffffff169052565b0194019085611a0a565b85611ab083949763ffffffff8860801c1663ffffffff169052565b0194019085611a02565b95611ad48163ffffffff8886979a1c1663ffffffff169052565b0194019085386119f9565b86901c63ffffffff168752929582908201960192386119f0565b63ffffffff87841c16885296820196938301936119e8565b63ffffffff8716885296820196938301936119e0565b96916101008194959697611bd460089495611bc98c5491611b6963ffffffff91611b588784871663ffffffff169052565b63ffffffff85821c84161690870152565b63ffffffff838e1c821616858e015263ffffffff838a1c821616858a0152611b9e60808285828901921c1663ffffffff169052565b611bb560a08285828901921c1663ffffffff169052565b60c09083828701921c1663ffffffff169052565b60e090811c90830152565b019701930191908b969594936119b7565b50346101ed5760203660031901126101ed5760043560cb548110156101ed57611c739060cb60005260041b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d0709611c5c827fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb016118f3565b91015460405192839260408452604084019061079c565b9060208301520390f35b50346101ed5760603660031901126101ed57600435611c9b816101dc565b611cf8602435611caa816101dc565b60443590611cb7826101dc565b60005493611cdc60ff8660081c161580968197611d76575b8115611d56575b50612386565b84611cef600160ff196000541617600055565b611d3d576123e9565b611cfe57005b611d0e61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b611d5161010061ff00196000541617600055565b6123e9565b303b15915081611d68575b5038611cd6565b6001915060ff161438611d61565b600160ff8216109150611ccf565b5060603660031901126101ed57600435611d9d816101dc565b611da860243561041d565b6044356001600160401b0381116101ed57610310611dca9136906004016101ff565b7f2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af56040519260018060a01b031692806104a433943483612ab5565b50346101ed5760203660031901126101ed57600435611e23816101dc565b611e2b611edf565b60fe80546001600160a01b0319166001600160a01b0392909216919091179055005b50346101ed5760203660031901126101ed57600435611e6b816101dc565b611e73611edf565b6001600160a01b03811615611e8b5761001990611f37565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6033546001600160a01b03163303611ef357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15611f8757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611fe857565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b6040519061204f82610d3b565b60008252565b908160209103126101ed575190565b506040513d6000823e3d90fd5b1561207857565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b1561215357600080516020613da483398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b906121b88261211e565b6001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115801590612262575b6121fa575050565b61225f916000806040519361220e85610c98565b602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020860152660819985a5b195960ca1b6040860152602081519101845af46122596122bd565b916122ed565b50565b5060006121f2565b906122748261211e565b6001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28051158015906122b5576121fa575050565b5060016121f2565b3d156122e8573d906122ce82610d91565b916122dc6040519384610d56565b82523d6000602084013e565b606090565b9192901561234f5750815115612301575090565b3b1561230a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156123625750805190602001fd5b60405162461bcd60e51b815260206004820152908190610c1a906024830190610615565b1561238d57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b919061240560ff60005460081c1661240081612466565b612466565b61240e33611f37565b61241f60ff60005460081c16612466565b60018060a01b038092816bffffffffffffffffffffffff60a01b93168360c954161760c955169060ca54161760ca55612456611edf565b811615611e8b576101fd90611f37565b1561246d57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b156124cd57565b60405162461bcd60e51b815260206004820152603760248201527f466972656c696e6b4272696467653a2066756e6374696f6e2063616e206f6e6c60448201527f792062652063616c6c65642066726f6d20616e20454f410000000000000000006064820152608490fd5b1561253f57565b60405162461bcd60e51b815260206004820152602360248201527f466972656c696e6b4272696467653a2063616e6e6f742073656e6420746f207360448201526232b63360e91b6064820152608490fd5b1561259757565b60405162461bcd60e51b815260206004820152602860248201527f466972656c696e6b4272696467653a2063616e6e6f742073656e6420746f206d60448201526732b9b9b2b733b2b960c11b6064820152608490fd5b156125f457565b60405162461bcd60e51b815260206004820152602360248201527f466972656c696e6b4272696467653a20455448207472616e73666572206661696044820152621b195960ea1b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b9190820391821161266957565b6101fd612645565b1561267857565b60405162461bcd60e51b815260206004820152604a60248201527f466972656c696e6b4272696467653a2077726f6e672072656d6f746520746f6b60448201527f656e20666f7220466972656c696e6b204d696e7461626c65204552433230206c60648201526937b1b0b6103a37b5b2b760b11b608482015260a490fd5b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526101fd91612732606483610d56565b612756565b801515036101ed57565b908160209103126101ed575161079981612737565b6040516127ae916001600160a01b031661276f82610cb3565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16122596122bd565b80519082821592831561281e575b505050156127c75750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b61282e9350820181019101612741565b3882816127bc565b9190820180921161266957565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526101fd9161273282610ce9565b61288e81612925565b908115612899575090565b90506128a481612982565b9081612913575b816128b4575090565b60209150600090604051838101906301ffc9a760e01b825263ec4fc8e360e01b6024820152602481526128e681610c98565b5191617530fa6000513d82612907575b5081612900575090565b9050151590565b602011159150386128f6565b905061291e816129ab565b15906128ab565b61292e81612982565b9081612970575b8161293e575090565b60209150600090604051838101906301ffc9a760e01b8252631d1d8b6360e01b6024820152602481526128e681610c98565b905061297b816129ab565b1590612935565b6000602091604051838101906301ffc9a760e01b8083526024820152602481526128e681610c98565b6000602091604051838101906301ffc9a760e01b825263ffffffff60e01b6024820152602481526128e681610c98565b908160209103126101ed5751610799816101dc565b6129f981612925565b15612a785760405163600f0deb60e11b81526001600160a01b03918291906020908290600490829086165afa908115612a6b575b600091612a3d575b501691161490565b612a5e915060203d8111612a64575b612a568183610d56565b8101906129db565b38612a35565b503d612a4c565b612a73612064565b612a2d565b6040516335b02cb160e21b81526001600160a01b03918291906020908290600490829086165afa908115612a6b57600091612a3d57501691161490565b604090610799939281528160208201520190610615565b6040516001600160a01b039283169492909116927f31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d928291612b0f919083612ab5565b0390a3565b610799939260609260018060a01b0316825260208201528160408201520190610615565b6040516001600160a01b03938416969284169591909316937f7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf93928392612b7f9284612b14565b0390a4565b6040516001600160a01b03938416969284169591909316937fd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd93928392612b7f9284612b14565b906000939192849360208451940192f190565b9035601e19823603018112156101ed5701602081359101916001600160401b0382116101ed578160051b360383136101ed57565b81835290916001600160fb1b0383116101ed5760209260051b809284830137010190565b6001600160401b038116036101ed57565b35906101fd82612c36565b9035609e19823603018112156101ed570190565b61ffff8116036101ed57565b35906101fd82612737565b903561011e19823603018112156101ed570190565b9035601e19823603018112156101ed5701602081359101916001600160401b0382116101ed5781360383136101ed57565b908060209392818452848401376000828201840152601f01601f1916010190565b60ff8116036101ed57565b35906101fd82612ce4565b90808352602080930192838260051b810194846000925b858410612d22575050505050505090565b9091929394959685808284600194038752612d3d8b87612c52565b9063ffffffff8235612d4e8161041d565b16815282820135612d5e816101dc565b858060a01b031683820152612da9612d8e6040612d7d81860186612bde565b909160a08091870152850191612c12565b6060612d9c81860186612c92565b9185840390860152612cc3565b91608080910135612db981612737565b1515910152990194019401929594939190612d11565b61079991612ded81612de084612c47565b6001600160401b03169052565b612e0c612dfc60208401612c47565b6001600160401b03166020830152565b612e2b612e1b604084016101f2565b6001600160a01b03166040830152565b612e43612e3a60608401612c72565b15156060830152565b612e62612e52608084016101f2565b6001600160a01b03166080830152565b60a082013560a0820152612e8d612e7c60c0840184612c92565b6101208060c0860152840191612cc3565b91612ea7612e9d60e08301612cef565b60ff1660e0840152565b612eb76101009182810190612bde565b929091818503910152612cfa565b6040516358fbe9e160e01b815260206004820181905291612efa612ee98280612bde565b604060248601526064850191612c12565b908381013560be19823603018112156101ed578383036023190160448501520180358252808401358285015290839083906040840135612f3981612c36565b6001600160401b0380911660408301526060850135612f5781612c36565b166060820152612f6a6080850185612c52565b9360c06080830152612fce610160830195803560c085015261ffff86820135612f9281612c66565b1660e08501526040810135612fa681612737565b15156101008501526060810135612fbc81612737565b15156101208501526080810190612bde565b60a06101408501529586905261018083019560005b8181106130705750505093613010916130028660a08697980190612c7d565b9060a0818403910152612dcf565b038173f37ad1278917c04fb291c75a42e61710964cb57c5afa918215613063575b60009261303d57505090565b6107999250803d1061305c575b6130548183610d56565b810190612741565b503d61304a565b61306b612064565b613031565b929450929480829763ffffffff6001943561308a8161041d565b168152019601910190879492879492612fe3565b156130a557565b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207472616e73616374696f6e2070726f6f66000000000000006044820152606490fd5b60cb54600160401b811015613139575b600181018060cb558110156116485760cb60005260041b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b613141610c61565b6130fa565b50634e487b7160e01b600052600060045260246000fd5b903590601e19813603018212156101ed57018035906001600160401b0382116101ed57602001918160051b360383136101ed57565b805490600090818155826131a557505050565b815260208120918201915b8281106131bc57505050565b8181556001016131b0565b600160401b821161320b575b8054918082558281106131e557505050565b60009182526020822092830192015b82811061320057505050565b8181556001016131f4565b613213610c61565b6131d3565b90359060be19813603018212156101ed570190565b3561079981612c36565b903590609e19813603018212156101ed570190565b3561079981612737565b818110613261575050565b60008155600101613256565b90600160401b81116132d6575b815481835580821061328b57505050565b6101fd926000526007602060002091601c82850160031c84019460021b16806132bb575b500160031c0190613256565b600019908186019182549160200360031b1c169055386132af565b6132de610c61565b61327a565b356107998161041d565b9190613318906001600160401b0383116133df575b61330c838561326d565b92600052602060002090565b8160031c9160005b83811061338f5750600719811690038061333b575b50505050565b92600093845b81811061335657505050015538808080613335565b909194602061338560019261336a896132e3565b908560021b60031b63ffffffff811b9283911b169119161790565b9601929101613341565b6000805b600881106133a8575083820155600101613320565b959060206133d66001926133bb856132e3565b908a60021b60031b63ffffffff811b9283911b169119161790565b92019601613393565b6133e7610c61565b613302565b90359061011e19813603018212156101ed570190565b35610799816101dc565b903590601e19813603018212156101ed57018035906001600160401b0382116101ed576020019181360383136101ed57565b9190601f811161344d57505050565b6101fd926000526020600020906020601f840160051c83019310613479575b601f0160051c0190613256565b909150819061346c565b9092916001600160401b03811161354b575b6134a9816134a384546116a4565b8461343e565b6000601f82116001146134e357819293946000926134d8575b50508160011b916000199060031b1c1916179055565b0135905038806134c2565b601f198216946134f884600052602060002090565b91805b878110613533575083600195969710613519575b505050811b019055565b0135600019600384901b60f8161c1916905538808061350f565b909260206001819286860135815501940191016134fb565b613553610c61565b613495565b3561079981612ce4565b9063ffffffff81356135738161041d565b1682548163ffffffff19821617845560209182840135613592816101dc565b6001600160c01b03199092161790821b640100000000600160c01b03161783556001908382016135c5604085018561315d565b92906001600160401b038411613649575b6135e084846131c7565b91600052806000209060005b8481106136385750505050505090600361362560808461361f61361560606101fd98018361340c565b9060028801613483565b0161324c565b91019060ff801983541691151516179055565b8335838201559281019285016135ec565b613651610c61565b6135d6565b600160401b83116137a3575b80548382558084106136ba575b50906136818192600052602060002090565b906000925b848410613694575050505050565b60046020826136ae6136a860019587613237565b87613562565b01930193019291613686565b6001600160fe1b038181168203613796575b84168403613789575b60008281526020812091600290811b83019286821b015b8381106136fb5750505061366f565b80836004925583600161370f818401613192565b8483019061371d82546116a4565b9081613732575b5050506003820155016136ec565b601f80831160011461374c57505050555b83388080613724565b613784945090613774929161376685600052602060002090565b920160051c82019101613256565b6000908082528160208120915555565b613743565b613791612645565b6136d5565b61379e612645565b6136cc565b6137ab610c61565b613662565b6006906138fa6101fd936137e36137c68261322d565b845467ffffffffffffffff19166001600160401b03909116178455565b61381f6137f26020830161322d565b84546fffffffffffffffff0000000000000000191660409190911b67ffffffffffffffff60401b16178455565b6138776001840161385161383560408501613402565b82546001600160a01b0319166001600160a01b03909116178255565b61385d6060840161324c565b815460ff60a01b191690151560a01b60ff60a01b16179055565b6138a961388660808301613402565b6002850180546001600160a01b0319166001600160a01b03909216919091179055565b60a081013560038401556138cd6138c360c083018361340c565b9060048601613483565b6138ef6138dc60e08301613558565b600585019060ff1660ff19825416179055565b61010081019061315d565b92909101613656565b9061390e818061315d565b91906001600160401b038311613a8d575b61392983856131c7565b91836000526020928360002060005b838110613a7b5750505050613a7482613a6a613a60613960856101fd98976007970190613218565b92833560018801558084013560028801556139dd600388016139a6604087013561398981612c36565b825467ffffffffffffffff19166001600160401b03909116178255565b6060860135906139b582612c36565b9067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b613a566139ed6080860186613237565b91823560048a01556005890190830135613a0681612c66565b815461ffff62ff00006040870135613a1d81612737565b151560101b1692169062ffffff191617178155613a3c6060840161324c565b815463ff000000191690151560181b63ff00000016179055565b608081019061315d565b90600687016132ed565b60a08101906133ec565b91016137b0565b82358282015591850191600101613938565b613a95610c61565b61391f565b6001906000198114613aaa570190565b613ab2612645565b0190565b909161079992811015613acf575b60051b810190613237565b613ad76115f6565b613ac4565b906080828203126101ed578135613af2816101dc565b926020830135613b01816101dc565b9260408101359260608201356001600160401b0381116101ed576107999201610df2565b805415613b3b575b600052602060002090600090565b613b436115f6565b613b2d565b8054821015613b65575b60005260206000209060021b0190600090565b613b6d6115f6565b613b52565b613b918154600160401b811015613cc2575b6001928382018155613b48565b613cb5575b825181546001600160a01b039182166001600160a01b031991821617835560208086015185850180549093169316929092179055906060906003906040860151600282015501930151908151916001600160401b038311613ca8575b613c0683613c0087546116a4565b8761343e565b81601f8411600114613c3f5750928293918392600094613c34575b50501b916000199060031b1c1916179055565b015192503880613c21565b919083601f198116613c5688600052602060002090565b946000905b88838310613c8e5750505010613c7557505050811b019055565b015160001960f88460031b161c1916905538808061350f565b858701518855909601959485019487935090810190613c5b565b613cb0610c61565b613bf2565b613cbd613146565b613b96565b613cca610c61565b613b84565b6020918151811015613ce4575b60051b010190565b613cec6115f6565b613cdc565b90604091825192613d0184610c98565b83613d0b836118f3565b8152600f600e840154936020948584015201805490613d2982611782565b94613d3685519687610d56565b82865260009182528082208187015b848410613d555750505050500152565b6004836001928951613d6681610d20565b848060a01b0380875416825285870154168382015260028601548b820152613d90600387016116de565b6060820152815201920193019290613d4556fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f0fd61f6d1c68c5e8a5ad095f38f61965c7fe15a03b48781bd49f9a13b6ed4e664736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x166A07A EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x9F5DC91 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x9FC8843 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x1635F5FD EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x27506F53 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x2E7700F0 EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x540ABF73 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x7ECCB307 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x7F46DDB2 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x87087623 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x8F601F66 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x927EDE2D EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x9ACE38C2 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0xC0C53B8B EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xE11013DD EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0xECC6DA0C EQ PUSH2 0x11F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x11A PUSH2 0x1E4D JUMP JUMPDEST PUSH2 0xE JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1E05 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1D84 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1C7D JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1BE5 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x15CC JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1568 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x153E JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x13ED JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x13C3 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x11D9 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x117A JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x1017 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0xF51 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0xE0D JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0xB13 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0xAF4 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x997 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x4A9 JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x42B JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x3FA JUMP JUMPDEST POP PUSH2 0x11A PUSH2 0x22C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0x1DC JUMP JUMPDEST JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1ED JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x1ED JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x1ED JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x24A DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x257 DUP3 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH2 0x263 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH2 0x26F DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP2 PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x292 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0x29D DUP7 PUSH2 0x2885 JUMP JUMPDEST ISZERO PUSH2 0x343 JUMPI PUSH2 0x2B4 PUSH2 0x2AF DUP4 DUP9 PUSH2 0x29F0 JUMP JUMPDEST PUSH2 0x2671 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0x19 SWAP9 PUSH2 0x317 SWAP4 SWAP1 SWAP2 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x336 JUMPI JUMPDEST PUSH2 0x31D JUMPI JUMPDEST POP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0xDBB JUMP JUMPDEST SWAP5 PUSH2 0x2B84 JUMP JUMPDEST DUP1 PUSH2 0x32A PUSH2 0x330 SWAP3 PUSH2 0xC78 JUMP JUMPDEST DUP1 PUSH2 0x5D6 JUMP JUMPDEST CODESIZE PUSH2 0x30E JUMP JUMPDEST PUSH2 0x33E PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x309 JUMP JUMPDEST PUSH2 0x317 SWAP1 PUSH2 0x19 SWAP8 PUSH2 0x38C DUP8 PUSH2 0x386 DUP7 PUSH2 0x36F DUP13 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x265C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x3AF SWAP1 DUP7 SWAP1 PUSH2 0x36F JUMP JUMPDEST SSTORE PUSH2 0x3C4 DUP8 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH2 0x26F6 JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST PUSH1 0x3 NOT SWAP1 PUSH1 0x20 DUP2 DUP4 ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x1ED JUMPI DUP3 PUSH1 0x40 SWAP3 SUB ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 PUSH2 0x413 PUSH2 0x40E CALLDATASIZE PUSH2 0x3C9 JUMP JUMPDEST PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH2 0x443 PUSH1 0x4 CALLDATALOAD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x465 PUSH2 0x470 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x310 CALLER EXTCODESIZE ISZERO PUSH2 0x24C6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH32 0x2849B43074093A05396B6F2A937DEE8565B15A48A7B3D4BFFB732A5017380AF5 CALLER SWAP3 DUP1 PUSH2 0x4A4 CALLER SWAP5 CALLVALUE DUP4 PUSH2 0x2AB5 JUMP JUMPDEST SUB SWAP1 LOG3 STOP JUMPDEST POP PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x4C2 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x4CE DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x4F1 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST SWAP3 SWAP1 DUP2 CALLVALUE SUB PUSH2 0x56B JUMPI PUSH2 0x19 SWAP5 PUSH2 0x566 SWAP5 PUSH2 0x557 SWAP3 DUP5 SWAP2 DUP7 SWAP2 PUSH2 0x551 SWAP2 PUSH2 0x310 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x527 ADDRESS DUP3 EQ ISZERO PUSH2 0x2538 JUMP JUMPDEST PUSH1 0xC9 SLOAD PUSH2 0x54A SWAP1 PUSH2 0x53E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST EQ ISZERO PUSH2 0x2590 JUMP JUMPDEST SWAP3 PUSH2 0x2ACC JUMP JUMPDEST GAS PUSH2 0x560 PUSH2 0x2042 JUMP JUMPDEST SWAP3 PUSH2 0x2BCB JUMP JUMPDEST PUSH2 0x25ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A20616D6F756E742073656E7420646F6573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206E6F74206D6174636820616D6F756E74207265717569726564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x1ED JUMPI JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x601 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x5F3 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x641 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x620 JUMP JUMPDEST SWAP1 DUP1 DUP3 MLOAD SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 SWAP2 ADD SWAP3 DUP2 DUP1 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x683 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH1 0x1 SWAP3 PUSH1 0x1F NOT DUP6 DUP3 SUB ADD DUP7 MSTORE DUP10 MLOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 MLOAD AND DUP2 MSTORE DUP5 DUP1 PUSH1 0xA0 SHL SUB DUP4 DUP4 ADD MLOAD AND DUP4 DUP3 ADD MSTORE PUSH2 0x6E2 PUSH2 0x6CF PUSH1 0x40 DUP1 DUP6 ADD MLOAD SWAP1 PUSH1 0xA0 DUP1 SWAP2 DUP7 ADD MSTORE DUP5 ADD SWAP1 PUSH2 0x5E1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP6 ADD MLOAD SWAP1 DUP5 DUP4 SUB SWAP1 DUP6 ADD MSTORE PUSH2 0x615 JUMP JUMPDEST SWAP2 PUSH1 0x80 DUP1 SWAP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x673 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 MSTORE PUSH2 0x799 SWAP2 SWAP1 PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 DUP2 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP4 ADD MSTORE PUSH1 0x80 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x778 PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x120 DUP1 PUSH1 0xC0 DUP7 ADD MSTORE DUP5 ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST PUSH1 0xE0 DUP3 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP5 ADD MSTORE SWAP2 PUSH2 0x100 DUP1 SWAP3 ADD MLOAD SWAP2 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x655 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x7B2 DUP2 MLOAD PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x5E1 JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP3 ADD MLOAD SWAP4 DUP3 DUP2 DUP4 SUB SWAP2 ADD MSTORE DUP4 MLOAD DUP2 MSTORE DUP2 DUP5 ADD MLOAD DUP3 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 PUSH1 0x40 DUP7 ADD MLOAD AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD SWAP2 PUSH1 0xC0 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x80 PUSH2 0x160 DUP4 ADD SWAP4 DUP1 MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0xFFFF DUP4 DUP3 ADD MLOAD AND PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x100 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x120 DUP6 ADD MSTORE ADD MLOAD SWAP3 PUSH1 0xA0 PUSH2 0x140 DUP5 ADD MSTORE DUP4 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH2 0x180 DUP5 ADD SWAP5 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x86C JUMPI POP POP POP POP PUSH1 0xA0 PUSH2 0x799 SWAP4 SWAP5 ADD MLOAD SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x6FE JUMP JUMPDEST DUP4 MLOAD PUSH4 0xFFFFFFFF AND DUP7 MSTORE SWAP5 DUP2 ADD SWAP5 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x84A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP2 ADD PUSH1 0x5 SWAP5 DUP4 DUP2 DUP7 DUP9 SHL DUP6 ADD ADD SWAP8 ADD SWAP6 PUSH1 0x0 DUP1 SWAP5 JUMPDEST DUP8 DUP7 LT PUSH2 0x8C0 JUMPI POP POP POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 PUSH1 0x3F NOT DUP3 DUP3 SUB ADD DUP7 MSTORE DUP8 DUP11 MLOAD DUP1 MLOAD SWAP1 DUP8 PUSH2 0x8EB PUSH1 0x60 SWAP4 DUP5 DUP8 MSTORE DUP5 DUP8 ADD SWAP1 PUSH2 0x79C JUMP JUMPDEST SWAP2 DUP5 DUP2 ADD MLOAD DUP6 DUP8 ADD MSTORE ADD MLOAD SWAP4 DUP9 DUP2 DUP4 SUB SWAP2 ADD MSTORE DUP4 MLOAD DUP1 DUP3 MSTORE DUP4 DUP3 ADD SWAP2 DUP5 DUP1 DUP4 DUP12 SHL DUP4 ADD ADD SWAP7 ADD SWAP4 DUP9 SWAP1 JUMPDEST DUP12 DUP5 DUP4 LT PUSH2 0x93B JUMPI POP POP POP POP POP POP POP DUP1 PUSH1 0x1 SWAP3 SWAP12 ADD SWAP7 ADD SWAP7 ADD SWAP5 SWAP8 SWAP7 SWAP6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8AD JUMP JUMPDEST SWAP7 PUSH2 0x986 PUSH1 0x1 SWAP4 SWAP6 SWAP8 SWAP10 DUP4 DUP4 SWAP5 SWAP7 SWAP9 SWAP11 PUSH1 0x1F NOT DUP11 DUP5 SUB ADD DUP13 MSTORE DUP13 MLOAD SWAP1 DUP8 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 MLOAD AND DUP6 MSTORE DUP7 DUP4 ADD MLOAD AND DUP7 DUP6 ADD MSTORE DUP1 DUP3 ADD MLOAD SWAP1 DUP5 ADD MSTORE ADD MLOAD SWAP1 PUSH1 0x80 SWAP1 DUP2 DUP9 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST SWAP9 ADD SWAP7 ADD SWAP3 ADD DUP14 SWAP6 SWAP5 SWAP3 SWAP4 SWAP2 PUSH2 0x915 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAF1 JUMPI PUSH1 0xCB SLOAD SWAP1 PUSH2 0x9B7 DUP3 PUSH2 0x1782 JUMP JUMPDEST SWAP1 PUSH1 0x40 SWAP1 PUSH2 0x9C7 DUP3 MLOAD SWAP4 DUP5 PUSH2 0xD56 JUMP JUMPDEST DUP4 DUP4 MSTORE PUSH1 0x1F NOT PUSH2 0x9D6 DUP6 PUSH2 0x1782 JUMP JUMPDEST ADD DUP2 JUMPDEST DUP2 DUP2 LT PUSH2 0xA31 JUMPI POP POP JUMPDEST DUP4 DUP2 LT PUSH2 0x9FB JUMPI DUP2 MLOAD DUP1 PUSH2 0x9F7 DUP6 DUP3 PUSH2 0x886 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH2 0xA11 PUSH2 0xA0B PUSH2 0xA2C SWAP4 PUSH2 0x160D JUMP JUMPDEST POP PUSH2 0x3CF1 JUMP JUMPDEST PUSH2 0xA1B DUP3 DUP7 PUSH2 0x3CCF JUMP JUMPDEST MSTORE PUSH2 0xA26 DUP2 DUP6 PUSH2 0x3CCF JUMP JUMPDEST POP PUSH2 0x3A9A JUMP JUMPDEST PUSH2 0x9E3 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP5 MLOAD PUSH2 0xA3F DUP2 PUSH2 0xC98 JUMP JUMPDEST DUP6 MLOAD PUSH2 0xA4A DUP2 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP8 MLOAD SWAP2 PUSH2 0xA5B DUP4 PUSH2 0xCCE JUMP JUMPDEST DUP8 DUP4 MSTORE DUP6 SWAP3 DUP9 DUP5 DUP3 ADD MSTORE DUP9 DUP11 DUP3 ADD MSTORE DUP9 DUP4 DUP3 ADD MSTORE DUP10 MLOAD PUSH2 0xA7A DUP2 PUSH2 0xCE9 JUMP JUMPDEST DUP10 DUP2 MSTORE DUP10 DUP6 DUP3 ADD MSTORE DUP10 DUP12 DUP3 ADD MSTORE DUP10 DUP5 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 DUP5 DUP3 DUP3 ADD MSTORE DUP2 DUP4 ADD MSTORE DUP10 DUP12 MLOAD SWAP2 PUSH2 0xAA5 DUP4 PUSH2 0xD04 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP8 DUP5 ADD MSTORE DUP2 DUP14 DUP5 ADD MSTORE DUP2 DUP7 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH1 0xA0 DUP11 DUP2 DUP4 ADD MSTORE DUP5 PUSH1 0xC0 DUP4 ADD MSTORE DUP11 PUSH1 0xE0 DUP4 ADD MSTORE DUP5 PUSH2 0x100 DUP4 ADD MSTORE DUP3 ADD MSTORE DUP4 DUP3 ADD MSTORE DUP4 MSTORE DUP7 DUP3 DUP5 ADD MSTORE DUP8 DUP4 ADD MSTORE DUP3 DUP9 ADD ADD MSTORE ADD PUSH2 0x9D9 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x20 PUSH1 0xCB SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xB31 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 SWAP1 PUSH2 0xB6A ADDRESS DUP5 EQ ISZERO PUSH2 0x1F80 JUMP JUMPDEST PUSH2 0xB87 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 DUP3 DUP6 SLOAD AND EQ PUSH2 0x1FE1 JUMP JUMPDEST PUSH2 0xB8F PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xB9C DUP3 PUSH2 0xD3B JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBD6 JUMPI POP POP PUSH2 0x19 SWAP2 POP PUSH2 0x211E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x4 SWAP2 PUSH1 0x40 SWAP5 SWAP4 SWAP5 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP3 MSTORE DUP7 AND GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xC31 JUMPI JUMPDEST POP PUSH2 0xC1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC1A PUSH1 0x4 DUP3 ADD PUSH2 0x20CF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x19 SWAP4 PUSH2 0xC2C SWAP2 EQ PUSH2 0x2071 JUMP JUMPDEST PUSH2 0x21AE JUMP JUMPDEST PUSH2 0xC53 SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xC5A JUMPI JUMPDEST PUSH2 0xC4B DUP2 DUP4 PUSH2 0xD56 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2055 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xBFC JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xC41 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xC93 PUSH2 0xC61 JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x120 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xC8B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0xD20 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xDAE JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB6 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0xDA3 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0xDC7 DUP3 PUSH2 0xD91 JUMP JUMPDEST SWAP2 PUSH2 0xDD5 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xD56 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x1ED JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1ED JUMPI DUP2 PUSH1 0x20 PUSH2 0x799 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0xDBB JUMP JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xE26 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0xE45 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP3 SWAP2 SWAP1 PUSH2 0xE7F ADDRESS DUP6 EQ ISZERO PUSH2 0x1F80 JUMP JUMPDEST PUSH2 0xE9C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP5 DUP3 DUP7 SLOAD AND EQ PUSH2 0x1FE1 JUMP JUMPDEST PUSH2 0xEA4 PUSH2 0x1EDF JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xEDA JUMPI POP POP PUSH2 0x19 SWAP2 POP PUSH2 0x211E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x4 SWAP2 PUSH1 0x40 SWAP5 SWAP4 SWAP5 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP3 MSTORE DUP7 AND GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xF31 JUMPI JUMPDEST POP PUSH2 0xF1E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC1A PUSH1 0x4 DUP3 ADD PUSH2 0x20CF JUMP JUMPDEST PUSH2 0x19 SWAP4 PUSH2 0xF2C SWAP2 EQ PUSH2 0x2071 JUMP JUMPDEST PUSH2 0x226A JUMP JUMPDEST PUSH2 0xF4A SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xC5A JUMPI PUSH2 0xC4B DUP2 DUP4 PUSH2 0xD56 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xF00 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0xFAC JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1035 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1042 DUP3 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH2 0x104E DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH2 0x105D PUSH1 0x84 CALLDATALOAD PUSH2 0x41D JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x310 PUSH2 0x107F SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST SWAP3 PUSH2 0x1089 DUP2 PUSH2 0x2885 JUMP JUMPDEST ISZERO PUSH2 0x110E JUMPI PUSH2 0x109B PUSH2 0x2AF DUP7 DUP4 PUSH2 0x29F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP5 DUP6 EXTCODESIZE ISZERO PUSH2 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH2 0x19 SWAP7 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x1101 JUMPI JUMPDEST PUSH2 0x10EE JUMPI JUMPDEST POP JUMPDEST CALLER SWAP2 PUSH2 0x2B38 JUMP JUMPDEST DUP1 PUSH2 0x32A PUSH2 0x10FB SWAP3 PUSH2 0xC78 JUMP JUMPDEST CODESIZE PUSH2 0x10E5 JUMP JUMPDEST PUSH2 0x1109 PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x10E0 JUMP JUMPDEST PUSH2 0x19 SWAP5 PUSH2 0x1127 DUP5 ADDRESS CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x2843 JUMP JUMPDEST PUSH2 0x1151 DUP5 PUSH2 0x114B DUP4 PUSH2 0x36F DUP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x2836 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1174 SWAP1 DUP4 SWAP1 PUSH2 0x36F JUMP JUMPDEST SSTORE PUSH2 0x10E7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xAF1 JUMPI PUSH2 0x1195 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH2 0x11E8 CALLDATASIZE PUSH2 0x3C9 JUMP JUMPDEST PUSH2 0x11F9 PUSH2 0x11F4 DUP3 PUSH2 0x2EC5 JUMP JUMPDEST PUSH2 0x309E JUMP JUMPDEST PUSH1 0xCB SLOAD SWAP1 PUSH2 0x1205 PUSH2 0x30EA JUMP JUMPDEST POP POP PUSH2 0x121A DUP2 PUSH2 0x1214 DUP5 PUSH2 0x160D JUMP JUMPDEST POP PUSH2 0x3903 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP3 PUSH2 0x122A DUP5 DUP5 PUSH2 0x3218 JUMP JUMPDEST PUSH1 0xF PUSH2 0x1264 PUSH2 0x123E PUSH1 0xA0 SWAP4 DUP5 DUP2 ADD SWAP1 PUSH2 0x33EC JUMP JUMPDEST SWAP4 PUSH2 0x124F PUSH2 0x100 SWAP6 DUP7 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP1 POP PUSH1 0xE PUSH2 0x125C DUP4 PUSH2 0x160D JUMP JUMPDEST POP ADD SSTORE PUSH2 0x160D JUMP JUMPDEST POP ADD SWAP5 PUSH1 0x0 JUMPDEST PUSH2 0x128C PUSH2 0x1283 PUSH2 0x127A DUP5 DUP10 PUSH2 0x3218 JUMP JUMPDEST DUP6 DUP2 ADD SWAP1 PUSH2 0x33EC JUMP JUMPDEST DUP6 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x1320 JUMPI DUP1 PUSH2 0x1316 PUSH2 0x1308 PUSH2 0x12CB PUSH2 0x131B SWAP5 PUSH2 0x12C5 PUSH2 0x12BC PUSH2 0x12B3 DUP10 DUP15 PUSH2 0x3218 JUMP JUMPDEST DUP11 DUP2 ADD SWAP1 PUSH2 0x33EC JUMP JUMPDEST DUP11 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP1 PUSH2 0x3AB6 JUMP JUMPDEST PUSH2 0x12E5 PUSH2 0x12DD PUSH1 0x60 SWAP3 DUP4 DUP2 ADD SWAP1 PUSH2 0x340C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3ADC JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x12F3 SWAP6 SWAP2 SWAP3 SWAP6 PUSH2 0xD77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP6 AND DUP13 DUP7 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE DUP3 ADD MSTORE DUP10 PUSH2 0x3B72 JUMP JUMPDEST PUSH2 0x3A9A JUMP JUMPDEST PUSH2 0x126A JUMP JUMPDEST PUSH1 0xFE SLOAD DUP8 SWAP1 PUSH2 0x1337 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x53E JUMP JUMPDEST SWAP1 PUSH1 0x2 PUSH2 0x1360 PUSH2 0x135A PUSH1 0x1 PUSH2 0x134B DUP6 PUSH2 0x3B25 JUMP JUMPDEST POP ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0x3B25 JUMP JUMPDEST POP ADD SLOAD DUP3 EXTCODESIZE ISZERO PUSH2 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x13B6 JUMPI JUMPDEST PUSH2 0x13A9 JUMPI STOP JUMPDEST DUP1 PUSH2 0x32A PUSH2 0x19 SWAP3 PUSH2 0xC78 JUMP JUMPDEST PUSH2 0x13BE PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x13A3 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0xCA SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x140B DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x1417 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH2 0x1425 PUSH1 0x64 CALLDATALOAD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x465 PUSH2 0x1447 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST SWAP2 PUSH2 0x1451 DUP5 PUSH2 0x2885 JUMP JUMPDEST ISZERO PUSH2 0x14D8 JUMPI PUSH2 0x1463 PUSH2 0x2AF DUP3 DUP7 PUSH2 0x29F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH2 0x19 SWAP6 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x14CB JUMPI JUMPDEST PUSH2 0x14B8 JUMPI JUMPDEST POP JUMPDEST CALLER SWAP2 CALLER SWAP2 PUSH2 0x2B38 JUMP JUMPDEST DUP1 PUSH2 0x32A PUSH2 0x14C5 SWAP3 PUSH2 0xC78 JUMP JUMPDEST CODESIZE PUSH2 0x14AD JUMP JUMPDEST PUSH2 0x14D3 PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x14A8 JUMP JUMPDEST PUSH2 0x19 SWAP4 PUSH2 0x14F1 DUP4 ADDRESS CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x2843 JUMP JUMPDEST PUSH2 0x1515 DUP4 PUSH2 0x114B DUP5 PUSH2 0x36F DUP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1538 SWAP1 DUP5 SWAP1 PUSH2 0x36F JUMP JUMPDEST SSTORE PUSH2 0x14AF JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x20 PUSH2 0x15C3 PUSH1 0x4 CALLDATALOAD PUSH2 0x158B DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1598 DUP3 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xCE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0xC9 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xCB SLOAD DUP2 LT ISZERO PUSH2 0x1648 JUMPI JUMPDEST PUSH1 0xCB PUSH1 0x0 MSTORE PUSH1 0x4 SHL PUSH32 0xA7CE836D032B2BF62B7E2097A8E0A6D8AEB35405AD15271E96D3B0188A1D06FB ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1650 PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x1618 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x168A JUMPI POP POP POP PUSH2 0x1FD SWAP3 POP SUB DUP4 PUSH2 0xD56 JUMP JUMPDEST DUP6 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1674 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x16D4 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x16BE JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x16B3 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x16F2 DUP5 PUSH2 0x16A4 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x175F JUMPI POP PUSH1 0x1 EQ PUSH2 0x171C JUMPI JUMPDEST POP POP PUSH2 0x1FD SWAP3 POP SUB DUP4 PUSH2 0xD56 JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1747 JUMPI POP POP PUSH2 0x1FD SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x170E JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x172F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1FD SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x170E JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x179B JUMPI JUMPDEST PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH2 0x17A3 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x1794 JUMP JUMPDEST SWAP1 DUP2 SLOAD PUSH2 0x17B4 DUP2 PUSH2 0x1782 JUMP JUMPDEST SWAP3 PUSH1 0x40 SWAP4 PUSH2 0x17C4 DUP6 MLOAD SWAP2 DUP3 PUSH2 0xD56 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP5 PUSH1 0x20 DUP1 SWAP3 ADD SWAP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP4 JUMPDEST DUP6 DUP6 LT PUSH2 0x17EA JUMPI POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP5 PUSH1 0x1 SWAP3 DUP5 MLOAD PUSH2 0x17FB DUP2 PUSH2 0xCE9 JUMP JUMPDEST DUP7 SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP3 MSTORE DUP6 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP5 SHR AND DUP4 DUP3 ADD MSTORE PUSH2 0x181F DUP6 DUP9 ADD PUSH2 0x1655 JUMP JUMPDEST DUP7 DUP3 ADD MSTORE PUSH2 0x182F PUSH1 0x2 DUP9 ADD PUSH2 0x16DE JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xFF PUSH1 0x3 DUP9 ADD SLOAD AND ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP5 ADD SWAP4 SWAP2 PUSH2 0x17DB JUMP JUMPDEST SWAP1 PUSH2 0x18EB PUSH1 0x6 PUSH2 0x185F PUSH2 0xD84 JUMP JUMPDEST DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 AND DUP4 MSTORE PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHR AND PUSH1 0x20 DUP3 ADD MSTORE SWAP4 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0xA0 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0x18C5 PUSH1 0x4 DUP3 ADD PUSH2 0x16DE JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MSTORE PUSH2 0x18E5 PUSH2 0x18DB PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xE0 DUP8 ADD MSTORE JUMP JUMPDEST ADD PUSH2 0x17A8 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP3 PUSH2 0x1903 DUP5 PUSH2 0xCB3 JUMP JUMPDEST DUP4 PUSH2 0x190D DUP4 PUSH2 0x1655 JUMP JUMPDEST DUP2 MSTORE DUP2 MLOAD SWAP3 PUSH2 0x191B DUP5 PUSH2 0xCCE JUMP JUMPDEST PUSH1 0x1 SWAP3 DUP4 DUP3 ADD SLOAD DUP6 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 PUSH1 0x20 SWAP5 DUP6 DUP8 ADD MSTORE DUP5 PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 AND DUP6 DUP11 ADD MSTORE PUSH1 0x60 SWAP2 DUP6 SHR AND DUP2 DUP10 ADD MSTORE DUP4 MLOAD SWAP4 PUSH2 0x195C DUP6 PUSH2 0xCE9 JUMP JUMPDEST PUSH1 0x4 DUP7 ADD SLOAD DUP6 MSTORE PUSH1 0xFF PUSH1 0x5 DUP8 ADD SLOAD PUSH2 0xFFFF DUP2 AND DUP6 DUP9 ADD MSTORE DUP2 DUP2 PUSH1 0x10 SHR AND ISZERO ISZERO DUP4 DUP9 ADD MSTORE PUSH1 0x18 SHR AND ISZERO ISZERO DUP3 DUP7 ADD MSTORE PUSH1 0x6 DUP7 ADD SWAP2 DUP2 MLOAD SWAP1 DUP2 SWAP6 PUSH2 0x19B2 PUSH2 0x19A6 DUP7 SLOAD DUP1 SWAP6 PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 PUSH1 0x7 DUP6 ADD LT PUSH2 0x1B27 JUMPI SWAP4 DUP8 SWAP4 DUP10 SWAP8 SWAP4 PUSH1 0x7 SWAP12 SWAP10 PUSH2 0x1A24 SWAP9 SWAP5 PUSH2 0x1A34 SWAP15 SWAP13 SWAP9 SLOAD SWAP6 DUP6 DUP6 LT PUSH2 0x1B11 JUMPI JUMPDEST DUP6 DUP6 LT PUSH2 0x1AF9 JUMPI JUMPDEST DUP6 DUP6 LT PUSH2 0x1ADF JUMPI JUMPDEST POP DUP5 DUP5 LT PUSH2 0x1ABA JUMPI JUMPDEST POP DUP4 DUP4 LT PUSH2 0x1A95 JUMPI JUMPDEST DUP4 DUP4 LT PUSH2 0x1A70 JUMPI JUMPDEST DUP4 DUP4 LT PUSH2 0x1A4B JUMPI JUMPDEST POP POP LT PUSH2 0x1A3D JUMPI JUMPDEST POP SWAP1 POP SUB DUP3 PUSH2 0xD56 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP8 ADD MSTORE ADD PUSH2 0x1851 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0xE0 SHR DUP2 MSTORE ADD DUP10 SWAP1 CODESIZE PUSH2 0x1A1A JUMP JUMPDEST SWAP1 SWAP2 SWAP5 PUSH2 0x1A66 DUP2 PUSH4 0xFFFFFFFF DUP8 PUSH1 0xC0 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST ADD SWAP4 ADD CODESIZE DUP6 PUSH2 0x1A12 JUMP JUMPDEST DUP6 PUSH2 0x1A8B DUP4 SWAP5 SWAP8 PUSH4 0xFFFFFFFF DUP9 PUSH1 0xA0 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP1 DUP6 PUSH2 0x1A0A JUMP JUMPDEST DUP6 PUSH2 0x1AB0 DUP4 SWAP5 SWAP8 PUSH4 0xFFFFFFFF DUP9 PUSH1 0x80 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP1 DUP6 PUSH2 0x1A02 JUMP JUMPDEST SWAP6 PUSH2 0x1AD4 DUP2 PUSH4 0xFFFFFFFF DUP9 DUP7 SWAP8 SWAP11 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST ADD SWAP5 ADD SWAP1 DUP6 CODESIZE PUSH2 0x19F9 JUMP JUMPDEST DUP7 SWAP1 SHR PUSH4 0xFFFFFFFF AND DUP8 MSTORE SWAP3 SWAP6 DUP3 SWAP1 DUP3 ADD SWAP7 ADD SWAP3 CODESIZE PUSH2 0x19F0 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP8 DUP5 SHR AND DUP9 MSTORE SWAP7 DUP3 ADD SWAP7 SWAP4 DUP4 ADD SWAP4 PUSH2 0x19E8 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP8 AND DUP9 MSTORE SWAP7 DUP3 ADD SWAP7 SWAP4 DUP4 ADD SWAP4 PUSH2 0x19E0 JUMP JUMPDEST SWAP7 SWAP2 PUSH2 0x100 DUP2 SWAP5 SWAP6 SWAP7 SWAP8 PUSH2 0x1BD4 PUSH1 0x8 SWAP5 SWAP6 PUSH2 0x1BC9 DUP13 SLOAD SWAP2 PUSH2 0x1B69 PUSH4 0xFFFFFFFF SWAP2 PUSH2 0x1B58 DUP8 DUP5 DUP8 AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP6 DUP3 SHR DUP5 AND AND SWAP1 DUP8 ADD MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP4 DUP15 SHR DUP3 AND AND DUP6 DUP15 ADD MSTORE PUSH4 0xFFFFFFFF DUP4 DUP11 SHR DUP3 AND AND DUP6 DUP11 ADD MSTORE PUSH2 0x1B9E PUSH1 0x80 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1BB5 PUSH1 0xA0 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xC0 SWAP1 DUP4 DUP3 DUP8 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xE0 SWAP1 DUP2 SHR SWAP1 DUP4 ADD MSTORE JUMP JUMPDEST ADD SWAP8 ADD SWAP4 ADD SWAP2 SWAP1 DUP12 SWAP7 SWAP6 SWAP5 SWAP4 PUSH2 0x19B7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xCB SLOAD DUP2 LT ISZERO PUSH2 0x1ED JUMPI PUSH2 0x1C73 SWAP1 PUSH1 0xCB PUSH1 0x0 MSTORE PUSH1 0x4 SHL PUSH32 0xA7CE836D032B2BF62B7E2097A8E0A6D8AEB35405AD15271E96D3B0188A1D0709 PUSH2 0x1C5C DUP3 PUSH32 0xA7CE836D032B2BF62B7E2097A8E0A6D8AEB35405AD15271E96D3B0188A1D06FB ADD PUSH2 0x18F3 JUMP JUMPDEST SWAP2 ADD SLOAD PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x79C JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1C9B DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x1CF8 PUSH1 0x24 CALLDATALOAD PUSH2 0x1CAA DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH2 0x1CB7 DUP3 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP4 PUSH2 0x1CDC PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND ISZERO DUP1 SWAP7 DUP2 SWAP8 PUSH2 0x1D76 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1D56 JUMPI JUMPDEST POP PUSH2 0x2386 JUMP JUMPDEST DUP5 PUSH2 0x1CEF PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x1D3D JUMPI PUSH2 0x23E9 JUMP JUMPDEST PUSH2 0x1CFE JUMPI STOP JUMPDEST PUSH2 0x1D0E PUSH2 0xFF00 NOT PUSH1 0x0 SLOAD AND PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 SWAP1 LOG1 STOP JUMPDEST PUSH2 0x1D51 PUSH2 0x100 PUSH2 0xFF00 NOT PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x23E9 JUMP JUMPDEST ADDRESS EXTCODESIZE ISZERO SWAP2 POP DUP2 PUSH2 0x1D68 JUMPI JUMPDEST POP CODESIZE PUSH2 0x1CD6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP PUSH1 0xFF AND EQ CODESIZE PUSH2 0x1D61 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF DUP3 AND LT SWAP2 POP PUSH2 0x1CCF JUMP JUMPDEST POP PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1D9D DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x1DA8 PUSH1 0x24 CALLDATALOAD PUSH2 0x41D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x310 PUSH2 0x1DCA SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH32 0x2849B43074093A05396B6F2A937DEE8565B15A48A7B3D4BFFB732A5017380AF5 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP1 PUSH2 0x4A4 CALLER SWAP5 CALLVALUE DUP4 PUSH2 0x2AB5 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1E23 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x1E2B PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0xFE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE STOP JUMPDEST POP CALLVALUE PUSH2 0x1ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1E6B DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x1E73 PUSH2 0x1EDF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1E8B JUMPI PUSH2 0x19 SWAP1 PUSH2 0x1F37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1EF3 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST ISZERO PUSH2 0x1F87 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1FE8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x204F DUP3 PUSH2 0xD3B JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1ED JUMPI MLOAD SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2078 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x2E PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x2153 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x21B8 DUP3 PUSH2 0x211E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP1 LOG2 DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2262 JUMPI JUMPDEST PUSH2 0x21FA JUMPI POP POP JUMP JUMPDEST PUSH2 0x225F SWAP2 PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x220E DUP6 PUSH2 0xC98 JUMP JUMPDEST PUSH1 0x27 DUP6 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x20 DUP7 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL PUSH2 0x2259 PUSH2 0x22BD JUMP JUMPDEST SWAP2 PUSH2 0x22ED JUMP JUMPDEST POP JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x21F2 JUMP JUMPDEST SWAP1 PUSH2 0x2274 DUP3 PUSH2 0x211E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP1 LOG2 DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x22B5 JUMPI PUSH2 0x21FA JUMPI POP POP JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x21F2 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x22E8 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x22CE DUP3 PUSH2 0xD91 JUMP JUMPDEST SWAP2 PUSH2 0x22DC PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xD56 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x234F JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2301 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x230A JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2362 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0xC1A SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST ISZERO PUSH2 0x238D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x2405 PUSH1 0xFF PUSH1 0x0 SLOAD PUSH1 0x8 SHR AND PUSH2 0x2400 DUP2 PUSH2 0x2466 JUMP JUMPDEST PUSH2 0x2466 JUMP JUMPDEST PUSH2 0x240E CALLER PUSH2 0x1F37 JUMP JUMPDEST PUSH2 0x241F PUSH1 0xFF PUSH1 0x0 SLOAD PUSH1 0x8 SHR AND PUSH2 0x2466 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP4 AND DUP4 PUSH1 0xC9 SLOAD AND OR PUSH1 0xC9 SSTORE AND SWAP1 PUSH1 0xCA SLOAD AND OR PUSH1 0xCA SSTORE PUSH2 0x2456 PUSH2 0x1EDF JUMP JUMPDEST DUP2 AND ISZERO PUSH2 0x1E8B JUMPI PUSH2 0x1FD SWAP1 PUSH2 0x1F37 JUMP JUMPDEST ISZERO PUSH2 0x246D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x24CD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A2066756E6374696F6E2063616E206F6E6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x792062652063616C6C65642066726F6D20616E20454F41000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x253F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A2063616E6E6F742073656E6420746F2073 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x32B633 PUSH1 0xE9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2597 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A2063616E6E6F742073656E6420746F206D PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x32B9B9B2B733B2B9 PUSH1 0xC1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x25F4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A20455448207472616E7366657220666169 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x1B1959 PUSH1 0xEA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x2669 JUMPI JUMP JUMPDEST PUSH2 0x1FD PUSH2 0x2645 JUMP JUMPDEST ISZERO PUSH2 0x2678 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4272696467653A2077726F6E672072656D6F746520746F6B PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656E20666F7220466972656C696E6B204D696E7461626C65204552433230206C PUSH1 0x64 DUP3 ADD MSTORE PUSH10 0x37B1B0B6103A37B5B2B7 PUSH1 0xB1 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x1FD SWAP2 PUSH2 0x2732 PUSH1 0x64 DUP4 PUSH2 0xD56 JUMP JUMPDEST PUSH2 0x2756 JUMP JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1ED JUMPI MLOAD PUSH2 0x799 DUP2 PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27AE SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x276F DUP3 PUSH2 0xCB3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 SWAP6 DUP7 DUP6 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP8 DUP7 ADD MSTORE DUP7 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL PUSH2 0x2259 PUSH2 0x22BD JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP3 DUP3 ISZERO SWAP3 DUP4 ISZERO PUSH2 0x281E JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x27C7 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x282E SWAP4 POP DUP3 ADD DUP2 ADD SWAP2 ADD PUSH2 0x2741 JUMP JUMPDEST CODESIZE DUP3 DUP2 PUSH2 0x27BC JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x2669 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x1FD SWAP2 PUSH2 0x2732 DUP3 PUSH2 0xCE9 JUMP JUMPDEST PUSH2 0x288E DUP2 PUSH2 0x2925 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2899 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x28A4 DUP2 PUSH2 0x2982 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x2913 JUMPI JUMPDEST DUP2 PUSH2 0x28B4 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH4 0xEC4FC8E3 PUSH1 0xE0 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x28E6 DUP2 PUSH2 0xC98 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x7530 STATICCALL PUSH1 0x0 MLOAD RETURNDATASIZE DUP3 PUSH2 0x2907 JUMPI JUMPDEST POP DUP2 PUSH2 0x2900 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 GT ISZERO SWAP2 POP CODESIZE PUSH2 0x28F6 JUMP JUMPDEST SWAP1 POP PUSH2 0x291E DUP2 PUSH2 0x29AB JUMP JUMPDEST ISZERO SWAP1 PUSH2 0x28AB JUMP JUMPDEST PUSH2 0x292E DUP2 PUSH2 0x2982 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x2970 JUMPI JUMPDEST DUP2 PUSH2 0x293E JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH4 0x1D1D8B63 PUSH1 0xE0 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x28E6 DUP2 PUSH2 0xC98 JUMP JUMPDEST SWAP1 POP PUSH2 0x297B DUP2 PUSH2 0x29AB JUMP JUMPDEST ISZERO SWAP1 PUSH2 0x2935 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP1 DUP4 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x28E6 DUP2 PUSH2 0xC98 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x28E6 DUP2 PUSH2 0xC98 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1ED JUMPI MLOAD PUSH2 0x799 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x29F9 DUP2 PUSH2 0x2925 JUMP JUMPDEST ISZERO PUSH2 0x2A78 JUMPI PUSH1 0x40 MLOAD PUSH4 0x600F0DEB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x2A6B JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x2A3D JUMPI JUMPDEST POP AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2A5E SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2A64 JUMPI JUMPDEST PUSH2 0x2A56 DUP2 DUP4 PUSH2 0xD56 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x29DB JUMP JUMPDEST CODESIZE PUSH2 0x2A35 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2A4C JUMP JUMPDEST PUSH2 0x2A73 PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x2A2D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35B02CB1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x2A6B JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2A3D JUMPI POP AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x799 SWAP4 SWAP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP5 SWAP3 SWAP1 SWAP2 AND SWAP3 PUSH32 0x31B2166FF604FC5672EA5DF08A78081D2BC6D746CADCE880747F3643D819E83D SWAP3 DUP3 SWAP2 PUSH2 0x2B0F SWAP2 SWAP1 DUP4 PUSH2 0x2AB5 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x799 SWAP4 SWAP3 PUSH1 0x60 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x615 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP7 SWAP3 DUP5 AND SWAP6 SWAP2 SWAP1 SWAP4 AND SWAP4 PUSH32 0x7FF126DB8024424BBFD9826E8AB82FF59136289EA440B04B39A0DF1B03B9CABF SWAP4 SWAP3 DUP4 SWAP3 PUSH2 0x2B7F SWAP3 DUP5 PUSH2 0x2B14 JUMP JUMPDEST SUB SWAP1 LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP7 SWAP3 DUP5 AND SWAP6 SWAP2 SWAP1 SWAP4 AND SWAP4 PUSH32 0xD59C65B35445225835C83F50B6EDE06A7BE047D22E357073E250D9AF537518CD SWAP4 SWAP3 DUP4 SWAP3 PUSH2 0x2B7F SWAP3 DUP5 PUSH2 0x2B14 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP4 SWAP2 SWAP3 DUP5 SWAP4 PUSH1 0x20 DUP5 MLOAD SWAP5 ADD SWAP3 CALL SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1ED JUMPI DUP2 PUSH1 0x5 SHL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1ED JUMPI JUMP JUMPDEST DUP2 DUP4 MSTORE SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT PUSH2 0x1ED JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0x2C36 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x9E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0x2737 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH2 0x11E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1ED JUMPI DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x1ED JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 AND SUB PUSH2 0x1ED JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x1FD DUP3 PUSH2 0x2CE4 JUMP JUMPDEST SWAP1 DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 SWAP4 ADD SWAP3 DUP4 DUP3 PUSH1 0x5 SHL DUP2 ADD SWAP5 DUP5 PUSH1 0x0 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x2D22 JUMPI POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 DUP6 DUP1 DUP3 DUP5 PUSH1 0x1 SWAP5 SUB DUP8 MSTORE PUSH2 0x2D3D DUP12 DUP8 PUSH2 0x2C52 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF DUP3 CALLDATALOAD PUSH2 0x2D4E DUP2 PUSH2 0x41D JUMP JUMPDEST AND DUP2 MSTORE DUP3 DUP3 ADD CALLDATALOAD PUSH2 0x2D5E DUP2 PUSH2 0x1DC JUMP JUMPDEST DUP6 DUP1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 ADD MSTORE PUSH2 0x2DA9 PUSH2 0x2D8E PUSH1 0x40 PUSH2 0x2D7D DUP2 DUP7 ADD DUP7 PUSH2 0x2BDE JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xA0 DUP1 SWAP2 DUP8 ADD MSTORE DUP6 ADD SWAP2 PUSH2 0x2C12 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2D9C DUP2 DUP7 ADD DUP7 PUSH2 0x2C92 JUMP JUMPDEST SWAP2 DUP6 DUP5 SUB SWAP1 DUP7 ADD MSTORE PUSH2 0x2CC3 JUMP JUMPDEST SWAP2 PUSH1 0x80 DUP1 SWAP2 ADD CALLDATALOAD PUSH2 0x2DB9 DUP2 PUSH2 0x2737 JUMP JUMPDEST ISZERO ISZERO SWAP2 ADD MSTORE SWAP10 ADD SWAP5 ADD SWAP5 ADD SWAP3 SWAP6 SWAP5 SWAP4 SWAP2 SWAP1 PUSH2 0x2D11 JUMP JUMPDEST PUSH2 0x799 SWAP2 PUSH2 0x2DED DUP2 PUSH2 0x2DE0 DUP5 PUSH2 0x2C47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x2E0C PUSH2 0x2DFC PUSH1 0x20 DUP5 ADD PUSH2 0x2C47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x2E2B PUSH2 0x2E1B PUSH1 0x40 DUP5 ADD PUSH2 0x1F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x2E43 PUSH2 0x2E3A PUSH1 0x60 DUP5 ADD PUSH2 0x2C72 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x2E62 PUSH2 0x2E52 PUSH1 0x80 DUP5 ADD PUSH2 0x1F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x2E8D PUSH2 0x2E7C PUSH1 0xC0 DUP5 ADD DUP5 PUSH2 0x2C92 JUMP JUMPDEST PUSH2 0x120 DUP1 PUSH1 0xC0 DUP7 ADD MSTORE DUP5 ADD SWAP2 PUSH2 0x2CC3 JUMP JUMPDEST SWAP2 PUSH2 0x2EA7 PUSH2 0x2E9D PUSH1 0xE0 DUP4 ADD PUSH2 0x2CEF JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xE0 DUP5 ADD MSTORE JUMP JUMPDEST PUSH2 0x2EB7 PUSH2 0x100 SWAP2 DUP3 DUP2 ADD SWAP1 PUSH2 0x2BDE JUMP JUMPDEST SWAP3 SWAP1 SWAP2 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0x2CFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x58FBE9E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH2 0x2EFA PUSH2 0x2EE9 DUP3 DUP1 PUSH2 0x2BDE JUMP JUMPDEST PUSH1 0x40 PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD SWAP2 PUSH2 0x2C12 JUMP JUMPDEST SWAP1 DUP4 DUP2 ADD CALLDATALOAD PUSH1 0xBE NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x1ED JUMPI DUP4 DUP4 SUB PUSH1 0x23 NOT ADD PUSH1 0x44 DUP6 ADD MSTORE ADD DUP1 CALLDATALOAD DUP3 MSTORE DUP1 DUP5 ADD CALLDATALOAD DUP3 DUP6 ADD MSTORE SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2F39 DUP2 PUSH2 0x2C36 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 SWAP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x2F57 DUP2 PUSH2 0x2C36 JUMP JUMPDEST AND PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x2F6A PUSH1 0x80 DUP6 ADD DUP6 PUSH2 0x2C52 JUMP JUMPDEST SWAP4 PUSH1 0xC0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x2FCE PUSH2 0x160 DUP4 ADD SWAP6 DUP1 CALLDATALOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0xFFFF DUP7 DUP3 ADD CALLDATALOAD PUSH2 0x2F92 DUP2 PUSH2 0x2C66 JUMP JUMPDEST AND PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH2 0x2FA6 DUP2 PUSH2 0x2737 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x100 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH2 0x2FBC DUP2 PUSH2 0x2737 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x120 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP1 PUSH2 0x2BDE JUMP JUMPDEST PUSH1 0xA0 PUSH2 0x140 DUP6 ADD MSTORE SWAP6 DUP7 SWAP1 MSTORE PUSH2 0x180 DUP4 ADD SWAP6 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3070 JUMPI POP POP POP SWAP4 PUSH2 0x3010 SWAP2 PUSH2 0x3002 DUP7 PUSH1 0xA0 DUP7 SWAP8 SWAP9 ADD SWAP1 PUSH2 0x2C7D JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2DCF JUMP JUMPDEST SUB DUP2 PUSH20 0xF37AD1278917C04FB291C75A42E61710964CB57C GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x3063 JUMPI JUMPDEST PUSH1 0x0 SWAP3 PUSH2 0x303D JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH2 0x799 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x305C JUMPI JUMPDEST PUSH2 0x3054 DUP2 DUP4 PUSH2 0xD56 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2741 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x304A JUMP JUMPDEST PUSH2 0x306B PUSH2 0x2064 JUMP JUMPDEST PUSH2 0x3031 JUMP JUMPDEST SWAP3 SWAP5 POP SWAP3 SWAP5 DUP1 DUP3 SWAP8 PUSH4 0xFFFFFFFF PUSH1 0x1 SWAP5 CALLDATALOAD PUSH2 0x308A DUP2 PUSH2 0x41D JUMP JUMPDEST AND DUP2 MSTORE ADD SWAP7 ADD SWAP2 ADD SWAP1 DUP8 SWAP5 SWAP3 DUP8 SWAP5 SWAP3 PUSH2 0x2FE3 JUMP JUMPDEST ISZERO PUSH2 0x30A5 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964207472616E73616374696F6E2070726F6F6600000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x3139 JUMPI JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0xCB SSTORE DUP2 LT ISZERO PUSH2 0x1648 JUMPI PUSH1 0xCB PUSH1 0x0 MSTORE PUSH1 0x4 SHL PUSH32 0xA7CE836D032B2BF62B7E2097A8E0A6D8AEB35405AD15271E96D3B0188A1D06FB ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3141 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x30FA JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1ED JUMPI PUSH1 0x20 ADD SWAP2 DUP2 PUSH1 0x5 SHL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1ED JUMPI JUMP JUMPDEST DUP1 SLOAD SWAP1 PUSH1 0x0 SWAP1 DUP2 DUP2 SSTORE DUP3 PUSH2 0x31A5 JUMPI POP POP POP JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP2 DUP3 ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x31BC JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x31B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x320B JUMPI JUMPDEST DUP1 SLOAD SWAP2 DUP1 DUP3 SSTORE DUP3 DUP2 LT PUSH2 0x31E5 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP3 DUP4 ADD SWAP3 ADD JUMPDEST DUP3 DUP2 LT PUSH2 0x3200 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x31F4 JUMP JUMPDEST PUSH2 0x3213 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x31D3 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0xBE NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x2C36 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x9E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x2737 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x3261 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3256 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP2 GT PUSH2 0x32D6 JUMPI JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP1 DUP3 LT PUSH2 0x328B JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x1FD SWAP3 PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x1C DUP3 DUP6 ADD PUSH1 0x3 SHR DUP5 ADD SWAP5 PUSH1 0x2 SHL AND DUP1 PUSH2 0x32BB JUMPI JUMPDEST POP ADD PUSH1 0x3 SHR ADD SWAP1 PUSH2 0x3256 JUMP JUMPDEST PUSH1 0x0 NOT SWAP1 DUP2 DUP7 ADD SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x20 SUB PUSH1 0x3 SHL SHR AND SWAP1 SSTORE CODESIZE PUSH2 0x32AF JUMP JUMPDEST PUSH2 0x32DE PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x327A JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x41D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3318 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x33DF JUMPI JUMPDEST PUSH2 0x330C DUP4 DUP6 PUSH2 0x326D JUMP JUMPDEST SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x3 SHR SWAP2 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x338F JUMPI POP PUSH1 0x7 NOT DUP2 AND SWAP1 SUB DUP1 PUSH2 0x333B JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP4 DUP5 JUMPDEST DUP2 DUP2 LT PUSH2 0x3356 JUMPI POP POP POP ADD SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3335 JUMP JUMPDEST SWAP1 SWAP2 SWAP5 PUSH1 0x20 PUSH2 0x3385 PUSH1 0x1 SWAP3 PUSH2 0x336A DUP10 PUSH2 0x32E3 JUMP JUMPDEST SWAP1 DUP6 PUSH1 0x2 SHL PUSH1 0x3 SHL PUSH4 0xFFFFFFFF DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP7 ADD SWAP3 SWAP2 ADD PUSH2 0x3341 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 DUP2 LT PUSH2 0x33A8 JUMPI POP DUP4 DUP3 ADD SSTORE PUSH1 0x1 ADD PUSH2 0x3320 JUMP JUMPDEST SWAP6 SWAP1 PUSH1 0x20 PUSH2 0x33D6 PUSH1 0x1 SWAP3 PUSH2 0x33BB DUP6 PUSH2 0x32E3 JUMP JUMPDEST SWAP1 DUP11 PUSH1 0x2 SHL PUSH1 0x3 SHL PUSH4 0xFFFFFFFF DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP3 ADD SWAP7 ADD PUSH2 0x3393 JUMP JUMPDEST PUSH2 0x33E7 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3302 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH2 0x11E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x1DC JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x1ED JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1ED JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x1ED JUMPI JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x344D JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x1FD SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x3479 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3256 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x346C JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x354B JUMPI JUMPDEST PUSH2 0x34A9 DUP2 PUSH2 0x34A3 DUP5 SLOAD PUSH2 0x16A4 JUMP JUMPDEST DUP5 PUSH2 0x343E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x34E3 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x34D8 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD CALLDATALOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x34C2 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP5 PUSH2 0x34F8 DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 DUP1 JUMPDEST DUP8 DUP2 LT PUSH2 0x3533 JUMPI POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x3519 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD CALLDATALOAD PUSH1 0x0 NOT PUSH1 0x3 DUP5 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x350F JUMP JUMPDEST SWAP1 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP7 ADD CALLDATALOAD DUP2 SSTORE ADD SWAP5 ADD SWAP2 ADD PUSH2 0x34FB JUMP JUMPDEST PUSH2 0x3553 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3495 JUMP JUMPDEST CALLDATALOAD PUSH2 0x799 DUP2 PUSH2 0x2CE4 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF DUP2 CALLDATALOAD PUSH2 0x3573 DUP2 PUSH2 0x41D JUMP JUMPDEST AND DUP3 SLOAD DUP2 PUSH4 0xFFFFFFFF NOT DUP3 AND OR DUP5 SSTORE PUSH1 0x20 SWAP2 DUP3 DUP5 ADD CALLDATALOAD PUSH2 0x3592 DUP2 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP3 AND OR SWAP1 DUP3 SHL PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB AND OR DUP4 SSTORE PUSH1 0x1 SWAP1 DUP4 DUP3 ADD PUSH2 0x35C5 PUSH1 0x40 DUP6 ADD DUP6 PUSH2 0x315D JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT PUSH2 0x3649 JUMPI JUMPDEST PUSH2 0x35E0 DUP5 DUP5 PUSH2 0x31C7 JUMP JUMPDEST SWAP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3638 JUMPI POP POP POP POP POP POP SWAP1 PUSH1 0x3 PUSH2 0x3625 PUSH1 0x80 DUP5 PUSH2 0x361F PUSH2 0x3615 PUSH1 0x60 PUSH2 0x1FD SWAP9 ADD DUP4 PUSH2 0x340C JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP9 ADD PUSH2 0x3483 JUMP JUMPDEST ADD PUSH2 0x324C JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST DUP4 CALLDATALOAD DUP4 DUP3 ADD SSTORE SWAP3 DUP2 ADD SWAP3 DUP6 ADD PUSH2 0x35EC JUMP JUMPDEST PUSH2 0x3651 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x35D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP4 GT PUSH2 0x37A3 JUMPI JUMPDEST DUP1 SLOAD DUP4 DUP3 SSTORE DUP1 DUP5 LT PUSH2 0x36BA JUMPI JUMPDEST POP SWAP1 PUSH2 0x3681 DUP2 SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3694 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 DUP3 PUSH2 0x36AE PUSH2 0x36A8 PUSH1 0x1 SWAP6 DUP8 PUSH2 0x3237 JUMP JUMPDEST DUP8 PUSH2 0x3562 JUMP JUMPDEST ADD SWAP4 ADD SWAP4 ADD SWAP3 SWAP2 PUSH2 0x3686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xFE SHL SUB DUP2 DUP2 AND DUP3 SUB PUSH2 0x3796 JUMPI JUMPDEST DUP5 AND DUP5 SUB PUSH2 0x3789 JUMPI JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP2 PUSH1 0x2 SWAP1 DUP2 SHL DUP4 ADD SWAP3 DUP7 DUP3 SHL ADD JUMPDEST DUP4 DUP2 LT PUSH2 0x36FB JUMPI POP POP POP PUSH2 0x366F JUMP JUMPDEST DUP1 DUP4 PUSH1 0x4 SWAP3 SSTORE DUP4 PUSH1 0x1 PUSH2 0x370F DUP2 DUP5 ADD PUSH2 0x3192 JUMP JUMPDEST DUP5 DUP4 ADD SWAP1 PUSH2 0x371D DUP3 SLOAD PUSH2 0x16A4 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x3732 JUMPI JUMPDEST POP POP POP PUSH1 0x3 DUP3 ADD SSTORE ADD PUSH2 0x36EC JUMP JUMPDEST PUSH1 0x1F DUP1 DUP4 GT PUSH1 0x1 EQ PUSH2 0x374C JUMPI POP POP POP SSTORE JUMPDEST DUP4 CODESIZE DUP1 DUP1 PUSH2 0x3724 JUMP JUMPDEST PUSH2 0x3784 SWAP5 POP SWAP1 PUSH2 0x3774 SWAP3 SWAP2 PUSH2 0x3766 DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 ADD PUSH2 0x3256 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE DUP2 PUSH1 0x20 DUP2 KECCAK256 SWAP2 SSTORE SSTORE JUMP JUMPDEST PUSH2 0x3743 JUMP JUMPDEST PUSH2 0x3791 PUSH2 0x2645 JUMP JUMPDEST PUSH2 0x36D5 JUMP JUMPDEST PUSH2 0x379E PUSH2 0x2645 JUMP JUMPDEST PUSH2 0x36CC JUMP JUMPDEST PUSH2 0x37AB PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3662 JUMP JUMPDEST PUSH1 0x6 SWAP1 PUSH2 0x38FA PUSH2 0x1FD SWAP4 PUSH2 0x37E3 PUSH2 0x37C6 DUP3 PUSH2 0x322D JUMP JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND OR DUP5 SSTORE JUMP JUMPDEST PUSH2 0x381F PUSH2 0x37F2 PUSH1 0x20 DUP4 ADD PUSH2 0x322D JUMP JUMPDEST DUP5 SLOAD PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT AND PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 SHL AND OR DUP5 SSTORE JUMP JUMPDEST PUSH2 0x3877 PUSH1 0x1 DUP5 ADD PUSH2 0x3851 PUSH2 0x3835 PUSH1 0x40 DUP6 ADD PUSH2 0x3402 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x385D PUSH1 0x60 DUP5 ADD PUSH2 0x324C JUMP JUMPDEST DUP2 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 ISZERO ISZERO PUSH1 0xA0 SHL PUSH1 0xFF PUSH1 0xA0 SHL AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x38A9 PUSH2 0x3886 PUSH1 0x80 DUP4 ADD PUSH2 0x3402 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD CALLDATALOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH2 0x38CD PUSH2 0x38C3 PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x340C JUMP JUMPDEST SWAP1 PUSH1 0x4 DUP7 ADD PUSH2 0x3483 JUMP JUMPDEST PUSH2 0x38EF PUSH2 0x38DC PUSH1 0xE0 DUP4 ADD PUSH2 0x3558 JUMP JUMPDEST PUSH1 0x5 DUP6 ADD SWAP1 PUSH1 0xFF AND PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x100 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP3 SWAP1 SWAP2 ADD PUSH2 0x3656 JUMP JUMPDEST SWAP1 PUSH2 0x390E DUP2 DUP1 PUSH2 0x315D JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x3A8D JUMPI JUMPDEST PUSH2 0x3929 DUP4 DUP6 PUSH2 0x31C7 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP3 DUP4 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x3A7B JUMPI POP POP POP POP PUSH2 0x3A74 DUP3 PUSH2 0x3A6A PUSH2 0x3A60 PUSH2 0x3960 DUP6 PUSH2 0x1FD SWAP9 SWAP8 PUSH1 0x7 SWAP8 ADD SWAP1 PUSH2 0x3218 JUMP JUMPDEST SWAP3 DUP4 CALLDATALOAD PUSH1 0x1 DUP9 ADD SSTORE DUP1 DUP5 ADD CALLDATALOAD PUSH1 0x2 DUP9 ADD SSTORE PUSH2 0x39DD PUSH1 0x3 DUP9 ADD PUSH2 0x39A6 PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x3989 DUP2 PUSH2 0x2C36 JUMP JUMPDEST DUP3 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x39B5 DUP3 PUSH2 0x2C36 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 SHL DUP3 SLOAD SWAP2 PUSH1 0x40 SHL AND SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 SHL NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3A56 PUSH2 0x39ED PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x3237 JUMP JUMPDEST SWAP2 DUP3 CALLDATALOAD PUSH1 0x4 DUP11 ADD SSTORE PUSH1 0x5 DUP10 ADD SWAP1 DUP4 ADD CALLDATALOAD PUSH2 0x3A06 DUP2 PUSH2 0x2C66 JUMP JUMPDEST DUP2 SLOAD PUSH2 0xFFFF PUSH3 0xFF0000 PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x3A1D DUP2 PUSH2 0x2737 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x10 SHL AND SWAP3 AND SWAP1 PUSH3 0xFFFFFF NOT AND OR OR DUP2 SSTORE PUSH2 0x3A3C PUSH1 0x60 DUP5 ADD PUSH2 0x324C JUMP JUMPDEST DUP2 SLOAD PUSH4 0xFF000000 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x18 SHL PUSH4 0xFF000000 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 PUSH2 0x315D JUMP JUMPDEST SWAP1 PUSH1 0x6 DUP8 ADD PUSH2 0x32ED JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x33EC JUMP JUMPDEST SWAP2 ADD PUSH2 0x37B0 JUMP JUMPDEST DUP3 CALLDATALOAD DUP3 DUP3 ADD SSTORE SWAP2 DUP6 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x3938 JUMP JUMPDEST PUSH2 0x3A95 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x391F JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x3AAA JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x3AB2 PUSH2 0x2645 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x799 SWAP3 DUP2 LT ISZERO PUSH2 0x3ACF JUMPI JUMPDEST PUSH1 0x5 SHL DUP2 ADD SWAP1 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x3AD7 PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x3AC4 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x1ED JUMPI DUP2 CALLDATALOAD PUSH2 0x3AF2 DUP2 PUSH2 0x1DC JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3B01 DUP2 PUSH2 0x1DC JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x799 SWAP3 ADD PUSH2 0xDF2 JUMP JUMPDEST DUP1 SLOAD ISZERO PUSH2 0x3B3B JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3B43 PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x3B2D JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x3B65 JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 SHL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3B6D PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x3B52 JUMP JUMPDEST PUSH2 0x3B91 DUP2 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x3CC2 JUMPI JUMPDEST PUSH1 0x1 SWAP3 DUP4 DUP3 ADD DUP2 SSTORE PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3CB5 JUMPI JUMPDEST DUP3 MLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR DUP4 SSTORE PUSH1 0x20 DUP1 DUP7 ADD MLOAD DUP6 DUP6 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE ADD SWAP4 ADD MLOAD SWAP1 DUP2 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x3CA8 JUMPI JUMPDEST PUSH2 0x3C06 DUP4 PUSH2 0x3C00 DUP8 SLOAD PUSH2 0x16A4 JUMP JUMPDEST DUP8 PUSH2 0x343E JUMP JUMPDEST DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x3C3F JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 PUSH1 0x0 SWAP5 PUSH2 0x3C34 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP3 POP CODESIZE DUP1 PUSH2 0x3C21 JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND PUSH2 0x3C56 DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0x3C8E JUMPI POP POP POP LT PUSH2 0x3C75 JUMPI POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x350F JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x3C5B JUMP JUMPDEST PUSH2 0x3CB0 PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3BF2 JUMP JUMPDEST PUSH2 0x3CBD PUSH2 0x3146 JUMP JUMPDEST PUSH2 0x3B96 JUMP JUMPDEST PUSH2 0x3CCA PUSH2 0xC61 JUMP JUMPDEST PUSH2 0x3B84 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3CE4 JUMPI JUMPDEST PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x3CEC PUSH2 0x15F6 JUMP JUMPDEST PUSH2 0x3CDC JUMP JUMPDEST SWAP1 PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP3 PUSH2 0x3D01 DUP5 PUSH2 0xC98 JUMP JUMPDEST DUP4 PUSH2 0x3D0B DUP4 PUSH2 0x18F3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0xF PUSH1 0xE DUP5 ADD SLOAD SWAP4 PUSH1 0x20 SWAP5 DUP6 DUP5 ADD MSTORE ADD DUP1 SLOAD SWAP1 PUSH2 0x3D29 DUP3 PUSH2 0x1782 JUMP JUMPDEST SWAP5 PUSH2 0x3D36 DUP6 MLOAD SWAP7 DUP8 PUSH2 0xD56 JUMP JUMPDEST DUP3 DUP7 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE DUP1 DUP3 KECCAK256 DUP2 DUP8 ADD JUMPDEST DUP5 DUP5 LT PUSH2 0x3D55 JUMPI POP POP POP POP POP ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP4 PUSH1 0x1 SWAP3 DUP10 MLOAD PUSH2 0x3D66 DUP2 PUSH2 0xD20 JUMP JUMPDEST DUP5 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP8 SLOAD AND DUP3 MSTORE DUP6 DUP8 ADD SLOAD AND DUP4 DUP3 ADD MSTORE PUSH1 0x2 DUP7 ADD SLOAD DUP12 DUP3 ADD MSTORE PUSH2 0x3D90 PUSH1 0x3 DUP8 ADD PUSH2 0x16DE JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP3 ADD SWAP4 ADD SWAP3 SWAP1 PUSH2 0x3D45 JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220F0 REVERT PUSH2 0xF6D1 0xC6 DUP13 0x5E DUP11 GAS 0xD0 SWAP6 RETURN DUP16 PUSH2 0x965C PUSH32 0xE15A03B48781BD49F9A13B6ED4E664736F6C6343000811003300000000000000 ","sourceMap":"1369:11033:52:-:0;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;:::i;:::-;5677:37;;;;;:::i;:::-;;;;5730:179;5755:46;;;;:::i;:::-;5730:179;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;5924:53;;;;;1369:11033;;-1:-1:-1;;;5924:53:52;;-1:-1:-1;;;;;1369:11033:52;;;5924:53;;1369:11033;;;;;;;6172:85;;1369:11033;;6172:85;;1369:11033;-1:-1:-1;;1369:11033:52;;;;;;-1:-1:-1;;5924:53:52;;;;;;5673:489;5924:53;;5673:489;;;1369:11033;;;:::i;:::-;6172:85;;:::i;5924:53::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;:::i;:::-;;;5673:489;1369:11033;6046:21;6172:85;6046:21;:45;:21;:35;:21;;;1369:11033;;;;;;;;6046:8;1369:11033;;;;;;;6046:21;1369:11033;;;;;;;;;;;;;;;;6046:35;1369:11033;6046:45;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;;6046:8;1369:11033;;;;;6008:35;;:21;;;1369:11033;6008:35;1369:11033;6143:7;1369:11033;;-1:-1:-1;;;;;1369:11033:52;;6143:7;:::i;:::-;5673:489;;1369:11033;-1:-1:-1;;1369:11033:52;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;1369:11033:52;;-1:-1:-1;;1369:11033:52;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;:::i;:::-;3097:99;3125:10;1713:19:40;:23;3097:99:52;:::i;1369:11033::-;;;3125:10;8811:51;3125:10;;;8811:51;3125:10;3666:9;;8811:51;;:::i;:::-;;;;1369:11033;;-1:-1:-1;1369:11033:52;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;:::i;:::-;4899:9;;;;:20;1369:11033;;5286:55;;5240:36;;5158:56;;1369:11033;;;;;;5070:78;-1:-1:-1;;;;;1369:11033:52;;4992:68;5015:4;5000:20;;;4992:68;:::i;:::-;5093:9;1369:11033;5078:25;;5085:18;;-1:-1:-1;;;;;1369:11033:52;5085:18;1369:11033;;-1:-1:-1;;;;;1369:11033:52;;;5078:25;;;5070:78;:::i;1369:11033::-;5158:56;;:::i;:::-;5250:9;1369:11033;;:::i;:::-;5240:36;;:::i;:::-;5286:55;:::i;1369:11033::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12239:12;1369:11033;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1369:11033:52;;;:::i;:::-;;;;;;;;;12273:13;;12288:23;;;;;;1369:11033;;;;;;;:::i;:::-;;;;12313:3;12344:15;1369:11033;12344:15;12313:3;12344:15;;:::i;:::-;1369:11033;;:::i;:::-;12332:27;;;;:::i;:::-;;;;;;:::i;:::-;;12313:3;:::i;:::-;12273:13;;1369:11033;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;;12062:12;1369:11033;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1898:6:39;1369:11033:52;;;;1873:80:39;1889:4;1881:23;;;1873:80;:::i;:::-;1963:87;-1:-1:-1;;;;;;;;;;;1369:11033:52;;;;;1971:30:39;1963:87;:::i;:::-;1303:62:33;;:::i;:::-;1369:11033:52;;;;;;:::i;:::-;-1:-1:-1;1369:11033:52;;971:66:36;1369:11033:52;;;971:66:36;;;3330:17;;;;;;:::i;3232:526::-;1369:11033:52;;;;;;;;971:66:36;;;;;;;3383:63;;1369:11033:52;;3383:63:36;;-1:-1:-1;;3383:63:36;;;3232:526;-1:-1:-1;3379:302:36;;1369:11033:52;;-1:-1:-1;;;3610:56:36;;1369:11033:52;3610:56:36;1369:11033:52;3610:56:36;;;:::i;:::-;;;;3379:302;3737:9;3496:28;3488:82;3496:28;;3488:82;:::i;:::-;3737:9;:::i;3383:63::-;;;;;1369:11033:52;3383:63:36;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;1369:11033:52;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;-1:-1:-1;;1369:11033:52;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1369:11033:52;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1898:6:39;1369:11033:52;;;;;1873:80:39;1889:4;1881:23;;;1873:80;:::i;:::-;1963:87;-1:-1:-1;;;;;;;;;;;1369:11033:52;;;;;1971:30:39;1963:87;:::i;:::-;1303:62:33;;:::i;:::-;971:66:36;1369:11033:52;;;971:66:36;;;3330:17;;;;;;:::i;3232:526::-;3383:63;1369:11033:52;;;;;;;971:66:36;;;;;;;3383:63;;1369:11033:52;;3383:63:36;;;;;;;3232:526;-1:-1:-1;3379:302:36;;1369:11033:52;;-1:-1:-1;;;3610:56:36;;1369:11033:52;3610:56:36;1369:11033:52;3610:56:36;;;:::i;3379:302::-;3737:9;3496:28;3488:82;3496:28;;3488:82;:::i;:::-;3737:9;:::i;3383:63::-;;;;;;;;;;;;;;;:::i;:::-;;;;;1369:11033:52;;;;;;;-1:-1:-1;;1369:11033:52;;;;2333:6:39;-1:-1:-1;;;;;1369:11033:52;2324:4:39;2316:23;1369:11033:52;;;;-1:-1:-1;;;;;;;;;;;1369:11033:52;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;:::i;:::-;6902:37;;;;:::i;:::-;;;;6955:179;6980:46;;;;:::i;6955:179::-;-1:-1:-1;;;;;1369:11033:52;;;7149:55;;;;;1369:11033;;-1:-1:-1;;;7149:55:52;;4553:10;1369:11033;7149:55;;1369:11033;;;;;;;7494:10;;-1:-1:-1;;1369:11033:52;;;;;;-1:-1:-1;;7149:55:52;;;;;;6898:512;7149:55;;6898:512;;;4553:10;7494;;:::i;7149:55::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;6898:512;7494:10;;7294:7;7287:4;;4553:10;-1:-1:-1;;;;;1369:11033:52;;7294:7;:::i;:::-;7354:45;:21;:35;:21;;;1369:11033;;;;;;;;6046:8;1369:11033;;;;;;;7354:35;1369:11033;7354:45;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;;6046:8;1369:11033;;;;;7316:35;;:21;;;1369:11033;7316:35;1369:11033;6898:512;;1369:11033;;;;;;;;;;;;;;1303:62:33;;:::i;:::-;2758:6;1369:11033:52;;-1:-1:-1;;;;;;1369:11033:52;;;;;;;-1:-1:-1;;;;;1369:11033:52;2806:40:33;1369:11033:52;;2806:40:33;1369:11033:52;;;;;;;;;;:::i;:::-;11026:78;11034:40;;;:::i;:::-;11026:78;:::i;:::-;11142:12;1369:11033;11171:19;;;:::i;:::-;11200:30;;1369:11033;11200:30;;;;:::i;:::-;1369:11033;;:::i;:::-;11320:17;;;;;;;;;:::i;:::-;11406:40;:30;11320;;;;;;;;:::i;:::-;:37;;;;;;;;;:::i;:::-;11275:30;;:42;:30;;;:::i;:::-;:42;;1369:11033;11406:30;:::i;:::-;:40;;11460:13;11200:50;11525:3;11479:37;:30;:17;;;;:::i;:::-;:30;;;;;:::i;:::-;:37;;;;;:::i;:::-;11475:48;;;;;;;11626:17;11722:167;11737:151;11626:40;11525:3;11626:17;:37;:30;:17;;;;:::i;:::-;:30;;;;;:::i;:::-;:37;;;;;:::i;:::-;:40;;:::i;:::-;11615:93;11626:45;;;;;;;;:::i;:::-;11615:93;;;;:::i;:::-;1369:11033;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;;;11737:151;;;1369:11033;;11737:151;;;;1369:11033;11737:151;;1369:11033;11722:167;;:::i;:::-;11525:3;:::i;:::-;11460:13;;11475:48;11910:11;1369:11033;11475:48;;11910:16;;-1:-1:-1;;;;;1369:11033:52;;;11910:16;11927:12;11950:18;:12;1369:11033;;11927:12;;;:::i;:::-;-1:-1:-1;11927:21:52;1369:11033;-1:-1:-1;;;;;1369:11033:52;;;;11950:12;;:::i;:::-;:18;;1369:11033;11910:59;;;;;11737:151;1369:11033;-1:-1:-1;;;11910:59:52;;-1:-1:-1;;;;;1369:11033:52;;;;;11910:59;;1369:11033;;;;;;-1:-1:-1;;1369:11033:52;;;;;;-1:-1:-1;;11910:59:52;;;;;;11456:444;11910:59;;1369:11033;11910:59;;;;;;:::i;:::-;;;:::i;:::-;;;1369:11033;;;;;;;-1:-1:-1;;1369:11033:52;;;;1590:35;1369:11033;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;:::i;:::-;6902:37;;;;:::i;:::-;;;;6955:179;6980:46;;;;:::i;6955:179::-;-1:-1:-1;;;;;1369:11033:52;;;7149:55;;;;;1369:11033;;-1:-1:-1;;;7149:55:52;;3125:10;1369:11033;7149:55;;1369:11033;;;;;;;7494:10;;-1:-1:-1;;1369:11033:52;;;;;;-1:-1:-1;;7149:55:52;;;;;;6898:512;7149:55;;6898:512;;;3125:10;;;7494;;:::i;7149:55::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;6898:512;7494:10;;7294:7;7287:4;;3125:10;-1:-1:-1;;;;;1369:11033:52;;7294:7;:::i;:::-;7354:45;:21;:35;:21;;;1369:11033;;;;;;;;6046:8;1369:11033;;;;;;;7354:45;-1:-1:-1;;;;;1369:11033:52;;;;;;6046:8;1369:11033;;;;;7316:35;;:21;;;1369:11033;7316:35;1369:11033;6898:512;;1369:11033;;;;;;;-1:-1:-1;;1369:11033:52;;;;1513:6:33;1369:11033:52;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;;1745:63;1369:11033;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;1369:11033:52;1745:63;1369:11033;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;1745:63;1369:11033;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;1553:31;1369:11033;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;12239:12;1369:11033;;;;;;;12239:12;-1:-1:-1;1369:11033:52;;;;;;-1:-1:-1;1369:11033:52;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;-1:-1:-1;1369:11033:52;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;1369:11033:52;;;;-1:-1:-1;1369:11033:52;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;1369:11033:52;;-1:-1:-1;1369:11033:52;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;;;1631:37;1369:11033;1631:37;;;;;1369:11033;;1631:37;-1:-1:-1;1369:11033:52;;;1631:37;;1369:11033;;;1631:37;:::i;:::-;;;1369:11033;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;3636:1:38;1369:11033:52;;;;;:::i;:::-;;;;;;;:::i;:::-;-1:-1:-1;1369:11033:52;;3325:201:38;1369:11033:52;;;;;3301:14:38;3347:34;;;;;;1369:11033:52;3346:108:38;;;;1369:11033:52;3325:201:38;;:::i;:::-;3536:16;;1369:11033:52;;;3302:13:38;1369:11033:52;;;3302:13:38;1369:11033:52;;3536:16:38;3562:65;;3636:1;:::i;:::-;3647:99;;1369:11033:52;3647:99:38;3681:21;1369:11033:52;;3302:13:38;1369:11033:52;;3302:13:38;1369:11033:52;;3681:21:38;1369:11033:52;;3551:1:38;1369:11033:52;;3721:14:38;;1369:11033:52;;3721:14:38;1369:11033:52;3562:65:38;3596:20;1369:11033:52;;;3302:13:38;1369:11033:52;;;3302:13:38;1369:11033:52;;3596:20:38;3636:1;:::i;3346:108::-;3426:4;1713:19:40;:23;;-1:-1:-1;1713:23:40;3387:66:38;;3346:108;;;;;3387:66;3452:1;1369:11033:52;;;;3436:17:38;3387:66;;;3347:34;3380:1;1369:11033:52;;;3365:16:38;;-1:-1:-1;3347:34:38;;1369:11033:52;-1:-1:-1;1369:11033:52;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;:::i;:::-;8811:51;1369:11033;;;;;;;;;3841:10;;8811:51;3841:10;3858:9;;8811:51;;:::i;1369:11033::-;;;;;;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;1303:62:33;;:::i;:::-;3464:49:52;1369:11033;;-1:-1:-1;;;;;;1369:11033:52;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;;;;;;:::i;:::-;1303:62:33;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;2402:22:33;1369:11033:52;;2496:8:33;;;:::i;1369:11033:52:-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;1599:130:33;1513:6;1369:11033:52;-1:-1:-1;;;;;1369:11033:52;929:10:41;1662:23:33;1369:11033:52;;1599:130:33:o;1369:11033:52:-;;;;;;;;;;;;;;;;;;;;;;;;;2666:187:33;2758:6;1369:11033:52;;-1:-1:-1;;;;;1369:11033:52;;;-1:-1:-1;;;;;;1369:11033:52;;;;;;;;;;2806:40:33;-1:-1:-1;;2806:40:33;2666:187::o;1369:11033:52:-;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;:::i;:::-;;;;:::o;971:66:36:-;;;;;;;;;;;:::o;:::-;;1369:11033:52;;971:66:36;;;;;;;;;;;:::o;:::-;1369:11033:52;;-1:-1:-1;;;971:66:36;;;;;;;;;;;1369:11033:52;971:66:36;1369:11033:52;;;971:66:36;-1:-1:-1;;;971:66:36;;;;;;;;;;;;;;;;;1369:11033:52;971:66:36;1369:11033:52;;;971:66:36;-1:-1:-1;;;971:66:36;;;;;;:::o;1699:281::-;1713:19:40;;:23;1369:11033:52;;-1:-1:-1;;;;;;;;;;;1369:11033:52;;-1:-1:-1;;;;;;1369:11033:52;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;1699:281:36:o;1369:11033:52:-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;2372:276:36;;2171:17;;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;2204:27:36;-1:-1:-1;;2204:27:36;1369:11033:52;;2523:15:36;;;:28;;;2372:276;2519:123;;2372:276;;:::o;2519:123::-;7318:69:40;1369:11033:52;-1:-1:-1;1369:11033:52;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;7276:25:40;;;;;;;;;:::i;:::-;7318:69;;:::i;:::-;;2372:276:36:o;2523:28::-;;-1:-1:-1;2523:28:36;;2372:276;;2171:17;;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;2204:27:36;;;;1369:11033:52;;2523:15:36;;;:28;;;2519:123;;2372:276;;:::o;2523:28::-;;1369:11033:52;2523:28:36;;1369:11033:52;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;1369:11033:52;;;;:::o;:::-;;;:::o;7682:628:40:-;;;;7886:418;;;1369:11033:52;;;7917:22:40;7913:286;;8212:17;;:::o;7913:286::-;1713:19;:23;1369:11033:52;;8212:17:40;:::o;1369:11033:52:-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;7886:418:40;1369:11033:52;;;;-1:-1:-1;8991:21:40;:17;;9163:142;;;;;;;8987:379;1369:11033:52;;-1:-1:-1;;;9335:20:40;;1369:11033:52;9335:20:40;;;1369:11033:52;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;2542:363;;;5366:69:38;1369:11033:52;5374:13:38;1369:11033:52;;;;5366:69:38;;;:::i;:::-;;:::i;:::-;1195:12:33;929:10:41;1195:12:33;:::i;:::-;5366:69:38;1369:11033:52;5374:13:38;1369:11033:52;;;;5366:69:38;:::i;:::-;1369:11033:52;;;;;;;;;;;;;;2761:37;1369:11033;;;2761:37;1369:11033;;;2808:43;1369:11033;;;2808:43;1369:11033;1303:62:33;;:::i;:::-;1369:11033:52;;2402:22:33;1369:11033:52;;2496:8:33;;;:::i;1369:11033:52:-;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;941:175:47;1369:11033:52;;-1:-1:-1;;;1050:58:47;;;;-1:-1:-1;;;;;1369:11033:52;;;;1050:58:47;;;1369:11033:52;;;;;;;;;1050:58:47;;;;;;1369:11033:52;;1050:58:47;:::i;:::-;;:::i;1369:11033:52:-;;;;;;;:::o;:::-;;;;;;;;;;;;;:::i;5196:642:47:-;1369:11033:52;;5535:69:48;;-1:-1:-1;;;;;1369:11033:52;;;;:::i;:::-;-1:-1:-1;1369:11033:52;;;;;;;;;;;5487:31:48;;;;;;;;;;;:::i;5535:69::-;1369:11033:52;;5728:22:47;;;;:56;;;;;5196:642;1369:11033:52;;;;;;5196:642:47;:::o;1369:11033:52:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;5728:56:47;5754:30;;-1:-1:-1;5754:30:47;;;;;;;:::i;:::-;5728:56;;;;;1369:11033:52;;;;;;;;;;:::o;1355:203:47:-;1369:11033:52;;-1:-1:-1;;;1482:68:47;;;;-1:-1:-1;;;;;1369:11033:52;;;1482:68:47;;;1369:11033:52;;;;;;;;;;;;;;;;;1482:68:47;;;;;;1369:11033:52;1482:68:47;:::i;7917:279:52:-;8013:79;;;:::i;:::-;:176;;;;;8006:183;7917:279;:::o;8013:176::-;975:68:50;;;;;:::i;:::-;:149;;;;8013:176:52;1543:81:50;;;8013:176:52;7917:279;:::o;1543:81:50:-;4592:71;1369:11033:52;;-1:-1:-1;1369:11033:52;;;4592:71:50;;;4615:34;;;;4592:71;;8148:40:52;;;4592:71:50;;;1369:11033:52;4592:71:50;;;;;;:::i;:::-;4784:212;;;;-1:-1:-1;4784:212:50;;5013:29;;;1543:81;5013:48;;;;1543:81;7917:279:52;:::o;5013:48:50:-;5046:15;;;;7917:279:52;:::o;5013:29:50:-;4592:71;-1:-1:-1;5024:18:50;;-1:-1:-1;5013:29:50;;;975:149;1060:64;;;;;:::i;:::-;1059:65;975:149;;;1349:282;975:68;;;:::i;:::-;:149;;;;1349:282;1543:81;;;1536:88;1349:282;:::o;1543:81::-;4592:71;1369:11033:52;;-1:-1:-1;1369:11033:52;;;4592:71:50;;;4615:34;;;;4592:71;;8053:38:52;;;4592:71:50;;;1369:11033:52;4592:71:50;;;;;;:::i;975:149::-;1060:64;;;;;:::i;:::-;1059:65;975:149;;;4421:647;-1:-1:-1;4592:71:50;4421:647;1369:11033:52;;4592:71:50;;;4615:34;;;;4592:71;;;;;;1369:11033:52;4592:71:50;;;;;;:::i;4421:647::-;-1:-1:-1;4592:71:50;4421:647;1369:11033:52;;4592:71:50;;;4615:34;;;;4592:71;;1369:11033:52;;;4592:71:50;;;1369:11033:52;4592:71:50;;;;;;:::i;1369:11033:52:-;;;;;;;;;;;;;:::i;8202:410::-;8319:87;;;:::i;:::-;;;;1369:11033;;-1:-1:-1;;;8444:46:52;;-1:-1:-1;;;;;1369:11033:52;;;;8444:46;;1369:11033;;8444:46;;1369:11033;;;;8444:46;;;;;;;8315:291;8444:46;;;;8315:291;1369:11033;;;;8429:61;8422:68;:::o;8444:46::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;8315:291;1369:11033;;-1:-1:-1;;;8543:52:52;;-1:-1:-1;;;;;1369:11033:52;;;;8543:52;;1369:11033;;8543:52;;1369:11033;;;;8543:52;;;;;;;;;;;1369:11033;;;;8528:67;8521:74;:::o;1369:11033::-;;;;;;;;;;;;;;;;:::i;8875:251::-;1369:11033;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;9068:51;;1369:11033;;9068:51;;8875:251;1369:11033;9068:51;:::i;:::-;;;;8875:251::o;1369:11033::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;9132:341::-;1369:11033;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;9386:80;;1369:11033;;;9386:80;;1369:11033;9386:80;:::i;:::-;;;;9132:341::o;9479:::-;1369:11033;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;9733:80;;1369:11033;;;9733:80;;1369:11033;9733:80;:::i;9826:536::-;;-1:-1:-1;9826:536:52;;;;;9968:363;;;;;;;9826:536;:::o;1369:11033::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;-1:-1:-1;;1369:11033:52;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;10637:283::-;1369:11033;;-1:-1:-1;;;10774:139:52;;;;;;1369:11033;;;10774:139;1369:11033;;10774:139;;1369:11033;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;971:66:36;1369:11033:52;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;10774:139;;5146:42:24;10774:139:52;;;;;;;1369:11033;-1:-1:-1;10774:139:52;;;10767:146;;10637:283;:::o;10774:139::-;;;;;;-1:-1:-1;10774:139:52;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;1369:11033;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;11142:12;1369:11033;-1:-1:-1;;;1369:11033:52;;;;;;;;;;11142:12;1369:11033;;;;;;11142:12;-1:-1:-1;1369:11033:52;;;;;;-1:-1:-1;1369:11033:52;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;:::o;:::-;-1:-1:-1;1369:11033:52;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;1369:11033:52;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;1369:11033:52;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;1369:11033:52;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;1369:11033:52;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;:::i;:::-;;-1:-1:-1;1369:11033:52;;-1:-1:-1;1369:11033:52;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1369:11033:52;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1369:11033:52;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;;1369:11033:52;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;1369:11033:52;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;;1369:11033:52;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;:::i;:::-;;;-1:-1:-1;1369:11033:52;;;;-1:-1:-1;1369:11033:52;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1369:11033:52;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;;;;;;:::i;:::-;;-1:-1:-1;;;1369:11033:52;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1369:11033:52;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;1369:11033:52;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;:::i;:::-;;;;;;;11200:50;1369:11033;;11200:50;1369:11033;;11200:50;1369:11033;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;-1:-1:-1;1369:11033:52;;;;;;-1:-1:-1;1369:11033:52;:::o;:::-;;;:::i;:::-;;;;;;;-1:-1:-1;;;1369:11033:52;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;-1:-1:-1;;;;;;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1369:11033:52;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1369:11033:52;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;1369:11033:52;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"3173000","executionCost":"infinite","totalCost":"infinite"},"external":{"FinalizeBridgeAndReleaseEth((bytes32[],(bytes32,bytes32,uint64,uint64,(bytes32,uint16,bool,bool,uint32[]),(uint64,uint64,address,bool,address,uint256,bytes,uint8,(uint32,address,bytes32[],bytes,bool)[]))))":"infinite","MESSENGER()":"2645","OTHER_BRIDGE()":"2557","bridgeERC20(address,address,uint256,uint32,bytes)":"infinite","bridgeERC20To(address,address,address,uint256,uint32,bytes)":"infinite","bridgeETH(uint32,bytes)":"infinite","bridgeETHTo(address,uint32,bytes)":"infinite","deposits(address,address)":"infinite","finalizeBridgeERC20(address,address,address,address,uint256,bytes)":"infinite","finalizeBridgeETH(address,address,uint256,bytes)":"infinite","getAllTransactions()":"infinite","getTransactionCount()":"2379","initialize(address,address,address)":"infinite","isEVMTransactionProofValid((bytes32[],(bytes32,bytes32,uint64,uint64,(bytes32,uint16,bool,bool,uint32[]),(uint64,uint64,address,bool,address,uint256,bytes,uint8,(uint32,address,bytes32[],bytes,bool)[]))))":"infinite","owner()":"2601","proxiableUUID()":"infinite","renounceOwnership()":"28300","setEthERC20ContractAddress(address)":"27084","transactions(uint256)":"infinite","transferOwnership(address)":"28679","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_emitERC20BridgeFinalized(address,address,address,address,uint256,bytes memory)":"infinite","_emitERC20BridgeInitiated(address,address,address,address,uint256,bytes memory)":"infinite","_emitETHBridgeFinalized(address,address,uint256,bytes memory)":"infinite","_emitETHBridgeInitiated(address,address,uint256,bytes memory)":"infinite","_initiateBridgeERC20(address,address,address,address,uint256,uint32,bytes memory)":"infinite","_initiateBridgeETH(address,address,uint256,uint32,bytes memory)":"infinite","_isCorrectTokenPair(address,address)":"infinite","_isFirelinkMintableERC20(address)":"infinite","call(address,uint256,uint256,bytes memory)":"infinite"}},"methodIdentifiers":{"FinalizeBridgeAndReleaseEth((bytes32[],(bytes32,bytes32,uint64,uint64,(bytes32,uint16,bool,bool,uint32[]),(uint64,uint64,address,bool,address,uint256,bytes,uint8,(uint32,address,bytes32[],bytes,bool)[]))))":"7eccb307","MESSENGER()":"927ede2d","OTHER_BRIDGE()":"7f46ddb2","bridgeERC20(address,address,uint256,uint32,bytes)":"87087623","bridgeERC20To(address,address,address,uint256,uint32,bytes)":"540abf73","bridgeETH(uint32,bytes)":"09fc8843","bridgeETHTo(address,uint32,bytes)":"e11013dd","deposits(address,address)":"8f601f66","finalizeBridgeERC20(address,address,address,address,uint256,bytes)":"0166a07a","finalizeBridgeETH(address,address,uint256,bytes)":"1635f5fd","getAllTransactions()":"27506f53","getTransactionCount()":"2e7700f0","initialize(address,address,address)":"c0c53b8b","isEVMTransactionProofValid((bytes32[],(bytes32,bytes32,uint64,uint64,(bytes32,uint16,bool,bool,uint32[]),(uint64,uint64,address,bool,address,uint256,bytes,uint8,(uint32,address,bytes32[],bytes,bool)[]))))":"09f5dc91","owner()":"8da5cb5b","proxiableUUID()":"52d1902d","renounceOwnership()":"715018a6","setEthERC20ContractAddress(address)":"ecc6da0c","transactions(uint256)":"9ace38c2","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ERC20BridgeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ERC20BridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ETHBridgeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ETHBridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requiredConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"provideInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"listEvents\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"logIndices\",\"type\":\"uint32[]\"}],\"internalType\":\"struct EVMTransaction.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct EVMTransaction.Event[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EVMTransaction.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Proof\",\"name\":\"_transaction\",\"type\":\"tuple\"}],\"name\":\"FinalizeBridgeAndReleaseEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSENGER\",\"outputs\":[{\"internalType\":\"contract IFlareRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_BRIDGE\",\"outputs\":[{\"internalType\":\"contract FirelinkBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeERC20To\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeETHTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"finalizeBridgeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"finalizeBridgeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTransactions\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requiredConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"provideInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"listEvents\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"logIndices\",\"type\":\"uint32[]\"}],\"internalType\":\"struct EVMTransaction.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct EVMTransaction.Event[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EVMTransaction.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Proof\",\"name\":\"originalTransaction\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct FirelinkBridge.EventInfo[]\",\"name\":\"eventInfo\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FirelinkBridge.TransactionInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_messenger\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_otherBridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requiredConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"provideInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"listEvents\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"logIndices\",\"type\":\"uint32[]\"}],\"internalType\":\"struct EVMTransaction.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct EVMTransaction.Event[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EVMTransaction.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Proof\",\"name\":\"transaction\",\"type\":\"tuple\"}],\"name\":\"isEVMTransactionProofValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethAddress\",\"type\":\"address\"}],\"name\":\"setEthERC20ContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"attestationType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"votingRound\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowestUsedTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requiredConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"provideInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"listEvents\",\"type\":\"bool\"},{\"internalType\":\"uint32[]\",\"name\":\"logIndices\",\"type\":\"uint32[]\"}],\"internalType\":\"struct EVMTransaction.RequestBody\",\"name\":\"requestBody\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"struct EVMTransaction.Event[]\",\"name\":\"events\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EVMTransaction.ResponseBody\",\"name\":\"responseBody\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Response\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct EVMTransaction.Proof\",\"name\":\"originalTransaction\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"eventNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FirelinkBridge.sol\":\"FirelinkBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston/ftso/ftso/interface/IIFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../../userInterfaces/IFtso.sol\\\";\\nimport \\\"../../../util-contracts/token/token/interface/IIVPToken.sol\\\";\\n\\n\\ninterface IIFtso is IFtso, IFtsoGenesis {\\n\\n    /// function finalizePriceReveal\\n    /// called by reward manager only on correct timing.\\n    /// if price reveal period for epoch x ended. finalize.\\n    /// iterate list of price submissions\\n    /// find weighted median\\n    /// find adjucant 50% of price submissions.\\n    /// Allocate reward for any price submission which is same as a \\\"winning\\\" submission\\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\\n        returns(\\n            address[] memory _eligibleAddresses,\\n            uint256[] memory _natWeights,\\n            uint256 _totalNatWeight\\n        );\\n\\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    // activateFtso will be called by ftso manager once ftso is added \\n    // before this is done, FTSO can't run\\n    function activateFtso(\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    ) external;\\n\\n    function deactivateFtso() external;\\n\\n    // update initial price and timestamp - only if not active\\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\\n\\n    function configureEpochs(\\n        uint256 _maxVotePowerNatThresholdFraction,\\n        uint256 _maxVotePowerAssetThresholdFraction,\\n        uint256 _lowAssetUSDThreshold,\\n        uint256 _highAssetUSDThreshold,\\n        uint256 _highAssetTurnoutThresholdBIPS,\\n        uint256 _lowNatTurnoutThresholdBIPS,\\n        uint256 _elasticBandRewardBIPS,\\n        uint256 _elasticBandWidthPPM,\\n        address[] memory _trustedAddresses\\n    ) external;\\n\\n    function setAsset(IIVPToken _asset) external;\\n\\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\\n\\n    // current vote power block will update per reward epoch. \\n    // the FTSO doesn't have notion of reward epochs.\\n    // reward manager only can set this data. \\n    function setVotePowerBlock(uint256 _blockNumber) external;\\n\\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\\n  \\n    /**\\n     * @notice Returns ftso manager address\\n     */\\n    function ftsoManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the FTSO asset\\n     * @dev Asset is null in case of multi-asset FTSO\\n     */\\n    function getAsset() external view returns (IIVPToken);\\n\\n    /**\\n     * @notice Returns the Asset FTSOs\\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\\n     */\\n    function getAssetFtsos() external view returns (IIFtso[] memory);\\n\\n    /**\\n     * @notice Returns current configuration of epoch state\\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \\n        elastic band (prices within _elasticBandWidthPPM of the median) \\n        and 10000 - elasticBandRewardBIPS to the IQR \\n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\\n     */\\n    function epochsConfiguration() external view \\n        returns (\\n            uint256 _maxVotePowerNatThresholdFraction,\\n            uint256 _maxVotePowerAssetThresholdFraction,\\n            uint256 _lowAssetUSDThreshold,\\n            uint256 _highAssetUSDThreshold,\\n            uint256 _highAssetTurnoutThresholdBIPS,\\n            uint256 _lowNatTurnoutThresholdBIPS,\\n            uint256 _elasticBandRewardBIPS,\\n            uint256 _elasticBandWidthPPM,\\n            address[] memory _trustedAddresses\\n        );\\n\\n    /**\\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\\n     * @return _assets                  the list of Assets that are accounted in vote\\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\\n     * @return _totalVotePowerNat       total native token vote power at block\\n     * @return _totalVotePowerAsset     total combined asset vote power at block\\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\\n     * @return _votePowerBlock          vote powewr block for given epoch\\n     */\\n    function getVoteWeightingParameters() external view \\n        returns (\\n            IIVPToken[] memory _assets,\\n            uint256[] memory _assetMultipliers,\\n            uint256 _totalVotePowerNat,\\n            uint256 _totalVotePowerAsset,\\n            uint256 _assetWeightRatio,\\n            uint256 _votePowerBlock\\n        );\\n\\n    function wNat() external view returns (IIVPToken);\\n}\\n\",\"keccak256\":\"0xd245b3c083496b3539224dc707381db5a5e8a49a5012d370b34514caefa3415d\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n    \\n    /**\\n     * @notice Submits price hash for current epoch - only price submitter\\n     * @param _sender               Sender address\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _hash                 Hashed price and random number\\n     * @notice Emits PriceHashSubmitted event. \\n     */\\n    function submitPriceHashSubmitter(address _sender, uint256 _epochId, bytes32 _hash) external;\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @param _random               Submitted random number\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _random,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffadc43743fb1d76d63438725462cd018e0fb31463802f0c235c0b6409dc97a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoManagerGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoManagerGenesis {\\n\\n    function getCurrentPriceEpochId() external view returns (uint256 _priceEpochId);\\n\\n}\\n\",\"keccak256\":\"0xe3282e14304e70a34f6c7a6ee563267635a6cc6eff09f2459a43946ae3a113ab\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./IFtsoGenesis.sol\\\";\\n\\n\\ninterface IFtsoRegistryGenesis {\\n\\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x4765fdcb22dcc64c015d02c019f0ddce8d8b36111160fd4160a3d94ea4f370a3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    // events\\n    event PriceHashSubmitted(\\n        address indexed submitter, uint256 indexed epochId, bytes32 hash, uint256 timestamp\\n    );\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 random, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1d5ba4d911d3191721469f2f975e64c0d3eed6a54801a7ad8710d830973f03b9\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoManagerGenesis.sol\\\";\\n\\ninterface IFtsoManager is IFtsoManagerGenesis {\\n\\n    event FtsoAdded(IIFtso ftso, bool add);\\n    event FallbackMode(bool fallbackMode);\\n    event FtsoFallbackMode(IIFtso ftso, bool fallbackMode);\\n    event RewardEpochFinalized(uint256 votepowerBlock, uint256 startBlock);\\n    event PriceEpochFinalized(address chosenFtso, uint256 rewardEpochId);\\n    event InitializingCurrentEpochStateForRevealFailed(IIFtso ftso, uint256 epochId);\\n    event FinalizingPriceEpochFailed(IIFtso ftso, uint256 epochId, IFtso.PriceFinalizationType failingType);\\n    event DistributingRewardsFailed(address ftso, uint256 epochId);\\n    event AccruingUnearnedRewardsFailed(uint256 epochId);\\n    event UseGoodRandomSet(bool useGoodRandom, uint256 maxWaitForGoodRandomSeconds);\\n\\n    function active() external view returns (bool);\\n\\n    function getCurrentRewardEpoch() external view returns (uint256);\\n\\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\\n\\n    function getRewardEpochToExpireNext() external view returns (uint256);\\n    \\n    function getCurrentPriceEpochData() external view \\n        returns (\\n            uint256 _priceEpochId,\\n            uint256 _priceEpochStartTimestamp,\\n            uint256 _priceEpochEndTimestamp,\\n            uint256 _priceEpochRevealEndTimestamp,\\n            uint256 _currentTimestamp\\n        );\\n\\n    function getFtsos() external view returns (IIFtso[] memory _ftsos);\\n\\n    function getPriceEpochConfiguration() external view \\n        returns (\\n            uint256 _firstPriceEpochStartTs,\\n            uint256 _priceEpochDurationSeconds,\\n            uint256 _revealEpochDurationSeconds\\n        );\\n\\n    function getRewardEpochConfiguration() external view \\n        returns (\\n            uint256 _firstRewardEpochStartTs,\\n            uint256 _rewardEpochDurationSeconds\\n        );\\n\\n    function getFallbackMode() external view \\n        returns (\\n            bool _fallbackMode,\\n            IIFtso[] memory _ftsos,\\n            bool[] memory _ftsoInFallbackMode\\n        );\\n}\\n\",\"keccak256\":\"0x878d2d19d239d8a91515a304ed2d461f31ae8aeaedef6a7bc92509e6fc4258d0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\\n\\n    struct PriceInfo {\\n        uint256 ftsoIndex;\\n        uint256 price;\\n        uint256 decimals;\\n        uint256 timestamp;\\n    }\\n\\n    function getFtso(uint256 _ftsoIndex) external view returns(IIFtso _activeFtsoAddress);\\n    function getFtsoBySymbol(string memory _symbol) external view returns(IIFtso _activeFtsoAddress);\\n    function getSupportedIndices() external view returns(uint256[] memory _supportedIndices);\\n    function getSupportedSymbols() external view returns(string[] memory _supportedSymbols);\\n    function getSupportedFtsos() external view returns(IIFtso[] memory _ftsos);\\n    function getFtsoIndex(string memory _symbol) external view returns (uint256 _assetIndex);\\n    function getFtsoSymbol(uint256 _ftsoIndex) external view returns (string memory _symbol);\\n    function getCurrentPrice(uint256 _ftsoIndex) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPrice(string memory _symbol) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPriceWithDecimals(uint256 _assetIndex) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n    function getCurrentPriceWithDecimals(string memory _symbol) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n\\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\\n    function getCurrentPricesByIndices(uint256[] memory _indices) external view returns (PriceInfo[] memory);\\n    function getCurrentPricesBySymbols(string[] memory _symbols) external view returns (PriceInfo[] memory);\\n\\n    function getSupportedIndicesAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\\n\\n    function getSupportedSymbolsAndFtsos() external view \\n        returns(string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n\\n    function getSupportedIndicesAndSymbols() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols);\\n\\n    function getSupportedIndicesSymbolsAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n}\\n\",\"keccak256\":\"0x2b818c0cd8f2f1be88da36edd966d2b358c6954e50e0aa653a9d65ef2e9712d7\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IFtsoRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtsoRewardManager {\\n\\n    event RewardClaimed(\\n        address indexed dataProvider,\\n        address indexed whoClaimed,\\n        address indexed sentTo,\\n        uint256 rewardEpoch, \\n        uint256 amount\\n    );\\n\\n    event UnearnedRewardsAccrued(\\n        uint256 epochId,\\n        uint256 reward\\n    );\\n\\n    event RewardsDistributed(\\n        address indexed ftso,\\n        uint256 epochId,\\n        address[] addresses,\\n        uint256[] rewards\\n    );\\n\\n    event RewardClaimsEnabled(\\n        uint256 rewardEpochId\\n    ); \\n\\n    event FeePercentageChanged(\\n        address indexed dataProvider,\\n        uint256 value,\\n        uint256 validFromEpoch\\n    );\\n\\n    event RewardClaimsExpired(\\n        uint256 rewardEpochId\\n    );    \\n\\n    event FtsoRewardManagerActivated(address ftsoRewardManager);\\n    event FtsoRewardManagerDeactivated(address ftsoRewardManager);\\n\\n    /**\\n     * @notice Allows a percentage delegator to claim rewards.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Reverts if `msg.sender` is delegating by amount\\n     * @dev Claims for all unclaimed reward epochs to the 'max(_rewardEpochs)'.\\n     * @dev Retained for backward compatibility.\\n     * @dev This function is deprecated - use `claim` instead.\\n     */\\n    function claimReward(\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows the sender to claim or wrap rewards for reward owner.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by percentage.\\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\\n     *   this approval is done by calling `setClaimExecutors`.\\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\\n     *   call, we allow the owner to control the timing of the calls.\\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\\n     * @param _rewardOwner          address of the reward owner\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpoch          last reward epoch to claim for\\n     * @param _wrap                 should reward be wrapped immediately\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Reverts if `msg.sender` is delegating by amount\\n     */\\n    function claim(\\n        address _rewardOwner,\\n        address payable _recipient,\\n        uint256 _rewardEpoch,\\n        bool _wrap\\n    )\\n        external returns (uint256 _rewardAmount);\\n    \\n    /**\\n     * @notice Allows the sender to claim rewards from specified data providers.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Function can only be used for explicit delegations.\\n     * @dev This function is deprecated - use `claimFromDataProviders` instead.\\n     */\\n    function claimRewardFromDataProviders(\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs,\\n        address[] calldata _dataProviders\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows the sender to claim or wrap rewards for reward owner from specified data providers.\\n     * @notice This function is intended to be used to claim rewards in case of delegation by amount.\\n     * @notice The caller does not have to be the owner, but must be approved by the owner to claim on his behalf,\\n     *   this approval is done by calling `setClaimExecutors`.\\n     * @notice It is actually safe for this to be called by anybody (nothing can be stolen), but by limiting who can\\n     *   call, we allow the owner to control the timing of the calls.\\n     * @notice Reward owner can claim to any `_recipient`, while the executor can only claim to the reward owner,\\n     *   reward owners's personal delegation account or one of the addresses set by `setAllowedClaimRecipients`.\\n     * @param _rewardOwner          address of the reward owner\\n     * @param _recipient            address to transfer funds to\\n     * @param _rewardEpochs         array of reward epoch numbers to claim for\\n     * @param _dataProviders        array of addresses representing data providers to claim the reward from\\n     * @param _wrap                 should reward be wrapped immediately\\n     * @return _rewardAmount        amount of total claimed rewards\\n     * @dev Function can only be used for explicit delegations.\\n     */\\n    function claimFromDataProviders(\\n        address _rewardOwner,\\n        address payable _recipient,\\n        uint256[] calldata _rewardEpochs,\\n        address[] calldata _dataProviders,\\n        bool _wrap\\n    )\\n        external returns (uint256 _rewardAmount);\\n\\n    /**\\n     * @notice Allows batch claiming for the list of '_rewardOwners' and for all unclaimed epochs <= '_rewardEpoch'.\\n     * @notice If reward owner has enabled delegation account, rewards are also claimed for that delegation account and\\n     *   total claimed amount is sent to that delegation account, otherwise claimed amount is sent to owner's account.\\n     * @notice Claimed amount is automatically wrapped.\\n     * @notice Method can be used by reward owner or executor. If executor is registered with fee > 0,\\n     *   then fee is paid to executor for each claimed address from the list.\\n     * @param _rewardOwners         list of reward owners to claim for\\n     * @param _rewardEpoch          last reward epoch to claim for\\n     */\\n    function autoClaim(address[] calldata _rewardOwners, uint256 _rewardEpoch) external;\\n    \\n    /**\\n     * @notice Allows data provider to set (or update last) fee percentage.\\n     * @param _feePercentageBIPS    number representing fee percentage in BIPS\\n     * @return _validFromEpoch      reward epoch number when the setting becomes effective.\\n     */\\n    function setDataProviderFeePercentage(uint256 _feePercentageBIPS)\\n        external returns (uint256 _validFromEpoch);\\n\\n    /**\\n     * @notice Allows reward claiming\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the current fee percentage of `_dataProvider`\\n     * @param _dataProvider         address representing data provider\\n     */\\n    function getDataProviderCurrentFeePercentage(address _dataProvider)\\n        external view returns (uint256 _feePercentageBIPS);\\n\\n    /**\\n     * @notice Returns the fee percentage of `_dataProvider` at `_rewardEpoch`\\n     * @param _dataProvider         address representing data provider\\n     * @param _rewardEpoch          reward epoch number\\n     */\\n    function getDataProviderFeePercentage(\\n        address _dataProvider,\\n        uint256 _rewardEpoch\\n    )\\n        external view\\n        returns (uint256 _feePercentageBIPS);\\n\\n    /**\\n     * @notice Returns the scheduled fee percentage changes of `_dataProvider`\\n     * @param _dataProvider         address representing data provider\\n     * @return _feePercentageBIPS   positional array of fee percentages in BIPS\\n     * @return _validFromEpoch      positional array of block numbers the fee settings are effective from\\n     * @return _fixed               positional array of boolean values indicating if settings are subjected to change\\n     */\\n    function getDataProviderScheduledFeePercentageChanges(address _dataProvider) external view \\n        returns (\\n            uint256[] memory _feePercentageBIPS,\\n            uint256[] memory _validFromEpoch,\\n            bool[] memory _fixed\\n        );\\n\\n    /**\\n     * @notice Returns information on epoch reward\\n     * @param _rewardEpoch          reward epoch number\\n     * @return _totalReward         number representing the total epoch reward\\n     * @return _claimedReward       number representing the amount of total epoch reward that has been claimed\\n     */\\n    function getEpochReward(uint256 _rewardEpoch) external view\\n        returns (uint256 _totalReward, uint256 _claimedReward);\\n\\n    /**\\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch`\\n     * @param _beneficiary          address of reward beneficiary\\n     * @param _rewardEpoch          reward epoch number\\n     * @return _dataProviders       positional array of addresses representing data providers\\n     * @return _rewardAmounts       positional array of reward amounts\\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\\n     * @return _claimable           boolean value indicating if rewards are claimable\\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\\n     */\\n    function getStateOfRewards(\\n        address _beneficiary,\\n        uint256 _rewardEpoch\\n    )\\n        external view \\n        returns (\\n            address[] memory _dataProviders,\\n            uint256[] memory _rewardAmounts,\\n            bool[] memory _claimed,\\n            bool _claimable\\n        );\\n\\n    /**\\n     * @notice Returns the state of rewards for `_beneficiary` at `_rewardEpoch` from `_dataProviders`\\n     * @param _beneficiary          address of reward beneficiary\\n     * @param _rewardEpoch          reward epoch number\\n     * @param _dataProviders        positional array of addresses representing data providers\\n     * @return _rewardAmounts       positional array of reward amounts\\n     * @return _claimed             positional array of boolean values indicating if reward is claimed\\n     * @return _claimable           boolean value indicating if rewards are claimable\\n     */\\n    function getStateOfRewardsFromDataProviders(\\n        address _beneficiary,\\n        uint256 _rewardEpoch,\\n        address[] calldata _dataProviders\\n    )\\n        external view\\n        returns (\\n            uint256[] memory _rewardAmounts,\\n            bool[] memory _claimed,\\n            bool _claimable\\n        );\\n\\n    /**\\n     * @notice Returns the start and the end of the reward epoch range for which the reward is claimable\\n     * @param _startEpochId         the oldest epoch id that allows reward claiming\\n     * @param _endEpochId           the newest epoch id that allows reward claiming\\n     */\\n    function getEpochsWithClaimableRewards() external view \\n        returns (\\n            uint256 _startEpochId,\\n            uint256 _endEpochId\\n        );\\n\\n    /**\\n     * @notice Returns the next claimable reward epoch for '_rewardOwner'.\\n     * @param _rewardOwner          address of the reward owner\\n     */\\n    function nextClaimableRewardEpoch(address _rewardOwner) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the array of claimable epoch ids for which the reward has not yet been claimed\\n     * @param _beneficiary          address of reward beneficiary\\n     * @return _epochIds            array of epoch ids\\n     * @dev Reverts when queried with `_beneficiary` delegating by amount\\n     */\\n    function getEpochsWithUnclaimedRewards(address _beneficiary) external view returns (\\n        uint256[] memory _epochIds\\n    );\\n\\n    /**\\n     * @notice Returns the information on claimed reward of `_dataProvider` for `_rewardEpoch` by `_claimer`\\n     * @param _rewardEpoch          reward epoch number\\n     * @param _dataProvider         address representing the data provider\\n     * @param _claimer              address representing the claimer\\n     * @return _claimed             boolean indicating if reward has been claimed\\n     * @return _amount              number representing the claimed amount\\n     */\\n    function getClaimedReward(\\n        uint256 _rewardEpoch,\\n        address _dataProvider,\\n        address _claimer\\n    )\\n        external view\\n        returns (\\n            bool _claimed,\\n            uint256 _amount\\n        );\\n\\n    /**\\n     * @notice Return reward epoch that will expire, when new reward epoch will start\\n     * @return Reward epoch id that will expire next\\n     */\\n    function getRewardEpochToExpireNext() external view returns (uint256);\\n\\n    /**\\n     * @notice Return reward epoch vote power block\\n     * @param _rewardEpoch          reward epoch number\\n     */\\n    function getRewardEpochVotePowerBlock(uint256 _rewardEpoch) external view returns (uint256);\\n\\n    /**\\n     * @notice Return current reward epoch number\\n     */\\n    function getCurrentRewardEpoch() external view returns (uint256);\\n\\n    /**\\n     * @notice Return initial reward epoch number\\n     */\\n    function getInitialRewardEpoch() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the information on rewards and initial vote power of `_dataProvider` for `_rewardEpoch`\\n     * @param _rewardEpoch                      reward epoch number\\n     * @param _dataProvider                     address representing the data provider\\n     * @return _rewardAmount                    number representing the amount of rewards\\n     * @return _votePowerIgnoringRevocation     number representing the vote power ignoring revocations\\n     */\\n    function getDataProviderPerformanceInfo(\\n        uint256 _rewardEpoch,\\n        address _dataProvider\\n    )\\n        external view \\n        returns (\\n            uint256 _rewardAmount,\\n            uint256 _votePowerIgnoringRevocation\\n        );\\n}\\n\",\"keccak256\":\"0x03ea94df67caf6f0a31f2d24a08e4ecb3703d177ae181ecf3fd2ddd4d59ac102\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IPriceSubmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IPriceSubmitter {\\n    /**\\n     * Event emitted when price hashes were submitted through PriceSubmitter.\\n     * @param submitter the address of the sender\\n     * @param epochId current price epoch id\\n     * @param ftsos array of ftsos that correspond to the indexes in call\\n     * @param hashes the submitted hashes\\n     * @param timestamp current block timestamp\\n     */\\n    event PriceHashesSubmitted(\\n        address indexed submitter,\\n        uint256 indexed epochId,\\n        IFtsoGenesis[] ftsos,\\n        bytes32[] hashes,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * Event emitted when prices were revealed through PriceSubmitter.\\n     * @param voter the address of the sender\\n     * @param epochId id of the epoch in which the price hash was submitted\\n     * @param ftsos array of ftsos that correspond to the indexes in the call\\n     * @param prices the submitted prices\\n     * @param timestamp current block timestamp\\n     */\\n    event PricesRevealed(\\n        address indexed voter,\\n        uint256 indexed epochId,\\n        IFtsoGenesis[] ftsos,\\n        uint256[] prices,\\n        uint256[] randoms,\\n        uint256 timestamp\\n    );\\n    \\n    /**\\n     * @notice Submits price hashes for current epoch\\n     * @param _epochId              Target epoch id to which hashes are submitted\\n     * @param _ftsoIndices          List of ftso indices\\n     * @param _hashes               List of hashed price and random number\\n     * @notice Emits PriceHashesSubmitted event\\n     */\\n    function submitPriceHashes(\\n        uint256 _epochId,\\n        uint256[] memory _ftsoIndices,\\n        bytes32[] memory _hashes\\n    ) external;\\n\\n    /**\\n     * @notice Reveals submitted prices during epoch reveal period\\n     * @param _epochId              Id of the epoch in which the price hashes was submitted\\n     * @param _ftsoIndices          List of ftso indices\\n     * @param _prices               List of submitted prices in USD\\n     * @param _randoms              List of submitted random numbers\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PricesRevealed event\\n     */\\n    function revealPrices(\\n        uint256 _epochId,\\n        uint256[] memory _ftsoIndices,\\n        uint256[] memory _prices,\\n        uint256[] memory _randoms\\n    ) external;\\n\\n    /**\\n     * Returns bitmap of all ftso's for which `_voter` is allowed to submit prices/hashes.\\n     * If voter is allowed to vote for ftso at index (see *_FTSO_INDEX), the corrsponding\\n     * bit in the result will be 1.\\n     */    \\n    function voterWhitelistBitmap(address _voter) external view returns (uint256);\\n\\n    function getVoterWhitelister() external view returns (address);\\n    function getFtsoRegistry() external view returns (IFtsoRegistryGenesis);\\n    function getFtsoManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4859d5a14334c7905a7813ac8ee16151f8395611f832ff3bdf741be7f53a13a\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/ftso/userInterfaces/IVoterWhitelister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVoterWhitelister {\\n    /**\\n     * Raised when an account is removed from the voter whitelist.\\n     */\\n    event VoterWhitelisted(address voter, uint256 ftsoIndex);\\n    \\n    /**\\n     * Raised when an account is removed from the voter whitelist.\\n     */\\n    event VoterRemovedFromWhitelist(address voter, uint256 ftsoIndex);\\n\\n    /**\\n     * Raised when an account is chilled from the voter whitelist.\\n     */\\n    event VoterChilled(address voter, uint256 untilRewardEpoch);\\n\\n    /**\\n     * Request to whitelist `_voter` account to ftso at `_ftsoIndex`. Will revert if vote power too low.\\n     * May be called by any address.\\n     */\\n    function requestWhitelistingVoter(address _voter, uint256 _ftsoIndex) external;\\n\\n    /**\\n     * Request to whitelist `_voter` account to all active ftsos.\\n     * May be called by any address.\\n     * It returns an array of supported ftso indices and success flag per index.\\n     */\\n    function requestFullVoterWhitelisting(\\n        address _voter\\n    ) \\n        external \\n        returns (\\n            uint256[] memory _supportedIndices,\\n            bool[] memory _success\\n        );\\n\\n    /**\\n     * Maximum number of voters in the whitelist for a new FTSO.\\n     */\\n    function defaultMaxVotersForFtso() external view returns (uint256);\\n    \\n    /**\\n     * Maximum number of voters in the whitelist for FTSO at index `_ftsoIndex`.\\n     */\\n    function maxVotersForFtso(uint256 _ftsoIndex) external view returns (uint256);\\n\\n    /**\\n     * Get whitelisted price providers for ftso with `_symbol`\\n     */\\n    function getFtsoWhitelistedPriceProvidersBySymbol(string memory _symbol) external view returns (address[] memory);\\n\\n    /**\\n     * Get whitelisted price providers for ftso at `_ftsoIndex`\\n     */\\n    function getFtsoWhitelistedPriceProviders(uint256 _ftsoIndex) external view returns (address[] memory);\\n\\n    /**\\n     * In case of providing bad prices (e.g. collusion), the voter can be chilled for a few reward epochs.\\n     * A voter can whitelist again from a returned reward epoch onwards.\\n     */\\n    function chilledUntilRewardEpoch(address _voter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfaa76e4db7440304e5c1518e24b8c5008cbda90e30d31646f48346be20057669\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IGovernanceVotePower {\\n    /**\\n     * @notice Delegate all governance vote power of `msg.sender` to `_to`.\\n     * @param _to The address of the recipient\\n     **/\\n    function delegate(address _to) external;\\n\\n    /**\\n     * @notice Undelegate all governance vote power of `msg.sender``.\\n     **/\\n    function undelegate() external;\\n\\n    /**\\n    * @notice Get the governance vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return _votePower    Governance vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `account` at the current block.\\n    * @param account The address to get voting power.\\n    * @return Vote power of `account` at the current block number.\\n    */    \\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at block `_blockNumber`\\n    * @param _who The address to get delegate's address.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Delegate's address of `_who` at `_blockNumber`.\\n    */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n    * @notice Get the delegate's address of `_who` at the current block.\\n    * @param _who The address to get delegate's address.\\n    * @return Delegate's address of `_who` at the current block number.\\n    */    \\n    function getDelegateOfAtNow(address _who) external  view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x5e0d7de5e11ce7e9b3bca2e6f79b991359c2d484b0c028e78683b7f9b6f97ee5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/AddressValidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name AddressValidity\\n * @custom:id 0x05\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion whether a string represents a valid address on an external chain.\\n * @custom:verification The address is checked against all validity criteria of the chain with `sourceId`.\\n * Indicator of validity is provided.\\n * If the address is valid, its standard form and standard hash are computed.\\n * Validity criteria for each supported chain:\\n * - [BTC](/specs/attestations/external-chains/address-validity/BTC.md)\\n * - [DOGE](/specs/attestations/external-chains/address-validity/DOGE.md)\\n * - [XRPL](/specs/attestations/external-chains/address-validity/XRPL.md)\\n * @custom:lut `0xffffffffffffffff` ($2^{64}-1$ in hex)\\n */\\ninterface AddressValidity {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId Id of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for AddressValidity attestation type\\n     * @param addressStr Address to be verified.\\n     */\\n    struct RequestBody {\\n        string addressStr;\\n    }\\n\\n    /**\\n     * @notice Response body for AddressValidity attestation type\\n     * @param isValid Boolean indicator of the address validity.\\n     * @param standardAddress If `isValid`, standard form of the validated address. Otherwise an empty string.\\n     * @param standardAddressHash If `isValid`, standard address hash of the validated address. Otherwise a zero bytes32 string.\\n     */\\n    struct ResponseBody {\\n        bool isValid;\\n        string standardAddress;\\n        bytes32 standardAddressHash;\\n    }\\n}\\n\",\"keccak256\":\"0xd30e59f7b4ef10d6d33e8c85af3157abca3799cb5b2ee5d2d20878567275dd99\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/BalanceDecreasingTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name BalanceDecreasingTransaction\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A detection of a transaction that either decreases the balance for some address or is signed by the source address.\\n * Such an attestation could prove a violation of an agreement and therefore provides grounds to liquidate some funds locked by a smart contract on Flare.\\n *\\n * A transaction is considered \\u201cbalance decreasing\\u201d for the address, if the balance after the transaction is lower than before or the address is among the signers of the transaction (even if its balance is greater than before the transaction).\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the source blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the response fields are extracted if the transaction is balance decreasing for the indicated address.\\n * Some of the request and response fields are chain specific as described below.\\n * The fields can be computed with the help of a [balance decreasing summary](/specs/attestations/external-chains/transactions.md#balance-decreasing-summary).\\n *\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n * - `sourceAddressIndicator` is the the index of the transaction input in hex padded to a 0x prefixed 32-byte string.\\n * If the indicated input does not exist or the indicated input does not have the address, the attestation request is rejected.\\n * The `sourceAddress` is the address of the indicated transaction input.\\n * - `spentAmount` is the sum of values of all inputs with sourceAddress minus the sum of all outputs with `sourceAddress`.\\n * Can be negative.\\n * - `blockTimestamp` is the mediantime of a block.\\n *\\n * ### XRPL\\n *\\n * - `sourceAddressIndicator` is the [standard address hash](/specs/attestations/external-chains/standardAddress.md#standard-address-hash) of the address whose balance has been decreased.\\n * If the address indicated by `sourceAddressIndicator` is not among the signers of the transaction and the balance of the address was not lowered in the transaction, the attestation request is rejected.\\n *\\n * - `spentAmount` is the difference between the balance of the indicated address after and before the transaction.\\n * Can be negative.\\n * - `blockTimestamp` is the close_time of a ledger converted to unix time.\\n *\\n * @custom:lut `blockTimestamp`\\n */\\ninterface BalanceDecreasingTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered. This is a security measure to prevent a collision of attestation hashes.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for BalanceDecreasingTransaction attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param sourceAddressIndicator The indicator of the address whose balance has been decreased.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        bytes32 sourceAddressIndicator;\\n    }\\n\\n    /**\\n     * @notice Response body for BalanceDecreasingTransaction attestation type.\\n     * @param blockNumber The number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the address indicated by the `sourceAddressIndicator`.\\n     * @param spentAmount Amount spent by the source address in minimal units.\\n     * @param standardPaymentReference Standard payment reference of the transaction.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        int256 spentAmount;\\n        bytes32 standardPaymentReference;\\n    }\\n}\\n\",\"keccak256\":\"0x30df7b48485b7029d406aa6f2b98a6ad3685a2358ce006707870cd848c3b6b28\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ConfirmedBlockHeightExists.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ConfirmedBlockHeightExists\\n * @custom:id 0x02\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice An assertion that a block with `blockNumber` is confirmed.\\n * It also provides data to compute the block production rate in the given time range.\\n * @custom:verification It is checked that the block with `blockNumber` is confirmed by at least `numberOfConfirmations`.\\n * If it is not, the request is rejected. We note a block on the tip of the chain is confirmed by 1 block.\\n * Then `lowestQueryWindowBlock` is determined and its number and timestamp are extracted.\\n *\\n *\\n *  Current confirmation heights consensus:\\n *\\n *\\n * | `Chain` | `chainId` | `numberOfConfirmations` | `timestamp ` |\\n * | ------- | --------- | ----------------------- | ------------ |\\n * | `BTC`   | 0         | 6                       | mediantime   |\\n * | `DOGE`  | 2         | 60                      | mediantime   |\\n * | `XRP`   | 3         | 3                       | close_time   |\\n *\\n *\\n *\\n *\\n * @custom:lut `lowestQueryWindowBlockTimestamp`\\n */\\ninterface ConfirmedBlockHeightExists {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ConfirmedBlockHeightExistsType attestation type\\n     * @param blockNumber The number of the block the request wants a confirmation of.\\n     * @param queryWindow The length of the period in which the block production rate is to be computed.\\n     */\\n    struct RequestBody {\\n        uint64 blockNumber;\\n        uint64 queryWindow;\\n    }\\n\\n    /**\\n     * @notice Response body for ConfirmedBlockHeightExistsType attestation type\\n     * @custom:below `blockNumber`, `lowestQueryWindowBlockNumber`, `blockTimestamp` and `lowestQueryWindowBlockTimestamp` can be used to compute the average block production time in the specified block range.\\n     * @param blockTimestamp The timestamp of the block with `blockNumber`.\\n     * @param numberOfConfirmations The depth at which a block is considered confirmed depending on the chain. All attestation providers must agree on this number.\\n     * @param lowestQueryWindowBlockNumber The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`.\\n     * @param lowestQueryWindowBlockTimestamp The timestamp of the block at height `lowestQueryWindowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 blockTimestamp;\\n        uint64 numberOfConfirmations;\\n        uint64 lowestQueryWindowBlockNumber;\\n        uint64 lowestQueryWindowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xc0b8563cb674c38c9569021bf662031877311f32c6bb9993b511c60d57fc7fd5\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name EVMTransaction\\n * @custom:id 0x06\\n * @custom:supported ETH, FLR, SGB, testETH, testFLR, testSGB\\n * @author Flare\\n * @notice A relay of a transaction from an EVM chain.\\n * This type is only relevant for EVM-compatible chains.\\n * @custom:verification If a transaction with the `transactionId` is in a block on the main branch with at least `requiredConfirmations`, the specified data is relayed.\\n * If an indicated event does not exist, the request is rejected.\\n * @custom:lut `timestamp`\\n */\\ninterface EVMTransaction {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId  ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for EVM transaction attestation type\\n     * @custom:below Note that events (logs) are indexed in block not in each transaction. The contract that uses the attestation should specify the order of event logs as needed and the requestor should sort `logIndices`\\n     * with respect to the set specifications. If possible, the contact should only require one `logIndex`.\\n     * @param transactionHash Hash of the transaction(transactionHash).\\n     * @param requiredConfirmations The height at which a block is considered confirmed by the requestor.\\n     * @param provideInput If true, \\\"input\\\" field is included in the response.\\n     * @param listEvents If true, events indicated by `logIndices` are included in the response. Otherwise, no events are included in the response.\\n     * @param logIndices If `listEvents` is `false`, this should be an empty list, otherwise, the request is rejected. If `listEvents` is `true`, this is the list of indices (logIndex) of the events to be relayed (sorted by the requestor). The array should contain at most 50 indices. If empty, it indicates all events in order capped by 50.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionHash;\\n        uint16 requiredConfirmations;\\n        bool provideInput;\\n        bool listEvents;\\n        uint32[] logIndices;\\n    }\\n\\n    /**\\n     * @notice Response body for EVM transaction attestation type\\n     * @custom:below The fields are in line with [transaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash) provided by EVM node.\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param timestamp Timestamp of the block in which the transaction is included.\\n     * @param sourceAddress The address (from) that signed the transaction.\\n     * @param isDeployment Indicate whether it is a contract creation transaction.\\n     * @param receivingAddress The address (to) of the receiver of the initial transaction. Zero address if `isDeployment` is `true`.\\n     * @param value The value transferred by the initial transaction in wei.\\n     * @param input If `provideInput`, this is the data send along with the initial transaction. Otherwise it is the default value `0x00`.\\n     * @param status Status of the transaction 1 - success, 0 - failure.\\n     * @param events If `listEvents` is `true`, an array of the requested events. Sorted by the logIndex in the same order as `logIndices`. Otherwise, an empty array.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 timestamp;\\n        address sourceAddress;\\n        bool isDeployment;\\n        address receivingAddress;\\n        uint256 value;\\n        bytes input;\\n        uint8 status;\\n        Event[] events;\\n    }\\n\\n    /**\\n     * @notice Event log record\\n     * @custom:above An `Event` is a struct with the following fields:\\n     * @custom:below The fields are in line with [EVM event logs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\\n     * @param logIndex The consecutive number of the event in block.\\n     * @param emitterAddress The address of the contract that emitted the event.\\n     * @param topics An array of up to four 32-byte strings of indexed log arguments.\\n     * @param data Concatenated 32-byte strings of non-indexed log arguments. At least 32 bytes long.\\n     * @param removed It is `true` if the log was removed due to a chain reorganization and `false` if it is a valid log.\\n     */\\n    struct Event {\\n        uint32 logIndex;\\n        address emitterAddress;\\n        bytes32[] topics;\\n        bytes data;\\n        bool removed;\\n    }\\n}\\n\",\"keccak256\":\"0xd0665e3ac546858a8becbf7f0600fe87b6f003120f1d731759d14c6b5b8ae6d2\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IAddressValidityVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./AddressValidity.sol\\\";\\n\\ninterface IAddressValidityVerification {\\n\\n   function verifyAddressValidity(\\n      AddressValidity.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0xcbe043d55f2fd1e57e12515b2c7cf024d45121303a8d8cdf8822cba40c9e5746\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IBalanceDecreasingTransactionVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./BalanceDecreasingTransaction.sol\\\";\\n\\ninterface IBalanceDecreasingTransactionVerification {\\n\\n   function verifyBalanceDecreasingTransaction(\\n      BalanceDecreasingTransaction.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x4c23fc95b39a72f3dbf1d53a1cc1a0567f05770c1e1d6cd981b31f8f9ba3b5b3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./ConfirmedBlockHeightExists.sol\\\";\\n\\ninterface IConfirmedBlockHeightExistsVerification {\\n\\n   function verifyConfirmedBlockHeightExists(\\n      ConfirmedBlockHeightExists.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x12e36fb4b606598150995483e3fc5badc39f727834403907de61dc4968aa117f\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./EVMTransaction.sol\\\";\\n\\ninterface IEVMTransactionVerification {\\n\\n   function verifyEVMTransaction(\\n      EVMTransaction.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0xb0cea88e37fc6f45623aff43ad1d1231259c7b0959262b074e9f94b51721b092\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IPaymentVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./Payment.sol\\\";\\n\\ninterface IPaymentVerification {\\n\\n   function verifyPayment(\\n      Payment.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x73beb24942b4ca93c02441a6985e37db659368b191cfe9737ea30b0a79634fa6\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./ReferencedPaymentNonexistence.sol\\\";\\n\\ninterface IReferencedPaymentNonexistenceVerification {\\n\\n   function verifyReferencedPaymentNonexistence(\\n      ReferencedPaymentNonexistence.Proof calldata _proof\\n   ) external view returns (bool _proved);\\n}\\n   \",\"keccak256\":\"0x2fd0b205022bdfd99ba765e97c5b69fc87ef0febe53d7e123c8cef24e152a613\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IStateConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IStateConnector {\\n    event AttestationRequest(\\n        address sender,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event RoundFinalised(\\n        uint256 indexed roundId,\\n        bytes32 merkleRoot\\n    );\\n\\n    /**\\n     * The method to call for requesting a new attestation.\\n     * Emits event `AttestationRequest`, which triggers work by attestation providers.\\n     */\\n    function requestAttestations(bytes calldata _data) external;\\n\\n    /**\\n     * Last finalized round id.\\n     */\\n    function lastFinalizedRoundId() external view returns (uint256 _roundId);\\n\\n    /**\\n     * Get Merkle root for the round and check for buffer overflows.\\n     */\\n    function merkleRoot(uint256 _roundId) external view returns (bytes32);\\n\\n    /**\\n     * The first buffer timestamp\\n     * (start time in seconds for converting the timestamp into a round number).\\n     */\\n    function BUFFER_TIMESTAMP_OFFSET() external view returns (uint256);\\n\\n    /**\\n     * Amount of time a buffer is active before cycling to the next one\\n     * (round length in seconds for converting the timestamp into a round number).\\n     */\\n    function BUFFER_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x08bc17a7293cb38902d8592cdad00434c44f033c7f735cf49b67d963cf48ed74\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/Payment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name Payment\\n * @custom:id 0x01\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\\n * Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\\n * transaction should be formed to be provable by this attestation type.\\n * The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.\\n * @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer.\\n * If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n *\\n * Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain.\\n * If the summary is successfully calculated, the response is assembled from the summary.\\n * `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\\n * For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\\n * For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\\n *\\n * If the summary is not successfully calculated, the attestation request is rejected.\\n * @custom:lut `blockTimestamp`\\n */\\ninterface Payment {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for Payment attestation type\\n     * @param transactionId ID of the payment transaction.\\n     * @param inUtxo For UTXO chains, this is the index of the transaction input with source address. Always 0 for the non-utxo chains.\\n     * @param utxo For UTXO chains, this is the index of the transaction output with receiving address. Always 0 for the non-utxo chains.\\n     */\\n    struct RequestBody {\\n        bytes32 transactionId;\\n        uint256 inUtxo;\\n        uint256 utxo;\\n    }\\n\\n    /**\\n     * @notice Response body for Payment attestation type\\n     * @param blockNumber Number of the block in which the transaction is included.\\n     * @param blockTimestamp The timestamp of the block in which the transaction is included.\\n     * @param sourceAddressHash Standard address hash of the source address.\\n     * @param receivingAddressHash Standard address hash of the receiving address. The zero 32-byte string if there is no receivingAddress (if `status` is not success).\\n     * @param intendedReceivingAddressHash Standard address hash of the intended receiving address. Relevant if the transaction is unsuccessful.\\n     * @param spentAmount Amount in minimal units spent by the source address.\\n     * @param intendedSpentAmount Amount in minimal units to be spent by the source address. Relevant if the transaction status is unsuccessful.\\n     * @param receivedAmount Amount in minimal units received by the receiving address.\\n     * @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address. Relevant if the transaction is unsuccessful.\\n     * @param standardPaymentReference [Standard payment reference](/specs/attestations/external-chains/standardPaymentReference.md) of the transaction.\\n     * @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\\n     * @param status  [Succes status](/specs/attestations/external-chains/transactions.md#transaction-success-status) of the transaction: 0 - success, 1 - failed by sender's fault,x  2 - failed by receiver's fault.\\n     */\\n    struct ResponseBody {\\n        uint64 blockNumber;\\n        uint64 blockTimestamp;\\n        bytes32 sourceAddressHash;\\n        bytes32 receivingAddressHash;\\n        bytes32 intendedReceivingAddressHash;\\n        int256 spentAmount;\\n        int256 intendedSpentAmount;\\n        int256 receivedAmount;\\n        int256 intendedReceivedAmount;\\n        bytes32 standardPaymentReference;\\n        bool oneToOne;\\n        uint8 status;\\n    }\\n}\\n\",\"keccak256\":\"0x3127f961b3eb6575ac983b39bef5a61126a4dca50f115dc2056b8e4dfada01b3\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/ReferencedPaymentNonexistence.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * @custom:name ReferencedPaymentNonexistence\\n * @custom:id 0x04\\n * @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\\n * @author Flare\\n * @notice Assertion that an agreed-upon payment has not been made by a certain deadline.\\n * A confirmed request shows that a transaction meeting certain criteria (address, amount, reference) did not appear in the specified block range.\\n * \\n * \\n * This type of attestation can be used to e.g. provide grounds to liquidate funds locked by a smart contract on Flare when a payment is missed. \\n *\\n * @custom:verification If `firstOverflowBlock` cannot be determined or does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\\n * If `firstOverflowBlockNumber` is higher or equal to `minimalBlockNumber`, the request is rejected.\\n * The search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n * If the verifier does not have a view of all blocks from `minimalBlockNumber` to `firstOverflowBlockNumber`, the attestation request is rejected.\\n *\\n * The request is confirmed if no transaction meeting the specified criteria is found in the search range.\\n * The criteria and timestamp are chain specific.\\n * ### UTXO (Bitcoin and Dogecoin)\\n *\\n *\\n * Criteria for the transaction:\\n *\\n *\\n * - It is not coinbase transaction.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#btc-and-doge-blockchains).\\n * - The sum of values of all outputs with the specified address minus the sum of values of all inputs with the specified address is greater than `amount` (in practice the sum of all values of the inputs with the specified address is zero).\\n *\\n * \\n * Timestamp is `mediantime`.\\n\\n * ### XRPL\\n *\\n *\\n *\\n * Criteria for the transaction:\\n * - The transaction is of type payment.\\n * - The transaction has the specified [standardPaymentReference](/specs/attestations/external-chains/standardPaymentReference.md#xrp),\\n * - One of the following is true:\\n *   - Transaction status is `SUCCESS` and the amount received by the specified destination address is greater than the specified `value`.\\n *   - Transaction status is `RECEIVER_FAILURE` and the specified destination address would receive an amount greater than the specified `value` had the transaction been successful.\\n *\\n * \\n * Timestamp is `close_time` converted to UNIX time.\\n *\\n * @custom:lut `minimalBlockTimestamp`\\n */\\ninterface ReferencedPaymentNonexistence {\\n    /**\\n     * @notice Toplevel request\\n     * @param attestationType ID of the attestation type.\\n     * @param sourceId ID of the data source.\\n     * @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response as defined.\\n     * @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.\\n     */\\n    struct Request {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        bytes32 messageIntegrityCode;\\n        RequestBody requestBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel response\\n     * @param attestationType Extracted from the request.\\n     * @param sourceId Extracted from the request.\\n     * @param votingRound The ID of the State Connector round in which the request was considered.\\n     * @param lowestUsedTimestamp The lowest timestamp used to generate the response.\\n     * @param requestBody Extracted from the request.\\n     * @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.\\n     */\\n    struct Response {\\n        bytes32 attestationType;\\n        bytes32 sourceId;\\n        uint64 votingRound;\\n        uint64 lowestUsedTimestamp;\\n        RequestBody requestBody;\\n        ResponseBody responseBody;\\n    }\\n\\n    /**\\n     * @notice Toplevel proof\\n     * @param merkleProof Merkle proof corresponding to the attestation response.\\n     * @param data Attestation response.\\n     */\\n    struct Proof {\\n        bytes32[] merkleProof;\\n        Response data;\\n    }\\n\\n    /**\\n     * @notice Request body for ReferencePaymentNonexistence attestation type\\n     * @param minimalBlockNumber The start block of the search range.\\n     * @param deadlineBlockNumber The blockNumber to be included in the search range.\\n     * @param deadlineTimestamp The timestamp to be included in the search range.\\n     * @param destinationAddressHash The standard address hash of the address to which the payment had to be done.\\n     * @param amount The requested amount in minimal units that had to be payed.\\n     * @param standardPaymentReference The requested standard payment reference.\\n     * @custom:below The `standardPaymentReference` should not be zero (as a 32-byte sequence).\\n     */\\n    struct RequestBody {\\n        uint64 minimalBlockNumber;\\n        uint64 deadlineBlockNumber;\\n        uint64 deadlineTimestamp;\\n        bytes32 destinationAddressHash;\\n        uint256 amount;\\n        bytes32 standardPaymentReference;\\n    }\\n\\n    /**\\n     * @notice Response body for ReferencePaymentNonexistence attestation type.\\n     * @param minimalBlockTimestamp The timestamp of the minimalBlock.\\n     * @param firstOverflowBlockNumber The height of the firstOverflowBlock.\\n     * @param firstOverflowBlockTimestamp The timestamp of the firstOverflowBlock.\\n     * @custom:below `firstOverflowBlock` is the first block that has block number higher than `deadlineBlockNumber` and timestamp later than `deadlineTimestamp`.\\n     * The specified search range are blocks between heights including `minimalBlockNumber` and excluding `firstOverflowBlockNumber`.\\n     */\\n    struct ResponseBody {\\n        uint64 minimalBlockTimestamp;\\n        uint64 firstOverflowBlockNumber;\\n        uint64 firstOverflowBlockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0f61aa13fbc26ceef5f26adb75293023a658c28994acad975e5bd0eda164a563\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IFlareContractRegistry} from \\\"./userInterfaces/IFlareContractRegistry.sol\\\";\\n// Auto generated imports\\n// AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\\nimport { IStateConnector } from \\\"../stateConnector/interface/IStateConnector.sol\\\";\\nimport { IPriceSubmitter } from \\\"../ftso/userInterfaces/IPriceSubmitter.sol\\\";\\nimport { IFtsoRewardManager } from \\\"../ftso/userInterfaces/IFtsoRewardManager.sol\\\";\\nimport { IFtsoRegistry } from \\\"../ftso/userInterfaces/IFtsoRegistry.sol\\\";\\nimport { IVoterWhitelister } from \\\"../ftso/userInterfaces/IVoterWhitelister.sol\\\";\\nimport { IFtsoManager } from \\\"../ftso/userInterfaces/IFtsoManager.sol\\\";\\nimport { IWNat } from \\\"../util-contracts/token/userInterfaces/IWNat.sol\\\";\\nimport { IEVMTransactionVerification } from \\\"../stateConnector/interface/IEVMTransactionVerification.sol\\\";\\nimport { IAddressValidityVerification } from \\\"../stateConnector/interface/IAddressValidityVerification.sol\\\";\\nimport { IBalanceDecreasingTransactionVerification } from \\\"../stateConnector/interface/IBalanceDecreasingTransactionVerification.sol\\\";\\nimport { IConfirmedBlockHeightExistsVerification } from \\\"../stateConnector/interface/IConfirmedBlockHeightExistsVerification.sol\\\";\\nimport { IPaymentVerification } from \\\"../stateConnector/interface/IPaymentVerification.sol\\\";\\nimport { IReferencedPaymentNonexistenceVerification } from \\\"../stateConnector/interface/IReferencedPaymentNonexistenceVerification.sol\\\"; \\n// END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\\n\\n// Library is intended to be used inline, so the strings are all memory allocated (instead of calldata)\\nlibrary FlareContractsRegistryLibrary {\\n    address internal constant FLARE_CONTRACT_REGISTRY_ADDRESS =\\n        0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019;\\n\\n    IFlareContractRegistry internal constant FLARE_CONTRACT_REGISTRY =\\n        IFlareContractRegistry(FLARE_CONTRACT_REGISTRY_ADDRESS);\\n\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(\\n        string memory _name\\n    ) internal view returns (address) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByName(_name);\\n    }\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(\\n        bytes32 _nameHash\\n    ) internal view returns (address) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressByHash(_nameHash);\\n    }\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(\\n        string[] memory _names\\n    ) internal view returns (address[] memory) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByName(_names);\\n    }\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(\\n        bytes32[] memory _nameHashes\\n    ) internal view returns (address[] memory) {\\n        return FLARE_CONTRACT_REGISTRY.getContractAddressesByHash(_nameHashes);\\n    }\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts()\\n        internal\\n        view\\n        returns (string[] memory _names, address[] memory _addresses)\\n    {\\n        return FLARE_CONTRACT_REGISTRY.getAllContracts();\\n    }\\n\\n    // Nice typed getters for all the important contracts\\n    // AUTO GENERATED - DO NOT EDIT BELOW THIS LINE\\n    function getStateConnector() internal view returns(IStateConnector){\\nreturn IStateConnector(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"StateConnector\\\"));\\n\\n}\\n\\n\\nfunction getPriceSubmitter() internal view returns(IPriceSubmitter){\\nreturn IPriceSubmitter(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"PriceSubmitter\\\"));\\n\\n}\\n\\n\\nfunction getFtsoRewardManager() internal view returns(IFtsoRewardManager){\\nreturn IFtsoRewardManager(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"FtsoRewardManager\\\"));\\n\\n}\\n\\n\\nfunction getFtsoRegistry() internal view returns(IFtsoRegistry){\\nreturn IFtsoRegistry(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"FtsoRegistry\\\"));\\n\\n}\\n\\n\\nfunction getVoterWhitelister() internal view returns(IVoterWhitelister){\\nreturn IVoterWhitelister(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"VoterWhitelister\\\"));\\n\\n}\\n\\n\\nfunction getFtsoManager() internal view returns(IFtsoManager){\\nreturn IFtsoManager(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"FtsoManager\\\"));\\n\\n}\\n\\n\\nfunction getWNat() internal view returns(IWNat){\\nreturn IWNat(FLARE_CONTRACT_REGISTRY.getContractAddressByName(\\\"WNat\\\"));\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIEVMTransactionVerification() internal view returns(IEVMTransactionVerification){\\nreturn IEVMTransactionVerification(0xf37AD1278917c04fb291C75a42e61710964Cb57c);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIAddressValidityVerification() internal view returns(IAddressValidityVerification){\\nreturn IAddressValidityVerification(0xd94721da1dD5e222020D256fC073e8Be301ebdCB);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIBalanceDecreasingTransactionVerification() internal view returns(IBalanceDecreasingTransactionVerification){\\nreturn IBalanceDecreasingTransactionVerification(0xeDa84A2eeDfdA53e7c33ef5fDe7B2798B910BF4A);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIConfirmedBlockHeightExistsVerification() internal view returns(IConfirmedBlockHeightExistsVerification){\\nreturn IConfirmedBlockHeightExistsVerification(0x632A984d63f9Ae3C2Eb31e0dc2EeEaE1E282E0da);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIPaymentVerification() internal view returns(IPaymentVerification){\\nreturn IPaymentVerification(0x1ECe6dd08D19c0faf3AB8cEcB146cd5ea5b9b7d9);\\n\\n}\\n\\n\\n// Returns hardcoded unofficial deployment instances of Flare core contracts\\nfunction auxiliaryGetIReferencedPaymentNonexistenceVerification() internal view returns(IReferencedPaymentNonexistenceVerification){\\nreturn IReferencedPaymentNonexistenceVerification(0xDfE5926fABA166187B29C33BC95DfDb18bbE52cd);\\n\\n}\\n \\n    // END AUTO GENERATED - DO NOT EDIT ABOVE THIS LINE\\n}\\n\",\"keccak256\":\"0xa621627ceb67f88d870556f37d2460f213ed40579e628fb03d484782d7312a90\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8d338d76bee3c13abb65b25ed5c7394e24dab8b03d34ac4f9fc36588a2d679f4\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Event triggered when an delegator's balance changes.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateVotesChanged(\\n    address indexed delegate, \\n    uint256 previousBalance, \\n    uint256 newBalance\\n    );\\n\\n    /**\\n     * Event triggered when an account delegates to another account.\\n     *\\n     * Note: the event is always emitted from `GovernanceVotePower`.\\n     */\\n    event DelegateChanged(\\n    address indexed delegator, \\n    address indexed fromDelegate, \\n    address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * @notice Get the token that this governance vote power contract belongs to.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0xb8947f604f760c89f116bcfbb601f8d00c7be2e7a455f265e07b6f2eac5e5ff0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transferred.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x065330415186515d281beed2f006e41202d8f16159ceb4d4597c4dd7773b6924\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0x037c127ad7ac96c904170b6ad3b1e04adc2ac138fb1a84dde5fb7fe0591bc0d1\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\",\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cummulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\",\"keccak256\":\"0xd84e88f28d3df04b5d3a2b3ef2a8d9f78779d888f42359d0c2f3fa292eeb4b50\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/token/userInterfaces/IWNat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IWNat {\\n    /**\\n     * @notice Deposit native token and mint WNAT ERC20.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Withdraw native token and burn WNAT ERC20.\\n     * @param _amount The amount to withdraw.\\n     */\\n    function withdraw(uint256 _amount) external;\\n    \\n    /**\\n     * @notice Deposit native token from msg.sender and mint WNAT ERC20.\\n     * @param _recipient An address to receive minted WNAT.\\n     */\\n    function depositTo(address _recipient) external payable;\\n    \\n    /**\\n     * @notice Withdraw WNAT from an owner and send NAT to msg.sender given an allowance.\\n     * @param _owner An address spending the native tokens.\\n     * @param _amount The amount to spend.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` must have a balance of at least `_amount`.\\n     * - the caller must have allowance for `_owners`'s tokens of at least\\n     * `_amount`.\\n     */\\n    function withdrawFrom(address _owner, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0eeddaabf31e538f15f9c2e54f4c0c8cebaea41b952cd8a978b01dc1504da903\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\",\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/FirelinkBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.15;\\n\\n// import \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IFlareRelayer } from \\\"./IFlareRelayer.sol\\\";\\nimport { FirelinkMintableERC20 } from './FirelinkMintableERC20.sol';\\nimport { IFirelinkMintableERC20, ILegacyMintableERC20 } from './IFirelinkMintableERC20.sol';\\nimport { IEVMTransactionVerification } from \\\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/IEVMTransactionVerification.sol\\\";\\nimport { EVMTransaction } from \\\"@flarenetwork/flare-periphery-contracts/coston/stateConnector/interface/EVMTransaction.sol\\\";\\nimport { FlareContractsRegistryLibrary } from \\\"@flarenetwork/flare-periphery-contracts/coston/util-contracts/ContractRegistryLibrary.sol\\\";\\n\\ncontract FirelinkBridge is Initializable, OwnableUpgradeable, UUPSUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    uint32 internal constant RECEIVE_DEFAULT_GAS_LIMIT = 200_000;\\n\\n    IFlareRelayer public  MESSENGER;\\n    FirelinkBridge public  OTHER_BRIDGE;\\n    TransactionInfo[] public transactions;\\n\\n    address private spacer_0_2_20;\\n    address private spacer_1_0_20;\\n    mapping(address => mapping(address => uint256)) public deposits;\\n\\n    uint256[47] private __gap;\\n\\n    IFirelinkMintableERC20 ethContract;\\n    \\n    \\n    event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData);\\n    event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData);\\n    event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData);\\n    event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData);\\n\\n    \\n    \\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address initialOwner, address payable _messenger, address payable _otherBridge) initializer public {\\n        // __Pausable_init();\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        MESSENGER = IFlareRelayer(_messenger);\\n        OTHER_BRIDGE = FirelinkBridge(_otherBridge);\\n        super.transferOwnership(initialOwner);\\n    }\\n\\n   \\n\\n    // function pause() public onlyOwner {\\n    //     _pause();\\n    // }\\n\\n    // function unpause() public onlyOwner {\\n    //     _unpause();\\n    // }\\n\\n    modifier onlyEOA() {\\n        require(!Address.isContract(msg.sender), \\\"FirelinkBridge: function can only be called from an EOA\\\");\\n        _;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        onlyOwner\\n        override\\n    {}\\n\\n    receive() external payable {\\n\\n    }\\n\\n\\n    function setEthERC20ContractAddress(address _ethAddress) public onlyOwner {\\n        ethContract = IFirelinkMintableERC20(_ethAddress);\\n    }\\n\\n\\nfunction bridgeETH(uint32 _minGasLimit, bytes calldata _extraData) public payable onlyEOA {\\n        _initiateBridgeETH(msg.sender, msg.sender, msg.value, _minGasLimit, _extraData);\\n    }\\n\\n    function bridgeETHTo(address _to, uint32 _minGasLimit, bytes calldata _extraData) public payable {\\n        _initiateBridgeETH(msg.sender, _to, msg.value, _minGasLimit, _extraData);\\n    }\\n\\n    function bridgeERC20(\\n        address _localToken,\\n        address _remoteToken,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _extraData\\n    )\\n        public\\n        virtual\\n        onlyEOA\\n    {\\n        _initiateBridgeERC20(_localToken, _remoteToken, msg.sender, msg.sender, _amount, _minGasLimit, _extraData);\\n    }\\n\\n    function bridgeERC20To(\\n        address _localToken,\\n        address _remoteToken,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _extraData\\n    )\\n        public\\n        virtual\\n    {\\n        _initiateBridgeERC20(_localToken, _remoteToken, msg.sender, _to, _amount, _minGasLimit, _extraData);\\n    }\\n\\n    function finalizeBridgeETH(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _extraData\\n    )\\n        public\\n        payable\\n        // onlyOtherBridge\\n    {\\n        // require(paused() == false, \\\"FirelinkBridge: paused\\\");\\n        require(msg.value == _amount, \\\"FirelinkBridge: amount sent does not match amount required\\\");\\n        require(_to != address(this), \\\"FirelinkBridge: cannot send to self\\\");\\n        require(_to != address(MESSENGER), \\\"FirelinkBridge: cannot send to messenger\\\");\\n        _emitETHBridgeFinalized(_from, _to, _amount, _extraData);\\n\\n        bool success = call(_to, gasleft(), _amount, hex\\\"\\\");\\n        require(success, \\\"FirelinkBridge: ETH transfer failed\\\");\\n    }\\n\\n    function finalizeBridgeERC20(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _extraData\\n    )\\n        public\\n        // onlyOtherBridge\\n    {\\n        // require(paused() == false, \\\"FirelinkBridge: paused\\\");\\n        if (_isFirelinkMintableERC20(_localToken)) {\\n            require(\\n                _isCorrectTokenPair(_localToken, _remoteToken),\\n                \\\"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token\\\"\\n            );\\n\\n            FirelinkMintableERC20(_localToken).mint(_to, _amount);\\n        } else {\\n            deposits[_localToken][_remoteToken] = deposits[_localToken][_remoteToken] - _amount;\\n            IERC20(_localToken).safeTransfer(_to, _amount);\\n        }\\n\\n        _emitERC20BridgeFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData);\\n    }\\n\\n    function _initiateBridgeETH(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes memory _extraData\\n    )\\n        internal\\n    {\\n        require(msg.value == _amount, \\\"FirelinkBridge: bridging ETH must include sufficient ETH value\\\");\\n\\n        _emitETHBridgeInitiated(_from, _to, _amount, _extraData);\\n    }\\n\\n    function _initiateBridgeERC20(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes memory _extraData\\n    )\\n        internal\\n    {\\n        if (_isFirelinkMintableERC20(_localToken)) {\\n            require(\\n                _isCorrectTokenPair(_localToken, _remoteToken),\\n                \\\"FirelinkBridge: wrong remote token for Firelink Mintable ERC20 local token\\\"\\n            );\\n\\n            FirelinkMintableERC20(_localToken).burn(_from, _amount);\\n        } else {\\n            IERC20(_localToken).safeTransferFrom(_from, address(this), _amount);\\n            deposits[_localToken][_remoteToken] = deposits[_localToken][_remoteToken] + _amount;\\n        }\\n\\n        _emitERC20BridgeInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData);\\n\\n        // MESSENGER.sendMessage(\\n        //     address(OTHER_BRIDGE),\\n        //     abi.encodeWithSelector(\\n        //         this.finalizeBridgeERC20.selector,\\n        //         _remoteToken,\\n        //         _localToken,\\n        //         _from,\\n        //         _to,\\n        //         _amount,\\n        //         _extraData\\n        //     ),\\n        //     _minGasLimit\\n        // );\\n    }\\n\\n    function _isFirelinkMintableERC20(address _token) internal view returns (bool) {\\n        return ERC165Checker.supportsInterface(_token, type(ILegacyMintableERC20).interfaceId) ||\\n            ERC165Checker.supportsInterface(_token, type(IFirelinkMintableERC20).interfaceId);\\n    }\\n\\n    function _isCorrectTokenPair(address _mintableToken, address _otherToken) internal view returns (bool) {\\n        if (ERC165Checker.supportsInterface(_mintableToken, type(ILegacyMintableERC20).interfaceId)) {\\n            return _otherToken == ILegacyMintableERC20(_mintableToken).l1Token();\\n        } else {\\n            return _otherToken == IFirelinkMintableERC20(_mintableToken).remoteToken();\\n        }\\n    }\\n\\n    function _emitETHBridgeInitiated(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _extraData\\n    )\\n        internal\\n        virtual\\n    {\\n        emit ETHBridgeInitiated(_from, _to, _amount, _extraData);\\n    }\\n\\n    function _emitETHBridgeFinalized(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _extraData\\n    )\\n        internal\\n        virtual\\n    {\\n        emit ETHBridgeFinalized(_from, _to, _amount, _extraData);\\n    }\\n\\n    function _emitERC20BridgeInitiated(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _extraData\\n    )\\n        internal\\n        virtual\\n    {\\n        emit ERC20BridgeInitiated(_localToken, _remoteToken, _from, _to, _amount, _extraData);\\n    }\\n\\n    function _emitERC20BridgeFinalized(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _extraData\\n    )\\n        internal\\n        virtual\\n    {\\n        emit ERC20BridgeFinalized(_localToken, _remoteToken, _from, _to, _amount, _extraData);\\n    }\\n\\n    function call(address _target, uint256 _gas, uint256 _value, bytes memory _calldata) internal returns (bool) {\\n        bool _success;\\n        assembly {\\n            _success :=\\n                call(\\n                    _gas, // gas\\n                    _target, // recipient\\n                    _value, // ether value\\n                    add(_calldata, 32), // inloc\\n                    mload(_calldata), // inlen\\n                    0, // outloc\\n                    0 // outlen\\n                )\\n        }\\n        return _success;\\n    }\\n\\n    struct EventInfo {\\n        address sender;\\n        address receiver;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    struct TransactionInfo {\\n        EVMTransaction.Proof originalTransaction;\\n        uint256 eventNumber;\\n        EventInfo[] eventInfo;\\n    }\\n\\n    function isEVMTransactionProofValid(\\n        EVMTransaction.Proof calldata transaction\\n    ) public view returns (bool) {\\n        return FlareContractsRegistryLibrary\\n                .auxiliaryGetIEVMTransactionVerification()\\n                .verifyEVMTransaction(transaction);\\n    }\\n\\n    function FinalizeBridgeAndReleaseEth(EVMTransaction.Proof calldata _transaction) external {\\n        require(isEVMTransactionProofValid(_transaction), \\\"Invalid transaction proof\\\");\\n\\n        uint256 transactionIndex = transactions.length;\\n        transactions.push();\\n        transactions[transactionIndex].originalTransaction = _transaction;\\n        transactions[transactionIndex].eventNumber = _transaction.data.responseBody.events.length;\\n        EventInfo[] storage eventInfo = transactions[transactionIndex].eventInfo;\\n        for(uint256 i = 0; i < _transaction.data.responseBody.events.length; i++) {\\n            (address sender, address receiver, uint256 value, bytes memory data) = abi.decode(_transaction.data.responseBody.events[i].data, (address, address, uint256, bytes));\\n            eventInfo.push(EventInfo({\\n                sender: sender,\\n                receiver: receiver,\\n                value: value,\\n                data: data\\n            }));\\n        }\\n\\n        ethContract.mint(eventInfo[0].receiver, eventInfo[0].value);\\n    }\\n\\n    function getTransactionCount() external view returns (uint256) {\\n        return transactions.length;\\n    }\\n\\n    function getAllTransactions() external view returns (TransactionInfo[] memory) {\\n        TransactionInfo[] memory result = new TransactionInfo[](transactions.length);\\n        for(uint256 i = 0; i < transactions.length; i++) {\\n            result[i] = transactions[i];\\n        }\\n        return result;\\n    }\\n\\n}\",\"keccak256\":\"0xc2bb20f7cf73263e9779b0378cf42e41a4347821dae6d9578c1ba1a499644dae\",\"license\":\"MIT\"},\"contracts/FirelinkMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { ILegacyMintableERC20, IFirelinkMintableERC20 } from \\\"./IFirelinkMintableERC20.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\n/// @title FirelinkMintableERC20\\n/// @notice FirelinkMintableERC20 is a standard extension of the base ERC20 token contract designed\\n///         to allow the StandardBridge contracts to mint and burn tokens. This makes it possible to\\n///         use an FirelinkMintableRC20 as the L2 representation of an L1 token, or vice-versa.\\n///         Designed to be backwards compatible with the older StandardL2ERC20 token which was only\\n///         meant for use on L2.\\ncontract FirelinkMintableERC20 is IFirelinkMintableERC20, ILegacyMintableERC20, ERC20, ISemver {\\n    /// @notice Address of the corresponding version of this token on the remote chain.\\n    address public immutable REMOTE_TOKEN;\\n\\n    /// @notice Address of the StandardBridge on this network.\\n    address public immutable BRIDGE;\\n\\n    /// @notice Decimals of the token\\n    uint8 private immutable DECIMALS;\\n\\n    /// @notice Emitted whenever tokens are minted for an account.\\n    /// @param account Address of the account tokens are being minted for.\\n    /// @param amount  Amount of tokens minted.\\n    event Mint(address indexed account, uint256 amount);\\n\\n    /// @notice Emitted whenever tokens are burned from an account.\\n    /// @param account Address of the account tokens are being burned from.\\n    /// @param amount  Amount of tokens burned.\\n    event Burn(address indexed account, uint256 amount);\\n\\n    /// @notice A modifier that only allows the bridge to call\\n    modifier onlyBridge() {\\n        require(msg.sender == BRIDGE, \\\"FirelinkMintableERC20: only bridge can mint and burn\\\");\\n        _;\\n    }\\n\\n    /// @notice Semantic version.\\n    /// @custom:semver 1.3.0\\n    string public constant version = \\\"1.3.0\\\";\\n\\n    /// @param _bridge      Address of the L2 standard bridge.\\n    /// @param _remoteToken Address of the corresponding L1 token.\\n    /// @param _name        ERC20 name.\\n    /// @param _symbol      ERC20 symbol.\\n    constructor(\\n        address _bridge,\\n        address _remoteToken,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    )\\n        ERC20(_name, _symbol)\\n    {\\n        REMOTE_TOKEN = _remoteToken;\\n        BRIDGE = _bridge;\\n        DECIMALS = _decimals;\\n    }\\n\\n    /// @notice Allows the StandardBridge on this network to mint tokens.\\n    /// @param _to     Address to mint tokens to.\\n    /// @param _amount Amount of tokens to mint.\\n    function mint(\\n        address _to,\\n        uint256 _amount\\n    )\\n        external\\n        virtual\\n        override(IFirelinkMintableERC20, ILegacyMintableERC20)\\n        onlyBridge\\n    {\\n        _mint(_to, _amount);\\n        emit Mint(_to, _amount);\\n    }\\n\\n    /// @notice Allows the StandardBridge on this network to burn tokens.\\n    /// @param _from   Address to burn tokens from.\\n    /// @param _amount Amount of tokens to burn.\\n    function burn(\\n        address _from,\\n        uint256 _amount\\n    )\\n        external\\n        virtual\\n        override(IFirelinkMintableERC20, ILegacyMintableERC20)\\n        onlyBridge\\n    {\\n        _burn(_from, _amount);\\n        emit Burn(_from, _amount);\\n    }\\n\\n    /// @notice ERC165 interface check function.\\n    /// @param _interfaceId Interface ID to check.\\n    /// @return Whether or not the interface is supported by this contract.\\n    function supportsInterface(bytes4 _interfaceId) external pure virtual returns (bool) {\\n        bytes4 iface1 = type(IERC165).interfaceId;\\n        // Interface corresponding to the legacy L2StandardERC20.\\n        bytes4 iface2 = type(ILegacyMintableERC20).interfaceId;\\n        // Interface corresponding to the updated FirelinkMintableERC20 (this contract).\\n        bytes4 iface3 = type(IFirelinkMintableERC20).interfaceId;\\n        return _interfaceId == iface1 || _interfaceId == iface2 || _interfaceId == iface3;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Legacy getter for the remote token. Use REMOTE_TOKEN going forward.\\n    function l1Token() public view returns (address) {\\n        return REMOTE_TOKEN;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Legacy getter for the bridge. Use BRIDGE going forward.\\n    function l2Bridge() public view returns (address) {\\n        return BRIDGE;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Legacy getter for REMOTE_TOKEN.\\n    function remoteToken() public view returns (address) {\\n        return REMOTE_TOKEN;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Legacy getter for BRIDGE.\\n    function bridge() public view returns (address) {\\n        return BRIDGE;\\n    }\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    /// For example, if `decimals` equals `2`, a balance of `505` tokens should\\n    /// be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n    /// NOTE: This information is only used for _display_ purposes: it in\\n    /// no way affects any of the arithmetic of the contract, including\\n    /// {IERC20-balanceOf} and {IERC20-transfer}.\\n    function decimals() public view override returns (uint8) {\\n        return DECIMALS;\\n    }\\n}\",\"keccak256\":\"0x3930fcb35e4187b9ac56b6dba94b03f37334855ea2404ec47da882f4e4eeeaf8\",\"license\":\"MIT\"},\"contracts/IFirelinkMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title IFirelinkMintableERC20\\n/// @notice This interface is available on the FirelinkMintableERC20 contract.\\n///         We declare it as a separate interface so that it can be used in\\n///         custom implementations of FirelinkMintableERC20.\\ninterface IFirelinkMintableERC20 is IERC165 {\\n    function remoteToken() external view returns (address);\\n\\n    function bridge() external returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\\n/// @custom:legacy\\n/// @title ILegacyMintableERC20\\n/// @notice This interface was available on the legacy L2StandardERC20 contract.\\n///         It remains available on the FirelinkMintableERC20 contract for\\n///         backwards compatibility.\\ninterface ILegacyMintableERC20 is IERC165 {\\n    function l1Token() external view returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\",\"keccak256\":\"0x4ecb12ea2815f53df72a7950f3c7e3ed2ceb6d93910bafa766bcbdd2ce003fb5\",\"license\":\"MIT\"},\"contracts/IFlareRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IFlareRelayer {\\n    function requestRelay(address _relayTarget, bytes memory _additionalCalldata, address _sourceToken, uint256 _amount) external;\\n}\",\"keccak256\":\"0x2acb500e21059f9a60e711c852a067bf0507db39c7bb68a31a6ef7f5a18dcb19\",\"license\":\"MIT\"},\"contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice ISemver is a simple contract for ensuring that contracts are\\n///         versioned using semantic versioning.\\ninterface ISemver {\\n    /// @notice Getter for the semantic version of the contract. This is not\\n    ///         meant to be used onchain but instead meant to be used by offchain\\n    ///         tooling.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\",\"keccak256\":\"0xdf1cf1ed1786b5602e713b5450186643005f98205622d2b85e75cdfae721f787\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3209,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":3212,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3878,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":2716,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":2836,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3191,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":3506,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"__gap","offset":0,"slot":"151","type":"t_array(t_uint256)50_storage"},{"astId":5699,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"MESSENGER","offset":0,"slot":"201","type":"t_contract(IFlareRelayer)6864"},{"astId":5702,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"OTHER_BRIDGE","offset":0,"slot":"202","type":"t_contract(FirelinkBridge)6567"},{"astId":5706,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"transactions","offset":0,"slot":"203","type":"t_array(t_struct(TransactionInfo)6377_storage)dyn_storage"},{"astId":5708,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"spacer_0_2_20","offset":0,"slot":"204","type":"t_address"},{"astId":5710,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"spacer_1_0_20","offset":0,"slot":"205","type":"t_address"},{"astId":5716,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"deposits","offset":0,"slot":"206","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":5720,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"__gap","offset":0,"slot":"207","type":"t_array(t_uint256)47_storage"},{"astId":5723,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"ethContract","offset":0,"slot":"254","type":"t_contract(IFirelinkMintableERC20)6827"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_array(t_struct(Event)1500_storage)dyn_storage":{"base":"t_struct(Event)1500_storage","encoding":"dynamic_array","label":"struct EVMTransaction.Event[]","numberOfBytes":"32"},"t_array(t_struct(EventInfo)6367_storage)dyn_storage":{"base":"t_struct(EventInfo)6367_storage","encoding":"dynamic_array","label":"struct FirelinkBridge.EventInfo[]","numberOfBytes":"32"},"t_array(t_struct(TransactionInfo)6377_storage)dyn_storage":{"base":"t_struct(TransactionInfo)6377_storage","encoding":"dynamic_array","label":"struct FirelinkBridge.TransactionInfo[]","numberOfBytes":"32"},"t_array(t_uint256)47_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[47]","numberOfBytes":"1504"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_array(t_uint32)dyn_storage":{"base":"t_uint32","encoding":"dynamic_array","label":"uint32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(FirelinkBridge)6567":{"encoding":"inplace","label":"contract FirelinkBridge","numberOfBytes":"20"},"t_contract(IFirelinkMintableERC20)6827":{"encoding":"inplace","label":"contract IFirelinkMintableERC20","numberOfBytes":"20"},"t_contract(IFlareRelayer)6864":{"encoding":"inplace","label":"contract IFlareRelayer","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(Event)1500_storage":{"encoding":"inplace","label":"struct EVMTransaction.Event","members":[{"astId":1490,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"logIndex","offset":0,"slot":"0","type":"t_uint32"},{"astId":1492,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"emitterAddress","offset":4,"slot":"0","type":"t_address"},{"astId":1495,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"topics","offset":0,"slot":"1","type":"t_array(t_bytes32)dyn_storage"},{"astId":1497,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"data","offset":0,"slot":"2","type":"t_bytes_storage"},{"astId":1499,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"removed","offset":0,"slot":"3","type":"t_bool"}],"numberOfBytes":"128"},"t_struct(EventInfo)6367_storage":{"encoding":"inplace","label":"struct FirelinkBridge.EventInfo","members":[{"astId":6360,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"sender","offset":0,"slot":"0","type":"t_address"},{"astId":6362,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"receiver","offset":0,"slot":"1","type":"t_address"},{"astId":6364,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"value","offset":0,"slot":"2","type":"t_uint256"},{"astId":6366,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"data","offset":0,"slot":"3","type":"t_bytes_storage"}],"numberOfBytes":"128"},"t_struct(Proof)1455_storage":{"encoding":"inplace","label":"struct EVMTransaction.Proof","members":[{"astId":1451,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"merkleProof","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":1454,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"data","offset":0,"slot":"1","type":"t_struct(Response)1448_storage"}],"numberOfBytes":"448"},"t_struct(RequestBody)1467_storage":{"encoding":"inplace","label":"struct EVMTransaction.RequestBody","members":[{"astId":1457,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"transactionHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":1459,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"requiredConfirmations","offset":0,"slot":"1","type":"t_uint16"},{"astId":1461,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"provideInput","offset":2,"slot":"1","type":"t_bool"},{"astId":1463,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"listEvents","offset":3,"slot":"1","type":"t_bool"},{"astId":1466,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"logIndices","offset":0,"slot":"2","type":"t_array(t_uint32)dyn_storage"}],"numberOfBytes":"96"},"t_struct(Response)1448_storage":{"encoding":"inplace","label":"struct EVMTransaction.Response","members":[{"astId":1435,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"attestationType","offset":0,"slot":"0","type":"t_bytes32"},{"astId":1437,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"sourceId","offset":0,"slot":"1","type":"t_bytes32"},{"astId":1439,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"votingRound","offset":0,"slot":"2","type":"t_uint64"},{"astId":1441,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"lowestUsedTimestamp","offset":8,"slot":"2","type":"t_uint64"},{"astId":1444,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"requestBody","offset":0,"slot":"3","type":"t_struct(RequestBody)1467_storage"},{"astId":1447,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"responseBody","offset":0,"slot":"6","type":"t_struct(ResponseBody)1488_storage"}],"numberOfBytes":"416"},"t_struct(ResponseBody)1488_storage":{"encoding":"inplace","label":"struct EVMTransaction.ResponseBody","members":[{"astId":1469,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"blockNumber","offset":0,"slot":"0","type":"t_uint64"},{"astId":1471,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"timestamp","offset":8,"slot":"0","type":"t_uint64"},{"astId":1473,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"sourceAddress","offset":0,"slot":"1","type":"t_address"},{"astId":1475,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"isDeployment","offset":20,"slot":"1","type":"t_bool"},{"astId":1477,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"receivingAddress","offset":0,"slot":"2","type":"t_address"},{"astId":1479,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"value","offset":0,"slot":"3","type":"t_uint256"},{"astId":1481,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"input","offset":0,"slot":"4","type":"t_bytes_storage"},{"astId":1483,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"status","offset":0,"slot":"5","type":"t_uint8"},{"astId":1487,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"events","offset":0,"slot":"6","type":"t_array(t_struct(Event)1500_storage)dyn_storage"}],"numberOfBytes":"224"},"t_struct(TransactionInfo)6377_storage":{"encoding":"inplace","label":"struct FirelinkBridge.TransactionInfo","members":[{"astId":6370,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"originalTransaction","offset":0,"slot":"0","type":"t_struct(Proof)1455_storage"},{"astId":6372,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"eventNumber","offset":0,"slot":"14","type":"t_uint256"},{"astId":6376,"contract":"contracts/FirelinkBridge.sol:FirelinkBridge","label":"eventInfo","offset":0,"slot":"15","type":"t_array(t_struct(EventInfo)6367_storage)dyn_storage"}],"numberOfBytes":"512"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/FirelinkMintableERC20.sol":{"FirelinkMintableERC20":{"abi":[{"inputs":[{"internalType":"address","name":"_bridge","type":"address"},{"internalType":"address","name":"_remoteToken","type":"address"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint8","name":"_decimals","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"BRIDGE","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REMOTE_TOKEN","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bridge","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"l1Token","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"l2Bridge","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"remoteToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Burn(address,uint256)":{"params":{"account":"Address of the account tokens are being burned from.","amount":"Amount of tokens burned."}},"Mint(address,uint256)":{"params":{"account":"Address of the account tokens are being minted for.","amount":"Amount of tokens minted."}}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"bridge()":{"custom:legacy":"@notice Legacy getter for BRIDGE."},"burn(address,uint256)":{"params":{"_amount":"Amount of tokens to burn.","_from":"Address to burn tokens from."}},"constructor":{"params":{"_bridge":"Address of the L2 standard bridge.","_name":"ERC20 name.","_remoteToken":"Address of the corresponding L1 token.","_symbol":"ERC20 symbol."}},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"l1Token()":{"custom:legacy":"@notice Legacy getter for the remote token. Use REMOTE_TOKEN going forward."},"l2Bridge()":{"custom:legacy":"@notice Legacy getter for the bridge. Use BRIDGE going forward."},"mint(address,uint256)":{"params":{"_amount":"Amount of tokens to mint.","_to":"Address to mint tokens to."}},"name()":{"details":"Returns the name of the token."},"remoteToken()":{"custom:legacy":"@notice Legacy getter for REMOTE_TOKEN."},"supportsInterface(bytes4)":{"params":{"_interfaceId":"Interface ID to check."},"returns":{"_0":"Whether or not the interface is supported by this contract."}},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"version":{"custom:semver":"1.3.0"}},"title":"FirelinkMintableERC20","version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":939,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":960,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":901,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60e060405234620003805762001224803803806200001d8162000385565b928339810160a08282031262000380576200003882620003ab565b90602062000048818501620003ab565b60408501519092906001600160401b03908181116200038057826200006f918801620003c0565b91606087015182811162000380576080916200008d918901620003c0565b9601519560ff871687036200038057825182811162000280576003918254916001958684811c9416801562000375575b888510146200035f578190601f9485811162000309575b508890858311600114620002a25760009262000296575b505060001982861b1c191690861b1783555b8051938411620002805760049586548681811c9116801562000275575b82821014620002605783811162000215575b5080928511600114620001a757509383949184926000956200019b575b50501b92600019911b1c19161790555b60805260a05260c052604051610df190816200043382396080518161099d015260a051818181610283015281816105990152610a90015260c051816106e80152f35b01519350388062000149565b92919084601f1981168860005285600020956000905b89838310620001fa5750505010620001df575b50505050811b01905562000159565b01519060f884600019921b161c1916905538808080620001d0565b858701518955909701969485019488935090810190620001bd565b87600052816000208480880160051c82019284891062000256575b0160051c019087905b828110620002495750506200012c565b6000815501879062000239565b9250819262000230565b602288634e487b7160e01b6000525260246000fd5b90607f16906200011a565b634e487b7160e01b600052604160045260246000fd5b015190503880620000eb565b90889350601f19831691876000528a6000209260005b8c828210620002f25750508411620002d9575b505050811b018355620000fd565b015160001983881b60f8161c19169055388080620002cb565b8385015186558c97909501949384019301620002b8565b90915085600052886000208580850160051c8201928b861062000355575b918a91869594930160051c01915b82811062000345575050620000d4565b600081558594508a910162000335565b9250819262000327565b634e487b7160e01b600052602260045260246000fd5b93607f1693620000bd565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200028057604052565b51906001600160a01b03821682036200038057565b919080601f84011215620003805782516001600160401b0381116200028057602090620003f6601f8201601f1916830162000385565b92818452828287010111620003805760005b8181106200041e57508260009394955001015290565b85810183015184820184015282016200040856fe608060408181526004908136101561001657600080fd5b600091823560e01c93846301ffc9a71461091b57508363033964be1461090f57836306fdde031461081c578363095ea7b3146107f357836318160ddd146107d557836323b872dd1461070c578363313ce567146106cf578363395093511461068057836340c10f191461056c57836354fd4d501461050957836370a08231146104d357836395d89b41146103d05783639dc29fac14610256578363a457c2d7146101b057508263a9059cbb14610181578263ae1f6aaf14610176578263c01e1bd61461016b578263d6c0b2c41461016b578263dd62ed3e146101205750508063e78cea92146101175763ee9a31a21461010f575b600080fd5b61010a610a79565b5061010a610a79565b346101675780600319360112610167578060209261013c610a15565b610144610a2b565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50505061010a610986565b50505061010a610a79565b346101675780600319360112610167576020906101a961019f610a15565b6024359033610ae2565b5160018152f35b82346102535782600319360112610253576101c9610a15565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610202576020856101a98585038733610c50565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b90346103cc57806003193601126103cc5761026f610a15565b60243591906001600160a01b03906102aa337f0000000000000000000000000000000000000000000000000000000000000000841614610d52565b1692831561038057838552846020528185205490838210610332575091602091817fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5948688528785520381872055816002540360025585857fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef858451868152a351908152a280f35b608490602084519162461bcd60e51b8352820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152fd5b6020608492519162461bcd60e51b8352820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152fd5b8280fd5b925034610167578160031936011261016757805191809380549160019083821c928285169485156104c9575b60209586861081146104b657858952908115610492575060011461043a575b610436878761042c828c0383610a41565b51918291826109cc565b0390f35b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061047f57505050826104369461042c9282010194388061041b565b8054868501880152928601928101610461565b60ff19168887015250505050151560051b830101925061042c82610436388061041b565b634e487b7160e01b845260228352602484fd5b93607f16936103fc565b50346101675760203660031901126101675760209181906001600160a01b036104fa610a15565b16815280845220549051908152f35b9250346101675781600319360112610167578051918183019083821067ffffffffffffffff83111761055957506104369350815260058252640312e332e360dc1b602083015251918291826109cc565b634e487b7160e01b815260418552602490fd5b90346103cc57806003193601126103cc57610585610a15565b60243591906001600160a01b03906105c0337f0000000000000000000000000000000000000000000000000000000000000000841614610d52565b1692831561063e5750816020916105fa7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688594600254610abf565b60025584865285835280862082815401905584867fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef858451868152a351908152a280f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b50346101675780600319360112610167576101a96020926106c86106a2610a15565b338352600186528483206001600160a01b03821684528652918490205460243590610abf565b9033610c50565b50346101675781600319360112610167576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b82903461016757606036600319011261016757610727610a15565b61072f610a2b565b91846044359460018060a01b038416815260016020528181203382526020522054906000198203610769575b6020866101a9878787610ae2565b8482106107925750918391610787602096956101a995033383610c50565b91939481935061075b565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50346101675781600319360112610167576020906002549051908152f35b50346101675780600319360112610167576020906101a9610812610a15565b6024359033610c50565b90346103cc57826003193601126103cc57805191836003549060019082821c928281168015610905575b60209586861082146108f257508488529081156108d05750600114610877575b610436868661042c828b0383610a41565b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106108bd57505050826104369461042c928201019486610866565b80548685018801529286019281016108a0565b60ff191687860152505050151560051b830101925061042c8261043686610866565b634e487b7160e01b845260229052602483fd5b93607f1693610846565b5050505061010a610986565b9150346103cc5760203660031901126103cc573563ffffffff60e01b81168091036103cc57602092506301ffc9a760e01b8114908115610975575b8115610964575b5015158152f35b63ec4fc8e360e01b1490508361095d565b631d1d8b6360e01b81149150610956565b503461010a57600036600319011261010a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6020808252825181830181905290939260005b828110610a0157505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016109df565b600435906001600160a01b038216820361010a57565b602435906001600160a01b038216820361010a57565b90601f8019910116810190811067ffffffffffffffff821117610a6357604052565b634e487b7160e01b600052604160045260246000fd5b503461010a57600036600319011261010a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b91908201809211610acc57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215610bfd5716918215610bac57600082815280602052604081205491808310610b5857604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610d015716918215610cb15760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b15610d5957565b60405162461bcd60e51b815260206004820152603460248201527f466972656c696e6b4d696e7461626c6545524332303a206f6e6c79206272696460448201527333b29031b0b71036b4b73a1030b73210313ab93760611b6064820152608490fdfea26469706673582212203d74d42d44ec403efbfe643878bec61619046547900a26cf34809b356ac3eb3f64736f6c63430008110033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x380 JUMPI PUSH3 0x1224 DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x385 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD PUSH1 0xA0 DUP3 DUP3 SUB SLT PUSH3 0x380 JUMPI PUSH3 0x38 DUP3 PUSH3 0x3AB JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH3 0x48 DUP2 DUP6 ADD PUSH3 0x3AB JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH3 0x380 JUMPI DUP3 PUSH3 0x6F SWAP2 DUP9 ADD PUSH3 0x3C0 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP8 ADD MLOAD DUP3 DUP2 GT PUSH3 0x380 JUMPI PUSH1 0x80 SWAP2 PUSH3 0x8D SWAP2 DUP10 ADD PUSH3 0x3C0 JUMP JUMPDEST SWAP7 ADD MLOAD SWAP6 PUSH1 0xFF DUP8 AND DUP8 SUB PUSH3 0x380 JUMPI DUP3 MLOAD DUP3 DUP2 GT PUSH3 0x280 JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x1 SWAP6 DUP7 DUP5 DUP2 SHR SWAP5 AND DUP1 ISZERO PUSH3 0x375 JUMPI JUMPDEST DUP9 DUP6 LT EQ PUSH3 0x35F JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP5 DUP6 DUP2 GT PUSH3 0x309 JUMPI JUMPDEST POP DUP9 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH3 0x2A2 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x296 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP4 SSTORE JUMPDEST DUP1 MLOAD SWAP4 DUP5 GT PUSH3 0x280 JUMPI PUSH1 0x4 SWAP6 DUP7 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x275 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x260 JUMPI DUP4 DUP2 GT PUSH3 0x215 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x1A7 JUMPI POP SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x19B JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xC0 MSTORE PUSH1 0x40 MLOAD PUSH2 0xDF1 SWAP1 DUP2 PUSH3 0x433 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x99D ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x283 ADD MSTORE DUP2 DUP2 PUSH2 0x599 ADD MSTORE PUSH2 0xA90 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 PUSH2 0x6E8 ADD MSTORE RETURN JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x149 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND DUP9 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH3 0x1FA JUMPI POP POP POP LT PUSH3 0x1DF JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x159 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x1D0 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x1BD JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP5 DUP10 LT PUSH3 0x256 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP8 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x249 JUMPI POP POP PUSH3 0x12C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP8 SWAP1 PUSH3 0x239 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x230 JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x11A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xEB JUMP JUMPDEST SWAP1 DUP9 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP8 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0x2F2 JUMPI POP POP DUP5 GT PUSH3 0x2D9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0xFD JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x2CB JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x2B8 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 PUSH1 0x0 MSTORE DUP9 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH3 0x355 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x345 JUMPI POP POP PUSH3 0xD4 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH3 0x335 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x327 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH3 0xBD JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x280 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x380 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH3 0x380 JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x280 JUMPI PUSH1 0x20 SWAP1 PUSH3 0x3F6 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x385 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE DUP3 DUP3 DUP8 ADD ADD GT PUSH3 0x380 JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH3 0x41E JUMPI POP DUP3 PUSH1 0x0 SWAP4 SWAP5 SWAP6 POP ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP6 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x408 JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP4 DUP5 PUSH4 0x1FFC9A7 EQ PUSH2 0x91B JUMPI POP DUP4 PUSH4 0x33964BE EQ PUSH2 0x90F JUMPI DUP4 PUSH4 0x6FDDE03 EQ PUSH2 0x81C JUMPI DUP4 PUSH4 0x95EA7B3 EQ PUSH2 0x7F3 JUMPI DUP4 PUSH4 0x18160DDD EQ PUSH2 0x7D5 JUMPI DUP4 PUSH4 0x23B872DD EQ PUSH2 0x70C JUMPI DUP4 PUSH4 0x313CE567 EQ PUSH2 0x6CF JUMPI DUP4 PUSH4 0x39509351 EQ PUSH2 0x680 JUMPI DUP4 PUSH4 0x40C10F19 EQ PUSH2 0x56C JUMPI DUP4 PUSH4 0x54FD4D50 EQ PUSH2 0x509 JUMPI DUP4 PUSH4 0x70A08231 EQ PUSH2 0x4D3 JUMPI DUP4 PUSH4 0x95D89B41 EQ PUSH2 0x3D0 JUMPI DUP4 PUSH4 0x9DC29FAC EQ PUSH2 0x256 JUMPI DUP4 PUSH4 0xA457C2D7 EQ PUSH2 0x1B0 JUMPI POP DUP3 PUSH4 0xA9059CBB EQ PUSH2 0x181 JUMPI DUP3 PUSH4 0xAE1F6AAF EQ PUSH2 0x176 JUMPI DUP3 PUSH4 0xC01E1BD6 EQ PUSH2 0x16B JUMPI DUP3 PUSH4 0xD6C0B2C4 EQ PUSH2 0x16B JUMPI DUP3 PUSH4 0xDD62ED3E EQ PUSH2 0x120 JUMPI POP POP DUP1 PUSH4 0xE78CEA92 EQ PUSH2 0x117 JUMPI PUSH4 0xEE9A31A2 EQ PUSH2 0x10F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10A PUSH2 0xA79 JUMP JUMPDEST POP PUSH2 0x10A PUSH2 0xA79 JUMP JUMPDEST CALLVALUE PUSH2 0x167 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0x13C PUSH2 0xA15 JUMP JUMPDEST PUSH2 0x144 PUSH2 0xA2B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP POP PUSH2 0x10A PUSH2 0x986 JUMP JUMPDEST POP POP POP PUSH2 0x10A PUSH2 0xA79 JUMP JUMPDEST CALLVALUE PUSH2 0x167 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x1A9 PUSH2 0x19F PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0xAE2 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x253 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x253 JUMPI PUSH2 0x1C9 PUSH2 0xA15 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x202 JUMPI PUSH1 0x20 DUP6 PUSH2 0x1A9 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP1 CALLVALUE PUSH2 0x3CC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3CC JUMPI PUSH2 0x26F PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x2AA CALLER PUSH32 0x0 DUP5 AND EQ PUSH2 0xD52 JUMP JUMPDEST AND SWAP3 DUP4 ISZERO PUSH2 0x380 JUMPI DUP4 DUP6 MSTORE DUP5 PUSH1 0x20 MSTORE DUP2 DUP6 KECCAK256 SLOAD SWAP1 DUP4 DUP3 LT PUSH2 0x332 JUMPI POP SWAP2 PUSH1 0x20 SWAP2 DUP2 PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 SWAP5 DUP7 DUP9 MSTORE DUP8 DUP6 MSTORE SUB DUP2 DUP8 KECCAK256 SSTORE DUP2 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE DUP6 DUP6 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 DUP5 MLOAD DUP7 DUP2 MSTORE LOG3 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST SWAP3 POP CALLVALUE PUSH2 0x167 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI DUP1 MLOAD SWAP2 DUP1 SWAP4 DUP1 SLOAD SWAP2 PUSH1 0x1 SWAP1 DUP4 DUP3 SHR SWAP3 DUP3 DUP6 AND SWAP5 DUP6 ISZERO PUSH2 0x4C9 JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP7 LT DUP2 EQ PUSH2 0x4B6 JUMPI DUP6 DUP10 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x492 JUMPI POP PUSH1 0x1 EQ PUSH2 0x43A JUMPI JUMPDEST PUSH2 0x436 DUP8 DUP8 PUSH2 0x42C DUP3 DUP13 SUB DUP4 PUSH2 0xA41 JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x9CC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP2 MSTORE SWAP3 SWAP6 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x47F JUMPI POP POP POP DUP3 PUSH2 0x436 SWAP5 PUSH2 0x42C SWAP3 DUP3 ADD ADD SWAP5 CODESIZE DUP1 PUSH2 0x41B JUMP JUMPDEST DUP1 SLOAD DUP7 DUP6 ADD DUP9 ADD MSTORE SWAP3 DUP7 ADD SWAP3 DUP2 ADD PUSH2 0x461 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP9 DUP8 ADD MSTORE POP POP POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP3 POP PUSH2 0x42C DUP3 PUSH2 0x436 CODESIZE DUP1 PUSH2 0x41B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x22 DUP4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x3FC JUMP JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4FA PUSH2 0xA15 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP3 POP CALLVALUE PUSH2 0x167 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI DUP1 MLOAD SWAP2 DUP2 DUP4 ADD SWAP1 DUP4 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x559 JUMPI POP PUSH2 0x436 SWAP4 POP DUP2 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH5 0x312E332E3 PUSH1 0xDC SHL PUSH1 0x20 DUP4 ADD MSTORE MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x9CC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP1 CALLVALUE PUSH2 0x3CC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3CC JUMPI PUSH2 0x585 PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x5C0 CALLER PUSH32 0x0 DUP5 AND EQ PUSH2 0xD52 JUMP JUMPDEST AND SWAP3 DUP4 ISZERO PUSH2 0x63E JUMPI POP DUP2 PUSH1 0x20 SWAP2 PUSH2 0x5FA PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 SWAP5 PUSH1 0x2 SLOAD PUSH2 0xABF JUMP JUMPDEST PUSH1 0x2 SSTORE DUP5 DUP7 MSTORE DUP6 DUP4 MSTORE DUP1 DUP7 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE DUP5 DUP7 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 DUP5 MLOAD DUP7 DUP2 MSTORE LOG3 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH2 0x1A9 PUSH1 0x20 SWAP3 PUSH2 0x6C8 PUSH2 0x6A2 PUSH2 0xA15 JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE DUP7 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xABF JUMP JUMPDEST SWAP1 CALLER PUSH2 0xC50 JUMP JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST DUP3 SWAP1 CALLVALUE PUSH2 0x167 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x167 JUMPI PUSH2 0x727 PUSH2 0xA15 JUMP JUMPDEST PUSH2 0x72F PUSH2 0xA2B JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x769 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x1A9 DUP8 DUP8 DUP8 PUSH2 0xAE2 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x792 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x787 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x1A9 SWAP6 SUB CALLER DUP4 PUSH2 0xC50 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x75B JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x1A9 PUSH2 0x812 PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0xC50 JUMP JUMPDEST SWAP1 CALLVALUE PUSH2 0x3CC JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3CC JUMPI DUP1 MLOAD SWAP2 DUP4 PUSH1 0x3 SLOAD SWAP1 PUSH1 0x1 SWAP1 DUP3 DUP3 SHR SWAP3 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x905 JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP7 LT DUP3 EQ PUSH2 0x8F2 JUMPI POP DUP5 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x8D0 JUMPI POP PUSH1 0x1 EQ PUSH2 0x877 JUMPI JUMPDEST PUSH2 0x436 DUP7 DUP7 PUSH2 0x42C DUP3 DUP12 SUB DUP4 PUSH2 0xA41 JUMP JUMPDEST SWAP3 SWAP6 POP PUSH1 0x3 DUP4 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x8BD JUMPI POP POP POP DUP3 PUSH2 0x436 SWAP5 PUSH2 0x42C SWAP3 DUP3 ADD ADD SWAP5 DUP7 PUSH2 0x866 JUMP JUMPDEST DUP1 SLOAD DUP7 DUP6 ADD DUP9 ADD MSTORE SWAP3 DUP7 ADD SWAP3 DUP2 ADD PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP7 ADD MSTORE POP POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP3 POP PUSH2 0x42C DUP3 PUSH2 0x436 DUP7 PUSH2 0x866 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x22 SWAP1 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x846 JUMP JUMPDEST POP POP POP POP PUSH2 0x10A PUSH2 0x986 JUMP JUMPDEST SWAP2 POP CALLVALUE PUSH2 0x3CC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3CC JUMPI CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x3CC JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x975 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x964 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0xEC4FC8E3 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0x95D JUMP JUMPDEST PUSH4 0x1D1D8B63 PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x956 JUMP JUMPDEST POP CALLVALUE PUSH2 0x10A JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10A JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0xA01 JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x9DF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x10A JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x10A JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA63 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10A JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10A JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xACC JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xBFD JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xBAC JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0xB58 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xD01 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xD59 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4D696E7461626C6545524332303A206F6E6C792062726964 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x33B29031B0B71036B4B73A1030B73210313AB937 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE PUSH21 0xD42D44EC403EFBFE643878BEC61619046547900A26 0xCF CALLVALUE DUP1 SWAP12 CALLDATALOAD PUSH11 0xC3EB3F64736F6C63430008 GT STOP CALLER ","sourceMap":"810:4510:53:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;810:4510:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2046:13:43;810:4510:53;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;-1:-1:-1;810:4510:53;;;;-1:-1:-1;;;;810:4510:53;;;;;;;;;;;;;;;;;;;;2069:17:43;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;;;;;2447:27;810:4510;2484:16;2510:20;;810:4510;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2510:20;810:4510;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;-1:-1:-1;810:4510:53;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;-1:-1:-1;810:4510:53;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;-1:-1:-1;810:4510:53;;2069:17:43;810:4510:53;;-1:-1:-1;810:4510:53;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;-1:-1:-1;810:4510:53;;-1:-1:-1;810:4510:53;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;-1:-1:-1;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;-1:-1:-1;810:4510:53;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;-1:-1:-1;;810:4510:53;;;-1:-1:-1;;;;;810:4510:53;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;810:4510:53;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;810:4510:53;;;;;;;;;;-1:-1:-1;;810:4510:53;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":2603,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_8379":{"entryPoint":2581,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_string":{"entryPoint":2508,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint256":{"entryPoint":2751,"id":null,"parameterSlots":2,"returnSlots":1},"external_fun_REMOTE_TOKEN":{"entryPoint":2438,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_l2Bridge":{"entryPoint":2681,"id":null,"parameterSlots":0,"returnSlots":0},"finalize_allocation":{"entryPoint":2625,"id":null,"parameterSlots":2,"returnSlots":0},"fun_approve":{"entryPoint":3152,"id":4510,"parameterSlots":3,"returnSlots":0},"fun_transfer":{"entryPoint":2786,"id":4336,"parameterSlots":3,"returnSlots":0},"require_helper_stringliteral":{"entryPoint":3410,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"6590":[{"length":32,"start":2461}],"6593":[{"length":32,"start":643},{"length":32,"start":1433},{"length":32,"start":2704}],"6596":[{"length":32,"start":1768}]},"linkReferences":{},"object":"608060408181526004908136101561001657600080fd5b600091823560e01c93846301ffc9a71461091b57508363033964be1461090f57836306fdde031461081c578363095ea7b3146107f357836318160ddd146107d557836323b872dd1461070c578363313ce567146106cf578363395093511461068057836340c10f191461056c57836354fd4d501461050957836370a08231146104d357836395d89b41146103d05783639dc29fac14610256578363a457c2d7146101b057508263a9059cbb14610181578263ae1f6aaf14610176578263c01e1bd61461016b578263d6c0b2c41461016b578263dd62ed3e146101205750508063e78cea92146101175763ee9a31a21461010f575b600080fd5b61010a610a79565b5061010a610a79565b346101675780600319360112610167578060209261013c610a15565b610144610a2b565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50505061010a610986565b50505061010a610a79565b346101675780600319360112610167576020906101a961019f610a15565b6024359033610ae2565b5160018152f35b82346102535782600319360112610253576101c9610a15565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610202576020856101a98585038733610c50565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b90346103cc57806003193601126103cc5761026f610a15565b60243591906001600160a01b03906102aa337f0000000000000000000000000000000000000000000000000000000000000000841614610d52565b1692831561038057838552846020528185205490838210610332575091602091817fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5948688528785520381872055816002540360025585857fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef858451868152a351908152a280f35b608490602084519162461bcd60e51b8352820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152fd5b6020608492519162461bcd60e51b8352820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152fd5b8280fd5b925034610167578160031936011261016757805191809380549160019083821c928285169485156104c9575b60209586861081146104b657858952908115610492575060011461043a575b610436878761042c828c0383610a41565b51918291826109cc565b0390f35b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061047f57505050826104369461042c9282010194388061041b565b8054868501880152928601928101610461565b60ff19168887015250505050151560051b830101925061042c82610436388061041b565b634e487b7160e01b845260228352602484fd5b93607f16936103fc565b50346101675760203660031901126101675760209181906001600160a01b036104fa610a15565b16815280845220549051908152f35b9250346101675781600319360112610167578051918183019083821067ffffffffffffffff83111761055957506104369350815260058252640312e332e360dc1b602083015251918291826109cc565b634e487b7160e01b815260418552602490fd5b90346103cc57806003193601126103cc57610585610a15565b60243591906001600160a01b03906105c0337f0000000000000000000000000000000000000000000000000000000000000000841614610d52565b1692831561063e5750816020916105fa7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688594600254610abf565b60025584865285835280862082815401905584867fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef858451868152a351908152a280f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b50346101675780600319360112610167576101a96020926106c86106a2610a15565b338352600186528483206001600160a01b03821684528652918490205460243590610abf565b9033610c50565b50346101675781600319360112610167576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b82903461016757606036600319011261016757610727610a15565b61072f610a2b565b91846044359460018060a01b038416815260016020528181203382526020522054906000198203610769575b6020866101a9878787610ae2565b8482106107925750918391610787602096956101a995033383610c50565b91939481935061075b565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50346101675781600319360112610167576020906002549051908152f35b50346101675780600319360112610167576020906101a9610812610a15565b6024359033610c50565b90346103cc57826003193601126103cc57805191836003549060019082821c928281168015610905575b60209586861082146108f257508488529081156108d05750600114610877575b610436868661042c828b0383610a41565b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106108bd57505050826104369461042c928201019486610866565b80548685018801529286019281016108a0565b60ff191687860152505050151560051b830101925061042c8261043686610866565b634e487b7160e01b845260229052602483fd5b93607f1693610846565b5050505061010a610986565b9150346103cc5760203660031901126103cc573563ffffffff60e01b81168091036103cc57602092506301ffc9a760e01b8114908115610975575b8115610964575b5015158152f35b63ec4fc8e360e01b1490508361095d565b631d1d8b6360e01b81149150610956565b503461010a57600036600319011261010a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6020808252825181830181905290939260005b828110610a0157505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016109df565b600435906001600160a01b038216820361010a57565b602435906001600160a01b038216820361010a57565b90601f8019910116810190811067ffffffffffffffff821117610a6357604052565b634e487b7160e01b600052604160045260246000fd5b503461010a57600036600319011261010a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b91908201809211610acc57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215610bfd5716918215610bac57600082815280602052604081205491808310610b5857604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610d015716918215610cb15760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b15610d5957565b60405162461bcd60e51b815260206004820152603460248201527f466972656c696e6b4d696e7461626c6545524332303a206f6e6c79206272696460448201527333b29031b0b71036b4b73a1030b73210313ab93760611b6064820152608490fdfea26469706673582212203d74d42d44ec403efbfe643878bec61619046547900a26cf34809b356ac3eb3f64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP4 DUP5 PUSH4 0x1FFC9A7 EQ PUSH2 0x91B JUMPI POP DUP4 PUSH4 0x33964BE EQ PUSH2 0x90F JUMPI DUP4 PUSH4 0x6FDDE03 EQ PUSH2 0x81C JUMPI DUP4 PUSH4 0x95EA7B3 EQ PUSH2 0x7F3 JUMPI DUP4 PUSH4 0x18160DDD EQ PUSH2 0x7D5 JUMPI DUP4 PUSH4 0x23B872DD EQ PUSH2 0x70C JUMPI DUP4 PUSH4 0x313CE567 EQ PUSH2 0x6CF JUMPI DUP4 PUSH4 0x39509351 EQ PUSH2 0x680 JUMPI DUP4 PUSH4 0x40C10F19 EQ PUSH2 0x56C JUMPI DUP4 PUSH4 0x54FD4D50 EQ PUSH2 0x509 JUMPI DUP4 PUSH4 0x70A08231 EQ PUSH2 0x4D3 JUMPI DUP4 PUSH4 0x95D89B41 EQ PUSH2 0x3D0 JUMPI DUP4 PUSH4 0x9DC29FAC EQ PUSH2 0x256 JUMPI DUP4 PUSH4 0xA457C2D7 EQ PUSH2 0x1B0 JUMPI POP DUP3 PUSH4 0xA9059CBB EQ PUSH2 0x181 JUMPI DUP3 PUSH4 0xAE1F6AAF EQ PUSH2 0x176 JUMPI DUP3 PUSH4 0xC01E1BD6 EQ PUSH2 0x16B JUMPI DUP3 PUSH4 0xD6C0B2C4 EQ PUSH2 0x16B JUMPI DUP3 PUSH4 0xDD62ED3E EQ PUSH2 0x120 JUMPI POP POP DUP1 PUSH4 0xE78CEA92 EQ PUSH2 0x117 JUMPI PUSH4 0xEE9A31A2 EQ PUSH2 0x10F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10A PUSH2 0xA79 JUMP JUMPDEST POP PUSH2 0x10A PUSH2 0xA79 JUMP JUMPDEST CALLVALUE PUSH2 0x167 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0x13C PUSH2 0xA15 JUMP JUMPDEST PUSH2 0x144 PUSH2 0xA2B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP POP PUSH2 0x10A PUSH2 0x986 JUMP JUMPDEST POP POP POP PUSH2 0x10A PUSH2 0xA79 JUMP JUMPDEST CALLVALUE PUSH2 0x167 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x1A9 PUSH2 0x19F PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0xAE2 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x253 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x253 JUMPI PUSH2 0x1C9 PUSH2 0xA15 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x202 JUMPI PUSH1 0x20 DUP6 PUSH2 0x1A9 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP1 CALLVALUE PUSH2 0x3CC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3CC JUMPI PUSH2 0x26F PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x2AA CALLER PUSH32 0x0 DUP5 AND EQ PUSH2 0xD52 JUMP JUMPDEST AND SWAP3 DUP4 ISZERO PUSH2 0x380 JUMPI DUP4 DUP6 MSTORE DUP5 PUSH1 0x20 MSTORE DUP2 DUP6 KECCAK256 SLOAD SWAP1 DUP4 DUP3 LT PUSH2 0x332 JUMPI POP SWAP2 PUSH1 0x20 SWAP2 DUP2 PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 SWAP5 DUP7 DUP9 MSTORE DUP8 DUP6 MSTORE SUB DUP2 DUP8 KECCAK256 SSTORE DUP2 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE DUP6 DUP6 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 DUP5 MLOAD DUP7 DUP2 MSTORE LOG3 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST SWAP3 POP CALLVALUE PUSH2 0x167 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI DUP1 MLOAD SWAP2 DUP1 SWAP4 DUP1 SLOAD SWAP2 PUSH1 0x1 SWAP1 DUP4 DUP3 SHR SWAP3 DUP3 DUP6 AND SWAP5 DUP6 ISZERO PUSH2 0x4C9 JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP7 LT DUP2 EQ PUSH2 0x4B6 JUMPI DUP6 DUP10 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x492 JUMPI POP PUSH1 0x1 EQ PUSH2 0x43A JUMPI JUMPDEST PUSH2 0x436 DUP8 DUP8 PUSH2 0x42C DUP3 DUP13 SUB DUP4 PUSH2 0xA41 JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x9CC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP2 MSTORE SWAP3 SWAP6 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x47F JUMPI POP POP POP DUP3 PUSH2 0x436 SWAP5 PUSH2 0x42C SWAP3 DUP3 ADD ADD SWAP5 CODESIZE DUP1 PUSH2 0x41B JUMP JUMPDEST DUP1 SLOAD DUP7 DUP6 ADD DUP9 ADD MSTORE SWAP3 DUP7 ADD SWAP3 DUP2 ADD PUSH2 0x461 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP9 DUP8 ADD MSTORE POP POP POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP3 POP PUSH2 0x42C DUP3 PUSH2 0x436 CODESIZE DUP1 PUSH2 0x41B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x22 DUP4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x3FC JUMP JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4FA PUSH2 0xA15 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP3 POP CALLVALUE PUSH2 0x167 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI DUP1 MLOAD SWAP2 DUP2 DUP4 ADD SWAP1 DUP4 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x559 JUMPI POP PUSH2 0x436 SWAP4 POP DUP2 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH5 0x312E332E3 PUSH1 0xDC SHL PUSH1 0x20 DUP4 ADD MSTORE MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x9CC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP1 CALLVALUE PUSH2 0x3CC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3CC JUMPI PUSH2 0x585 PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x5C0 CALLER PUSH32 0x0 DUP5 AND EQ PUSH2 0xD52 JUMP JUMPDEST AND SWAP3 DUP4 ISZERO PUSH2 0x63E JUMPI POP DUP2 PUSH1 0x20 SWAP2 PUSH2 0x5FA PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 SWAP5 PUSH1 0x2 SLOAD PUSH2 0xABF JUMP JUMPDEST PUSH1 0x2 SSTORE DUP5 DUP7 MSTORE DUP6 DUP4 MSTORE DUP1 DUP7 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE DUP5 DUP7 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 DUP5 MLOAD DUP7 DUP2 MSTORE LOG3 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH2 0x1A9 PUSH1 0x20 SWAP3 PUSH2 0x6C8 PUSH2 0x6A2 PUSH2 0xA15 JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE DUP7 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xABF JUMP JUMPDEST SWAP1 CALLER PUSH2 0xC50 JUMP JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST DUP3 SWAP1 CALLVALUE PUSH2 0x167 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x167 JUMPI PUSH2 0x727 PUSH2 0xA15 JUMP JUMPDEST PUSH2 0x72F PUSH2 0xA2B JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x769 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x1A9 DUP8 DUP8 DUP8 PUSH2 0xAE2 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x792 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x787 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x1A9 SWAP6 SUB CALLER DUP4 PUSH2 0xC50 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x75B JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x167 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x167 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x1A9 PUSH2 0x812 PUSH2 0xA15 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0xC50 JUMP JUMPDEST SWAP1 CALLVALUE PUSH2 0x3CC JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3CC JUMPI DUP1 MLOAD SWAP2 DUP4 PUSH1 0x3 SLOAD SWAP1 PUSH1 0x1 SWAP1 DUP3 DUP3 SHR SWAP3 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x905 JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP7 LT DUP3 EQ PUSH2 0x8F2 JUMPI POP DUP5 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x8D0 JUMPI POP PUSH1 0x1 EQ PUSH2 0x877 JUMPI JUMPDEST PUSH2 0x436 DUP7 DUP7 PUSH2 0x42C DUP3 DUP12 SUB DUP4 PUSH2 0xA41 JUMP JUMPDEST SWAP3 SWAP6 POP PUSH1 0x3 DUP4 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x8BD JUMPI POP POP POP DUP3 PUSH2 0x436 SWAP5 PUSH2 0x42C SWAP3 DUP3 ADD ADD SWAP5 DUP7 PUSH2 0x866 JUMP JUMPDEST DUP1 SLOAD DUP7 DUP6 ADD DUP9 ADD MSTORE SWAP3 DUP7 ADD SWAP3 DUP2 ADD PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP7 ADD MSTORE POP POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP3 POP PUSH2 0x42C DUP3 PUSH2 0x436 DUP7 PUSH2 0x866 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x22 SWAP1 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x846 JUMP JUMPDEST POP POP POP POP PUSH2 0x10A PUSH2 0x986 JUMP JUMPDEST SWAP2 POP CALLVALUE PUSH2 0x3CC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3CC JUMPI CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x3CC JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x975 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x964 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0xEC4FC8E3 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0x95D JUMP JUMPDEST PUSH4 0x1D1D8B63 PUSH1 0xE0 SHL DUP2 EQ SWAP2 POP PUSH2 0x956 JUMP JUMPDEST POP CALLVALUE PUSH2 0x10A JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10A JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0xA01 JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x9DF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x10A JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x10A JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA63 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10A JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10A JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xACC JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xBFD JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xBAC JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0xB58 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xD01 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xD59 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972656C696E6B4D696E7461626C6545524332303A206F6E6C792062726964 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x33B29031B0B71036B4B73A1030B73210313AB937 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE PUSH21 0xD42D44EC403EFBFE643878BEC61619046547900A26 0xCF CALLVALUE DUP1 SWAP12 CALLDATALOAD PUSH11 0xC3EB3F64736F6C63430008 GT STOP CALLER ","sourceMap":"810:4510:53:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;3894:6:43;810:4510:53;;:::i;:::-;;;734:10:49;;3894:6:43;:::i;:::-;810:4510:53;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;734:10:49;;810:4510:53;;;;;;;;;;;;;;;;;;;;;6792:35:43;;;;810:4510:53;;;;6928:34:43;810:4510:53;;;;734:10:49;6928:34:43;:::i;810:4510:53:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;810:4510:53;1814:85;1822:10;1836:6;810:4510;;1822:20;1814:85;:::i;:::-;810:4510;9458:21:43;;;810:4510:53;;;;;;;;;;;;9649:24:43;;;;810:4510:53;;;;;;;3384:20;810:4510;;;;;;;;;;;;;9883:22:43;810:4510:53;;9883:22:43;810:4510:53;;;9931:37:43;810:4510:53;;;;;;9931:37:43;810:4510:53;;;;3384:20;810:4510;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;810:4510:53;;;;;-1:-1:-1;;;;810:4510:53;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;810:4510:53;;;;;;;;-1:-1:-1;;;;;810:4510:53;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;:::i;:::-;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;810:4510:53;1814:85;1822:10;1836:6;810:4510;;1822:20;1814:85;:::i;:::-;810:4510;8603:21:43;;;810:4510:53;;;;;;8731:22:43;2945:18:53;810:4510;8731:22:43;810:4510:53;8731:22:43;:::i;:::-;;810:4510:53;;;;;;;;;;;;;;;;;;8952:37:43;810:4510:53;;;;;;8952:37:43;810:4510:53;;;;2945:18;810:4510;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6021:38:43;810:4510:53;;6021:38:43;810:4510:53;;:::i;:::-;734:10:49;810:4510:53;;;;;;;;-1:-1:-1;;;;;810:4510:53;;;;;;;;;;;;;;6021:38:43;:::i;:::-;734:10:49;;6021:38:43;:::i;810:4510:53:-;;;;;;;;;;;;;;;;;5303:8;810:4510;;;;;;;;;;;;-1:-1:-1;;810:4510:53;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;734:10:49;810:4510:53;;;;;;11264:17:43;;;11244:37;;11240:243;;810:4510:53;;5424:6:43;;;;;;:::i;11240:243::-;11305:26;;;810:4510:53;;;;;;11432:25:43;810:4510:53;;;5424:6:43;810:4510:53;;734:10:49;11432:25:43;;:::i;:::-;11240:243;;;;;;;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3342:12:43;810:4510:53;;;;;;;;;;;;;;;;;;;;;;4606:6:43;810:4510:53;;:::i;:::-;;;734:10:49;;4606:6:43;:::i;810:4510:53:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;810:4510:53;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;810:4510:53;;;;;;;;;;;;;;;;;-1:-1:-1;;;;4031:22:53;;;:48;;;;810:4510;4031:74;;;;810:4510;;;;;;;4031:74;-1:-1:-1;;;4083:22:53;;-1:-1:-1;4031:74:53;;;:48;-1:-1:-1;;;4057:22:53;;;-1:-1:-1;4031:48:53;;810:4510;;;;;;;-1:-1:-1;;810:4510:53;;;;;;999:37;-1:-1:-1;;;;;810:4510:53;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;810:4510:53;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;810:4510:53;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;810:4510:53;;;;;;4478:6;-1:-1:-1;;;;;810:4510:53;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;7456:788:43;-1:-1:-1;;;;;810:4510:53;;;;7552:18:43;;810:4510:53;;;7630:16:43;;;810:4510:53;;7568:1:43;810:4510:53;;;;;;;;;;7801:21:43;;;;810:4510:53;;;;;8163:26:43;810:4510:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26:43;7456:788::o;810:4510:53:-;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;10457:340:43;-1:-1:-1;;;;;810:4510:53;;;;10558:19:43;;810:4510:53;;;10636:21:43;;;810:4510:53;;;10758:32:43;810:4510:53;;10575:1:43;810:4510:53;;;;;10575:1:43;810:4510:53;;10575:1:43;810:4510:53;;;;;10575:1:43;810:4510:53;;;;;;;10758:32:43;10457:340::o;810:4510:53:-;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;810:4510:53;;;;;;;;;;;;;;;;;-1:-1:-1;;;810:4510:53;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"713800","executionCost":"infinite","totalCost":"infinite"},"external":{"BRIDGE()":"infinite","REMOTE_TOKEN()":"infinite","allowance(address,address)":"2967","approve(address,uint256)":"24429","balanceOf(address)":"2649","bridge()":"infinite","burn(address,uint256)":"infinite","decimals()":"infinite","decreaseAllowance(address,uint256)":"26933","increaseAllowance(address,uint256)":"26827","l1Token()":"infinite","l2Bridge()":"infinite","mint(address,uint256)":"infinite","name()":"infinite","remoteToken()":"infinite","supportsInterface(bytes4)":"339","symbol()":"infinite","totalSupply()":"2366","transfer(address,uint256)":"51074","transferFrom(address,address,uint256)":"77427","version()":"infinite"}},"methodIdentifiers":{"BRIDGE()":"ee9a31a2","REMOTE_TOKEN()":"033964be","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","bridge()":"e78cea92","burn(address,uint256)":"9dc29fac","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","l1Token()":"c01e1bd6","l2Bridge()":"ae1f6aaf","mint(address,uint256)":"40c10f19","name()":"06fdde03","remoteToken()":"d6c0b2c4","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOTE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Burn(address,uint256)\":{\"params\":{\"account\":\"Address of the account tokens are being burned from.\",\"amount\":\"Amount of tokens burned.\"}},\"Mint(address,uint256)\":{\"params\":{\"account\":\"Address of the account tokens are being minted for.\",\"amount\":\"Amount of tokens minted.\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"bridge()\":{\"custom:legacy\":\"@notice Legacy getter for BRIDGE.\"},\"burn(address,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to burn.\",\"_from\":\"Address to burn tokens from.\"}},\"constructor\":{\"params\":{\"_bridge\":\"Address of the L2 standard bridge.\",\"_name\":\"ERC20 name.\",\"_remoteToken\":\"Address of the corresponding L1 token.\",\"_symbol\":\"ERC20 symbol.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"l1Token()\":{\"custom:legacy\":\"@notice Legacy getter for the remote token. Use REMOTE_TOKEN going forward.\"},\"l2Bridge()\":{\"custom:legacy\":\"@notice Legacy getter for the bridge. Use BRIDGE going forward.\"},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to mint.\",\"_to\":\"Address to mint tokens to.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"remoteToken()\":{\"custom:legacy\":\"@notice Legacy getter for REMOTE_TOKEN.\"},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"Interface ID to check.\"},\"returns\":{\"_0\":\"Whether or not the interface is supported by this contract.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"version\":{\"custom:semver\":\"1.3.0\"}},\"title\":\"FirelinkMintableERC20\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,uint256)\":{\"notice\":\"Emitted whenever tokens are burned from an account.\"},\"Mint(address,uint256)\":{\"notice\":\"Emitted whenever tokens are minted for an account.\"}},\"kind\":\"user\",\"methods\":{\"BRIDGE()\":{\"notice\":\"Address of the StandardBridge on this network.\"},\"REMOTE_TOKEN()\":{\"notice\":\"Address of the corresponding version of this token on the remote chain.\"},\"burn(address,uint256)\":{\"notice\":\"Allows the StandardBridge on this network to burn tokens.\"},\"mint(address,uint256)\":{\"notice\":\"Allows the StandardBridge on this network to mint tokens.\"},\"supportsInterface(bytes4)\":{\"notice\":\"ERC165 interface check function.\"},\"version()\":{\"notice\":\"Semantic version.\"}},\"notice\":\"FirelinkMintableERC20 is a standard extension of the base ERC20 token contract designed         to allow the StandardBridge contracts to mint and burn tokens. This makes it possible to         use an FirelinkMintableRC20 as the L2 representation of an L1 token, or vice-versa.         Designed to be backwards compatible with the older StandardL2ERC20 token which was only         meant for use on L2.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FirelinkMintableERC20.sol\":\"FirelinkMintableERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/FirelinkMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { ILegacyMintableERC20, IFirelinkMintableERC20 } from \\\"./IFirelinkMintableERC20.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\n/// @title FirelinkMintableERC20\\n/// @notice FirelinkMintableERC20 is a standard extension of the base ERC20 token contract designed\\n///         to allow the StandardBridge contracts to mint and burn tokens. This makes it possible to\\n///         use an FirelinkMintableRC20 as the L2 representation of an L1 token, or vice-versa.\\n///         Designed to be backwards compatible with the older StandardL2ERC20 token which was only\\n///         meant for use on L2.\\ncontract FirelinkMintableERC20 is IFirelinkMintableERC20, ILegacyMintableERC20, ERC20, ISemver {\\n    /// @notice Address of the corresponding version of this token on the remote chain.\\n    address public immutable REMOTE_TOKEN;\\n\\n    /// @notice Address of the StandardBridge on this network.\\n    address public immutable BRIDGE;\\n\\n    /// @notice Decimals of the token\\n    uint8 private immutable DECIMALS;\\n\\n    /// @notice Emitted whenever tokens are minted for an account.\\n    /// @param account Address of the account tokens are being minted for.\\n    /// @param amount  Amount of tokens minted.\\n    event Mint(address indexed account, uint256 amount);\\n\\n    /// @notice Emitted whenever tokens are burned from an account.\\n    /// @param account Address of the account tokens are being burned from.\\n    /// @param amount  Amount of tokens burned.\\n    event Burn(address indexed account, uint256 amount);\\n\\n    /// @notice A modifier that only allows the bridge to call\\n    modifier onlyBridge() {\\n        require(msg.sender == BRIDGE, \\\"FirelinkMintableERC20: only bridge can mint and burn\\\");\\n        _;\\n    }\\n\\n    /// @notice Semantic version.\\n    /// @custom:semver 1.3.0\\n    string public constant version = \\\"1.3.0\\\";\\n\\n    /// @param _bridge      Address of the L2 standard bridge.\\n    /// @param _remoteToken Address of the corresponding L1 token.\\n    /// @param _name        ERC20 name.\\n    /// @param _symbol      ERC20 symbol.\\n    constructor(\\n        address _bridge,\\n        address _remoteToken,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    )\\n        ERC20(_name, _symbol)\\n    {\\n        REMOTE_TOKEN = _remoteToken;\\n        BRIDGE = _bridge;\\n        DECIMALS = _decimals;\\n    }\\n\\n    /// @notice Allows the StandardBridge on this network to mint tokens.\\n    /// @param _to     Address to mint tokens to.\\n    /// @param _amount Amount of tokens to mint.\\n    function mint(\\n        address _to,\\n        uint256 _amount\\n    )\\n        external\\n        virtual\\n        override(IFirelinkMintableERC20, ILegacyMintableERC20)\\n        onlyBridge\\n    {\\n        _mint(_to, _amount);\\n        emit Mint(_to, _amount);\\n    }\\n\\n    /// @notice Allows the StandardBridge on this network to burn tokens.\\n    /// @param _from   Address to burn tokens from.\\n    /// @param _amount Amount of tokens to burn.\\n    function burn(\\n        address _from,\\n        uint256 _amount\\n    )\\n        external\\n        virtual\\n        override(IFirelinkMintableERC20, ILegacyMintableERC20)\\n        onlyBridge\\n    {\\n        _burn(_from, _amount);\\n        emit Burn(_from, _amount);\\n    }\\n\\n    /// @notice ERC165 interface check function.\\n    /// @param _interfaceId Interface ID to check.\\n    /// @return Whether or not the interface is supported by this contract.\\n    function supportsInterface(bytes4 _interfaceId) external pure virtual returns (bool) {\\n        bytes4 iface1 = type(IERC165).interfaceId;\\n        // Interface corresponding to the legacy L2StandardERC20.\\n        bytes4 iface2 = type(ILegacyMintableERC20).interfaceId;\\n        // Interface corresponding to the updated FirelinkMintableERC20 (this contract).\\n        bytes4 iface3 = type(IFirelinkMintableERC20).interfaceId;\\n        return _interfaceId == iface1 || _interfaceId == iface2 || _interfaceId == iface3;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Legacy getter for the remote token. Use REMOTE_TOKEN going forward.\\n    function l1Token() public view returns (address) {\\n        return REMOTE_TOKEN;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Legacy getter for the bridge. Use BRIDGE going forward.\\n    function l2Bridge() public view returns (address) {\\n        return BRIDGE;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Legacy getter for REMOTE_TOKEN.\\n    function remoteToken() public view returns (address) {\\n        return REMOTE_TOKEN;\\n    }\\n\\n    /// @custom:legacy\\n    /// @notice Legacy getter for BRIDGE.\\n    function bridge() public view returns (address) {\\n        return BRIDGE;\\n    }\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    /// For example, if `decimals` equals `2`, a balance of `505` tokens should\\n    /// be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n    /// NOTE: This information is only used for _display_ purposes: it in\\n    /// no way affects any of the arithmetic of the contract, including\\n    /// {IERC20-balanceOf} and {IERC20-transfer}.\\n    function decimals() public view override returns (uint8) {\\n        return DECIMALS;\\n    }\\n}\",\"keccak256\":\"0x3930fcb35e4187b9ac56b6dba94b03f37334855ea2404ec47da882f4e4eeeaf8\",\"license\":\"MIT\"},\"contracts/IFirelinkMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title IFirelinkMintableERC20\\n/// @notice This interface is available on the FirelinkMintableERC20 contract.\\n///         We declare it as a separate interface so that it can be used in\\n///         custom implementations of FirelinkMintableERC20.\\ninterface IFirelinkMintableERC20 is IERC165 {\\n    function remoteToken() external view returns (address);\\n\\n    function bridge() external returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\\n/// @custom:legacy\\n/// @title ILegacyMintableERC20\\n/// @notice This interface was available on the legacy L2StandardERC20 contract.\\n///         It remains available on the FirelinkMintableERC20 contract for\\n///         backwards compatibility.\\ninterface ILegacyMintableERC20 is IERC165 {\\n    function l1Token() external view returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\",\"keccak256\":\"0x4ecb12ea2815f53df72a7950f3c7e3ed2ceb6d93910bafa766bcbdd2ce003fb5\",\"license\":\"MIT\"},\"contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice ISemver is a simple contract for ensuring that contracts are\\n///         versioned using semantic versioning.\\ninterface ISemver {\\n    /// @notice Getter for the semantic version of the contract. This is not\\n    ///         meant to be used onchain but instead meant to be used by offchain\\n    ///         tooling.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\",\"keccak256\":\"0xdf1cf1ed1786b5602e713b5450186643005f98205622d2b85e75cdfae721f787\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4005,"contract":"contracts/FirelinkMintableERC20.sol:FirelinkMintableERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":4011,"contract":"contracts/FirelinkMintableERC20.sol:FirelinkMintableERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":4013,"contract":"contracts/FirelinkMintableERC20.sol:FirelinkMintableERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":4015,"contract":"contracts/FirelinkMintableERC20.sol:FirelinkMintableERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":4017,"contract":"contracts/FirelinkMintableERC20.sol:FirelinkMintableERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"Burn(address,uint256)":{"notice":"Emitted whenever tokens are burned from an account."},"Mint(address,uint256)":{"notice":"Emitted whenever tokens are minted for an account."}},"kind":"user","methods":{"BRIDGE()":{"notice":"Address of the StandardBridge on this network."},"REMOTE_TOKEN()":{"notice":"Address of the corresponding version of this token on the remote chain."},"burn(address,uint256)":{"notice":"Allows the StandardBridge on this network to burn tokens."},"mint(address,uint256)":{"notice":"Allows the StandardBridge on this network to mint tokens."},"supportsInterface(bytes4)":{"notice":"ERC165 interface check function."},"version()":{"notice":"Semantic version."}},"notice":"FirelinkMintableERC20 is a standard extension of the base ERC20 token contract designed         to allow the StandardBridge contracts to mint and burn tokens. This makes it possible to         use an FirelinkMintableRC20 as the L2 representation of an L1 token, or vice-versa.         Designed to be backwards compatible with the older StandardL2ERC20 token which was only         meant for use on L2.","version":1}}},"contracts/IFirelinkMintableERC20.sol":{"IFirelinkMintableERC20":{"abi":[{"inputs":[],"name":"bridge","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"remoteToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"IFirelinkMintableERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"bridge()":"e78cea92","burn(address,uint256)":"9dc29fac","mint(address,uint256)":"40c10f19","remoteToken()":"d6c0b2c4","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"IFirelinkMintableERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This interface is available on the FirelinkMintableERC20 contract.         We declare it as a separate interface so that it can be used in         custom implementations of FirelinkMintableERC20.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IFirelinkMintableERC20.sol\":\"IFirelinkMintableERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IFirelinkMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title IFirelinkMintableERC20\\n/// @notice This interface is available on the FirelinkMintableERC20 contract.\\n///         We declare it as a separate interface so that it can be used in\\n///         custom implementations of FirelinkMintableERC20.\\ninterface IFirelinkMintableERC20 is IERC165 {\\n    function remoteToken() external view returns (address);\\n\\n    function bridge() external returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\\n/// @custom:legacy\\n/// @title ILegacyMintableERC20\\n/// @notice This interface was available on the legacy L2StandardERC20 contract.\\n///         It remains available on the FirelinkMintableERC20 contract for\\n///         backwards compatibility.\\ninterface ILegacyMintableERC20 is IERC165 {\\n    function l1Token() external view returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\",\"keccak256\":\"0x4ecb12ea2815f53df72a7950f3c7e3ed2ceb6d93910bafa766bcbdd2ce003fb5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"This interface is available on the FirelinkMintableERC20 contract.         We declare it as a separate interface so that it can be used in         custom implementations of FirelinkMintableERC20.","version":1}},"ILegacyMintableERC20":{"abi":[{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"l1Token","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"custom:legacy":"@title ILegacyMintableERC20","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(address,uint256)":"9dc29fac","l1Token()":"c01e1bd6","mint(address,uint256)":"40c10f19","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:legacy\":\"@title ILegacyMintableERC20\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This interface was available on the legacy L2StandardERC20 contract.         It remains available on the FirelinkMintableERC20 contract for         backwards compatibility.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IFirelinkMintableERC20.sol\":\"ILegacyMintableERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IFirelinkMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title IFirelinkMintableERC20\\n/// @notice This interface is available on the FirelinkMintableERC20 contract.\\n///         We declare it as a separate interface so that it can be used in\\n///         custom implementations of FirelinkMintableERC20.\\ninterface IFirelinkMintableERC20 is IERC165 {\\n    function remoteToken() external view returns (address);\\n\\n    function bridge() external returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\\n/// @custom:legacy\\n/// @title ILegacyMintableERC20\\n/// @notice This interface was available on the legacy L2StandardERC20 contract.\\n///         It remains available on the FirelinkMintableERC20 contract for\\n///         backwards compatibility.\\ninterface ILegacyMintableERC20 is IERC165 {\\n    function l1Token() external view returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\",\"keccak256\":\"0x4ecb12ea2815f53df72a7950f3c7e3ed2ceb6d93910bafa766bcbdd2ce003fb5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"This interface was available on the legacy L2StandardERC20 contract.         It remains available on the FirelinkMintableERC20 contract for         backwards compatibility.","version":1}}},"contracts/IFlareRelayer.sol":{"IFlareRelayer":{"abi":[{"inputs":[{"internalType":"address","name":"_relayTarget","type":"address"},{"internalType":"bytes","name":"_additionalCalldata","type":"bytes"},{"internalType":"address","name":"_sourceToken","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"requestRelay","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"requestRelay(address,bytes,address,uint256)":"e897e8de"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_additionalCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IFlareRelayer.sol\":\"IFlareRelayer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/IFlareRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IFlareRelayer {\\n    function requestRelay(address _relayTarget, bytes memory _additionalCalldata, address _sourceToken, uint256 _amount) external;\\n}\",\"keccak256\":\"0x2acb500e21059f9a60e711c852a067bf0507db39c7bb68a31a6ef7f5a18dcb19\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ISemver.sol":{"ISemver":{"abi":[{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"ISemver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"ISemver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Getter for the semantic version of the contract. This is not         meant to be used onchain but instead meant to be used by offchain         tooling.\"}},\"notice\":\"ISemver is a simple contract for ensuring that contracts are         versioned using semantic versioning.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ISemver.sol\":\"ISemver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice ISemver is a simple contract for ensuring that contracts are\\n///         versioned using semantic versioning.\\ninterface ISemver {\\n    /// @notice Getter for the semantic version of the contract. This is not\\n    ///         meant to be used onchain but instead meant to be used by offchain\\n    ///         tooling.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\",\"keccak256\":\"0xdf1cf1ed1786b5602e713b5450186643005f98205622d2b85e75cdfae721f787\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Getter for the semantic version of the contract. This is not         meant to be used onchain but instead meant to be used by offchain         tooling."}},"notice":"ISemver is a simple contract for ensuring that contracts are         versioned using semantic versioning.","version":1}}}}}}